
Centrifuge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdb8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800cec8  0800cec8  0000dec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d348  0800d348  0000f1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d348  0800d348  0000e348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d350  0800d350  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d350  0800d350  0000e350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d354  0800d354  0000e354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800d358  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc4  200001dc  0800d534  0000f1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000da0  0800d534  0000fda0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0b6  00000000  00000000  0000f205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a2  00000000  00000000  0001e2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00020c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1d  00000000  00000000  00021ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192d6  00000000  00000000  000225ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120a2  00000000  00000000  0003b8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b1e  00000000  00000000  0004d965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005134  00000000  00000000  000d74c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000dc5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ceb0 	.word	0x0800ceb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800ceb0 	.word	0x0800ceb0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	f7ff fc2f 	bl	80009bc <__aeabi_dcmplt>
 800115e:	b928      	cbnz	r0, 800116c <__aeabi_d2lz+0x1c>
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001168:	f000 b80a 	b.w	8001180 <__aeabi_d2ulz>
 800116c:	4620      	mov	r0, r4
 800116e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001172:	f000 f805 	bl	8001180 <__aeabi_d2ulz>
 8001176:	4240      	negs	r0, r0
 8001178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800117c:	bd38      	pop	{r3, r4, r5, pc}
 800117e:	bf00      	nop

08001180 <__aeabi_d2ulz>:
 8001180:	b5d0      	push	{r4, r6, r7, lr}
 8001182:	2200      	movs	r2, #0
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <__aeabi_d2ulz+0x34>)
 8001186:	4606      	mov	r6, r0
 8001188:	460f      	mov	r7, r1
 800118a:	f7ff f9a5 	bl	80004d8 <__aeabi_dmul>
 800118e:	f7ff fc7b 	bl	8000a88 <__aeabi_d2uiz>
 8001192:	4604      	mov	r4, r0
 8001194:	f7ff f926 	bl	80003e4 <__aeabi_ui2d>
 8001198:	2200      	movs	r2, #0
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <__aeabi_d2ulz+0x38>)
 800119c:	f7ff f99c 	bl	80004d8 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4630      	mov	r0, r6
 80011a6:	4639      	mov	r1, r7
 80011a8:	f7fe ffde 	bl	8000168 <__aeabi_dsub>
 80011ac:	f7ff fc6c 	bl	8000a88 <__aeabi_d2uiz>
 80011b0:	4621      	mov	r1, r4
 80011b2:	bdd0      	pop	{r4, r6, r7, pc}
 80011b4:	3df00000 	.word	0x3df00000
 80011b8:	41f00000 	.word	0x41f00000

080011bc <MCP4725_init>:

    Constructor
*/
/**************************************************************************/
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	6839      	ldr	r1, [r7, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f822 	bl	8001228 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	461c      	mov	r4, r3
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}

080011fa <MCP4725_isConnected>:

    Check the connection
*/
/**************************************************************************/
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	4619      	mov	r1, r3
 800120c:	2364      	movs	r3, #100	@ 0x64
 800120e:	2202      	movs	r2, #2
 8001210:	f003 fad4 	bl	80047bc <HAL_I2C_IsDeviceReady>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8001232:	f04f 0100 	mov.w	r1, #0
 8001236:	6838      	ldr	r0, [r7, #0]
 8001238:	f7ff ff38 	bl	80010ac <__aeabi_fcmpeq>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <MCP4725_setReferenceVoltage+0x22>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a0c      	ldr	r2, [pc, #48]	@ (8001278 <MCP4725_setReferenceVoltage+0x50>)
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	e002      	b.n	8001250 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 408b 	mov.w	r0, #1166016512	@ 0x45800000
 800125a:	f7ff fe47 	bl	8000eec <__aeabi_fdiv>
 800125e:	4603      	mov	r3, r0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff55 	bl	8001110 <__aeabi_f2uiz>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	819a      	strh	r2, [r3, #12]
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40533333 	.word	0x40533333

0800127c <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4603      	mov	r3, r0
 800128c:	807b      	strh	r3, [r7, #2]
 800128e:	460b      	mov	r3, r1
 8001290:	707b      	strb	r3, [r7, #1]
 8001292:	4613      	mov	r3, r2
 8001294:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8001296:	783b      	ldrb	r3, [r7, #0]
 8001298:	787a      	ldrb	r2, [r7, #1]
 800129a:	8879      	ldrh	r1, [r7, #2]
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f822 	bl	80012e6 <MCP4725_writeComand>
 80012a2:	4603      	mov	r3, r0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 80012b4:	2101      	movs	r1, #1
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f897 	bl	80013ea <MCP4725_readRegister>
 80012bc:	4603      	mov	r3, r0
 80012be:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 80012c0:	89fb      	ldrh	r3, [r7, #14]
 80012c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d008      	beq.n	80012dc <MCP4725_getEepromBusyFlag+0x30>
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf14      	ite	ne
 80012d4:	2301      	movne	r3, #1
 80012d6:	2300      	moveq	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	e000      	b.n	80012de <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af02      	add	r7, sp, #8
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	4608      	mov	r0, r1
 80012f0:	4611      	mov	r1, r2
 80012f2:	461a      	mov	r2, r3
 80012f4:	4603      	mov	r3, r0
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	460b      	mov	r3, r1
 80012fa:	707b      	strb	r3, [r7, #1]
 80012fc:	4613      	mov	r3, r2
 80012fe:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001300:	787b      	ldrb	r3, [r7, #1]
 8001302:	2b60      	cmp	r3, #96	@ 0x60
 8001304:	d029      	beq.n	800135a <MCP4725_writeComand+0x74>
 8001306:	2b60      	cmp	r3, #96	@ 0x60
 8001308:	dc4c      	bgt.n	80013a4 <MCP4725_writeComand+0xbe>
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <MCP4725_writeComand+0x2e>
 800130e:	2b40      	cmp	r3, #64	@ 0x40
 8001310:	d023      	beq.n	800135a <MCP4725_writeComand+0x74>
 8001312:	e047      	b.n	80013a4 <MCP4725_writeComand+0xbe>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18

      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8001314:	f997 3000 	ldrsb.w	r3, [r7]
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	b25a      	sxtb	r2, r3
 800131c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001320:	4313      	orrs	r3, r2
 8001322:	b25a      	sxtb	r2, r3
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b29b      	uxth	r3, r3
 800132a:	b25b      	sxtb	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b25b      	sxtb	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	737b      	strb	r3, [r7, #13]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	791b      	ldrb	r3, [r3, #4]
 8001342:	4619      	mov	r1, r3
 8001344:	f107 020c 	add.w	r2, r7, #12
 8001348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2302      	movs	r3, #2
 8001350:	f002 feca 	bl	80040e8 <HAL_I2C_Master_Transmit>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]

      break;
 8001358:	e024      	b.n	80013a4 <MCP4725_writeComand+0xbe>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode  | (powerType << 1);
 8001360:	f997 3000 	ldrsb.w	r3, [r7]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	b25a      	sxtb	r2, r3
 8001368:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800136c:	4313      	orrs	r3, r2
 800136e:	b25b      	sxtb	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b29b      	uxth	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	73bb      	strb	r3, [r7, #14]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	791b      	ldrb	r3, [r3, #4]
 800138c:	4619      	mov	r1, r3
 800138e:	f107 020c 	add.w	r2, r7, #12
 8001392:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2303      	movs	r3, #3
 800139a:	f002 fea5 	bl	80040e8 <HAL_I2C_Master_Transmit>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]

			break;
 80013a2:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MCP4725_writeComand+0xc8>
 80013aa:	2300      	movs	r3, #0
 80013ac:	e019      	b.n	80013e2 <MCP4725_writeComand+0xfc>

  if (mode == MCP4725_EEPROM_MODE)
 80013ae:	787b      	ldrb	r3, [r7, #1]
 80013b0:	2b60      	cmp	r3, #96	@ 0x60
 80013b2:	d115      	bne.n	80013e0 <MCP4725_writeComand+0xfa>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff79 	bl	80012ac <MCP4725_getEepromBusyFlag>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <MCP4725_writeComand+0xde>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e00e      	b.n	80013e2 <MCP4725_writeComand+0xfc>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 80013c4:	2019      	movs	r0, #25
 80013c6:	f002 f961 	bl	800368c <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff6e 	bl	80012ac <MCP4725_getEepromBusyFlag>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d101      	bne.n	80013da <MCP4725_writeComand+0xf4>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e003      	b.n	80013e2 <MCP4725_writeComand+0xfc>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 80013da:	2019      	movs	r0, #25
 80013dc:	f002 f956 	bl	800368c <HAL_Delay>
  }

  return 1;                                                         //success!!!
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 80013ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]
 80013f8:	466b      	mov	r3, sp
 80013fa:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8001400:	2300      	movs	r3, #0
 8001402:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8001404:	78f9      	ldrb	r1, [r7, #3]
 8001406:	460b      	mov	r3, r1
 8001408:	3b01      	subs	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	b2cb      	uxtb	r3, r1
 800140e:	2200      	movs	r2, #0
 8001410:	4698      	mov	r8, r3
 8001412:	4691      	mov	r9, r2
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001420:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001424:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001428:	b2cb      	uxtb	r3, r1
 800142a:	2200      	movs	r2, #0
 800142c:	461c      	mov	r4, r3
 800142e:	4615      	mov	r5, r2
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	00eb      	lsls	r3, r5, #3
 800143a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800143e:	00e2      	lsls	r2, r4, #3
 8001440:	460b      	mov	r3, r1
 8001442:	3307      	adds	r3, #7
 8001444:	08db      	lsrs	r3, r3, #3
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	ebad 0d03 	sub.w	sp, sp, r3
 800144c:	ab02      	add	r3, sp, #8
 800144e:	3300      	adds	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;

	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	4619      	mov	r1, r3
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	b29b      	uxth	r3, r3
 8001460:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001464:	9200      	str	r2, [sp, #0]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	f002 ff3c 	bl	80042e4 <HAL_I2C_Master_Receive>
 800146c:	4603      	mov	r3, r0
 800146e:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <MCP4725_readRegister+0x92>
 8001476:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800147a:	e020      	b.n	80014be <MCP4725_readRegister+0xd4>


  /* read data from buffer */
  switch (dataType)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d00a      	beq.n	8001498 <MCP4725_readRegister+0xae>
 8001482:	2b05      	cmp	r3, #5
 8001484:	dc1a      	bgt.n	80014bc <MCP4725_readRegister+0xd2>
 8001486:	2b01      	cmp	r3, #1
 8001488:	d002      	beq.n	8001490 <MCP4725_readRegister+0xa6>
 800148a:	2b03      	cmp	r3, #3
 800148c:	d004      	beq.n	8001498 <MCP4725_readRegister+0xae>
 800148e:	e015      	b.n	80014bc <MCP4725_readRegister+0xd2>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	82fb      	strh	r3, [r7, #22]

      break;
 8001496:	e011      	b.n	80014bc <MCP4725_readRegister+0xd2>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 8001498:	8abb      	ldrh	r3, [r7, #20]
 800149a:	3b02      	subs	r3, #2
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 80014a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	8abb      	ldrh	r3, [r7, #20]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	68f9      	ldr	r1, [r7, #12]
 80014b0:	5ccb      	ldrb	r3, [r1, r3]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	82fb      	strh	r3, [r7, #22]
      break;
 80014ba:	bf00      	nop
  }

  return ret_val;
 80014bc:	8afb      	ldrh	r3, [r7, #22]
 80014be:	46b5      	mov	sp, r6
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	371c      	adds	r7, #28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080014cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	4b60      	ldr	r3, [pc, #384]	@ (8001664 <MX_GPIO_Init+0x198>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001664 <MX_GPIO_Init+0x198>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b5d      	ldr	r3, [pc, #372]	@ (8001664 <MX_GPIO_Init+0x198>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001664 <MX_GPIO_Init+0x198>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a59      	ldr	r2, [pc, #356]	@ (8001664 <MX_GPIO_Init+0x198>)
 80014fe:	f043 0320 	orr.w	r3, r3, #32
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b57      	ldr	r3, [pc, #348]	@ (8001664 <MX_GPIO_Init+0x198>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b54      	ldr	r3, [pc, #336]	@ (8001664 <MX_GPIO_Init+0x198>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a53      	ldr	r2, [pc, #332]	@ (8001664 <MX_GPIO_Init+0x198>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b51      	ldr	r3, [pc, #324]	@ (8001664 <MX_GPIO_Init+0x198>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4b4e      	ldr	r3, [pc, #312]	@ (8001664 <MX_GPIO_Init+0x198>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a4d      	ldr	r2, [pc, #308]	@ (8001664 <MX_GPIO_Init+0x198>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b4b      	ldr	r3, [pc, #300]	@ (8001664 <MX_GPIO_Init+0x198>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001546:	4848      	ldr	r0, [pc, #288]	@ (8001668 <MX_GPIO_Init+0x19c>)
 8001548:	f002 fc2d 	bl	8003da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2110      	movs	r1, #16
 8001550:	4846      	ldr	r0, [pc, #280]	@ (800166c <MX_GPIO_Init+0x1a0>)
 8001552:	f002 fc28 	bl	8003da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CE_GPIO_Port, SPI1_CE_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2101      	movs	r1, #1
 800155a:	4845      	ldr	r0, [pc, #276]	@ (8001670 <MX_GPIO_Init+0x1a4>)
 800155c:	f002 fc23 	bl	8003da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001566:	4841      	ldr	r0, [pc, #260]	@ (800166c <MX_GPIO_Init+0x1a0>)
 8001568:	f002 fc1d 	bl	8003da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800156c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2302      	movs	r3, #2
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	4619      	mov	r1, r3
 8001584:	4838      	ldr	r0, [pc, #224]	@ (8001668 <MX_GPIO_Init+0x19c>)
 8001586:	f002 fa73 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800158a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001590:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <MX_GPIO_Init+0x1a8>)
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	4832      	ldr	r0, [pc, #200]	@ (8001668 <MX_GPIO_Init+0x19c>)
 80015a0:	f002 fa66 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin;
 80015a4:	2310      	movs	r3, #16
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CSN_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	482c      	ldr	r0, [pc, #176]	@ (800166c <MX_GPIO_Init+0x1a0>)
 80015bc:	f002 fa58 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CE_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin;
 80015c0:	2301      	movs	r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CE_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4619      	mov	r1, r3
 80015d6:	4826      	ldr	r0, [pc, #152]	@ (8001670 <MX_GPIO_Init+0x1a4>)
 80015d8:	f002 fa4a 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80015dc:	2302      	movs	r3, #2
 80015de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e0:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <MX_GPIO_Init+0x1ac>)
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	4820      	ldr	r0, [pc, #128]	@ (8001670 <MX_GPIO_Init+0x1a4>)
 80015f0:	f002 fa3e 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <MX_GPIO_Init+0x1a8>)
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4619      	mov	r1, r3
 8001608:	4818      	ldr	r0, [pc, #96]	@ (800166c <MX_GPIO_Init+0x1a0>)
 800160a:	f002 fa31 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800160e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2302      	movs	r3, #2
 800161e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	4811      	ldr	r0, [pc, #68]	@ (800166c <MX_GPIO_Init+0x1a0>)
 8001628:	f002 fa22 	bl	8003a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2007      	movs	r0, #7
 8001632:	f002 f926 	bl	8003882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001636:	2007      	movs	r0, #7
 8001638:	f002 f93f 	bl	80038ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2017      	movs	r0, #23
 8001642:	f002 f91e 	bl	8003882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001646:	2017      	movs	r0, #23
 8001648:	f002 f937 	bl	80038ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2028      	movs	r0, #40	@ 0x28
 8001652:	f002 f916 	bl	8003882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001656:	2028      	movs	r0, #40	@ 0x28
 8001658:	f002 f92f 	bl	80038ba <HAL_NVIC_EnableIRQ>

}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000
 8001668:	40011000 	.word	0x40011000
 800166c:	40010800 	.word	0x40010800
 8001670:	40010c00 	.word	0x40010c00
 8001674:	10310000 	.word	0x10310000
 8001678:	10210000 	.word	0x10210000

0800167c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <MX_I2C1_Init+0x50>)
 8001682:	4a13      	ldr	r2, [pc, #76]	@ (80016d0 <MX_I2C1_Init+0x54>)
 8001684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_I2C1_Init+0x50>)
 8001688:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <MX_I2C1_Init+0x58>)
 800168a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_I2C1_Init+0x50>)
 800169a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800169e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <MX_I2C1_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_I2C1_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	@ (80016cc <MX_I2C1_Init+0x50>)
 80016ba:	f002 fbbd 	bl	8003e38 <HAL_I2C_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016c4:	f001 f9d0 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200001f8 	.word	0x200001f8
 80016d0:	40005400 	.word	0x40005400
 80016d4:	000186a0 	.word	0x000186a0

080016d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a25      	ldr	r2, [pc, #148]	@ (8001788 <HAL_I2C_MspInit+0xb0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d142      	bne.n	800177e <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f8:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_I2C_MspInit+0xb4>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a23      	ldr	r2, [pc, #140]	@ (800178c <HAL_I2C_MspInit+0xb4>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b21      	ldr	r3, [pc, #132]	@ (800178c <HAL_I2C_MspInit+0xb4>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = DAC_SCL_Pin|DAC_SDA_Pin;
 8001710:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001716:	2312      	movs	r3, #18
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	481a      	ldr	r0, [pc, #104]	@ (8001790 <HAL_I2C_MspInit+0xb8>)
 8001726:	f002 f9a3 	bl	8003a70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800172a:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <HAL_I2C_MspInit+0xbc>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001740:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <HAL_I2C_MspInit+0xbc>)
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <HAL_I2C_MspInit+0xb4>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a10      	ldr	r2, [pc, #64]	@ (800178c <HAL_I2C_MspInit+0xb4>)
 800174c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_I2C_MspInit+0xb4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	201f      	movs	r0, #31
 8001764:	f002 f88d 	bl	8003882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001768:	201f      	movs	r0, #31
 800176a:	f002 f8a6 	bl	80038ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2020      	movs	r0, #32
 8001774:	f002 f885 	bl	8003882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001778:	2020      	movs	r0, #32
 800177a:	f002 f89e 	bl	80038ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40005400 	.word	0x40005400
 800178c:	40021000 	.word	0x40021000
 8001790:	40010c00 	.word	0x40010c00
 8001794:	40010000 	.word	0x40010000

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800179c:	b0ab      	sub	sp, #172	@ 0xac
 800179e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f001 ff12 	bl	80035c8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a4:	f000 fd82 	bl	80022ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f7ff fe90 	bl	80014cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80017ac:	f001 fdee 	bl	800338c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80017b0:	f001 fe16 	bl	80033e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017b4:	f7ff ff62 	bl	800167c <MX_I2C1_Init>
  MX_SPI1_Init();
 80017b8:	f001 fc02 	bl	8002fc0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	// begins listening for a byte. When byte is recieved, it calls the callback function
	HAL_UART_Receive_IT(&huart2, rx_buff, 1);
 80017bc:	2201      	movs	r2, #1
 80017be:	49a4      	ldr	r1, [pc, #656]	@ (8001a50 <main+0x2b8>)
 80017c0:	48a4      	ldr	r0, [pc, #656]	@ (8001a54 <main+0x2bc>)
 80017c2:	f006 fbd3 	bl	8007f6c <HAL_UART_Receive_IT>


	// initialize radio
	nrf24l01p_rx_init(2500, _250kbps);
 80017c6:	2102      	movs	r1, #2
 80017c8:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80017cc:	f001 f9d6 	bl	8002b7c <nrf24l01p_rx_init>

	// Second, initialize the MCP4725 object:
	myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 5.0);
 80017d0:	4ca1      	ldr	r4, [pc, #644]	@ (8001a58 <main+0x2c0>)
 80017d2:	4638      	mov	r0, r7
 80017d4:	4ba1      	ldr	r3, [pc, #644]	@ (8001a5c <main+0x2c4>)
 80017d6:	2260      	movs	r2, #96	@ 0x60
 80017d8:	49a1      	ldr	r1, [pc, #644]	@ (8001a60 <main+0x2c8>)
 80017da:	f7ff fcef 	bl	80011bc <MCP4725_init>
 80017de:	463b      	mov	r3, r7
 80017e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Check the connection:
	if(MCP4725_isConnected(&myMCP4725)){
 80017e6:	489c      	ldr	r0, [pc, #624]	@ (8001a58 <main+0x2c0>)
 80017e8:	f7ff fd07 	bl	80011fa <MCP4725_isConnected>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00d      	beq.n	800180e <main+0x76>

		/* Print that the DAC is connected */
		uint8_t success_arr[] = {'D','A','C',' ','g','o','o','d','\n'};
 80017f2:	4a9c      	ldr	r2, [pc, #624]	@ (8001a64 <main+0x2cc>)
 80017f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017fa:	c303      	stmia	r3!, {r0, r1}
 80017fc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, success_arr, 9);
 80017fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001802:	2209      	movs	r2, #9
 8001804:	4619      	mov	r1, r3
 8001806:	4893      	ldr	r0, [pc, #588]	@ (8001a54 <main+0x2bc>)
 8001808:	f006 fb7b 	bl	8007f02 <HAL_UART_Transmit_IT>
 800180c:	e008      	b.n	8001820 <main+0x88>
	}
	else{

		/* Print that the DAC is NOT connected */
		uint8_t fail_arr[] = {'b','a','d','\n'};
 800180e:	4b96      	ldr	r3, [pc, #600]	@ (8001a68 <main+0x2d0>)
 8001810:	63bb      	str	r3, [r7, #56]	@ 0x38
		HAL_UART_Transmit_IT(&huart2, fail_arr, 4);
 8001812:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001816:	2204      	movs	r2, #4
 8001818:	4619      	mov	r1, r3
 800181a:	488e      	ldr	r0, [pc, #568]	@ (8001a54 <main+0x2bc>)
 800181c:	f006 fb71 	bl	8007f02 <HAL_UART_Transmit_IT>
	}

	// default centrifuge off
	setValue(0);
 8001820:	2000      	movs	r0, #0
 8001822:	f000 feff 	bl	8002624 <setValue>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800182c:	488f      	ldr	r0, [pc, #572]	@ (8001a6c <main+0x2d4>)
 800182e:	f002 faba 	bl	8003da6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001838:	488c      	ldr	r0, [pc, #560]	@ (8001a6c <main+0x2d4>)
 800183a:	f002 fab4 	bl	8003da6 <HAL_GPIO_WritePin>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		currTime = HAL_GetTick();
 800183e:	f001 ff1b 	bl	8003678 <HAL_GetTick>
 8001842:	4603      	mov	r3, r0
 8001844:	4a8a      	ldr	r2, [pc, #552]	@ (8001a70 <main+0x2d8>)
 8001846:	6013      	str	r3, [r2, #0]
//			counter++;
//			lastInputState = inputState;
//	    }

	    //measure voltage to rpm
		if ((HAL_GetTick() - previousCountMillis) >= countMillis) {
 8001848:	f001 ff16 	bl	8003678 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	4b89      	ldr	r3, [pc, #548]	@ (8001a74 <main+0x2dc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001858:	4293      	cmp	r3, r2
 800185a:	d372      	bcc.n	8001942 <main+0x1aa>
			previousCountMillis = HAL_GetTick();
 800185c:	f001 ff0c 	bl	8003678 <HAL_GetTick>
 8001860:	4603      	mov	r3, r0
 8001862:	4a84      	ldr	r2, [pc, #528]	@ (8001a74 <main+0x2dc>)
 8001864:	6013      	str	r3, [r2, #0]
			collect_data();
 8001866:	f001 f8a5 	bl	80029b4 <collect_data>
			float volts=0;
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			volts = ((float)voltageSent / 4095) * 5.0;
 8001872:	4b81      	ldr	r3, [pc, #516]	@ (8001a78 <main+0x2e0>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fa2c 	bl	8000cd4 <__aeabi_ui2f>
 800187c:	4603      	mov	r3, r0
 800187e:	497f      	ldr	r1, [pc, #508]	@ (8001a7c <main+0x2e4>)
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fb33 	bl	8000eec <__aeabi_fdiv>
 8001886:	4603      	mov	r3, r0
 8001888:	4974      	ldr	r1, [pc, #464]	@ (8001a5c <main+0x2c4>)
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fa7a 	bl	8000d84 <__aeabi_fmul>
 8001890:	4603      	mov	r3, r0
 8001892:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

			float omega = sqrt( (9.81 * sqrt(current_g*current_g - 1)) / 1.4);
 8001896:	4b7a      	ldr	r3, [pc, #488]	@ (8001a80 <main+0x2e8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a79      	ldr	r2, [pc, #484]	@ (8001a80 <main+0x2e8>)
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fa6f 	bl	8000d84 <__aeabi_fmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff f95f 	bl	8000b70 <__aeabi_fsub>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fdb7 	bl	8000428 <__aeabi_f2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f007 f88b 	bl	80089dc <sqrt>
 80018c6:	a35c      	add	r3, pc, #368	@ (adr r3, 8001a38 <main+0x2a0>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f7fe fe04 	bl	80004d8 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	a359      	add	r3, pc, #356	@ (adr r3, 8001a40 <main+0x2a8>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe ff25 	bl	800072c <__aeabi_ddiv>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f007 f877 	bl	80089dc <sqrt>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f8e7 	bl	8000ac8 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
			des_rpm = (omega /3.1415) * 30;
 80018fe:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001900:	f7fe fd92 	bl	8000428 <__aeabi_f2d>
 8001904:	a350      	add	r3, pc, #320	@ (adr r3, 8001a48 <main+0x2b0>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe ff0f 	bl	800072c <__aeabi_ddiv>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b5a      	ldr	r3, [pc, #360]	@ (8001a84 <main+0x2ec>)
 800191c:	f7fe fddc 	bl	80004d8 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f8ce 	bl	8000ac8 <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0
 800192e:	4a56      	ldr	r2, [pc, #344]	@ (8001a88 <main+0x2f0>)
 8001930:	6013      	str	r3, [r2, #0]
			float post_gear_rpm = rpm / 25;
 8001932:	4b56      	ldr	r3, [pc, #344]	@ (8001a8c <main+0x2f4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4956      	ldr	r1, [pc, #344]	@ (8001a90 <main+0x2f8>)
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fad7 	bl	8000eec <__aeabi_fdiv>
 800193e:	4603      	mov	r3, r0
 8001940:	67bb      	str	r3, [r7, #120]	@ 0x78
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
//			state = 'i';
//		}

		// evaluation mode (parsing the profile)
		if (state == 'e') {
 8001942:	4b54      	ldr	r3, [pc, #336]	@ (8001a94 <main+0x2fc>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b65      	cmp	r3, #101	@ 0x65
 8001948:	f040 80ff 	bne.w	8001b4a <main+0x3b2>
			dt = currTime - prevTime; // for PID
 800194c:	4b48      	ldr	r3, [pc, #288]	@ (8001a70 <main+0x2d8>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b51      	ldr	r3, [pc, #324]	@ (8001a98 <main+0x300>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	4a51      	ldr	r2, [pc, #324]	@ (8001a9c <main+0x304>)
 8001958:	6013      	str	r3, [r2, #0]
			int i = upload_pointer; // where the instruction starts in our rx_buffer
 800195a:	4b51      	ldr	r3, [pc, #324]	@ (8001aa0 <main+0x308>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			char parseChar = *(rx_buff + i); // grab the first character our rx_buffer
 8001962:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001966:	4a3a      	ldr	r2, [pc, #232]	@ (8001a50 <main+0x2b8>)
 8001968:	4413      	add	r3, r2
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
			char numberBuffer[40] = {0}; // create a number buffer to atoi into our ms and g arrays
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	2228      	movs	r2, #40	@ 0x28
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f008 fd4a 	bl	800a412 <memset>
			int numberBufferArm = 0;     // keep track of the current index
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			char evaluateState = 'm'; //m or g
 8001984:	236d      	movs	r3, #109	@ 0x6d
 8001986:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
			profile_arm = 0; // current step of the profile
 800198a:	4b46      	ldr	r3, [pc, #280]	@ (8001aa4 <main+0x30c>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

			// our profile data is sandwiched between a start u and a stop u
			while(parseChar != 'u'){
 8001990:	e0cc      	b.n	8001b2c <main+0x394>
				// parse the first column of the csv (ms)
				if(evaluateState == 'm'){
 8001992:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001996:	2b6d      	cmp	r3, #109	@ 0x6d
 8001998:	d132      	bne.n	8001a00 <main+0x268>
					// if its a number, store it into numberBuffer
					if((parseChar <= '9' && parseChar >= '0')){
 800199a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800199e:	2b39      	cmp	r3, #57	@ 0x39
 80019a0:	d80f      	bhi.n	80019c2 <main+0x22a>
 80019a2:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80019a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80019a8:	d90b      	bls.n	80019c2 <main+0x22a>
						numberBuffer[numberBufferArm++] = parseChar;
 80019aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80019b4:	3398      	adds	r3, #152	@ 0x98
 80019b6:	443b      	add	r3, r7
 80019b8:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 80019bc:	f803 2c88 	strb.w	r2, [r3, #-136]
 80019c0:	e099      	b.n	8001af6 <main+0x35e>

						// if its a comma, flush it all to the ms array and switch to evaluating g
					}else if(parseChar == ','){
 80019c2:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80019c6:	2b2c      	cmp	r3, #44	@ 0x2c
 80019c8:	f040 8095 	bne.w	8001af6 <main+0x35e>
						profile_ms[profile_arm] = atoi(numberBuffer);
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4618      	mov	r0, r3
 80019d2:	f007 f8fc 	bl	8008bce <atoi>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <main+0x30c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4611      	mov	r1, r2
 80019de:	4a32      	ldr	r2, [pc, #200]	@ (8001aa8 <main+0x310>)
 80019e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						memset(numberBuffer, 0, 40);
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	2228      	movs	r2, #40	@ 0x28
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f008 fd10 	bl	800a412 <memset>
						numberBufferArm = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						evaluateState = 'g';
 80019f8:	2367      	movs	r3, #103	@ 0x67
 80019fa:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 80019fe:	e07a      	b.n	8001af6 <main+0x35e>
					}

					// parse the second column of the csv (g)
				}else if(evaluateState == 'g'){
 8001a00:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001a04:	2b67      	cmp	r3, #103	@ 0x67
 8001a06:	d176      	bne.n	8001af6 <main+0x35e>

					// if its a number, store it into numberBuffer
					if((parseChar <= '9' && parseChar >= '0') || parseChar == '.'){
 8001a08:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001a0c:	2b39      	cmp	r3, #57	@ 0x39
 8001a0e:	d803      	bhi.n	8001a18 <main+0x280>
 8001a10:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001a14:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a16:	d803      	bhi.n	8001a20 <main+0x288>
 8001a18:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001a1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a1e:	d145      	bne.n	8001aac <main+0x314>
						numberBuffer[numberBufferArm++] = parseChar;
 8001a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a2a:	3398      	adds	r3, #152	@ 0x98
 8001a2c:	443b      	add	r3, r7
 8001a2e:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8001a32:	f803 2c88 	strb.w	r2, [r3, #-136]
 8001a36:	e05e      	b.n	8001af6 <main+0x35e>
 8001a38:	51eb851f 	.word	0x51eb851f
 8001a3c:	40239eb8 	.word	0x40239eb8
 8001a40:	66666666 	.word	0x66666666
 8001a44:	3ff66666 	.word	0x3ff66666
 8001a48:	c083126f 	.word	0xc083126f
 8001a4c:	400921ca 	.word	0x400921ca
 8001a50:	2000024c 	.word	0x2000024c
 8001a54:	20000c08 	.word	0x20000c08
 8001a58:	20000b54 	.word	0x20000b54
 8001a5c:	40a00000 	.word	0x40a00000
 8001a60:	200001f8 	.word	0x200001f8
 8001a64:	0800ced8 	.word	0x0800ced8
 8001a68:	0a646162 	.word	0x0a646162
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	200004e4 	.word	0x200004e4
 8001a74:	200004c4 	.word	0x200004c4
 8001a78:	200004fe 	.word	0x200004fe
 8001a7c:	457ff000 	.word	0x457ff000
 8001a80:	200004b0 	.word	0x200004b0
 8001a84:	403e0000 	.word	0x403e0000
 8001a88:	200004d0 	.word	0x200004d0
 8001a8c:	200004c8 	.word	0x200004c8
 8001a90:	41c80000 	.word	0x41c80000
 8001a94:	20000004 	.word	0x20000004
 8001a98:	200004e8 	.word	0x200004e8
 8001a9c:	200004ec 	.word	0x200004ec
 8001aa0:	20000b50 	.word	0x20000b50
 8001aa4:	20000b4c 	.word	0x20000b4c
 8001aa8:	2000050c 	.word	0x2000050c

						// upon reaching a new line, flush everything in numberBuffer to g array and go back to m
					}else if(parseChar == '\n'){
 8001aac:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001ab0:	2b0a      	cmp	r3, #10
 8001ab2:	d120      	bne.n	8001af6 <main+0x35e>
						profile_g[profile_arm++] = atof(numberBuffer);
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f007 f885 	bl	8008bc8 <atof>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	49b5      	ldr	r1, [pc, #724]	@ (8001d98 <main+0x600>)
 8001ac4:	680c      	ldr	r4, [r1, #0]
 8001ac6:	1c61      	adds	r1, r4, #1
 8001ac8:	48b3      	ldr	r0, [pc, #716]	@ (8001d98 <main+0x600>)
 8001aca:	6001      	str	r1, [r0, #0]
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7fe fffa 	bl	8000ac8 <__aeabi_d2f>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4ab1      	ldr	r2, [pc, #708]	@ (8001d9c <main+0x604>)
 8001ad8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
						memset(numberBuffer, 0, 40);
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2228      	movs	r2, #40	@ 0x28
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f008 fc94 	bl	800a412 <memset>
						numberBufferArm = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						evaluateState = 'm';
 8001af0:	236d      	movs	r3, #109	@ 0x6d
 8001af2:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
					}
				}

				// increment our upload arm and make sure it wraps back to the start to grab the next char
				i++;
 8001af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001afa:	3301      	adds	r3, #1
 8001afc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				i %= RX_BUFF_SIZE;
 8001b00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b04:	4aa6      	ldr	r2, [pc, #664]	@ (8001da0 <main+0x608>)
 8001b06:	fb82 1203 	smull	r1, r2, r2, r3
 8001b0a:	1151      	asrs	r1, r2, #5
 8001b0c:	17da      	asrs	r2, r3, #31
 8001b0e:	1a8a      	subs	r2, r1, r2
 8001b10:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001b14:	fb01 f202 	mul.w	r2, r1, r2
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				parseChar = *(rx_buff + i);
 8001b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b22:	4aa0      	ldr	r2, [pc, #640]	@ (8001da4 <main+0x60c>)
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
			while(parseChar != 'u'){
 8001b2c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8001b30:	2b75      	cmp	r3, #117	@ 0x75
 8001b32:	f47f af2e 	bne.w	8001992 <main+0x1fa>
			}

			// reset buffer for clean data
			memset(rx_buff, 0, 500);
 8001b36:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4899      	ldr	r0, [pc, #612]	@ (8001da4 <main+0x60c>)
 8001b3e:	f008 fc68 	bl	800a412 <memset>

			// reached stop "u" so switch to ready mode
			state = 'p';
 8001b42:	4b99      	ldr	r3, [pc, #612]	@ (8001da8 <main+0x610>)
 8001b44:	2270      	movs	r2, #112	@ 0x70
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e35f      	b.n	800220a <main+0xa72>
		}

		// ON state (centrifuge will start spinning)
		else if(state == 'o') {
 8001b4a:	4b97      	ldr	r3, [pc, #604]	@ (8001da8 <main+0x610>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b6f      	cmp	r3, #111	@ 0x6f
 8001b50:	f040 835b 	bne.w	800220a <main+0xa72>
			time_elapsed = HAL_GetTick() - time_start;
 8001b54:	f001 fd90 	bl	8003678 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b94      	ldr	r3, [pc, #592]	@ (8001dac <main+0x614>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	4a93      	ldr	r2, [pc, #588]	@ (8001db0 <main+0x618>)
 8001b62:	6013      	str	r3, [r2, #0]
			int index = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

			// increment the index of our profile if the elapsed time is greater than the desired runtime
			while(index < profile_arm) {
 8001b6a:	e00d      	b.n	8001b88 <main+0x3f0>
				if (profile_ms[index] <= time_elapsed) {
 8001b6c:	4a91      	ldr	r2, [pc, #580]	@ (8001db4 <main+0x61c>)
 8001b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b76:	4b8e      	ldr	r3, [pc, #568]	@ (8001db0 <main+0x618>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d80b      	bhi.n	8001b96 <main+0x3fe>
					index++;
 8001b7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b82:	3301      	adds	r3, #1
 8001b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			while(index < profile_arm) {
 8001b88:	4b83      	ldr	r3, [pc, #524]	@ (8001d98 <main+0x600>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbeb      	blt.n	8001b6c <main+0x3d4>
 8001b94:	e000      	b.n	8001b98 <main+0x400>
				}
				else {
					break;
 8001b96:	bf00      	nop
				}
			}

			// we've reached the end of our instructions, so turn everything off and go to idl mode
			if(index == profile_arm){
 8001b98:	4b7f      	ldr	r3, [pc, #508]	@ (8001d98 <main+0x600>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d10f      	bne.n	8001bc4 <main+0x42c>
				state = 'i';
 8001ba4:	4b80      	ldr	r3, [pc, #512]	@ (8001da8 <main+0x610>)
 8001ba6:	2269      	movs	r2, #105	@ 0x69
 8001ba8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bb0:	4881      	ldr	r0, [pc, #516]	@ (8001db8 <main+0x620>)
 8001bb2:	f002 f8f8 	bl	8003da6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bbc:	487e      	ldr	r0, [pc, #504]	@ (8001db8 <main+0x620>)
 8001bbe:	f002 f8f2 	bl	8003da6 <HAL_GPIO_WritePin>
 8001bc2:	e322      	b.n	800220a <main+0xa72>

				// run the current profile instruction step
			}else{
				float prev_desired_g = profile_g[index-1];
 8001bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	4a74      	ldr	r2, [pc, #464]	@ (8001d9c <main+0x604>)
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	677b      	str	r3, [r7, #116]	@ 0x74
				float prev_desired_ms = profile_ms[index-1];
 8001bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	4a76      	ldr	r2, [pc, #472]	@ (8001db4 <main+0x61c>)
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f878 	bl	8000cd4 <__aeabi_ui2f>
 8001be4:	4603      	mov	r3, r0
 8001be6:	673b      	str	r3, [r7, #112]	@ 0x70
				float next_desired_g = profile_g[index];
 8001be8:	4a6c      	ldr	r2, [pc, #432]	@ (8001d9c <main+0x604>)
 8001bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
				float next_desired_ms = profile_ms[index];
 8001bf4:	4a6f      	ldr	r2, [pc, #444]	@ (8001db4 <main+0x61c>)
 8001bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f868 	bl	8000cd4 <__aeabi_ui2f>
 8001c04:	4603      	mov	r3, r0
 8001c06:	66bb      	str	r3, [r7, #104]	@ 0x68

				// end case/error detection (next time should never be lower than prev)
				if (next_desired_ms < prev_desired_ms) {
 8001c08:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001c0a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001c0c:	f7ff fa58 	bl	80010c0 <__aeabi_fcmplt>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00e      	beq.n	8001c34 <main+0x49c>
					state = 'i';
 8001c16:	4b64      	ldr	r3, [pc, #400]	@ (8001da8 <main+0x610>)
 8001c18:	2269      	movs	r2, #105	@ 0x69
 8001c1a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c22:	4865      	ldr	r0, [pc, #404]	@ (8001db8 <main+0x620>)
 8001c24:	f002 f8bf 	bl	8003da6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c2e:	4862      	ldr	r0, [pc, #392]	@ (8001db8 <main+0x620>)
 8001c30:	f002 f8b9 	bl	8003da6 <HAL_GPIO_WritePin>
				}

				// calculate descent slope for braking on sharp changes
				float slope_gps = (next_desired_g - prev_desired_g) / ((next_desired_ms - prev_desired_ms) / 1000);
 8001c34:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001c36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001c38:	f7fe ff9a 	bl	8000b70 <__aeabi_fsub>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461c      	mov	r4, r3
 8001c40:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001c42:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001c44:	f7fe ff94 	bl	8000b70 <__aeabi_fsub>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	495c      	ldr	r1, [pc, #368]	@ (8001dbc <main+0x624>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f94d 	bl	8000eec <__aeabi_fdiv>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4619      	mov	r1, r3
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff f948 	bl	8000eec <__aeabi_fdiv>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	667b      	str	r3, [r7, #100]	@ 0x64
				float desired_g = ((next_desired_g - prev_desired_g) * (time_elapsed - prev_desired_ms) / (next_desired_ms - prev_desired_ms)) + prev_desired_g;
 8001c60:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001c62:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001c64:	f7fe ff84 	bl	8000b70 <__aeabi_fsub>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461c      	mov	r4, r3
 8001c6c:	4b50      	ldr	r3, [pc, #320]	@ (8001db0 <main+0x618>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f82f 	bl	8000cd4 <__aeabi_ui2f>
 8001c76:	4603      	mov	r3, r0
 8001c78:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe ff78 	bl	8000b70 <__aeabi_fsub>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7ff f87d 	bl	8000d84 <__aeabi_fmul>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461c      	mov	r4, r3
 8001c8e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001c90:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001c92:	f7fe ff6d 	bl	8000b70 <__aeabi_fsub>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7ff f926 	bl	8000eec <__aeabi_fdiv>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001ca6:	f7fe ff65 	bl	8000b74 <__addsf3>
 8001caa:	4603      	mov	r3, r0
 8001cac:	663b      	str	r3, [r7, #96]	@ 0x60
				float descent_no_brake = -0.312*desired_g + 0.278;
 8001cae:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001cb0:	f7fe fbba 	bl	8000428 <__aeabi_f2d>
 8001cb4:	a334      	add	r3, pc, #208	@ (adr r3, 8001d88 <main+0x5f0>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fc0d 	bl	80004d8 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	a332      	add	r3, pc, #200	@ (adr r3, 8001d90 <main+0x5f8>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f7fe fa4e 	bl	800016c <__adddf3>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f7fe fef6 	bl	8000ac8 <__aeabi_d2f>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	65fb      	str	r3, [r7, #92]	@ 0x5c

				braking = false;
 8001ce0:	4b37      	ldr	r3, [pc, #220]	@ (8001dc0 <main+0x628>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
				// only set braking if the slope is negative
				if (slope_gps < 0) {
 8001ce6:	f04f 0100 	mov.w	r1, #0
 8001cea:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001cec:	f7ff f9e8 	bl	80010c0 <__aeabi_fcmplt>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d013      	beq.n	8001d1e <main+0x586>
					// brake when profile is too sharp (would be greater than natural descent of the motor)
					if(fabsf(slope_gps) > fabsf(descent_no_brake)) {
 8001cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cfe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f7ff f9f9 	bl	80010fc <__aeabi_fcmpgt>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <main+0x580>
						braking = true;
 8001d10:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc0 <main+0x628>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	e002      	b.n	8001d1e <main+0x586>
					} else {
						braking = false;
 8001d18:	4b29      	ldr	r3, [pc, #164]	@ (8001dc0 <main+0x628>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
					}
				}
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Motor on (for when it got turned off by brake mode last time)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d24:	4824      	ldr	r0, [pc, #144]	@ (8001db8 <main+0x620>)
 8001d26:	f002 f83e 	bl	8003da6 <HAL_GPIO_WritePin>

				// when brake mode on, brake if our desired_g is greater than our current_g
				if (braking) {
 8001d2a:	4b25      	ldr	r3, [pc, #148]	@ (8001dc0 <main+0x628>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d04a      	beq.n	8001dc8 <main+0x630>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off when in brake mode
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d38:	481f      	ldr	r0, [pc, #124]	@ (8001db8 <main+0x620>)
 8001d3a:	f002 f834 	bl	8003da6 <HAL_GPIO_WritePin>
					if (desired_g < current_g) {
 8001d3e:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <main+0x62c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4619      	mov	r1, r3
 8001d44:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001d46:	f7ff f9bb 	bl	80010c0 <__aeabi_fcmplt>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <main+0x5c6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 8001d50:	2200      	movs	r2, #0
 8001d52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d56:	4818      	ldr	r0, [pc, #96]	@ (8001db8 <main+0x620>)
 8001d58:	f002 f825 	bl	8003da6 <HAL_GPIO_WritePin>
 8001d5c:	e00e      	b.n	8001d7c <main+0x5e4>
					}

					// let the motor coast to reduce speed instead
					else if(desired_g >= current_g) {
 8001d5e:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <main+0x62c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4619      	mov	r1, r3
 8001d64:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001d66:	f7ff f9bf 	bl	80010e8 <__aeabi_fcmpge>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <main+0x5e4>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 8001d70:	2201      	movs	r2, #1
 8001d72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d76:	4810      	ldr	r0, [pc, #64]	@ (8001db8 <main+0x620>)
 8001d78:	f002 f815 	bl	8003da6 <HAL_GPIO_WritePin>
					}
					setValue(0);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 fc51 	bl	8002624 <setValue>
 8001d82:	e1fe      	b.n	8002182 <main+0x9ea>
 8001d84:	f3af 8000 	nop.w
 8001d88:	d916872b 	.word	0xd916872b
 8001d8c:	bfd3f7ce 	.word	0xbfd3f7ce
 8001d90:	83126e98 	.word	0x83126e98
 8001d94:	3fd1cac0 	.word	0x3fd1cac0
 8001d98:	20000b4c 	.word	0x20000b4c
 8001d9c:	2000082c 	.word	0x2000082c
 8001da0:	10624dd3 	.word	0x10624dd3
 8001da4:	2000024c 	.word	0x2000024c
 8001da8:	20000004 	.word	0x20000004
 8001dac:	20000500 	.word	0x20000500
 8001db0:	20000504 	.word	0x20000504
 8001db4:	2000050c 	.word	0x2000050c
 8001db8:	40010800 	.word	0x40010800
 8001dbc:	447a0000 	.word	0x447a0000
 8001dc0:	200004f8 	.word	0x200004f8
 8001dc4:	200004b0 	.word	0x200004b0
				}

				// brake mode is off so use voltage to rpm equation to set speed of the centrifuge
				else {
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Motor on
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001dce:	48c6      	ldr	r0, [pc, #792]	@ (80020e8 <main+0x950>)
 8001dd0:	f001 ffe9 	bl	8003da6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dda:	48c3      	ldr	r0, [pc, #780]	@ (80020e8 <main+0x950>)
 8001ddc:	f001 ffe3 	bl	8003da6 <HAL_GPIO_WritePin>
//					float c = (9.81/desired_mps);
//					float a = 1.4; // centrifuge arm radius meters
//					float b = 0; // gondola radius meters (0.25 if gondola exists)
//					float omega = sqrt((desired_mps - 9.81) / (a + (b *sqrt(1-(c*c))))); // equation to get desired omega from desired mps

					float a = 1.4; // centrifuge arm radius meters
 8001de0:	4bc2      	ldr	r3, [pc, #776]	@ (80020ec <main+0x954>)
 8001de2:	65bb      	str	r3, [r7, #88]	@ 0x58
					float omega = sqrt( (9.81 * sqrt(desired_g*desired_g - 1)) / a);
 8001de4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001de6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001de8:	f7fe ffcc 	bl	8000d84 <__aeabi_fmul>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe febc 	bl	8000b70 <__aeabi_fsub>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fb14 	bl	8000428 <__aeabi_f2d>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f006 fde8 	bl	80089dc <sqrt>
 8001e0c:	a3ac      	add	r3, pc, #688	@ (adr r3, 80020c0 <main+0x928>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fb61 	bl	80004d8 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4614      	mov	r4, r2
 8001e1c:	461d      	mov	r5, r3
 8001e1e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001e20:	f7fe fb02 	bl	8000428 <__aeabi_f2d>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4620      	mov	r0, r4
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	f7fe fc7e 	bl	800072c <__aeabi_ddiv>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f006 fdd0 	bl	80089dc <sqrt>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f7fe fe40 	bl	8000ac8 <__aeabi_d2f>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	657b      	str	r3, [r7, #84]	@ 0x54
					des_rpm = (omega /3.1415) * 30;
 8001e4c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001e4e:	f7fe faeb 	bl	8000428 <__aeabi_f2d>
 8001e52:	a39d      	add	r3, pc, #628	@ (adr r3, 80020c8 <main+0x930>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe fc68 	bl	800072c <__aeabi_ddiv>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4ba1      	ldr	r3, [pc, #644]	@ (80020f0 <main+0x958>)
 8001e6a:	f7fe fb35 	bl	80004d8 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7fe fe27 	bl	8000ac8 <__aeabi_d2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4a9d      	ldr	r2, [pc, #628]	@ (80020f4 <main+0x95c>)
 8001e7e:	6013      	str	r3, [r2, #0]
					voltage_to_be_sent = (0.0433*des_rpm) + (-0.000354 * des_rpm*des_rpm) + (0.00000304 * des_rpm*des_rpm*des_rpm); // cubic FF
 8001e80:	4b9c      	ldr	r3, [pc, #624]	@ (80020f4 <main+0x95c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe facf 	bl	8000428 <__aeabi_f2d>
 8001e8a:	a391      	add	r3, pc, #580	@ (adr r3, 80020d0 <main+0x938>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fb22 	bl	80004d8 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4614      	mov	r4, r2
 8001e9a:	461d      	mov	r5, r3
 8001e9c:	4b95      	ldr	r3, [pc, #596]	@ (80020f4 <main+0x95c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fac1 	bl	8000428 <__aeabi_f2d>
 8001ea6:	a38c      	add	r3, pc, #560	@ (adr r3, 80020d8 <main+0x940>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe fb14 	bl	80004d8 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4690      	mov	r8, r2
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	4b8e      	ldr	r3, [pc, #568]	@ (80020f4 <main+0x95c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fab3 	bl	8000428 <__aeabi_f2d>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4640      	mov	r0, r8
 8001ec8:	4649      	mov	r1, r9
 8001eca:	f7fe fb05 	bl	80004d8 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	f7fe f949 	bl	800016c <__adddf3>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4614      	mov	r4, r2
 8001ee0:	461d      	mov	r5, r3
 8001ee2:	4b84      	ldr	r3, [pc, #528]	@ (80020f4 <main+0x95c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fa9e 	bl	8000428 <__aeabi_f2d>
 8001eec:	a37c      	add	r3, pc, #496	@ (adr r3, 80020e0 <main+0x948>)
 8001eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef2:	f7fe faf1 	bl	80004d8 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4690      	mov	r8, r2
 8001efc:	4699      	mov	r9, r3
 8001efe:	4b7d      	ldr	r3, [pc, #500]	@ (80020f4 <main+0x95c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fa90 	bl	8000428 <__aeabi_f2d>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4640      	mov	r0, r8
 8001f0e:	4649      	mov	r1, r9
 8001f10:	f7fe fae2 	bl	80004d8 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4690      	mov	r8, r2
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	4b75      	ldr	r3, [pc, #468]	@ (80020f4 <main+0x95c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fa81 	bl	8000428 <__aeabi_f2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4640      	mov	r0, r8
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	f7fe fad3 	bl	80004d8 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe f917 	bl	800016c <__adddf3>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7fe fdbf 	bl	8000ac8 <__aeabi_d2f>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80020f8 <main+0x960>)
 8001f4e:	6013      	str	r3, [r2, #0]
					error = desired_g - current_g;
 8001f50:	4b6a      	ldr	r3, [pc, #424]	@ (80020fc <main+0x964>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001f58:	f7fe fe0a 	bl	8000b70 <__aeabi_fsub>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b67      	ldr	r3, [pc, #412]	@ (8002100 <main+0x968>)
 8001f62:	601a      	str	r2, [r3, #0]
					integral += (dt/1000.0) * (error + lastError) / 2;
 8001f64:	4b67      	ldr	r3, [pc, #412]	@ (8002104 <main+0x96c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fa5d 	bl	8000428 <__aeabi_f2d>
 8001f6e:	4604      	mov	r4, r0
 8001f70:	460d      	mov	r5, r1
 8001f72:	4b65      	ldr	r3, [pc, #404]	@ (8002108 <main+0x970>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fa34 	bl	80003e4 <__aeabi_ui2d>
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	4b62      	ldr	r3, [pc, #392]	@ (800210c <main+0x974>)
 8001f82:	f7fe fbd3 	bl	800072c <__aeabi_ddiv>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4690      	mov	r8, r2
 8001f8c:	4699      	mov	r9, r3
 8001f8e:	4b5c      	ldr	r3, [pc, #368]	@ (8002100 <main+0x968>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5f      	ldr	r2, [pc, #380]	@ (8002110 <main+0x978>)
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fdeb 	bl	8000b74 <__addsf3>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fa41 	bl	8000428 <__aeabi_f2d>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4640      	mov	r0, r8
 8001fac:	4649      	mov	r1, r9
 8001fae:	f7fe fa93 	bl	80004d8 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fc2:	f7fe fbb3 	bl	800072c <__aeabi_ddiv>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	f7fe f8cd 	bl	800016c <__adddf3>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7fe fd75 	bl	8000ac8 <__aeabi_d2f>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4a48      	ldr	r2, [pc, #288]	@ (8002104 <main+0x96c>)
 8001fe2:	6013      	str	r3, [r2, #0]

					if (integral > integralCap){
 8001fe4:	4b47      	ldr	r3, [pc, #284]	@ (8002104 <main+0x96c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	494a      	ldr	r1, [pc, #296]	@ (8002114 <main+0x97c>)
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f886 	bl	80010fc <__aeabi_fcmpgt>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <main+0x864>
						integral  = integralCap;
 8001ff6:	4b43      	ldr	r3, [pc, #268]	@ (8002104 <main+0x96c>)
 8001ff8:	4a46      	ldr	r2, [pc, #280]	@ (8002114 <main+0x97c>)
 8001ffa:	601a      	str	r2, [r3, #0]
					}

					pid = kP * error + kI * integral + kD * (error - lastError) / (dt/1000.0) + voltage_to_be_sent;
 8001ffc:	4b40      	ldr	r3, [pc, #256]	@ (8002100 <main+0x968>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fdb6 	bl	8000b74 <__addsf3>
 8002008:	4603      	mov	r3, r0
 800200a:	461c      	mov	r4, r3
 800200c:	4b3d      	ldr	r3, [pc, #244]	@ (8002104 <main+0x96c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe feb5 	bl	8000d84 <__aeabi_fmul>
 800201a:	4603      	mov	r3, r0
 800201c:	4619      	mov	r1, r3
 800201e:	4620      	mov	r0, r4
 8002020:	f7fe fda8 	bl	8000b74 <__addsf3>
 8002024:	4603      	mov	r3, r0
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe f9fe 	bl	8000428 <__aeabi_f2d>
 800202c:	4604      	mov	r4, r0
 800202e:	460d      	mov	r5, r1
 8002030:	4b33      	ldr	r3, [pc, #204]	@ (8002100 <main+0x968>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a36      	ldr	r2, [pc, #216]	@ (8002110 <main+0x978>)
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fd98 	bl	8000b70 <__aeabi_fsub>
 8002040:	4603      	mov	r3, r0
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe f9f0 	bl	8000428 <__aeabi_f2d>
 8002048:	4680      	mov	r8, r0
 800204a:	4689      	mov	r9, r1
 800204c:	4b2e      	ldr	r3, [pc, #184]	@ (8002108 <main+0x970>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe f9c7 	bl	80003e4 <__aeabi_ui2d>
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	4b2c      	ldr	r3, [pc, #176]	@ (800210c <main+0x974>)
 800205c:	f7fe fb66 	bl	800072c <__aeabi_ddiv>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4640      	mov	r0, r8
 8002066:	4649      	mov	r1, r9
 8002068:	f7fe fb60 	bl	800072c <__aeabi_ddiv>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f7fe f87a 	bl	800016c <__adddf3>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	4b1d      	ldr	r3, [pc, #116]	@ (80020f8 <main+0x960>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe f9cf 	bl	8000428 <__aeabi_f2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4620      	mov	r0, r4
 8002090:	4629      	mov	r1, r5
 8002092:	f7fe f86b 	bl	800016c <__adddf3>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f7fe fd13 	bl	8000ac8 <__aeabi_d2f>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <main+0x980>)
 80020a6:	6013      	str	r3, [r2, #0]
					if (pid > 5) {
 80020a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <main+0x980>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	491b      	ldr	r1, [pc, #108]	@ (800211c <main+0x984>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f824 	bl	80010fc <__aeabi_fcmpgt>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	e032      	b.n	8002120 <main+0x988>
 80020ba:	bf00      	nop
 80020bc:	f3af 8000 	nop.w
 80020c0:	51eb851f 	.word	0x51eb851f
 80020c4:	40239eb8 	.word	0x40239eb8
 80020c8:	c083126f 	.word	0xc083126f
 80020cc:	400921ca 	.word	0x400921ca
 80020d0:	e7d566cf 	.word	0xe7d566cf
 80020d4:	3fa62b6a 	.word	0x3fa62b6a
 80020d8:	6c3b927d 	.word	0x6c3b927d
 80020dc:	bf373322 	.word	0xbf373322
 80020e0:	ac99a685 	.word	0xac99a685
 80020e4:	3ec98059 	.word	0x3ec98059
 80020e8:	40010800 	.word	0x40010800
 80020ec:	3fb33333 	.word	0x3fb33333
 80020f0:	403e0000 	.word	0x403e0000
 80020f4:	200004d0 	.word	0x200004d0
 80020f8:	200004b4 	.word	0x200004b4
 80020fc:	200004b0 	.word	0x200004b0
 8002100:	200004dc 	.word	0x200004dc
 8002104:	200004e0 	.word	0x200004e0
 8002108:	200004ec 	.word	0x200004ec
 800210c:	408f4000 	.word	0x408f4000
 8002110:	200004d8 	.word	0x200004d8
 8002114:	43960000 	.word	0x43960000
 8002118:	200004d4 	.word	0x200004d4
 800211c:	40a00000 	.word	0x40a00000
 8002120:	d002      	beq.n	8002128 <main+0x990>
						pid = 5;
 8002122:	4b50      	ldr	r3, [pc, #320]	@ (8002264 <main+0xacc>)
 8002124:	4a50      	ldr	r2, [pc, #320]	@ (8002268 <main+0xad0>)
 8002126:	601a      	str	r2, [r3, #0]
					}
			        if (pid < 0){
 8002128:	4b4e      	ldr	r3, [pc, #312]	@ (8002264 <main+0xacc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f04f 0100 	mov.w	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe ffc5 	bl	80010c0 <__aeabi_fcmplt>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <main+0x9ac>
			          pid = 0;
 800213c:	4b49      	ldr	r3, [pc, #292]	@ (8002264 <main+0xacc>)
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
			        }



					int scaled_voltage = (uint16_t)((pid / 5) * 4095); // scale the voltage from 0-5 to 0-4095 to be sent though the DAC
 8002144:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <main+0xacc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4947      	ldr	r1, [pc, #284]	@ (8002268 <main+0xad0>)
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fece 	bl	8000eec <__aeabi_fdiv>
 8002150:	4603      	mov	r3, r0
 8002152:	4946      	ldr	r1, [pc, #280]	@ (800226c <main+0xad4>)
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fe15 	bl	8000d84 <__aeabi_fmul>
 800215a:	4603      	mov	r3, r0
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe ffd7 	bl	8001110 <__aeabi_f2uiz>
 8002162:	4603      	mov	r3, r0
 8002164:	b29b      	uxth	r3, r3
 8002166:	653b      	str	r3, [r7, #80]	@ 0x50
					setValue(scaled_voltage);
 8002168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800216a:	b29b      	uxth	r3, r3
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fa59 	bl	8002624 <setValue>

				    lastError = error;
 8002172:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <main+0xad8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a3f      	ldr	r2, [pc, #252]	@ (8002274 <main+0xadc>)
 8002178:	6013      	str	r3, [r2, #0]
				    prevTime = currTime;
 800217a:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <main+0xae0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a3f      	ldr	r2, [pc, #252]	@ (800227c <main+0xae4>)
 8002180:	6013      	str	r3, [r2, #0]
				}

				if (HAL_GetTick() - lastPrintTime >= printInterval) {
 8002182:	f001 fa79 	bl	8003678 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	4b3d      	ldr	r3, [pc, #244]	@ (8002280 <main+0xae8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	1ad2      	subs	r2, r2, r3
 800218e:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <main+0xaec>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d339      	bcc.n	800220a <main+0xa72>
				    lastPrintTime = HAL_GetTick();
 8002196:	f001 fa6f 	bl	8003678 <HAL_GetTick>
 800219a:	4603      	mov	r3, r0
 800219c:	4a38      	ldr	r2, [pc, #224]	@ (8002280 <main+0xae8>)
 800219e:	6013      	str	r3, [r2, #0]
				    uint8_t BRAKE = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80021a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021a4:	4838      	ldr	r0, [pc, #224]	@ (8002288 <main+0xaf0>)
 80021a6:	f001 fde7 	bl	8003d78 <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				    uint8_t MOTOR = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80021b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021b4:	4834      	ldr	r0, [pc, #208]	@ (8002288 <main+0xaf0>)
 80021b6:	f001 fddf 	bl	8003d78 <HAL_GPIO_ReadPin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
				    memset(msg, 0, sizeof(msg));  // clear garbage from buffer
 80021c0:	2240      	movs	r2, #64	@ 0x40
 80021c2:	2100      	movs	r1, #0
 80021c4:	4831      	ldr	r0, [pc, #196]	@ (800228c <main+0xaf4>)
 80021c6:	f008 f924 	bl	800a412 <memset>
//					int len = snprintf(msg, sizeof(msg),
//							"%lu %.2f %.2f %u %u %.2f %.2f\n",
//							time_elapsed, desired_g, current_g, MOTOR, BRAKE, slope_gps, descent_no_brake);
					int len = snprintf(msg, sizeof(msg),
 80021ca:	4b31      	ldr	r3, [pc, #196]	@ (8002290 <main+0xaf8>)
 80021cc:	681e      	ldr	r6, [r3, #0]
 80021ce:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80021d0:	f7fe f92a 	bl	8000428 <__aeabi_f2d>
 80021d4:	4604      	mov	r4, r0
 80021d6:	460d      	mov	r5, r1
 80021d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <main+0xafc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f923 	bl	8000428 <__aeabi_f2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021ea:	e9cd 4500 	strd	r4, r5, [sp]
 80021ee:	4633      	mov	r3, r6
 80021f0:	4a29      	ldr	r2, [pc, #164]	@ (8002298 <main+0xb00>)
 80021f2:	2140      	movs	r1, #64	@ 0x40
 80021f4:	4825      	ldr	r0, [pc, #148]	@ (800228c <main+0xaf4>)
 80021f6:	f008 f893 	bl	800a320 <sniprintf>
 80021fa:	64b8      	str	r0, [r7, #72]	@ 0x48
							"%lu %.2f %.2f\n",
							time_elapsed, desired_g, current_g);

					// Send over UART using interrupt
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, len);
 80021fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	4922      	ldr	r1, [pc, #136]	@ (800228c <main+0xaf4>)
 8002204:	4825      	ldr	r0, [pc, #148]	@ (800229c <main+0xb04>)
 8002206:	f005 fe7c 	bl	8007f02 <HAL_UART_Transmit_IT>
				}
			}
		}

		// LED loop to check board status
		ledTimer ++;
 800220a:	4b25      	ldr	r3, [pc, #148]	@ (80022a0 <main+0xb08>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	4b23      	ldr	r3, [pc, #140]	@ (80022a0 <main+0xb08>)
 8002214:	801a      	strh	r2, [r3, #0]
		if(ledTimer > 200){
 8002216:	4b22      	ldr	r3, [pc, #136]	@ (80022a0 <main+0xb08>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	2bc8      	cmp	r3, #200	@ 0xc8
 800221c:	d91d      	bls.n	800225a <main+0xac2>
			ledTimer = 0;
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <main+0xb08>)
 8002220:	2200      	movs	r2, #0
 8002222:	801a      	strh	r2, [r3, #0]
			led = !led;
 8002224:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <main+0xb0c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <main+0xb0c>)
 8002236:	701a      	strb	r2, [r3, #0]
			if(led){
 8002238:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <main+0xb0c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d006      	beq.n	800224e <main+0xab6>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002240:	2201      	movs	r2, #1
 8002242:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002246:	4818      	ldr	r0, [pc, #96]	@ (80022a8 <main+0xb10>)
 8002248:	f001 fdad 	bl	8003da6 <HAL_GPIO_WritePin>
 800224c:	e005      	b.n	800225a <main+0xac2>
			}else{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002254:	4814      	ldr	r0, [pc, #80]	@ (80022a8 <main+0xb10>)
 8002256:	f001 fda6 	bl	8003da6 <HAL_GPIO_WritePin>
			}
		}
		HAL_Delay(1);
 800225a:	2001      	movs	r0, #1
 800225c:	f001 fa16 	bl	800368c <HAL_Delay>
		currTime = HAL_GetTick();
 8002260:	f7ff baed 	b.w	800183e <main+0xa6>
 8002264:	200004d4 	.word	0x200004d4
 8002268:	40a00000 	.word	0x40a00000
 800226c:	457ff000 	.word	0x457ff000
 8002270:	200004dc 	.word	0x200004dc
 8002274:	200004d8 	.word	0x200004d8
 8002278:	200004e4 	.word	0x200004e4
 800227c:	200004e8 	.word	0x200004e8
 8002280:	20000508 	.word	0x20000508
 8002284:	20000000 	.word	0x20000000
 8002288:	40010800 	.word	0x40010800
 800228c:	20000454 	.word	0x20000454
 8002290:	20000504 	.word	0x20000504
 8002294:	200004b0 	.word	0x200004b0
 8002298:	0800cec8 	.word	0x0800cec8
 800229c:	20000c08 	.word	0x20000c08
 80022a0:	200004fc 	.word	0x200004fc
 80022a4:	200004fa 	.word	0x200004fa
 80022a8:	40011000 	.word	0x40011000

080022ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b090      	sub	sp, #64	@ 0x40
 80022b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	2228      	movs	r2, #40	@ 0x28
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f008 f8a9 	bl	800a412 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022dc:	2301      	movs	r3, #1
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e0:	2302      	movs	r3, #2
 80022e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022ea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80022ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f0:	f107 0318 	add.w	r3, r7, #24
 80022f4:	4618      	mov	r0, r3
 80022f6:	f004 fc0f 	bl	8006b18 <HAL_RCC_OscConfig>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002300:	f000 fbb2 	bl	8002a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002304:	230f      	movs	r3, #15
 8002306:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002308:	2302      	movs	r3, #2
 800230a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002310:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2102      	movs	r1, #2
 800231e:	4618      	mov	r0, r3
 8002320:	f004 fe7c 	bl	800701c <HAL_RCC_ClockConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800232a:	f000 fb9d 	bl	8002a68 <Error_Handler>
  }
}
 800232e:	bf00      	nop
 8002330:	3740      	adds	r7, #64	@ 0x40
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// For serial monitor
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	char recentChar = *(rx_buff + rx_buff_arm); // the most recent character that has not been read yet
 8002340:	4bad      	ldr	r3, [pc, #692]	@ (80025f8 <HAL_UART_RxCpltCallback+0x2c0>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4bad      	ldr	r3, [pc, #692]	@ (80025fc <HAL_UART_RxCpltCallback+0x2c4>)
 8002348:	4413      	add	r3, r2
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	73fb      	strb	r3, [r7, #15]
	 m | manual
	 u | uploading mode (reading)
	 o | on mode (running)
	 e | evaluate (aka parsing) **/

	switch (state){
 800234e:	4bac      	ldr	r3, [pc, #688]	@ (8002600 <HAL_UART_RxCpltCallback+0x2c8>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	3b69      	subs	r3, #105	@ 0x69
 8002354:	2b0c      	cmp	r3, #12
 8002356:	f200 8109 	bhi.w	800256c <HAL_UART_RxCpltCallback+0x234>
 800235a:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <HAL_UART_RxCpltCallback+0x28>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	08002395 	.word	0x08002395
 8002364:	0800256d 	.word	0x0800256d
 8002368:	0800256d 	.word	0x0800256d
 800236c:	0800256d 	.word	0x0800256d
 8002370:	080023eb 	.word	0x080023eb
 8002374:	0800256d 	.word	0x0800256d
 8002378:	08002537 	.word	0x08002537
 800237c:	080024d3 	.word	0x080024d3
 8002380:	0800256d 	.word	0x0800256d
 8002384:	0800256d 	.word	0x0800256d
 8002388:	0800256d 	.word	0x0800256d
 800238c:	0800256d 	.word	0x0800256d
 8002390:	08002529 	.word	0x08002529
	case 'i':
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8002394:	2200      	movs	r2, #0
 8002396:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800239a:	489a      	ldr	r0, [pc, #616]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 800239c:	f001 fd03 	bl	8003da6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 80023a0:	2200      	movs	r2, #0
 80023a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023a6:	4897      	ldr	r0, [pc, #604]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 80023a8:	f001 fcfd 	bl	8003da6 <HAL_GPIO_WritePin>
		voltageSent = 0;
 80023ac:	4b96      	ldr	r3, [pc, #600]	@ (8002608 <HAL_UART_RxCpltCallback+0x2d0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	801a      	strh	r2, [r3, #0]
		setValue(voltageSent);
 80023b2:	4b95      	ldr	r3, [pc, #596]	@ (8002608 <HAL_UART_RxCpltCallback+0x2d0>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f934 	bl	8002624 <setValue>
		state = 'i';
 80023bc:	4b90      	ldr	r3, [pc, #576]	@ (8002600 <HAL_UART_RxCpltCallback+0x2c8>)
 80023be:	2269      	movs	r2, #105	@ 0x69
 80023c0:	701a      	strb	r2, [r3, #0]
		// go to upload mode
		if(recentChar == 'u'){
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b75      	cmp	r3, #117	@ 0x75
 80023c6:	d108      	bne.n	80023da <HAL_UART_RxCpltCallback+0xa2>
			upload_pointer = rx_buff_arm + 1;
 80023c8:	4b8b      	ldr	r3, [pc, #556]	@ (80025f8 <HAL_UART_RxCpltCallback+0x2c0>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a8f      	ldr	r2, [pc, #572]	@ (800260c <HAL_UART_RxCpltCallback+0x2d4>)
 80023d0:	6013      	str	r3, [r2, #0]
			state = 'u';
 80023d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002600 <HAL_UART_RxCpltCallback+0x2c8>)
 80023d4:	2275      	movs	r2, #117	@ 0x75
 80023d6:	701a      	strb	r2, [r3, #0]
		}
		// go to manual mode
		else if(recentChar == 'm') {
			state = 'm';
		}
		break;
 80023d8:	e0e0      	b.n	800259c <HAL_UART_RxCpltCallback+0x264>
		else if(recentChar == 'm') {
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b6d      	cmp	r3, #109	@ 0x6d
 80023de:	f040 80dd 	bne.w	800259c <HAL_UART_RxCpltCallback+0x264>
			state = 'm';
 80023e2:	4b87      	ldr	r3, [pc, #540]	@ (8002600 <HAL_UART_RxCpltCallback+0x2c8>)
 80023e4:	226d      	movs	r2, #109	@ 0x6d
 80023e6:	701a      	strb	r2, [r3, #0]
		break;
 80023e8:	e0d8      	b.n	800259c <HAL_UART_RxCpltCallback+0x264>



	case 'm':
		//accept commands from a serial monitor to control the centrifuge
		if(recentChar <= '9' && recentChar >= '0'){
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b39      	cmp	r3, #57	@ 0x39
 80023ee:	d825      	bhi.n	800243c <HAL_UART_RxCpltCallback+0x104>
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80023f4:	d922      	bls.n	800243c <HAL_UART_RxCpltCallback+0x104>
			voltageSent = (uint16_t)((int)(recentChar - '0') / 9.0 * 3636); // 4095 //1400 to get the weird thing at level 7
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	3b30      	subs	r3, #48	@ 0x30
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f802 	bl	8000404 <__aeabi_i2d>
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	4b82      	ldr	r3, [pc, #520]	@ (8002610 <HAL_UART_RxCpltCallback+0x2d8>)
 8002406:	f7fe f991 	bl	800072c <__aeabi_ddiv>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	a377      	add	r3, pc, #476	@ (adr r3, 80025f0 <HAL_UART_RxCpltCallback+0x2b8>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fe f85e 	bl	80004d8 <__aeabi_dmul>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f7fe fb30 	bl	8000a88 <__aeabi_d2uiz>
 8002428:	4603      	mov	r3, r0
 800242a:	b29a      	uxth	r2, r3
 800242c:	4b76      	ldr	r3, [pc, #472]	@ (8002608 <HAL_UART_RxCpltCallback+0x2d0>)
 800242e:	801a      	strh	r2, [r3, #0]
			setValue(voltageSent);
 8002430:	4b75      	ldr	r3, [pc, #468]	@ (8002608 <HAL_UART_RxCpltCallback+0x2d0>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f000 f8f5 	bl	8002624 <setValue>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
			voltageSent = 0;
			setValue(voltageSent);
			state = 'i';
		}
		break;
 800243a:	e0b1      	b.n	80025a0 <HAL_UART_RxCpltCallback+0x268>
		}else if(recentChar == 'C') { // Motor on Brake off
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b43      	cmp	r3, #67	@ 0x43
 8002440:	d10c      	bne.n	800245c <HAL_UART_RxCpltCallback+0x124>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Motor on
 8002442:	2201      	movs	r2, #1
 8002444:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002448:	486e      	ldr	r0, [pc, #440]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 800244a:	f001 fcac 	bl	8003da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 800244e:	2201      	movs	r2, #1
 8002450:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002454:	486b      	ldr	r0, [pc, #428]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 8002456:	f001 fca6 	bl	8003da6 <HAL_GPIO_WritePin>
		break;
 800245a:	e0a1      	b.n	80025a0 <HAL_UART_RxCpltCallback+0x268>
		}else if(recentChar == 'c') { // Motor off Brake off
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b63      	cmp	r3, #99	@ 0x63
 8002460:	d10c      	bne.n	800247c <HAL_UART_RxCpltCallback+0x144>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8002462:	2200      	movs	r2, #0
 8002464:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002468:	4866      	ldr	r0, [pc, #408]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 800246a:	f001 fc9c 	bl	8003da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 800246e:	2201      	movs	r2, #1
 8002470:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002474:	4863      	ldr	r0, [pc, #396]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 8002476:	f001 fc96 	bl	8003da6 <HAL_GPIO_WritePin>
		break;
 800247a:	e091      	b.n	80025a0 <HAL_UART_RxCpltCallback+0x268>
		}else if(recentChar == 'b') { // Motor off Brake on
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b62      	cmp	r3, #98	@ 0x62
 8002480:	d10c      	bne.n	800249c <HAL_UART_RxCpltCallback+0x164>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8002482:	2200      	movs	r2, #0
 8002484:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002488:	485e      	ldr	r0, [pc, #376]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 800248a:	f001 fc8c 	bl	8003da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 800248e:	2200      	movs	r2, #0
 8002490:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002494:	485b      	ldr	r0, [pc, #364]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 8002496:	f001 fc86 	bl	8003da6 <HAL_GPIO_WritePin>
		break;
 800249a:	e081      	b.n	80025a0 <HAL_UART_RxCpltCallback+0x268>
		else if(recentChar == 'm') {
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b6d      	cmp	r3, #109	@ 0x6d
 80024a0:	d17e      	bne.n	80025a0 <HAL_UART_RxCpltCallback+0x268>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 80024a2:	2200      	movs	r2, #0
 80024a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024a8:	4856      	ldr	r0, [pc, #344]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 80024aa:	f001 fc7c 	bl	8003da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 80024ae:	2200      	movs	r2, #0
 80024b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024b4:	4853      	ldr	r0, [pc, #332]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 80024b6:	f001 fc76 	bl	8003da6 <HAL_GPIO_WritePin>
			voltageSent = 0;
 80024ba:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <HAL_UART_RxCpltCallback+0x2d0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	801a      	strh	r2, [r3, #0]
			setValue(voltageSent);
 80024c0:	4b51      	ldr	r3, [pc, #324]	@ (8002608 <HAL_UART_RxCpltCallback+0x2d0>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f8ad 	bl	8002624 <setValue>
			state = 'i';
 80024ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002600 <HAL_UART_RxCpltCallback+0x2c8>)
 80024cc:	2269      	movs	r2, #105	@ 0x69
 80024ce:	701a      	strb	r2, [r3, #0]
		break;
 80024d0:	e066      	b.n	80025a0 <HAL_UART_RxCpltCallback+0x268>



	case 'p':
		// go to ON mode
		if (recentChar == 'o'){
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b6f      	cmp	r3, #111	@ 0x6f
 80024d6:	d114      	bne.n	8002502 <HAL_UART_RxCpltCallback+0x1ca>
			time_start = HAL_GetTick();
 80024d8:	f001 f8ce 	bl	8003678 <HAL_GetTick>
 80024dc:	4603      	mov	r3, r0
 80024de:	4a4d      	ldr	r2, [pc, #308]	@ (8002614 <HAL_UART_RxCpltCallback+0x2dc>)
 80024e0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Motor on
 80024e2:	2201      	movs	r2, #1
 80024e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024e8:	4846      	ldr	r0, [pc, #280]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 80024ea:	f001 fc5c 	bl	8003da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 80024ee:	2201      	movs	r2, #1
 80024f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024f4:	4843      	ldr	r0, [pc, #268]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 80024f6:	f001 fc56 	bl	8003da6 <HAL_GPIO_WritePin>
			state = 'o';
 80024fa:	4b41      	ldr	r3, [pc, #260]	@ (8002600 <HAL_UART_RxCpltCallback+0x2c8>)
 80024fc:	226f      	movs	r2, #111	@ 0x6f
 80024fe:	701a      	strb	r2, [r3, #0]
		}
		// go to manual mode
		else if(recentChar == 'm') {
			state = 'm';
		}
		break;
 8002500:	e050      	b.n	80025a4 <HAL_UART_RxCpltCallback+0x26c>
		else if(recentChar == 'u') {
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	2b75      	cmp	r3, #117	@ 0x75
 8002506:	d108      	bne.n	800251a <HAL_UART_RxCpltCallback+0x1e2>
			upload_pointer = rx_buff_arm + 1;
 8002508:	4b3b      	ldr	r3, [pc, #236]	@ (80025f8 <HAL_UART_RxCpltCallback+0x2c0>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	4a3f      	ldr	r2, [pc, #252]	@ (800260c <HAL_UART_RxCpltCallback+0x2d4>)
 8002510:	6013      	str	r3, [r2, #0]
			state = 'u';
 8002512:	4b3b      	ldr	r3, [pc, #236]	@ (8002600 <HAL_UART_RxCpltCallback+0x2c8>)
 8002514:	2275      	movs	r2, #117	@ 0x75
 8002516:	701a      	strb	r2, [r3, #0]
		break;
 8002518:	e044      	b.n	80025a4 <HAL_UART_RxCpltCallback+0x26c>
		else if(recentChar == 'm') {
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b6d      	cmp	r3, #109	@ 0x6d
 800251e:	d141      	bne.n	80025a4 <HAL_UART_RxCpltCallback+0x26c>
			state = 'm';
 8002520:	4b37      	ldr	r3, [pc, #220]	@ (8002600 <HAL_UART_RxCpltCallback+0x2c8>)
 8002522:	226d      	movs	r2, #109	@ 0x6d
 8002524:	701a      	strb	r2, [r3, #0]
		break;
 8002526:	e03d      	b.n	80025a4 <HAL_UART_RxCpltCallback+0x26c>



	case 'u':
		// go to evaluation mode
		if(recentChar == 'u'){
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	2b75      	cmp	r3, #117	@ 0x75
 800252c:	d13c      	bne.n	80025a8 <HAL_UART_RxCpltCallback+0x270>
			state = 'e';
 800252e:	4b34      	ldr	r3, [pc, #208]	@ (8002600 <HAL_UART_RxCpltCallback+0x2c8>)
 8002530:	2265      	movs	r2, #101	@ 0x65
 8002532:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002534:	e038      	b.n	80025a8 <HAL_UART_RxCpltCallback+0x270>



	case 'o':
		// go to idle mode
		if(recentChar == 'q') {
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b71      	cmp	r3, #113	@ 0x71
 800253a:	d137      	bne.n	80025ac <HAL_UART_RxCpltCallback+0x274>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 800253c:	2200      	movs	r2, #0
 800253e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002542:	4830      	ldr	r0, [pc, #192]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 8002544:	f001 fc2f 	bl	8003da6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 8002548:	2200      	movs	r2, #0
 800254a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800254e:	482d      	ldr	r0, [pc, #180]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 8002550:	f001 fc29 	bl	8003da6 <HAL_GPIO_WritePin>
			voltageSent = 0;
 8002554:	4b2c      	ldr	r3, [pc, #176]	@ (8002608 <HAL_UART_RxCpltCallback+0x2d0>)
 8002556:	2200      	movs	r2, #0
 8002558:	801a      	strh	r2, [r3, #0]
			setValue(voltageSent);
 800255a:	4b2b      	ldr	r3, [pc, #172]	@ (8002608 <HAL_UART_RxCpltCallback+0x2d0>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f860 	bl	8002624 <setValue>
			state = 'i';
 8002564:	4b26      	ldr	r3, [pc, #152]	@ (8002600 <HAL_UART_RxCpltCallback+0x2c8>)
 8002566:	2269      	movs	r2, #105	@ 0x69
 8002568:	701a      	strb	r2, [r3, #0]
		}
		break;
 800256a:	e01f      	b.n	80025ac <HAL_UART_RxCpltCallback+0x274>

	default:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 800256c:	2200      	movs	r2, #0
 800256e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002572:	4824      	ldr	r0, [pc, #144]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 8002574:	f001 fc17 	bl	8003da6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 8002578:	2200      	movs	r2, #0
 800257a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800257e:	4821      	ldr	r0, [pc, #132]	@ (8002604 <HAL_UART_RxCpltCallback+0x2cc>)
 8002580:	f001 fc11 	bl	8003da6 <HAL_GPIO_WritePin>
		voltageSent = 0;
 8002584:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <HAL_UART_RxCpltCallback+0x2d0>)
 8002586:	2200      	movs	r2, #0
 8002588:	801a      	strh	r2, [r3, #0]
		setValue(voltageSent);
 800258a:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <HAL_UART_RxCpltCallback+0x2d0>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f848 	bl	8002624 <setValue>
		state = 'i';
 8002594:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <HAL_UART_RxCpltCallback+0x2c8>)
 8002596:	2269      	movs	r2, #105	@ 0x69
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e008      	b.n	80025ae <HAL_UART_RxCpltCallback+0x276>
		break;
 800259c:	bf00      	nop
 800259e:	e006      	b.n	80025ae <HAL_UART_RxCpltCallback+0x276>
		break;
 80025a0:	bf00      	nop
 80025a2:	e004      	b.n	80025ae <HAL_UART_RxCpltCallback+0x276>
		break;
 80025a4:	bf00      	nop
 80025a6:	e002      	b.n	80025ae <HAL_UART_RxCpltCallback+0x276>
		break;
 80025a8:	bf00      	nop
 80025aa:	e000      	b.n	80025ae <HAL_UART_RxCpltCallback+0x276>
		break;
 80025ac:	bf00      	nop
	}

	// move to next index in the circular buffer to be read
	rx_buff_arm ++;
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_UART_RxCpltCallback+0x2c0>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_UART_RxCpltCallback+0x2c0>)
 80025b8:	701a      	strb	r2, [r3, #0]
	//	HAL_UART_Transmit_IT(&huart2, rx_buff, RX_BUFF_SIZE);

	//	uint8_t char_arr[1] = {recentChar};
	//	HAL_UART_Transmit_IT(&huart2, char_arr, 1);

	if (recentChar == 'x') {
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b78      	cmp	r3, #120	@ 0x78
 80025be:	d107      	bne.n	80025d0 <HAL_UART_RxCpltCallback+0x298>
	    avgRPM = 0;
 80025c0:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <HAL_UART_RxCpltCallback+0x2e0>)
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
	    numPoints = 0;
 80025c8:	4b14      	ldr	r3, [pc, #80]	@ (800261c <HAL_UART_RxCpltCallback+0x2e4>)
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
	}

	// necessary to prime the next callback
	HAL_UART_Receive_IT(&huart2, rx_buff + rx_buff_arm, 1); // the next character will be stored in the next index
 80025d0:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_UART_RxCpltCallback+0x2c0>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b09      	ldr	r3, [pc, #36]	@ (80025fc <HAL_UART_RxCpltCallback+0x2c4>)
 80025d8:	4413      	add	r3, r2
 80025da:	2201      	movs	r2, #1
 80025dc:	4619      	mov	r1, r3
 80025de:	4810      	ldr	r0, [pc, #64]	@ (8002620 <HAL_UART_RxCpltCallback+0x2e8>)
 80025e0:	f005 fcc4 	bl	8007f6c <HAL_UART_Receive_IT>
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	f3af 8000 	nop.w
 80025f0:	00000000 	.word	0x00000000
 80025f4:	40ac6800 	.word	0x40ac6800
 80025f8:	20000440 	.word	0x20000440
 80025fc:	2000024c 	.word	0x2000024c
 8002600:	20000004 	.word	0x20000004
 8002604:	40010800 	.word	0x40010800
 8002608:	200004fe 	.word	0x200004fe
 800260c:	20000b50 	.word	0x20000b50
 8002610:	40220000 	.word	0x40220000
 8002614:	20000500 	.word	0x20000500
 8002618:	200004b8 	.word	0x200004b8
 800261c:	200004bc 	.word	0x200004bc
 8002620:	20000c08 	.word	0x20000c08

08002624 <setValue>:

// for DAC
uint8_t setValue(uint16_t value){
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
	return MCP4725_setValue(&myMCP4725, value, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 800262e:	88f9      	ldrh	r1, [r7, #6]
 8002630:	2300      	movs	r3, #0
 8002632:	2200      	movs	r2, #0
 8002634:	4803      	ldr	r0, [pc, #12]	@ (8002644 <setValue+0x20>)
 8002636:	f7fe fe21 	bl	800127c <MCP4725_setValue>
 800263a:	4603      	mov	r3, r0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000b54 	.word	0x20000b54

08002648 <HAL_GPIO_EXTI_Callback>:

// for radio recieve
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	2b02      	cmp	r3, #2
 8002656:	f040 8181 	bne.w	800295c <HAL_GPIO_EXTI_Callback+0x314>
		nrf24l01p_rx_receive(rx_data); // read data when data ready flag is set
 800265a:	48a7      	ldr	r0, [pc, #668]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800265c:	f000 fabc 	bl	8002bd8 <nrf24l01p_rx_receive>
		accel_x = (int16_t)(rx_data[0] | (rx_data[1] << 8)) / 2048.f;
 8002660:	4ba5      	ldr	r3, [pc, #660]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	b21a      	sxth	r2, r3
 8002666:	4ba4      	ldr	r3, [pc, #656]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	b21b      	sxth	r3, r3
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	b21b      	sxth	r3, r3
 8002670:	4313      	orrs	r3, r2
 8002672:	b21b      	sxth	r3, r3
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fb31 	bl	8000cdc <__aeabi_i2f>
 800267a:	4603      	mov	r3, r0
 800267c:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fc33 	bl	8000eec <__aeabi_fdiv>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	4b9c      	ldr	r3, [pc, #624]	@ (80028fc <HAL_GPIO_EXTI_Callback+0x2b4>)
 800268c:	601a      	str	r2, [r3, #0]
		accel_y = (int16_t)(rx_data[2] | (rx_data[3] << 8)) / 2048.f;
 800268e:	4b9a      	ldr	r3, [pc, #616]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002690:	789b      	ldrb	r3, [r3, #2]
 8002692:	b21a      	sxth	r2, r3
 8002694:	4b98      	ldr	r3, [pc, #608]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002696:	78db      	ldrb	r3, [r3, #3]
 8002698:	b21b      	sxth	r3, r3
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	b21b      	sxth	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fb1a 	bl	8000cdc <__aeabi_i2f>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fc1c 	bl	8000eec <__aeabi_fdiv>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461a      	mov	r2, r3
 80026b8:	4b91      	ldr	r3, [pc, #580]	@ (8002900 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80026ba:	601a      	str	r2, [r3, #0]
		accel_z = (int16_t)(rx_data[4] | (rx_data[5] << 8)) / 2048.f;
 80026bc:	4b8e      	ldr	r3, [pc, #568]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80026be:	791b      	ldrb	r3, [r3, #4]
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	4b8d      	ldr	r3, [pc, #564]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80026c4:	795b      	ldrb	r3, [r3, #5]
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe fb03 	bl	8000cdc <__aeabi_i2f>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fc05 	bl	8000eec <__aeabi_fdiv>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b87      	ldr	r3, [pc, #540]	@ (8002904 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80026e8:	601a      	str	r2, [r3, #0]
		temperature = (float)((int16_t)(rx_data[6] | (rx_data[7] << 8))) / 340 + 36.53;
 80026ea:	4b83      	ldr	r3, [pc, #524]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80026ec:	799b      	ldrb	r3, [r3, #6]
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	4b81      	ldr	r3, [pc, #516]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80026f2:	79db      	ldrb	r3, [r3, #7]
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	4313      	orrs	r3, r2
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe faec 	bl	8000cdc <__aeabi_i2f>
 8002704:	4603      	mov	r3, r0
 8002706:	4980      	ldr	r1, [pc, #512]	@ (8002908 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fbef 	bl	8000eec <__aeabi_fdiv>
 800270e:	4603      	mov	r3, r0
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fe89 	bl	8000428 <__aeabi_f2d>
 8002716:	a36c      	add	r3, pc, #432	@ (adr r3, 80028c8 <HAL_GPIO_EXTI_Callback+0x280>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fd fd26 	bl	800016c <__adddf3>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f7fe f9ce 	bl	8000ac8 <__aeabi_d2f>
 800272c:	4603      	mov	r3, r0
 800272e:	4a77      	ldr	r2, [pc, #476]	@ (800290c <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002730:	6013      	str	r3, [r2, #0]
		gyro_x = (int16_t)(rx_data[8] | (rx_data[9] << 8)) / 65.5f;
 8002732:	4b71      	ldr	r3, [pc, #452]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002734:	7a1b      	ldrb	r3, [r3, #8]
 8002736:	b21a      	sxth	r2, r3
 8002738:	4b6f      	ldr	r3, [pc, #444]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800273a:	7a5b      	ldrb	r3, [r3, #9]
 800273c:	b21b      	sxth	r3, r3
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	b21b      	sxth	r3, r3
 8002742:	4313      	orrs	r3, r2
 8002744:	b21b      	sxth	r3, r3
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fac8 	bl	8000cdc <__aeabi_i2f>
 800274c:	4603      	mov	r3, r0
 800274e:	4970      	ldr	r1, [pc, #448]	@ (8002910 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fbcb 	bl	8000eec <__aeabi_fdiv>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	4b6e      	ldr	r3, [pc, #440]	@ (8002914 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800275c:	601a      	str	r2, [r3, #0]
		gyro_y = (int16_t)(rx_data[10] | (rx_data[11] << 8)) / 65.5f;
 800275e:	4b66      	ldr	r3, [pc, #408]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002760:	7a9b      	ldrb	r3, [r3, #10]
 8002762:	b21a      	sxth	r2, r3
 8002764:	4b64      	ldr	r3, [pc, #400]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002766:	7adb      	ldrb	r3, [r3, #11]
 8002768:	b21b      	sxth	r3, r3
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	b21b      	sxth	r3, r3
 800276e:	4313      	orrs	r3, r2
 8002770:	b21b      	sxth	r3, r3
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fab2 	bl	8000cdc <__aeabi_i2f>
 8002778:	4603      	mov	r3, r0
 800277a:	4965      	ldr	r1, [pc, #404]	@ (8002910 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fbb5 	bl	8000eec <__aeabi_fdiv>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	4b64      	ldr	r3, [pc, #400]	@ (8002918 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002788:	601a      	str	r2, [r3, #0]
		gyro_z = (int16_t)(rx_data[12] | (rx_data[13] << 8)) / 65.5f;
 800278a:	4b5b      	ldr	r3, [pc, #364]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800278c:	7b1b      	ldrb	r3, [r3, #12]
 800278e:	b21a      	sxth	r2, r3
 8002790:	4b59      	ldr	r3, [pc, #356]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002792:	7b5b      	ldrb	r3, [r3, #13]
 8002794:	b21b      	sxth	r3, r3
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	b21b      	sxth	r3, r3
 800279a:	4313      	orrs	r3, r2
 800279c:	b21b      	sxth	r3, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fa9c 	bl	8000cdc <__aeabi_i2f>
 80027a4:	4603      	mov	r3, r0
 80027a6:	495a      	ldr	r1, [pc, #360]	@ (8002910 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fb9f 	bl	8000eec <__aeabi_fdiv>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b5a      	ldr	r3, [pc, #360]	@ (800291c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80027b4:	601a      	str	r2, [r3, #0]

		accel_x -= 0.04;
 80027b6:	4b51      	ldr	r3, [pc, #324]	@ (80028fc <HAL_GPIO_EXTI_Callback+0x2b4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fe34 	bl	8000428 <__aeabi_f2d>
 80027c0:	a343      	add	r3, pc, #268	@ (adr r3, 80028d0 <HAL_GPIO_EXTI_Callback+0x288>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	f7fd fccf 	bl	8000168 <__aeabi_dsub>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f7fe f979 	bl	8000ac8 <__aeabi_d2f>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4a48      	ldr	r2, [pc, #288]	@ (80028fc <HAL_GPIO_EXTI_Callback+0x2b4>)
 80027da:	6013      	str	r3, [r2, #0]
		accel_y += 0.01;
 80027dc:	4b48      	ldr	r3, [pc, #288]	@ (8002900 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fe21 	bl	8000428 <__aeabi_f2d>
 80027e6:	a33c      	add	r3, pc, #240	@ (adr r3, 80028d8 <HAL_GPIO_EXTI_Callback+0x290>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd fcbe 	bl	800016c <__adddf3>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7fe f966 	bl	8000ac8 <__aeabi_d2f>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4a40      	ldr	r2, [pc, #256]	@ (8002900 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002800:	6013      	str	r3, [r2, #0]
		accel_z -= 0.05;
 8002802:	4b40      	ldr	r3, [pc, #256]	@ (8002904 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fe0e 	bl	8000428 <__aeabi_f2d>
 800280c:	a334      	add	r3, pc, #208	@ (adr r3, 80028e0 <HAL_GPIO_EXTI_Callback+0x298>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f7fd fca9 	bl	8000168 <__aeabi_dsub>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f7fe f953 	bl	8000ac8 <__aeabi_d2f>
 8002822:	4603      	mov	r3, r0
 8002824:	4a37      	ldr	r2, [pc, #220]	@ (8002904 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002826:	6013      	str	r3, [r2, #0]
		gyro_x += 4.7;
 8002828:	4b3a      	ldr	r3, [pc, #232]	@ (8002914 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fdfb 	bl	8000428 <__aeabi_f2d>
 8002832:	a32d      	add	r3, pc, #180	@ (adr r3, 80028e8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fd fc98 	bl	800016c <__adddf3>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f7fe f940 	bl	8000ac8 <__aeabi_d2f>
 8002848:	4603      	mov	r3, r0
 800284a:	4a32      	ldr	r2, [pc, #200]	@ (8002914 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800284c:	6013      	str	r3, [r2, #0]
		gyro_y -= 1.9;
 800284e:	4b32      	ldr	r3, [pc, #200]	@ (8002918 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fde8 	bl	8000428 <__aeabi_f2d>
 8002858:	a325      	add	r3, pc, #148	@ (adr r3, 80028f0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f7fd fc83 	bl	8000168 <__aeabi_dsub>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe f92d 	bl	8000ac8 <__aeabi_d2f>
 800286e:	4603      	mov	r3, r0
 8002870:	4a29      	ldr	r2, [pc, #164]	@ (8002918 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002872:	6013      	str	r3, [r2, #0]
		gyro_z += 0.5;
 8002874:	4b29      	ldr	r3, [pc, #164]	@ (800291c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe f979 	bl	8000b74 <__addsf3>
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	4b25      	ldr	r3, [pc, #148]	@ (800291c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002888:	601a      	str	r2, [r3, #0]

		current_g = sqrt((accel_x*accel_x) + (accel_y*accel_y) + (accel_z*accel_z));
 800288a:	4b1c      	ldr	r3, [pc, #112]	@ (80028fc <HAL_GPIO_EXTI_Callback+0x2b4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1b      	ldr	r2, [pc, #108]	@ (80028fc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fa75 	bl	8000d84 <__aeabi_fmul>
 800289a:	4603      	mov	r3, r0
 800289c:	461c      	mov	r4, r3
 800289e:	4b18      	ldr	r3, [pc, #96]	@ (8002900 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a17      	ldr	r2, [pc, #92]	@ (8002900 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe fa6b 	bl	8000d84 <__aeabi_fmul>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4619      	mov	r1, r3
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7fe f95e 	bl	8000b74 <__addsf3>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461c      	mov	r4, r3
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a10      	ldr	r2, [pc, #64]	@ (8002904 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	4611      	mov	r1, r2
 80028c6:	e02b      	b.n	8002920 <HAL_GPIO_EXTI_Callback+0x2d8>
 80028c8:	0a3d70a4 	.word	0x0a3d70a4
 80028cc:	404243d7 	.word	0x404243d7
 80028d0:	47ae147b 	.word	0x47ae147b
 80028d4:	3fa47ae1 	.word	0x3fa47ae1
 80028d8:	47ae147b 	.word	0x47ae147b
 80028dc:	3f847ae1 	.word	0x3f847ae1
 80028e0:	9999999a 	.word	0x9999999a
 80028e4:	3fa99999 	.word	0x3fa99999
 80028e8:	cccccccd 	.word	0xcccccccd
 80028ec:	4012cccc 	.word	0x4012cccc
 80028f0:	66666666 	.word	0x66666666
 80028f4:	3ffe6666 	.word	0x3ffe6666
 80028f8:	20000444 	.word	0x20000444
 80028fc:	20000494 	.word	0x20000494
 8002900:	20000498 	.word	0x20000498
 8002904:	2000049c 	.word	0x2000049c
 8002908:	43aa0000 	.word	0x43aa0000
 800290c:	200004a0 	.word	0x200004a0
 8002910:	42830000 	.word	0x42830000
 8002914:	200004a4 	.word	0x200004a4
 8002918:	200004a8 	.word	0x200004a8
 800291c:	200004ac 	.word	0x200004ac
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe fa2f 	bl	8000d84 <__aeabi_fmul>
 8002926:	4603      	mov	r3, r0
 8002928:	4619      	mov	r1, r3
 800292a:	4620      	mov	r0, r4
 800292c:	f7fe f922 	bl	8000b74 <__addsf3>
 8002930:	4603      	mov	r3, r0
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fd78 	bl	8000428 <__aeabi_f2d>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f006 f84c 	bl	80089dc <sqrt>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f7fe f8bc 	bl	8000ac8 <__aeabi_d2f>
 8002950:	4603      	mov	r3, r0
 8002952:	4a13      	ldr	r2, [pc, #76]	@ (80029a0 <HAL_GPIO_EXTI_Callback+0x358>)
 8002954:	6013      	str	r3, [r2, #0]
		dataNew = true;
 8002956:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <HAL_GPIO_EXTI_Callback+0x35c>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_14) {
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002962:	d104      	bne.n	800296e <HAL_GPIO_EXTI_Callback+0x326>
		counter++;
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_GPIO_EXTI_Callback+0x360>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	4a0f      	ldr	r2, [pc, #60]	@ (80029a8 <HAL_GPIO_EXTI_Callback+0x360>)
 800296c:	6013      	str	r3, [r2, #0]
	}

	if (GPIO_Pin == GPIO_PIN_8) {
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002974:	d110      	bne.n	8002998 <HAL_GPIO_EXTI_Callback+0x350>
		uint32_t now = HAL_GetTick();  // milliseconds
 8002976:	f000 fe7f 	bl	8003678 <HAL_GetTick>
 800297a:	60f8      	str	r0, [r7, #12]
		if (now - last_interrupt_time > 2)  // 50 ms debounce
 800297c:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_GPIO_EXTI_Callback+0x364>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d907      	bls.n	8002998 <HAL_GPIO_EXTI_Callback+0x350>
		{
			ct++;
 8002988:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_GPIO_EXTI_Callback+0x368>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <HAL_GPIO_EXTI_Callback+0x368>)
 8002990:	6013      	str	r3, [r2, #0]
			last_interrupt_time = now;
 8002992:	4a06      	ldr	r2, [pc, #24]	@ (80029ac <HAL_GPIO_EXTI_Callback+0x364>)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6013      	str	r3, [r2, #0]
		}
	}
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	200004b0 	.word	0x200004b0
 80029a4:	200004f9 	.word	0x200004f9
 80029a8:	200004c0 	.word	0x200004c0
 80029ac:	200004f4 	.word	0x200004f4
 80029b0:	200004f0 	.word	0x200004f0

080029b4 <collect_data>:

// grabs data from the motor and averages it
void collect_data() {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
	rpm = (counter * 20) / 4.0;
 80029b8:	4b25      	ldr	r3, [pc, #148]	@ (8002a50 <collect_data+0x9c>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fd0d 	bl	80003e4 <__aeabi_ui2d>
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	4b21      	ldr	r3, [pc, #132]	@ (8002a54 <collect_data+0xa0>)
 80029d0:	f7fd feac 	bl	800072c <__aeabi_ddiv>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f7fe f874 	bl	8000ac8 <__aeabi_d2f>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a58 <collect_data+0xa4>)
 80029e4:	6013      	str	r3, [r2, #0]
	sum = avgRPM * numPoints;
 80029e6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <collect_data+0xa8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002a60 <collect_data+0xac>)
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe f9c7 	bl	8000d84 <__aeabi_fmul>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <collect_data+0xb0>)
 80029fc:	601a      	str	r2, [r3, #0]
	sum += rpm;
 80029fe:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <collect_data+0xb0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a15      	ldr	r2, [pc, #84]	@ (8002a58 <collect_data+0xa4>)
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe f8b3 	bl	8000b74 <__addsf3>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <collect_data+0xb0>)
 8002a14:	601a      	str	r2, [r3, #0]
	numPoints++;
 8002a16:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <collect_data+0xac>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f8a8 	bl	8000b74 <__addsf3>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <collect_data+0xac>)
 8002a2a:	601a      	str	r2, [r3, #0]
	avgRPM = sum/numPoints;
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <collect_data+0xb0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a0b      	ldr	r2, [pc, #44]	@ (8002a60 <collect_data+0xac>)
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fa58 	bl	8000eec <__aeabi_fdiv>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <collect_data+0xa8>)
 8002a42:	601a      	str	r2, [r3, #0]

	// reset count for next sample
	counter = 0;
 8002a44:	4b02      	ldr	r3, [pc, #8]	@ (8002a50 <collect_data+0x9c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200004c0 	.word	0x200004c0
 8002a54:	40100000 	.word	0x40100000
 8002a58:	200004c8 	.word	0x200004c8
 8002a5c:	200004b8 	.word	0x200004b8
 8002a60:	200004bc 	.word	0x200004bc
 8002a64:	200004cc 	.word	0x200004cc

08002a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a6c:	b672      	cpsid	i
}
 8002a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <Error_Handler+0x8>

08002a74 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	2110      	movs	r1, #16
 8002a7c:	4802      	ldr	r0, [pc, #8]	@ (8002a88 <cs_high+0x14>)
 8002a7e:	f001 f992 	bl	8003da6 <HAL_GPIO_WritePin>
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40010800 	.word	0x40010800

08002a8c <cs_low>:

static void cs_low()
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8002a90:	2200      	movs	r2, #0
 8002a92:	2110      	movs	r1, #16
 8002a94:	4802      	ldr	r0, [pc, #8]	@ (8002aa0 <cs_low+0x14>)
 8002a96:	f001 f986 	bl	8003da6 <HAL_GPIO_WritePin>
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40010800 	.word	0x40010800

08002aa4 <ce_high>:

static void ce_high()
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4802      	ldr	r0, [pc, #8]	@ (8002ab8 <ce_high+0x14>)
 8002aae:	f001 f97a 	bl	8003da6 <HAL_GPIO_WritePin>
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40010c00 	.word	0x40010c00

08002abc <ce_low>:

static void ce_low()
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4802      	ldr	r0, [pc, #8]	@ (8002ad0 <ce_low+0x14>)
 8002ac6:	f001 f96e 	bl	8003da6 <HAL_GPIO_WritePin>
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40010c00 	.word	0x40010c00

08002ad4 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8002ae2:	f7ff ffd3 	bl	8002a8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002ae6:	f107 020e 	add.w	r2, r7, #14
 8002aea:	f107 010f 	add.w	r1, r7, #15
 8002aee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2301      	movs	r3, #1
 8002af6:	4809      	ldr	r0, [pc, #36]	@ (8002b1c <read_register+0x48>)
 8002af8:	f004 feff 	bl	80078fa <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8002afc:	f107 010d 	add.w	r1, r7, #13
 8002b00:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b04:	2201      	movs	r2, #1
 8002b06:	4805      	ldr	r0, [pc, #20]	@ (8002b1c <read_register+0x48>)
 8002b08:	f004 fdde 	bl	80076c8 <HAL_SPI_Receive>
    cs_high();
 8002b0c:	f7ff ffb2 	bl	8002a74 <cs_high>

    return read_val;
 8002b10:	7b7b      	ldrb	r3, [r7, #13]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000b64 	.word	0x20000b64

08002b20 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	4603      	mov	r3, r0
 8002b28:	460a      	mov	r2, r1
 8002b2a:	71fb      	strb	r3, [r7, #7]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	f043 0320 	orr.w	r3, r3, #32
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8002b3a:	79bb      	ldrb	r3, [r7, #6]
 8002b3c:	737b      	strb	r3, [r7, #13]

    cs_low();
 8002b3e:	f7ff ffa5 	bl	8002a8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002b42:	f107 020e 	add.w	r2, r7, #14
 8002b46:	f107 010f 	add.w	r1, r7, #15
 8002b4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2301      	movs	r3, #1
 8002b52:	4809      	ldr	r0, [pc, #36]	@ (8002b78 <write_register+0x58>)
 8002b54:	f004 fed1 	bl	80078fa <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8002b58:	f107 010d 	add.w	r1, r7, #13
 8002b5c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b60:	2201      	movs	r2, #1
 8002b62:	4805      	ldr	r0, [pc, #20]	@ (8002b78 <write_register+0x58>)
 8002b64:	f004 fc6c 	bl	8007440 <HAL_SPI_Transmit>
    cs_high();
 8002b68:	f7ff ff84 	bl	8002a74 <cs_high>

    return write_val;
 8002b6c:	7b7b      	ldrb	r3, [r7, #13]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000b64 	.word	0x20000b64

08002b7c <nrf24l01p_rx_init>:
}


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	460a      	mov	r2, r1
 8002b86:	80fb      	strh	r3, [r7, #6]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8002b8c:	f000 f838 	bl	8002c00 <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 8002b90:	f000 f88a 	bl	8002ca8 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8002b94:	f000 f92e 	bl	8002df4 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8002b98:	200e      	movs	r0, #14
 8002b9a:	f000 f909 	bl	8002db0 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f9b3 	bl	8002f0c <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8002ba6:	797b      	ldrb	r3, [r7, #5]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 f9e0 	bl	8002f6e <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8002bae:	2003      	movs	r0, #3
 8002bb0:	f000 f9bf 	bl	8002f32 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f000 f932 	bl	8002e1e <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8002bba:	2005      	movs	r0, #5
 8002bbc:	f000 f952 	bl	8002e64 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f000 f95f 	bl	8002e84 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8002bc6:	20fa      	movs	r0, #250	@ 0xfa
 8002bc8:	f000 f978 	bl	8002ebc <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8002bcc:	f7ff ff6a 	bl	8002aa4 <ce_high>
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f877 	bl	8002cd4 <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8002be6:	f000 f8f1 	bl	8002dcc <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002bea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bee:	4803      	ldr	r0, [pc, #12]	@ (8002bfc <nrf24l01p_rx_receive+0x24>)
 8002bf0:	f001 f8f1 	bl	8003dd6 <HAL_GPIO_TogglePin>
}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40011000 	.word	0x40011000

08002c00 <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8002c04:	f7ff ff36 	bl	8002a74 <cs_high>
    ce_low();
 8002c08:	f7ff ff58 	bl	8002abc <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8002c0c:	2108      	movs	r1, #8
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7ff ff86 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8002c14:	213f      	movs	r1, #63	@ 0x3f
 8002c16:	2001      	movs	r0, #1
 8002c18:	f7ff ff82 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8002c1c:	2103      	movs	r1, #3
 8002c1e:	2002      	movs	r0, #2
 8002c20:	f7ff ff7e 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8002c24:	2103      	movs	r1, #3
 8002c26:	2003      	movs	r0, #3
 8002c28:	f7ff ff7a 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8002c2c:	2103      	movs	r1, #3
 8002c2e:	2004      	movs	r0, #4
 8002c30:	f7ff ff76 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8002c34:	2102      	movs	r1, #2
 8002c36:	2005      	movs	r0, #5
 8002c38:	f7ff ff72 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8002c3c:	2107      	movs	r1, #7
 8002c3e:	2006      	movs	r0, #6
 8002c40:	f7ff ff6e 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8002c44:	217e      	movs	r1, #126	@ 0x7e
 8002c46:	2007      	movs	r0, #7
 8002c48:	f7ff ff6a 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	2011      	movs	r0, #17
 8002c50:	f7ff ff66 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8002c54:	2100      	movs	r1, #0
 8002c56:	2011      	movs	r0, #17
 8002c58:	f7ff ff62 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2012      	movs	r0, #18
 8002c60:	f7ff ff5e 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8002c64:	2100      	movs	r1, #0
 8002c66:	2013      	movs	r0, #19
 8002c68:	f7ff ff5a 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	2014      	movs	r0, #20
 8002c70:	f7ff ff56 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8002c74:	2100      	movs	r1, #0
 8002c76:	2015      	movs	r0, #21
 8002c78:	f7ff ff52 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2016      	movs	r0, #22
 8002c80:	f7ff ff4e 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8002c84:	2111      	movs	r1, #17
 8002c86:	2017      	movs	r0, #23
 8002c88:	f7ff ff4a 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	201c      	movs	r0, #28
 8002c90:	f7ff ff46 	bl	8002b20 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8002c94:	2100      	movs	r1, #0
 8002c96:	201d      	movs	r0, #29
 8002c98:	f7ff ff42 	bl	8002b20 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8002c9c:	f000 f83e 	bl	8002d1c <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8002ca0:	f000 f854 	bl	8002d4c <nrf24l01p_flush_tx_fifo>
}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7ff ff10 	bl	8002ad4 <read_register>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7ff ff2b 	bl	8002b20 <write_register>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8002cdc:	2361      	movs	r3, #97	@ 0x61
 8002cde:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8002ce0:	f7ff fed4 	bl	8002a8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002ce4:	f107 020e 	add.w	r2, r7, #14
 8002ce8:	f107 010f 	add.w	r1, r7, #15
 8002cec:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	4808      	ldr	r0, [pc, #32]	@ (8002d18 <nrf24l01p_read_rx_fifo+0x44>)
 8002cf6:	f004 fe00 	bl	80078fa <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8002cfa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002cfe:	220e      	movs	r2, #14
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4805      	ldr	r0, [pc, #20]	@ (8002d18 <nrf24l01p_read_rx_fifo+0x44>)
 8002d04:	f004 fce0 	bl	80076c8 <HAL_SPI_Receive>
    cs_high();
 8002d08:	f7ff feb4 	bl	8002a74 <cs_high>

    return status;
 8002d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000b64 	.word	0x20000b64

08002d1c <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8002d22:	23e2      	movs	r3, #226	@ 0xe2
 8002d24:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002d26:	f7ff feb1 	bl	8002a8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002d2a:	1dba      	adds	r2, r7, #6
 8002d2c:	1df9      	adds	r1, r7, #7
 8002d2e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2301      	movs	r3, #1
 8002d36:	4804      	ldr	r0, [pc, #16]	@ (8002d48 <nrf24l01p_flush_rx_fifo+0x2c>)
 8002d38:	f004 fddf 	bl	80078fa <HAL_SPI_TransmitReceive>
    cs_high();
 8002d3c:	f7ff fe9a 	bl	8002a74 <cs_high>
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000b64 	.word	0x20000b64

08002d4c <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8002d52:	23e1      	movs	r3, #225	@ 0xe1
 8002d54:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002d56:	f7ff fe99 	bl	8002a8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002d5a:	1dba      	adds	r2, r7, #6
 8002d5c:	1df9      	adds	r1, r7, #7
 8002d5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2301      	movs	r3, #1
 8002d66:	4804      	ldr	r0, [pc, #16]	@ (8002d78 <nrf24l01p_flush_tx_fifo+0x2c>)
 8002d68:	f004 fdc7 	bl	80078fa <HAL_SPI_TransmitReceive>
    cs_high();
 8002d6c:	f7ff fe82 	bl	8002a74 <cs_high>
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000b64 	.word	0x20000b64

08002d7c <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8002d82:	23ff      	movs	r3, #255	@ 0xff
 8002d84:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002d86:	f7ff fe81 	bl	8002a8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002d8a:	1dba      	adds	r2, r7, #6
 8002d8c:	1df9      	adds	r1, r7, #7
 8002d8e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2301      	movs	r3, #1
 8002d96:	4805      	ldr	r0, [pc, #20]	@ (8002dac <nrf24l01p_get_status+0x30>)
 8002d98:	f004 fdaf 	bl	80078fa <HAL_SPI_TransmitReceive>
    cs_high();
 8002d9c:	f7ff fe6a 	bl	8002a74 <cs_high>

    return status;
 8002da0:	79bb      	ldrb	r3, [r7, #6]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000b64 	.word	0x20000b64

08002db0 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	2011      	movs	r0, #17
 8002dc0:	f7ff feae 	bl	8002b20 <write_register>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8002dd2:	f7ff ffd3 	bl	8002d7c <nrf24l01p_get_status>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002de0:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	4619      	mov	r1, r3
 8002de6:	2007      	movs	r0, #7
 8002de8:	f7ff fe9a 	bl	8002b20 <write_register>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_power_up()
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f7ff fe6a 	bl	8002ad4 <read_register>
 8002e00:	4603      	mov	r3, r0
 8002e02:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	f043 0302 	orr.w	r3, r3, #2
 8002e0a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7ff fe85 	bl	8002b20 <write_register>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7ff fe53 	bl	8002ad4 <read_register>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d002      	beq.n	8002e3e <nrf24l01p_set_crc_length+0x20>
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d005      	beq.n	8002e48 <nrf24l01p_set_crc_length+0x2a>
 8002e3c:	e009      	b.n	8002e52 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	f023 0304 	bic.w	r3, r3, #4
 8002e44:	73fb      	strb	r3, [r7, #15]
            break;
 8002e46:	e004      	b.n	8002e52 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	73fb      	strb	r3, [r7, #15]
            break;
 8002e50:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	4619      	mov	r1, r3
 8002e56:	2000      	movs	r0, #0
 8002e58:	f7ff fe62 	bl	8002b20 <write_register>
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	3b02      	subs	r3, #2
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	4619      	mov	r1, r3
 8002e76:	2003      	movs	r0, #3
 8002e78:	f7ff fe52 	bl	8002b20 <write_register>
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8002e8e:	2004      	movs	r0, #4
 8002e90:	f7ff fe20 	bl	8002ad4 <read_register>
 8002e94:	4603      	mov	r3, r0
 8002e96:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	f063 030f 	orn	r3, r3, #15
 8002e9e:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	2004      	movs	r0, #4
 8002eae:	f7ff fe37 	bl	8002b20 <write_register>
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8002ec6:	2004      	movs	r0, #4
 8002ec8:	f7ff fe04 	bl	8002ad4 <read_register>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	f043 030f 	orr.w	r3, r3, #15
 8002ed6:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	4a0b      	ldr	r2, [pc, #44]	@ (8002f08 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	b25a      	sxtb	r2, r3
 8002eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	b25b      	sxtb	r3, r3
 8002ef4:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	2004      	movs	r0, #4
 8002efc:	f7ff fe10 	bl	8002b20 <write_register>
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	10624dd3 	.word	0x10624dd3

08002f0c <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8002f1c:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8002f1e:	89fb      	ldrh	r3, [r7, #14]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	4619      	mov	r1, r3
 8002f24:	2005      	movs	r0, #5
 8002f26:	f7ff fdfb 	bl	8002b20 <write_register>
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	4603      	mov	r3, r0
 8002f3a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8002f3c:	2006      	movs	r0, #6
 8002f3e:	f7ff fdc9 	bl	8002ad4 <read_register>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f023 0306 	bic.w	r3, r3, #6
 8002f48:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	b25a      	sxtb	r2, r3
 8002f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	2006      	movs	r0, #6
 8002f62:	f7ff fddd 	bl	8002b20 <write_register>
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	4603      	mov	r3, r0
 8002f76:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8002f78:	2006      	movs	r0, #6
 8002f7a:	f7ff fdab 	bl	8002ad4 <read_register>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002f84:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d00a      	beq.n	8002fa2 <nrf24l01p_set_rf_air_data_rate+0x34>
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	dc0e      	bgt.n	8002fae <nrf24l01p_set_rf_air_data_rate+0x40>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <nrf24l01p_set_rf_air_data_rate+0x3e>
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d10a      	bne.n	8002fae <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	f043 0308 	orr.w	r3, r3, #8
 8002f9e:	73fb      	strb	r3, [r7, #15]
            break;
 8002fa0:	e005      	b.n	8002fae <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	f043 0320 	orr.w	r3, r3, #32
 8002fa8:	73fb      	strb	r3, [r7, #15]
            break;
 8002faa:	e000      	b.n	8002fae <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8002fac:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	2006      	movs	r0, #6
 8002fb4:	f7ff fdb4 	bl	8002b20 <write_register>
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002fc4:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <MX_SPI1_Init+0x64>)
 8002fc6:	4a18      	ldr	r2, [pc, #96]	@ (8003028 <MX_SPI1_Init+0x68>)
 8002fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fca:	4b16      	ldr	r3, [pc, #88]	@ (8003024 <MX_SPI1_Init+0x64>)
 8002fcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fd2:	4b14      	ldr	r3, [pc, #80]	@ (8003024 <MX_SPI1_Init+0x64>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fd8:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <MX_SPI1_Init+0x64>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fde:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <MX_SPI1_Init+0x64>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8003024 <MX_SPI1_Init+0x64>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fea:	4b0e      	ldr	r3, [pc, #56]	@ (8003024 <MX_SPI1_Init+0x64>)
 8002fec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ff0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8003024 <MX_SPI1_Init+0x64>)
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <MX_SPI1_Init+0x64>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ffe:	4b09      	ldr	r3, [pc, #36]	@ (8003024 <MX_SPI1_Init+0x64>)
 8003000:	2200      	movs	r2, #0
 8003002:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003004:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <MX_SPI1_Init+0x64>)
 8003006:	2200      	movs	r2, #0
 8003008:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800300a:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <MX_SPI1_Init+0x64>)
 800300c:	220a      	movs	r2, #10
 800300e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003010:	4804      	ldr	r0, [pc, #16]	@ (8003024 <MX_SPI1_Init+0x64>)
 8003012:	f004 f991 	bl	8007338 <HAL_SPI_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800301c:	f7ff fd24 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000b64 	.word	0x20000b64
 8003028:	40013000 	.word	0x40013000

0800302c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	f107 0310 	add.w	r3, r7, #16
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1b      	ldr	r2, [pc, #108]	@ (80030b4 <HAL_SPI_MspInit+0x88>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d12f      	bne.n	80030ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800304c:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <HAL_SPI_MspInit+0x8c>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4a19      	ldr	r2, [pc, #100]	@ (80030b8 <HAL_SPI_MspInit+0x8c>)
 8003052:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003056:	6193      	str	r3, [r2, #24]
 8003058:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <HAL_SPI_MspInit+0x8c>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003064:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <HAL_SPI_MspInit+0x8c>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	4a13      	ldr	r2, [pc, #76]	@ (80030b8 <HAL_SPI_MspInit+0x8c>)
 800306a:	f043 0304 	orr.w	r3, r3, #4
 800306e:	6193      	str	r3, [r2, #24]
 8003070:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <HAL_SPI_MspInit+0x8c>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800307c:	23a0      	movs	r3, #160	@ 0xa0
 800307e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003084:	2303      	movs	r3, #3
 8003086:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	4619      	mov	r1, r3
 800308e:	480b      	ldr	r0, [pc, #44]	@ (80030bc <HAL_SPI_MspInit+0x90>)
 8003090:	f000 fcee 	bl	8003a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003094:	2340      	movs	r3, #64	@ 0x40
 8003096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	4619      	mov	r1, r3
 80030a6:	4805      	ldr	r0, [pc, #20]	@ (80030bc <HAL_SPI_MspInit+0x90>)
 80030a8:	f000 fce2 	bl	8003a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80030ac:	bf00      	nop
 80030ae:	3720      	adds	r7, #32
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40013000 	.word	0x40013000
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40010800 	.word	0x40010800

080030c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030c6:	4b15      	ldr	r3, [pc, #84]	@ (800311c <HAL_MspInit+0x5c>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	4a14      	ldr	r2, [pc, #80]	@ (800311c <HAL_MspInit+0x5c>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6193      	str	r3, [r2, #24]
 80030d2:	4b12      	ldr	r3, [pc, #72]	@ (800311c <HAL_MspInit+0x5c>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	4b0f      	ldr	r3, [pc, #60]	@ (800311c <HAL_MspInit+0x5c>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	4a0e      	ldr	r2, [pc, #56]	@ (800311c <HAL_MspInit+0x5c>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e8:	61d3      	str	r3, [r2, #28]
 80030ea:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <HAL_MspInit+0x5c>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003120 <HAL_MspInit+0x60>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	4a04      	ldr	r2, [pc, #16]	@ (8003120 <HAL_MspInit+0x60>)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	40021000 	.word	0x40021000
 8003120:	40010000 	.word	0x40010000

08003124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <NMI_Handler+0x4>

0800312c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <HardFault_Handler+0x4>

08003134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <MemManage_Handler+0x4>

0800313c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003140:	bf00      	nop
 8003142:	e7fd      	b.n	8003140 <BusFault_Handler+0x4>

08003144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <UsageFault_Handler+0x4>

0800314c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003174:	f000 fa6e 	bl	8003654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}

0800317c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8003180:	2002      	movs	r0, #2
 8003182:	f000 fe41 	bl	8003e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}

0800318a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800318e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003192:	f000 fe39 	bl	8003e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80031a0:	4802      	ldr	r0, [pc, #8]	@ (80031ac <I2C1_EV_IRQHandler+0x10>)
 80031a2:	f001 fc39 	bl	8004a18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200001f8 	.word	0x200001f8

080031b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80031b4:	4802      	ldr	r0, [pc, #8]	@ (80031c0 <I2C1_ER_IRQHandler+0x10>)
 80031b6:	f001 fda0 	bl	8004cfa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200001f8 	.word	0x200001f8

080031c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031c8:	4802      	ldr	r0, [pc, #8]	@ (80031d4 <USART1_IRQHandler+0x10>)
 80031ca:	f004 fef5 	bl	8007fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000bc0 	.word	0x20000bc0

080031d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031dc:	4802      	ldr	r0, [pc, #8]	@ (80031e8 <USART2_IRQHandler+0x10>)
 80031de:	f004 feeb 	bl	8007fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000c08 	.word	0x20000c08

080031ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80031f0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80031f4:	f000 fe08 	bl	8003e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return 1;
 8003200:	2301      	movs	r3, #1
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <_kill>:

int _kill(int pid, int sig)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003214:	f007 f962 	bl	800a4dc <__errno>
 8003218:	4603      	mov	r3, r0
 800321a:	2216      	movs	r2, #22
 800321c:	601a      	str	r2, [r3, #0]
  return -1;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <_exit>:

void _exit (int status)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003232:	f04f 31ff 	mov.w	r1, #4294967295
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffe7 	bl	800320a <_kill>
  while (1) {}    /* Make sure we hang here */
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <_exit+0x12>

08003240 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e00a      	b.n	8003268 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003252:	f3af 8000 	nop.w
 8003256:	4601      	mov	r1, r0
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	60ba      	str	r2, [r7, #8]
 800325e:	b2ca      	uxtb	r2, r1
 8003260:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	3301      	adds	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	dbf0      	blt.n	8003252 <_read+0x12>
  }

  return len;
 8003270:	687b      	ldr	r3, [r7, #4]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e009      	b.n	80032a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	60ba      	str	r2, [r7, #8]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	3301      	adds	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	dbf1      	blt.n	800328c <_write+0x12>
  }
  return len;
 80032a8:	687b      	ldr	r3, [r7, #4]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <_close>:

int _close(int file)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032d8:	605a      	str	r2, [r3, #4]
  return 0;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <_isatty>:

int _isatty(int file)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032ee:	2301      	movs	r3, #1
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b085      	sub	sp, #20
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
	...

08003314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800331c:	4a14      	ldr	r2, [pc, #80]	@ (8003370 <_sbrk+0x5c>)
 800331e:	4b15      	ldr	r3, [pc, #84]	@ (8003374 <_sbrk+0x60>)
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003328:	4b13      	ldr	r3, [pc, #76]	@ (8003378 <_sbrk+0x64>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003330:	4b11      	ldr	r3, [pc, #68]	@ (8003378 <_sbrk+0x64>)
 8003332:	4a12      	ldr	r2, [pc, #72]	@ (800337c <_sbrk+0x68>)
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <_sbrk+0x64>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	429a      	cmp	r2, r3
 8003342:	d207      	bcs.n	8003354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003344:	f007 f8ca 	bl	800a4dc <__errno>
 8003348:	4603      	mov	r3, r0
 800334a:	220c      	movs	r2, #12
 800334c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
 8003352:	e009      	b.n	8003368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003354:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <_sbrk+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800335a:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <_sbrk+0x64>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	4a05      	ldr	r2, [pc, #20]	@ (8003378 <_sbrk+0x64>)
 8003364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003366:	68fb      	ldr	r3, [r7, #12]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20005000 	.word	0x20005000
 8003374:	00000400 	.word	0x00000400
 8003378:	20000bbc 	.word	0x20000bbc
 800337c:	20000da0 	.word	0x20000da0

08003380 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003390:	4b11      	ldr	r3, [pc, #68]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 8003392:	4a12      	ldr	r2, [pc, #72]	@ (80033dc <MX_USART1_UART_Init+0x50>)
 8003394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003396:	4b10      	ldr	r3, [pc, #64]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 8003398:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800339c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800339e:	4b0e      	ldr	r3, [pc, #56]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033a4:	4b0c      	ldr	r3, [pc, #48]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033b0:	4b09      	ldr	r3, [pc, #36]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033b2:	220c      	movs	r2, #12
 80033b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b6:	4b08      	ldr	r3, [pc, #32]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033bc:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033be:	2200      	movs	r2, #0
 80033c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033c2:	4805      	ldr	r0, [pc, #20]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033c4:	f004 fd4d 	bl	8007e62 <HAL_UART_Init>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033ce:	f7ff fb4b 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000bc0 	.word	0x20000bc0
 80033dc:	40013800 	.word	0x40013800

080033e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033e4:	4b11      	ldr	r3, [pc, #68]	@ (800342c <MX_USART2_UART_Init+0x4c>)
 80033e6:	4a12      	ldr	r2, [pc, #72]	@ (8003430 <MX_USART2_UART_Init+0x50>)
 80033e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033ea:	4b10      	ldr	r3, [pc, #64]	@ (800342c <MX_USART2_UART_Init+0x4c>)
 80033ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033f2:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <MX_USART2_UART_Init+0x4c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033f8:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <MX_USART2_UART_Init+0x4c>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033fe:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <MX_USART2_UART_Init+0x4c>)
 8003400:	2200      	movs	r2, #0
 8003402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003404:	4b09      	ldr	r3, [pc, #36]	@ (800342c <MX_USART2_UART_Init+0x4c>)
 8003406:	220c      	movs	r2, #12
 8003408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800340a:	4b08      	ldr	r3, [pc, #32]	@ (800342c <MX_USART2_UART_Init+0x4c>)
 800340c:	2200      	movs	r2, #0
 800340e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003410:	4b06      	ldr	r3, [pc, #24]	@ (800342c <MX_USART2_UART_Init+0x4c>)
 8003412:	2200      	movs	r2, #0
 8003414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003416:	4805      	ldr	r0, [pc, #20]	@ (800342c <MX_USART2_UART_Init+0x4c>)
 8003418:	f004 fd23 	bl	8007e62 <HAL_UART_Init>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003422:	f7ff fb21 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000c08 	.word	0x20000c08
 8003430:	40004400 	.word	0x40004400

08003434 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08c      	sub	sp, #48	@ 0x30
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	f107 031c 	add.w	r3, r7, #28
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a45      	ldr	r2, [pc, #276]	@ (8003564 <HAL_UART_MspInit+0x130>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d146      	bne.n	80034e2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003454:	4b44      	ldr	r3, [pc, #272]	@ (8003568 <HAL_UART_MspInit+0x134>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	4a43      	ldr	r2, [pc, #268]	@ (8003568 <HAL_UART_MspInit+0x134>)
 800345a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800345e:	6193      	str	r3, [r2, #24]
 8003460:	4b41      	ldr	r3, [pc, #260]	@ (8003568 <HAL_UART_MspInit+0x134>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800346c:	4b3e      	ldr	r3, [pc, #248]	@ (8003568 <HAL_UART_MspInit+0x134>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	4a3d      	ldr	r2, [pc, #244]	@ (8003568 <HAL_UART_MspInit+0x134>)
 8003472:	f043 0308 	orr.w	r3, r3, #8
 8003476:	6193      	str	r3, [r2, #24]
 8003478:	4b3b      	ldr	r3, [pc, #236]	@ (8003568 <HAL_UART_MspInit+0x134>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003484:	2340      	movs	r3, #64	@ 0x40
 8003486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800348c:	2303      	movs	r3, #3
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003490:	f107 031c 	add.w	r3, r7, #28
 8003494:	4619      	mov	r1, r3
 8003496:	4835      	ldr	r0, [pc, #212]	@ (800356c <HAL_UART_MspInit+0x138>)
 8003498:	f000 faea 	bl	8003a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a0:	2300      	movs	r3, #0
 80034a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a8:	f107 031c 	add.w	r3, r7, #28
 80034ac:	4619      	mov	r1, r3
 80034ae:	482f      	ldr	r0, [pc, #188]	@ (800356c <HAL_UART_MspInit+0x138>)
 80034b0:	f000 fade 	bl	8003a70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80034b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003570 <HAL_UART_MspInit+0x13c>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80034c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ca:	4a29      	ldr	r2, [pc, #164]	@ (8003570 <HAL_UART_MspInit+0x13c>)
 80034cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ce:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034d0:	2200      	movs	r2, #0
 80034d2:	2100      	movs	r1, #0
 80034d4:	2025      	movs	r0, #37	@ 0x25
 80034d6:	f000 f9d4 	bl	8003882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034da:	2025      	movs	r0, #37	@ 0x25
 80034dc:	f000 f9ed 	bl	80038ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034e0:	e03c      	b.n	800355c <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a23      	ldr	r2, [pc, #140]	@ (8003574 <HAL_UART_MspInit+0x140>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d137      	bne.n	800355c <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <HAL_UART_MspInit+0x134>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003568 <HAL_UART_MspInit+0x134>)
 80034f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034f6:	61d3      	str	r3, [r2, #28]
 80034f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <HAL_UART_MspInit+0x134>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003504:	4b18      	ldr	r3, [pc, #96]	@ (8003568 <HAL_UART_MspInit+0x134>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	4a17      	ldr	r2, [pc, #92]	@ (8003568 <HAL_UART_MspInit+0x134>)
 800350a:	f043 0304 	orr.w	r3, r3, #4
 800350e:	6193      	str	r3, [r2, #24]
 8003510:	4b15      	ldr	r3, [pc, #84]	@ (8003568 <HAL_UART_MspInit+0x134>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800351c:	2304      	movs	r3, #4
 800351e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003524:	2303      	movs	r3, #3
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003528:	f107 031c 	add.w	r3, r7, #28
 800352c:	4619      	mov	r1, r3
 800352e:	4812      	ldr	r0, [pc, #72]	@ (8003578 <HAL_UART_MspInit+0x144>)
 8003530:	f000 fa9e 	bl	8003a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003534:	2308      	movs	r3, #8
 8003536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003538:	2300      	movs	r3, #0
 800353a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003540:	f107 031c 	add.w	r3, r7, #28
 8003544:	4619      	mov	r1, r3
 8003546:	480c      	ldr	r0, [pc, #48]	@ (8003578 <HAL_UART_MspInit+0x144>)
 8003548:	f000 fa92 	bl	8003a70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	2026      	movs	r0, #38	@ 0x26
 8003552:	f000 f996 	bl	8003882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003556:	2026      	movs	r0, #38	@ 0x26
 8003558:	f000 f9af 	bl	80038ba <HAL_NVIC_EnableIRQ>
}
 800355c:	bf00      	nop
 800355e:	3730      	adds	r7, #48	@ 0x30
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40013800 	.word	0x40013800
 8003568:	40021000 	.word	0x40021000
 800356c:	40010c00 	.word	0x40010c00
 8003570:	40010000 	.word	0x40010000
 8003574:	40004400 	.word	0x40004400
 8003578:	40010800 	.word	0x40010800

0800357c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800357c:	f7ff ff00 	bl	8003380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003580:	480b      	ldr	r0, [pc, #44]	@ (80035b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003582:	490c      	ldr	r1, [pc, #48]	@ (80035b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003584:	4a0c      	ldr	r2, [pc, #48]	@ (80035b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003588:	e002      	b.n	8003590 <LoopCopyDataInit>

0800358a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800358a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800358c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800358e:	3304      	adds	r3, #4

08003590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003594:	d3f9      	bcc.n	800358a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003596:	4a09      	ldr	r2, [pc, #36]	@ (80035bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003598:	4c09      	ldr	r4, [pc, #36]	@ (80035c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800359a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800359c:	e001      	b.n	80035a2 <LoopFillZerobss>

0800359e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800359e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035a0:	3204      	adds	r2, #4

080035a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a4:	d3fb      	bcc.n	800359e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035a6:	f006 ff9f 	bl	800a4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035aa:	f7fe f8f5 	bl	8001798 <main>
  bx lr
 80035ae:	4770      	bx	lr
  ldr r0, =_sdata
 80035b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80035b8:	0800d358 	.word	0x0800d358
  ldr r2, =_sbss
 80035bc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80035c0:	20000da0 	.word	0x20000da0

080035c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035c4:	e7fe      	b.n	80035c4 <ADC1_2_IRQHandler>
	...

080035c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035cc:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <HAL_Init+0x28>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a07      	ldr	r2, [pc, #28]	@ (80035f0 <HAL_Init+0x28>)
 80035d2:	f043 0310 	orr.w	r3, r3, #16
 80035d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d8:	2003      	movs	r0, #3
 80035da:	f000 f947 	bl	800386c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035de:	200f      	movs	r0, #15
 80035e0:	f000 f808 	bl	80035f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035e4:	f7ff fd6c 	bl	80030c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40022000 	.word	0x40022000

080035f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035fc:	4b12      	ldr	r3, [pc, #72]	@ (8003648 <HAL_InitTick+0x54>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b12      	ldr	r3, [pc, #72]	@ (800364c <HAL_InitTick+0x58>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	4619      	mov	r1, r3
 8003606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800360a:	fbb3 f3f1 	udiv	r3, r3, r1
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f95f 	bl	80038d6 <HAL_SYSTICK_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e00e      	b.n	8003640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d80a      	bhi.n	800363e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003628:	2200      	movs	r2, #0
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	f000 f927 	bl	8003882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003634:	4a06      	ldr	r2, [pc, #24]	@ (8003650 <HAL_InitTick+0x5c>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000008 	.word	0x20000008
 800364c:	20000010 	.word	0x20000010
 8003650:	2000000c 	.word	0x2000000c

08003654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003658:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <HAL_IncTick+0x1c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <HAL_IncTick+0x20>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4413      	add	r3, r2
 8003664:	4a03      	ldr	r2, [pc, #12]	@ (8003674 <HAL_IncTick+0x20>)
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	20000010 	.word	0x20000010
 8003674:	20000c50 	.word	0x20000c50

08003678 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return uwTick;
 800367c:	4b02      	ldr	r3, [pc, #8]	@ (8003688 <HAL_GetTick+0x10>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	20000c50 	.word	0x20000c50

0800368c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7ff fff0 	bl	8003678 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d005      	beq.n	80036b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a6:	4b0a      	ldr	r3, [pc, #40]	@ (80036d0 <HAL_Delay+0x44>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036b2:	bf00      	nop
 80036b4:	f7ff ffe0 	bl	8003678 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d8f7      	bhi.n	80036b4 <HAL_Delay+0x28>
  {
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000010 	.word	0x20000010

080036d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036f0:	4013      	ands	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003706:	4a04      	ldr	r2, [pc, #16]	@ (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	60d3      	str	r3, [r2, #12]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003720:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <__NVIC_GetPriorityGrouping+0x18>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	f003 0307 	and.w	r3, r3, #7
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	2b00      	cmp	r3, #0
 8003748:	db0b      	blt.n	8003762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	4906      	ldr	r1, [pc, #24]	@ (800376c <__NVIC_EnableIRQ+0x34>)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2001      	movs	r0, #1
 800375a:	fa00 f202 	lsl.w	r2, r0, r2
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	e000e100 	.word	0xe000e100

08003770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	6039      	str	r1, [r7, #0]
 800377a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003780:	2b00      	cmp	r3, #0
 8003782:	db0a      	blt.n	800379a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	490c      	ldr	r1, [pc, #48]	@ (80037bc <__NVIC_SetPriority+0x4c>)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	0112      	lsls	r2, r2, #4
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	440b      	add	r3, r1
 8003794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003798:	e00a      	b.n	80037b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4908      	ldr	r1, [pc, #32]	@ (80037c0 <__NVIC_SetPriority+0x50>)
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	3b04      	subs	r3, #4
 80037a8:	0112      	lsls	r2, r2, #4
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	440b      	add	r3, r1
 80037ae:	761a      	strb	r2, [r3, #24]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	e000e100 	.word	0xe000e100
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	@ 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f1c3 0307 	rsb	r3, r3, #7
 80037de:	2b04      	cmp	r3, #4
 80037e0:	bf28      	it	cs
 80037e2:	2304      	movcs	r3, #4
 80037e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3304      	adds	r3, #4
 80037ea:	2b06      	cmp	r3, #6
 80037ec:	d902      	bls.n	80037f4 <NVIC_EncodePriority+0x30>
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3b03      	subs	r3, #3
 80037f2:	e000      	b.n	80037f6 <NVIC_EncodePriority+0x32>
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f8:	f04f 32ff 	mov.w	r2, #4294967295
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43da      	mvns	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	401a      	ands	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800380c:	f04f 31ff 	mov.w	r1, #4294967295
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	43d9      	mvns	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	4313      	orrs	r3, r2
         );
}
 800381e:	4618      	mov	r0, r3
 8003820:	3724      	adds	r7, #36	@ 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3b01      	subs	r3, #1
 8003834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003838:	d301      	bcc.n	800383e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800383a:	2301      	movs	r3, #1
 800383c:	e00f      	b.n	800385e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800383e:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <SysTick_Config+0x40>)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3b01      	subs	r3, #1
 8003844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003846:	210f      	movs	r1, #15
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	f7ff ff90 	bl	8003770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <SysTick_Config+0x40>)
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003856:	4b04      	ldr	r3, [pc, #16]	@ (8003868 <SysTick_Config+0x40>)
 8003858:	2207      	movs	r2, #7
 800385a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	e000e010 	.word	0xe000e010

0800386c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ff2d 	bl	80036d4 <__NVIC_SetPriorityGrouping>
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003882:	b580      	push	{r7, lr}
 8003884:	b086      	sub	sp, #24
 8003886:	af00      	add	r7, sp, #0
 8003888:	4603      	mov	r3, r0
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003894:	f7ff ff42 	bl	800371c <__NVIC_GetPriorityGrouping>
 8003898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	6978      	ldr	r0, [r7, #20]
 80038a0:	f7ff ff90 	bl	80037c4 <NVIC_EncodePriority>
 80038a4:	4602      	mov	r2, r0
 80038a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038aa:	4611      	mov	r1, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff5f 	bl	8003770 <__NVIC_SetPriority>
}
 80038b2:	bf00      	nop
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	4603      	mov	r3, r0
 80038c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff35 	bl	8003738 <__NVIC_EnableIRQ>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ffa2 	bl	8003828 <SysTick_Config>
 80038e4:	4603      	mov	r3, r0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d008      	beq.n	8003918 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2204      	movs	r2, #4
 800390a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e020      	b.n	800395a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 020e 	bic.w	r2, r2, #14
 8003926:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f202 	lsl.w	r2, r1, r2
 8003946:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d005      	beq.n	8003988 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2204      	movs	r2, #4
 8003980:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e051      	b.n	8003a2c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 020e 	bic.w	r2, r2, #14
 8003996:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a22      	ldr	r2, [pc, #136]	@ (8003a38 <HAL_DMA_Abort_IT+0xd4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d029      	beq.n	8003a06 <HAL_DMA_Abort_IT+0xa2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a21      	ldr	r2, [pc, #132]	@ (8003a3c <HAL_DMA_Abort_IT+0xd8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d022      	beq.n	8003a02 <HAL_DMA_Abort_IT+0x9e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a40 <HAL_DMA_Abort_IT+0xdc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01a      	beq.n	80039fc <HAL_DMA_Abort_IT+0x98>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003a44 <HAL_DMA_Abort_IT+0xe0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d012      	beq.n	80039f6 <HAL_DMA_Abort_IT+0x92>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a48 <HAL_DMA_Abort_IT+0xe4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00a      	beq.n	80039f0 <HAL_DMA_Abort_IT+0x8c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <HAL_DMA_Abort_IT+0xe8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d102      	bne.n	80039ea <HAL_DMA_Abort_IT+0x86>
 80039e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039e8:	e00e      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 80039ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039ee:	e00b      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 80039f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039f4:	e008      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 80039f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039fa:	e005      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 80039fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a00:	e002      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 8003a02:	2310      	movs	r3, #16
 8003a04:	e000      	b.n	8003a08 <HAL_DMA_Abort_IT+0xa4>
 8003a06:	2301      	movs	r3, #1
 8003a08:	4a11      	ldr	r2, [pc, #68]	@ (8003a50 <HAL_DMA_Abort_IT+0xec>)
 8003a0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
    } 
  }
  return status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40020008 	.word	0x40020008
 8003a3c:	4002001c 	.word	0x4002001c
 8003a40:	40020030 	.word	0x40020030
 8003a44:	40020044 	.word	0x40020044
 8003a48:	40020058 	.word	0x40020058
 8003a4c:	4002006c 	.word	0x4002006c
 8003a50:	40020000 	.word	0x40020000

08003a54 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a62:	b2db      	uxtb	r3, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b08b      	sub	sp, #44	@ 0x2c
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a82:	e169      	b.n	8003d58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a84:	2201      	movs	r2, #1
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	f040 8158 	bne.w	8003d52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4a9a      	ldr	r2, [pc, #616]	@ (8003d10 <HAL_GPIO_Init+0x2a0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d05e      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003aac:	4a98      	ldr	r2, [pc, #608]	@ (8003d10 <HAL_GPIO_Init+0x2a0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d875      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ab2:	4a98      	ldr	r2, [pc, #608]	@ (8003d14 <HAL_GPIO_Init+0x2a4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d058      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ab8:	4a96      	ldr	r2, [pc, #600]	@ (8003d14 <HAL_GPIO_Init+0x2a4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d86f      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003abe:	4a96      	ldr	r2, [pc, #600]	@ (8003d18 <HAL_GPIO_Init+0x2a8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d052      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ac4:	4a94      	ldr	r2, [pc, #592]	@ (8003d18 <HAL_GPIO_Init+0x2a8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d869      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003aca:	4a94      	ldr	r2, [pc, #592]	@ (8003d1c <HAL_GPIO_Init+0x2ac>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04c      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ad0:	4a92      	ldr	r2, [pc, #584]	@ (8003d1c <HAL_GPIO_Init+0x2ac>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d863      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ad6:	4a92      	ldr	r2, [pc, #584]	@ (8003d20 <HAL_GPIO_Init+0x2b0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d046      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003adc:	4a90      	ldr	r2, [pc, #576]	@ (8003d20 <HAL_GPIO_Init+0x2b0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d85d      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ae2:	2b12      	cmp	r3, #18
 8003ae4:	d82a      	bhi.n	8003b3c <HAL_GPIO_Init+0xcc>
 8003ae6:	2b12      	cmp	r3, #18
 8003ae8:	d859      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003aea:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <HAL_GPIO_Init+0x80>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b6b 	.word	0x08003b6b
 8003af4:	08003b45 	.word	0x08003b45
 8003af8:	08003b57 	.word	0x08003b57
 8003afc:	08003b99 	.word	0x08003b99
 8003b00:	08003b9f 	.word	0x08003b9f
 8003b04:	08003b9f 	.word	0x08003b9f
 8003b08:	08003b9f 	.word	0x08003b9f
 8003b0c:	08003b9f 	.word	0x08003b9f
 8003b10:	08003b9f 	.word	0x08003b9f
 8003b14:	08003b9f 	.word	0x08003b9f
 8003b18:	08003b9f 	.word	0x08003b9f
 8003b1c:	08003b9f 	.word	0x08003b9f
 8003b20:	08003b9f 	.word	0x08003b9f
 8003b24:	08003b9f 	.word	0x08003b9f
 8003b28:	08003b9f 	.word	0x08003b9f
 8003b2c:	08003b9f 	.word	0x08003b9f
 8003b30:	08003b9f 	.word	0x08003b9f
 8003b34:	08003b4d 	.word	0x08003b4d
 8003b38:	08003b61 	.word	0x08003b61
 8003b3c:	4a79      	ldr	r2, [pc, #484]	@ (8003d24 <HAL_GPIO_Init+0x2b4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b42:	e02c      	b.n	8003b9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	623b      	str	r3, [r7, #32]
          break;
 8003b4a:	e029      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	3304      	adds	r3, #4
 8003b52:	623b      	str	r3, [r7, #32]
          break;
 8003b54:	e024      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	623b      	str	r3, [r7, #32]
          break;
 8003b5e:	e01f      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	330c      	adds	r3, #12
 8003b66:	623b      	str	r3, [r7, #32]
          break;
 8003b68:	e01a      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b72:	2304      	movs	r3, #4
 8003b74:	623b      	str	r3, [r7, #32]
          break;
 8003b76:	e013      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b80:	2308      	movs	r3, #8
 8003b82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	611a      	str	r2, [r3, #16]
          break;
 8003b8a:	e009      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	615a      	str	r2, [r3, #20]
          break;
 8003b96:	e003      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	623b      	str	r3, [r7, #32]
          break;
 8003b9c:	e000      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          break;
 8003b9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2bff      	cmp	r3, #255	@ 0xff
 8003ba4:	d801      	bhi.n	8003baa <HAL_GPIO_Init+0x13a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	e001      	b.n	8003bae <HAL_GPIO_Init+0x13e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2bff      	cmp	r3, #255	@ 0xff
 8003bb4:	d802      	bhi.n	8003bbc <HAL_GPIO_Init+0x14c>
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	e002      	b.n	8003bc2 <HAL_GPIO_Init+0x152>
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	3b08      	subs	r3, #8
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	210f      	movs	r1, #15
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80b1 	beq.w	8003d52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4a4c      	ldr	r2, [pc, #304]	@ (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6193      	str	r3, [r2, #24]
 8003bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c08:	4a48      	ldr	r2, [pc, #288]	@ (8003d2c <HAL_GPIO_Init+0x2bc>)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	220f      	movs	r2, #15
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a40      	ldr	r2, [pc, #256]	@ (8003d30 <HAL_GPIO_Init+0x2c0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <HAL_GPIO_Init+0x1ec>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a3f      	ldr	r2, [pc, #252]	@ (8003d34 <HAL_GPIO_Init+0x2c4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00d      	beq.n	8003c58 <HAL_GPIO_Init+0x1e8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d38 <HAL_GPIO_Init+0x2c8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d007      	beq.n	8003c54 <HAL_GPIO_Init+0x1e4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a3d      	ldr	r2, [pc, #244]	@ (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <HAL_GPIO_Init+0x1e0>
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e006      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c50:	2304      	movs	r3, #4
 8003c52:	e004      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e002      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c60:	f002 0203 	and.w	r2, r2, #3
 8003c64:	0092      	lsls	r2, r2, #2
 8003c66:	4093      	lsls	r3, r2
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c6e:	492f      	ldr	r1, [pc, #188]	@ (8003d2c <HAL_GPIO_Init+0x2bc>)
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	089b      	lsrs	r3, r3, #2
 8003c74:	3302      	adds	r3, #2
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d006      	beq.n	8003c96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c88:	4b2d      	ldr	r3, [pc, #180]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	492c      	ldr	r1, [pc, #176]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	608b      	str	r3, [r1, #8]
 8003c94:	e006      	b.n	8003ca4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c96:	4b2a      	ldr	r3, [pc, #168]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	4928      	ldr	r1, [pc, #160]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d006      	beq.n	8003cbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cb0:	4b23      	ldr	r3, [pc, #140]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	4922      	ldr	r1, [pc, #136]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60cb      	str	r3, [r1, #12]
 8003cbc:	e006      	b.n	8003ccc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003cbe:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	491e      	ldr	r1, [pc, #120]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d006      	beq.n	8003ce6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	4918      	ldr	r1, [pc, #96]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ce6:	4b16      	ldr	r3, [pc, #88]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	4914      	ldr	r1, [pc, #80]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d021      	beq.n	8003d44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d00:	4b0f      	ldr	r3, [pc, #60]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	490e      	ldr	r1, [pc, #56]	@ (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
 8003d0c:	e021      	b.n	8003d52 <HAL_GPIO_Init+0x2e2>
 8003d0e:	bf00      	nop
 8003d10:	10320000 	.word	0x10320000
 8003d14:	10310000 	.word	0x10310000
 8003d18:	10220000 	.word	0x10220000
 8003d1c:	10210000 	.word	0x10210000
 8003d20:	10120000 	.word	0x10120000
 8003d24:	10110000 	.word	0x10110000
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40010800 	.word	0x40010800
 8003d34:	40010c00 	.word	0x40010c00
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	40011400 	.word	0x40011400
 8003d40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <HAL_GPIO_Init+0x304>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	4909      	ldr	r1, [pc, #36]	@ (8003d74 <HAL_GPIO_Init+0x304>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	3301      	adds	r3, #1
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f47f ae8e 	bne.w	8003a84 <HAL_GPIO_Init+0x14>
  }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	372c      	adds	r7, #44	@ 0x2c
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	40010400 	.word	0x40010400

08003d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	887b      	ldrh	r3, [r7, #2]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e001      	b.n	8003d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	807b      	strh	r3, [r7, #2]
 8003db2:	4613      	mov	r3, r2
 8003db4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003db6:	787b      	ldrb	r3, [r7, #1]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dbc:	887a      	ldrh	r2, [r7, #2]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003dc2:	e003      	b.n	8003dcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	041a      	lsls	r2, r3, #16
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	611a      	str	r2, [r3, #16]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	460b      	mov	r3, r1
 8003de0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003de8:	887a      	ldrh	r2, [r7, #2]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4013      	ands	r3, r2
 8003dee:	041a      	lsls	r2, r3, #16
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	43d9      	mvns	r1, r3
 8003df4:	887b      	ldrh	r3, [r7, #2]
 8003df6:	400b      	ands	r3, r1
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	611a      	str	r2, [r3, #16]
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e12:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	88fb      	ldrh	r3, [r7, #6]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d006      	beq.n	8003e2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e1e:	4a05      	ldr	r2, [pc, #20]	@ (8003e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fc0e 	bl	8002648 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40010400 	.word	0x40010400

08003e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e12b      	b.n	80040a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd fc3a 	bl	80016d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	@ 0x24
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f003 fa06 	bl	80072ac <HAL_RCC_GetPCLK1Freq>
 8003ea0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4a81      	ldr	r2, [pc, #516]	@ (80040ac <HAL_I2C_Init+0x274>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d807      	bhi.n	8003ebc <HAL_I2C_Init+0x84>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a80      	ldr	r2, [pc, #512]	@ (80040b0 <HAL_I2C_Init+0x278>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	bf94      	ite	ls
 8003eb4:	2301      	movls	r3, #1
 8003eb6:	2300      	movhi	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e006      	b.n	8003eca <HAL_I2C_Init+0x92>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a7d      	ldr	r2, [pc, #500]	@ (80040b4 <HAL_I2C_Init+0x27c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	bf94      	ite	ls
 8003ec4:	2301      	movls	r3, #1
 8003ec6:	2300      	movhi	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0e7      	b.n	80040a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a78      	ldr	r2, [pc, #480]	@ (80040b8 <HAL_I2C_Init+0x280>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	0c9b      	lsrs	r3, r3, #18
 8003edc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4a6a      	ldr	r2, [pc, #424]	@ (80040ac <HAL_I2C_Init+0x274>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d802      	bhi.n	8003f0c <HAL_I2C_Init+0xd4>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	e009      	b.n	8003f20 <HAL_I2C_Init+0xe8>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	4a69      	ldr	r2, [pc, #420]	@ (80040bc <HAL_I2C_Init+0x284>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	099b      	lsrs	r3, r3, #6
 8003f1e:	3301      	adds	r3, #1
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	495c      	ldr	r1, [pc, #368]	@ (80040ac <HAL_I2C_Init+0x274>)
 8003f3c:	428b      	cmp	r3, r1
 8003f3e:	d819      	bhi.n	8003f74 <HAL_I2C_Init+0x13c>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1e59      	subs	r1, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f4e:	1c59      	adds	r1, r3, #1
 8003f50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f54:	400b      	ands	r3, r1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_I2C_Init+0x138>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1e59      	subs	r1, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f68:	3301      	adds	r3, #1
 8003f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6e:	e051      	b.n	8004014 <HAL_I2C_Init+0x1dc>
 8003f70:	2304      	movs	r3, #4
 8003f72:	e04f      	b.n	8004014 <HAL_I2C_Init+0x1dc>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d111      	bne.n	8003fa0 <HAL_I2C_Init+0x168>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1e58      	subs	r0, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	440b      	add	r3, r1
 8003f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e012      	b.n	8003fc6 <HAL_I2C_Init+0x18e>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1e58      	subs	r0, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6859      	ldr	r1, [r3, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	0099      	lsls	r1, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Init+0x196>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e022      	b.n	8004014 <HAL_I2C_Init+0x1dc>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_I2C_Init+0x1bc>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1e58      	subs	r0, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	440b      	add	r3, r1
 8003fe4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ff2:	e00f      	b.n	8004014 <HAL_I2C_Init+0x1dc>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1e58      	subs	r0, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	0099      	lsls	r1, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	fbb0 f3f3 	udiv	r3, r0, r3
 800400a:	3301      	adds	r3, #1
 800400c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004010:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	6809      	ldr	r1, [r1, #0]
 8004018:	4313      	orrs	r3, r2
 800401a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004042:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6911      	ldr	r1, [r2, #16]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68d2      	ldr	r2, [r2, #12]
 800404e:	4311      	orrs	r1, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	430b      	orrs	r3, r1
 8004056:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	000186a0 	.word	0x000186a0
 80040b0:	001e847f 	.word	0x001e847f
 80040b4:	003d08ff 	.word	0x003d08ff
 80040b8:	431bde83 	.word	0x431bde83
 80040bc:	10624dd3 	.word	0x10624dd3

080040c0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d2:	2b80      	cmp	r3, #128	@ 0x80
 80040d4:	d103      	bne.n	80040de <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2200      	movs	r2, #0
 80040dc:	611a      	str	r2, [r3, #16]
  }
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	461a      	mov	r2, r3
 80040f4:	460b      	mov	r3, r1
 80040f6:	817b      	strh	r3, [r7, #10]
 80040f8:	4613      	mov	r3, r2
 80040fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040fc:	f7ff fabc 	bl	8003678 <HAL_GetTick>
 8004100:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	f040 80e0 	bne.w	80042d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2319      	movs	r3, #25
 8004116:	2201      	movs	r2, #1
 8004118:	4970      	ldr	r1, [pc, #448]	@ (80042dc <HAL_I2C_Master_Transmit+0x1f4>)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f002 fa7a 	bl	8006614 <I2C_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004126:	2302      	movs	r3, #2
 8004128:	e0d3      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_I2C_Master_Transmit+0x50>
 8004134:	2302      	movs	r3, #2
 8004136:	e0cc      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1ea>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d007      	beq.n	800415e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800416c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2221      	movs	r2, #33	@ 0x21
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2210      	movs	r2, #16
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	893a      	ldrh	r2, [r7, #8]
 800418e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a50      	ldr	r2, [pc, #320]	@ (80042e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800419e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041a0:	8979      	ldrh	r1, [r7, #10]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	6a3a      	ldr	r2, [r7, #32]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f002 f83c 	bl	8006224 <I2C_MasterRequestWrite>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e08d      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041cc:	e066      	b.n	800429c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	6a39      	ldr	r1, [r7, #32]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f002 fb38 	bl	8006848 <I2C_WaitOnTXEFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00d      	beq.n	80041fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d107      	bne.n	80041f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e06b      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d11b      	bne.n	8004270 <HAL_I2C_Master_Transmit+0x188>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	d017      	beq.n	8004270 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	6a39      	ldr	r1, [r7, #32]
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f002 fb2f 	bl	80068d8 <I2C_WaitOnBTFFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	2b04      	cmp	r3, #4
 8004286:	d107      	bne.n	8004298 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004296:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e01a      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d194      	bne.n	80041ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e000      	b.n	80042d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042d0:	2302      	movs	r3, #2
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	00100002 	.word	0x00100002
 80042e0:	ffff0000 	.word	0xffff0000

080042e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08c      	sub	sp, #48	@ 0x30
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	461a      	mov	r2, r3
 80042f0:	460b      	mov	r3, r1
 80042f2:	817b      	strh	r3, [r7, #10]
 80042f4:	4613      	mov	r3, r2
 80042f6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042fc:	f7ff f9bc 	bl	8003678 <HAL_GetTick>
 8004300:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b20      	cmp	r3, #32
 800430c:	f040 824b 	bne.w	80047a6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2319      	movs	r3, #25
 8004316:	2201      	movs	r2, #1
 8004318:	497f      	ldr	r1, [pc, #508]	@ (8004518 <HAL_I2C_Master_Receive+0x234>)
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f002 f97a 	bl	8006614 <I2C_WaitOnFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
 8004328:	e23e      	b.n	80047a8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_I2C_Master_Receive+0x54>
 8004334:	2302      	movs	r3, #2
 8004336:	e237      	b.n	80047a8 <HAL_I2C_Master_Receive+0x4c4>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d007      	beq.n	800435e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0201 	orr.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800436c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2222      	movs	r2, #34	@ 0x22
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2210      	movs	r2, #16
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	893a      	ldrh	r2, [r7, #8]
 800438e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a5f      	ldr	r2, [pc, #380]	@ (800451c <HAL_I2C_Master_Receive+0x238>)
 800439e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043a0:	8979      	ldrh	r1, [r7, #10]
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f001 ffbe 	bl	8006328 <I2C_MasterRequestRead>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e1f8      	b.n	80047a8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d113      	bne.n	80043e6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e1cc      	b.n	8004780 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d11e      	bne.n	800442c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043fe:	b672      	cpsid	i
}
 8004400:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004426:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004428:	b662      	cpsie	i
}
 800442a:	e035      	b.n	8004498 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004430:	2b02      	cmp	r3, #2
 8004432:	d11e      	bne.n	8004472 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004442:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004444:	b672      	cpsid	i
}
 8004446:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800446c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800446e:	b662      	cpsie	i
}
 8004470:	e012      	b.n	8004498 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004498:	e172      	b.n	8004780 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449e:	2b03      	cmp	r3, #3
 80044a0:	f200 811f 	bhi.w	80046e2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d123      	bne.n	80044f4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f002 fa8b 	bl	80069cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e173      	b.n	80047a8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044f2:	e145      	b.n	8004780 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d152      	bne.n	80045a2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	2200      	movs	r2, #0
 8004504:	4906      	ldr	r1, [pc, #24]	@ (8004520 <HAL_I2C_Master_Receive+0x23c>)
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f002 f884 	bl	8006614 <I2C_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e148      	b.n	80047a8 <HAL_I2C_Master_Receive+0x4c4>
 8004516:	bf00      	nop
 8004518:	00100002 	.word	0x00100002
 800451c:	ffff0000 	.word	0xffff0000
 8004520:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004524:	b672      	cpsid	i
}
 8004526:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800456a:	b662      	cpsie	i
}
 800456c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045a0:	e0ee      	b.n	8004780 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a8:	2200      	movs	r2, #0
 80045aa:	4981      	ldr	r1, [pc, #516]	@ (80047b0 <HAL_I2C_Master_Receive+0x4cc>)
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f002 f831 	bl	8006614 <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0f5      	b.n	80047a8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045cc:	b672      	cpsid	i
}
 80045ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004602:	4b6c      	ldr	r3, [pc, #432]	@ (80047b4 <HAL_I2C_Master_Receive+0x4d0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	08db      	lsrs	r3, r3, #3
 8004608:	4a6b      	ldr	r2, [pc, #428]	@ (80047b8 <HAL_I2C_Master_Receive+0x4d4>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	0a1a      	lsrs	r2, r3, #8
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	00da      	lsls	r2, r3, #3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	3b01      	subs	r3, #1
 8004620:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d118      	bne.n	800465a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800464a:	b662      	cpsie	i
}
 800464c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e0a6      	b.n	80047a8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b04      	cmp	r3, #4
 8004666:	d1d9      	bne.n	800461c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046aa:	b662      	cpsie	i
}
 80046ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046e0:	e04e      	b.n	8004780 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f002 f970 	bl	80069cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e058      	b.n	80047a8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b04      	cmp	r3, #4
 8004734:	d124      	bne.n	8004780 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473a:	2b03      	cmp	r3, #3
 800473c:	d107      	bne.n	800474e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	f47f ae88 	bne.w	800449a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
  }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3728      	adds	r7, #40	@ 0x28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	00010004 	.word	0x00010004
 80047b4:	20000008 	.word	0x20000008
 80047b8:	14f8b589 	.word	0x14f8b589

080047bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	@ 0x28
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	460b      	mov	r3, r1
 80047ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80047cc:	f7fe ff54 	bl	8003678 <HAL_GetTick>
 80047d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	f040 8111 	bne.w	8004a06 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2319      	movs	r3, #25
 80047ea:	2201      	movs	r2, #1
 80047ec:	4988      	ldr	r1, [pc, #544]	@ (8004a10 <HAL_I2C_IsDeviceReady+0x254>)
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f001 ff10 	bl	8006614 <I2C_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80047fa:	2302      	movs	r3, #2
 80047fc:	e104      	b.n	8004a08 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_I2C_IsDeviceReady+0x50>
 8004808:	2302      	movs	r3, #2
 800480a:	e0fd      	b.n	8004a08 <HAL_I2C_IsDeviceReady+0x24c>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b01      	cmp	r3, #1
 8004820:	d007      	beq.n	8004832 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004840:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2224      	movs	r2, #36	@ 0x24
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a70      	ldr	r2, [pc, #448]	@ (8004a14 <HAL_I2C_IsDeviceReady+0x258>)
 8004854:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004864:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2200      	movs	r2, #0
 800486e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f001 fece 	bl	8006614 <I2C_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800488c:	d103      	bne.n	8004896 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004894:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e0b6      	b.n	8004a08 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800489a:	897b      	ldrh	r3, [r7, #10]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80048aa:	f7fe fee5 	bl	8003678 <HAL_GetTick>
 80048ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	bf0c      	ite	eq
 80048be:	2301      	moveq	r3, #1
 80048c0:	2300      	movne	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048de:	e025      	b.n	800492c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048e0:	f7fe feca 	bl	8003678 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d302      	bcc.n	80048f6 <HAL_I2C_IsDeviceReady+0x13a>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d103      	bne.n	80048fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	22a0      	movs	r2, #160	@ 0xa0
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b02      	cmp	r3, #2
 800490a:	bf0c      	ite	eq
 800490c:	2301      	moveq	r3, #1
 800490e:	2300      	movne	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2ba0      	cmp	r3, #160	@ 0xa0
 8004936:	d005      	beq.n	8004944 <HAL_I2C_IsDeviceReady+0x188>
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d102      	bne.n	8004944 <HAL_I2C_IsDeviceReady+0x188>
 800493e:	7dbb      	ldrb	r3, [r7, #22]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0cd      	beq.n	80048e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d129      	bne.n	80049ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004968:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	2319      	movs	r3, #25
 8004986:	2201      	movs	r2, #1
 8004988:	4921      	ldr	r1, [pc, #132]	@ (8004a10 <HAL_I2C_IsDeviceReady+0x254>)
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f001 fe42 	bl	8006614 <I2C_WaitOnFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e036      	b.n	8004a08 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e02c      	b.n	8004a08 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	2319      	movs	r3, #25
 80049ce:	2201      	movs	r2, #1
 80049d0:	490f      	ldr	r1, [pc, #60]	@ (8004a10 <HAL_I2C_IsDeviceReady+0x254>)
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f001 fe1e 	bl	8006614 <I2C_WaitOnFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e012      	b.n	8004a08 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	3301      	adds	r3, #1
 80049e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	f4ff af32 	bcc.w	8004856 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
  }
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3720      	adds	r7, #32
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	00100002 	.word	0x00100002
 8004a14:	ffff0000 	.word	0xffff0000

08004a18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a40:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d003      	beq.n	8004a50 <HAL_I2C_EV_IRQHandler+0x38>
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	2b40      	cmp	r3, #64	@ 0x40
 8004a4c:	f040 80c1 	bne.w	8004bd2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10d      	bne.n	8004a86 <HAL_I2C_EV_IRQHandler+0x6e>
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004a70:	d003      	beq.n	8004a7a <HAL_I2C_EV_IRQHandler+0x62>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004a78:	d101      	bne.n	8004a7e <HAL_I2C_EV_IRQHandler+0x66>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <HAL_I2C_EV_IRQHandler+0x68>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	f000 8132 	beq.w	8004cea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00c      	beq.n	8004aaa <HAL_I2C_EV_IRQHandler+0x92>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	0a5b      	lsrs	r3, r3, #9
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d006      	beq.n	8004aaa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f002 f820 	bl	8006ae2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fd99 	bl	80055da <I2C_Master_SB>
 8004aa8:	e092      	b.n	8004bd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	08db      	lsrs	r3, r3, #3
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_I2C_EV_IRQHandler+0xb2>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	0a5b      	lsrs	r3, r3, #9
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fe0e 	bl	80056e4 <I2C_Master_ADD10>
 8004ac8:	e082      	b.n	8004bd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	085b      	lsrs	r3, r3, #1
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_I2C_EV_IRQHandler+0xd2>
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	0a5b      	lsrs	r3, r3, #9
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fe27 	bl	8005736 <I2C_Master_ADDR>
 8004ae8:	e072      	b.n	8004bd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	089b      	lsrs	r3, r3, #2
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d03b      	beq.n	8004b6e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b04:	f000 80f3 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	09db      	lsrs	r3, r3, #7
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00f      	beq.n	8004b34 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	0a9b      	lsrs	r3, r3, #10
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	089b      	lsrs	r3, r3, #2
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f9f1 	bl	8004f14 <I2C_MasterTransmit_TXE>
 8004b32:	e04d      	b.n	8004bd0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	089b      	lsrs	r3, r3, #2
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 80d6 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	0a5b      	lsrs	r3, r3, #9
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80cf 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b50:	7bbb      	ldrb	r3, [r7, #14]
 8004b52:	2b21      	cmp	r3, #33	@ 0x21
 8004b54:	d103      	bne.n	8004b5e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa78 	bl	800504c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b5c:	e0c7      	b.n	8004cee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	f040 80c4 	bne.w	8004cee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fae6 	bl	8005138 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b6c:	e0bf      	b.n	8004cee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b7c:	f000 80b7 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00f      	beq.n	8004bac <HAL_I2C_EV_IRQHandler+0x194>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	0a9b      	lsrs	r3, r3, #10
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d009      	beq.n	8004bac <HAL_I2C_EV_IRQHandler+0x194>
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d103      	bne.n	8004bac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fb5f 	bl	8005268 <I2C_MasterReceive_RXNE>
 8004baa:	e011      	b.n	8004bd0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	089b      	lsrs	r3, r3, #2
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 809a 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2d6>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	0a5b      	lsrs	r3, r3, #9
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8093 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fc15 	bl	80053f8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bce:	e08e      	b.n	8004cee <HAL_I2C_EV_IRQHandler+0x2d6>
 8004bd0:	e08d      	b.n	8004cee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d004      	beq.n	8004be4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e007      	b.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d012      	beq.n	8004c26 <HAL_I2C_EV_IRQHandler+0x20e>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	0a5b      	lsrs	r3, r3, #9
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00c      	beq.n	8004c26 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 ffe0 	bl	8005be4 <I2C_Slave_ADDR>
 8004c24:	e066      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_I2C_EV_IRQHandler+0x22e>
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	0a5b      	lsrs	r3, r3, #9
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f001 f81a 	bl	8005c78 <I2C_Slave_STOPF>
 8004c44:	e056      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c46:	7bbb      	ldrb	r3, [r7, #14]
 8004c48:	2b21      	cmp	r3, #33	@ 0x21
 8004c4a:	d002      	beq.n	8004c52 <HAL_I2C_EV_IRQHandler+0x23a>
 8004c4c:	7bbb      	ldrb	r3, [r7, #14]
 8004c4e:	2b29      	cmp	r3, #41	@ 0x29
 8004c50:	d125      	bne.n	8004c9e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	09db      	lsrs	r3, r3, #7
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00f      	beq.n	8004c7e <HAL_I2C_EV_IRQHandler+0x266>
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	0a9b      	lsrs	r3, r3, #10
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_I2C_EV_IRQHandler+0x266>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	089b      	lsrs	r3, r3, #2
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fef8 	bl	8005a6c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c7c:	e039      	b.n	8004cf2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d033      	beq.n	8004cf2 <HAL_I2C_EV_IRQHandler+0x2da>
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	0a5b      	lsrs	r3, r3, #9
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d02d      	beq.n	8004cf2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 ff25 	bl	8005ae6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c9c:	e029      	b.n	8004cf2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	099b      	lsrs	r3, r3, #6
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00f      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x2b2>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	0a9b      	lsrs	r3, r3, #10
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d009      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x2b2>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 ff2f 	bl	8005b26 <I2C_SlaveReceive_RXNE>
 8004cc8:	e014      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	0a5b      	lsrs	r3, r3, #9
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 ff5d 	bl	8005ba2 <I2C_SlaveReceive_BTF>
 8004ce8:	e004      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004cea:	bf00      	nop
 8004cec:	e002      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cee:	bf00      	nop
 8004cf0:	e000      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cf2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b08a      	sub	sp, #40	@ 0x28
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d1c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	0a1b      	lsrs	r3, r3, #8
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d016      	beq.n	8004d58 <HAL_I2C_ER_IRQHandler+0x5e>
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d010      	beq.n	8004d58 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d46:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d56:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	0a5b      	lsrs	r3, r3, #9
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00e      	beq.n	8004d82 <HAL_I2C_ER_IRQHandler+0x88>
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	f043 0302 	orr.w	r3, r3, #2
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004d80:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	0a9b      	lsrs	r3, r3, #10
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d03f      	beq.n	8004e0e <HAL_I2C_ER_IRQHandler+0x114>
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d039      	beq.n	8004e0e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004d9a:	7efb      	ldrb	r3, [r7, #27]
 8004d9c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dac:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004db4:	7ebb      	ldrb	r3, [r7, #26]
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d112      	bne.n	8004de0 <HAL_I2C_ER_IRQHandler+0xe6>
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10f      	bne.n	8004de0 <HAL_I2C_ER_IRQHandler+0xe6>
 8004dc0:	7cfb      	ldrb	r3, [r7, #19]
 8004dc2:	2b21      	cmp	r3, #33	@ 0x21
 8004dc4:	d008      	beq.n	8004dd8 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004dc6:	7cfb      	ldrb	r3, [r7, #19]
 8004dc8:	2b29      	cmp	r3, #41	@ 0x29
 8004dca:	d005      	beq.n	8004dd8 <HAL_I2C_ER_IRQHandler+0xde>
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	2b28      	cmp	r3, #40	@ 0x28
 8004dd0:	d106      	bne.n	8004de0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b21      	cmp	r3, #33	@ 0x21
 8004dd6:	d103      	bne.n	8004de0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 f87d 	bl	8005ed8 <I2C_Slave_AF>
 8004dde:	e016      	b.n	8004e0e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004de8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	f043 0304 	orr.w	r3, r3, #4
 8004df0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004df2:	7efb      	ldrb	r3, [r7, #27]
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d002      	beq.n	8004dfe <HAL_I2C_ER_IRQHandler+0x104>
 8004df8:	7efb      	ldrb	r3, [r7, #27]
 8004dfa:	2b40      	cmp	r3, #64	@ 0x40
 8004dfc:	d107      	bne.n	8004e0e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e0c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	0adb      	lsrs	r3, r3, #11
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00e      	beq.n	8004e38 <HAL_I2C_ER_IRQHandler+0x13e>
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	0a1b      	lsrs	r3, r3, #8
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	f043 0308 	orr.w	r3, r3, #8
 8004e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004e36:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f001 f8b8 	bl	8005fc0 <I2C_ITError>
  }
}
 8004e50:	bf00      	nop
 8004e52:	3728      	adds	r7, #40	@ 0x28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
 8004eac:	4613      	mov	r3, r2
 8004eae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d150      	bne.n	8004fdc <I2C_MasterTransmit_TXE+0xc8>
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b21      	cmp	r3, #33	@ 0x21
 8004f3e:	d14d      	bne.n	8004fdc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d01d      	beq.n	8004f82 <I2C_MasterTransmit_TXE+0x6e>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d01a      	beq.n	8004f82 <I2C_MasterTransmit_TXE+0x6e>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f52:	d016      	beq.n	8004f82 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f62:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2211      	movs	r2, #17
 8004f68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff ff6c 	bl	8004e58 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f80:	e060      	b.n	8005044 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f90:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fa0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b40      	cmp	r3, #64	@ 0x40
 8004fba:	d107      	bne.n	8004fcc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ff81 	bl	8004ecc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fca:	e03b      	b.n	8005044 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ff3f 	bl	8004e58 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fda:	e033      	b.n	8005044 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b21      	cmp	r3, #33	@ 0x21
 8004fe0:	d005      	beq.n	8004fee <I2C_MasterTransmit_TXE+0xda>
 8004fe2:	7bbb      	ldrb	r3, [r7, #14]
 8004fe4:	2b40      	cmp	r3, #64	@ 0x40
 8004fe6:	d12d      	bne.n	8005044 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b22      	cmp	r3, #34	@ 0x22
 8004fec:	d12a      	bne.n	8005044 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d108      	bne.n	800500a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005006:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005008:	e01c      	b.n	8005044 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b40      	cmp	r3, #64	@ 0x40
 8005014:	d103      	bne.n	800501e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f88e 	bl	8005138 <I2C_MemoryTransmit_TXE_BTF>
}
 800501c:	e012      	b.n	8005044 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	781a      	ldrb	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005042:	e7ff      	b.n	8005044 <I2C_MasterTransmit_TXE+0x130>
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005058:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b21      	cmp	r3, #33	@ 0x21
 8005064:	d164      	bne.n	8005130 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d012      	beq.n	8005096 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	781a      	ldrb	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508a:	b29b      	uxth	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005094:	e04c      	b.n	8005130 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d01d      	beq.n	80050d8 <I2C_MasterTransmit_BTF+0x8c>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d01a      	beq.n	80050d8 <I2C_MasterTransmit_BTF+0x8c>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050a8:	d016      	beq.n	80050d8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050b8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2211      	movs	r2, #17
 80050be:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fec1 	bl	8004e58 <HAL_I2C_MasterTxCpltCallback>
}
 80050d6:	e02b      	b.n	8005130 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050e6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050f6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b40      	cmp	r3, #64	@ 0x40
 8005110:	d107      	bne.n	8005122 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff fed6 	bl	8004ecc <HAL_I2C_MemTxCpltCallback>
}
 8005120:	e006      	b.n	8005130 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff fe94 	bl	8004e58 <HAL_I2C_MasterTxCpltCallback>
}
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005146:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11d      	bne.n	800518c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005154:	2b01      	cmp	r3, #1
 8005156:	d10b      	bne.n	8005170 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800515c:	b2da      	uxtb	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005168:	1c9a      	adds	r2, r3, #2
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800516e:	e077      	b.n	8005260 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005174:	b29b      	uxth	r3, r3
 8005176:	121b      	asrs	r3, r3, #8
 8005178:	b2da      	uxtb	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800518a:	e069      	b.n	8005260 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10b      	bne.n	80051ac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005198:	b2da      	uxtb	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80051aa:	e059      	b.n	8005260 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d152      	bne.n	800525a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	2b22      	cmp	r3, #34	@ 0x22
 80051b8:	d10d      	bne.n	80051d6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051c8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80051d4:	e044      	b.n	8005260 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d015      	beq.n	800520c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b21      	cmp	r3, #33	@ 0x21
 80051e4:	d112      	bne.n	800520c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ea:	781a      	ldrb	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800520a:	e029      	b.n	8005260 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d124      	bne.n	8005260 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b21      	cmp	r3, #33	@ 0x21
 800521a:	d121      	bne.n	8005260 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800522a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800523a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff fe3a 	bl	8004ecc <HAL_I2C_MemTxCpltCallback>
}
 8005258:	e002      	b.n	8005260 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fe ff30 	bl	80040c0 <I2C_Flush_DR>
}
 8005260:	bf00      	nop
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b22      	cmp	r3, #34	@ 0x22
 800527a:	f040 80b9 	bne.w	80053f0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d921      	bls.n	80052d6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691a      	ldr	r2, [r3, #16]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b03      	cmp	r3, #3
 80052c0:	f040 8096 	bne.w	80053f0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80052d4:	e08c      	b.n	80053f0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d07f      	beq.n	80053de <I2C_MasterReceive_RXNE+0x176>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d002      	beq.n	80052ea <I2C_MasterReceive_RXNE+0x82>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d179      	bne.n	80053de <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 fb3c 	bl	8006968 <I2C_WaitOnSTOPRequestThroughIT>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d14c      	bne.n	8005390 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005304:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005314:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d10a      	bne.n	8005366 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fdbd 	bl	8004ede <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005364:	e044      	b.n	80053f0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b08      	cmp	r3, #8
 8005372:	d002      	beq.n	800537a <I2C_MasterReceive_RXNE+0x112>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b20      	cmp	r3, #32
 8005378:	d103      	bne.n	8005382 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005380:	e002      	b.n	8005388 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2212      	movs	r2, #18
 8005386:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff fd6e 	bl	8004e6a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800538e:	e02f      	b.n	80053f0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800539e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff fd8a 	bl	8004ef0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053dc:	e008      	b.n	80053f0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ec:	605a      	str	r2, [r3, #4]
}
 80053ee:	e7ff      	b.n	80053f0 <I2C_MasterReceive_RXNE+0x188>
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b04      	cmp	r3, #4
 800540e:	d11b      	bne.n	8005448 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800541e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005446:	e0c4      	b.n	80055d2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b03      	cmp	r3, #3
 8005450:	d129      	bne.n	80054a6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005460:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b04      	cmp	r3, #4
 8005466:	d00a      	beq.n	800547e <I2C_MasterReceive_BTF+0x86>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d007      	beq.n	800547e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80054a4:	e095      	b.n	80055d2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d17d      	bne.n	80055ac <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d002      	beq.n	80054bc <I2C_MasterReceive_BTF+0xc4>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d108      	bne.n	80054ce <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	e016      	b.n	80054fc <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d002      	beq.n	80054da <I2C_MasterReceive_BTF+0xe2>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d108      	bne.n	80054ec <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e007      	b.n	80054fc <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005556:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b40      	cmp	r3, #64	@ 0x40
 800556a:	d10a      	bne.n	8005582 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff fcaf 	bl	8004ede <HAL_I2C_MemRxCpltCallback>
}
 8005580:	e027      	b.n	80055d2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d002      	beq.n	8005596 <I2C_MasterReceive_BTF+0x19e>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b20      	cmp	r3, #32
 8005594:	d103      	bne.n	800559e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30
 800559c:	e002      	b.n	80055a4 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2212      	movs	r2, #18
 80055a2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff fc60 	bl	8004e6a <HAL_I2C_MasterRxCpltCallback>
}
 80055aa:	e012      	b.n	80055d2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b40      	cmp	r3, #64	@ 0x40
 80055ec:	d117      	bne.n	800561e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005606:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005608:	e067      	b.n	80056da <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560e:	b2db      	uxtb	r3, r3
 8005610:	f043 0301 	orr.w	r3, r3, #1
 8005614:	b2da      	uxtb	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	611a      	str	r2, [r3, #16]
}
 800561c:	e05d      	b.n	80056da <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005626:	d133      	bne.n	8005690 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b21      	cmp	r3, #33	@ 0x21
 8005632:	d109      	bne.n	8005648 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005638:	b2db      	uxtb	r3, r3
 800563a:	461a      	mov	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005644:	611a      	str	r2, [r3, #16]
 8005646:	e008      	b.n	800565a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	b2da      	uxtb	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <I2C_Master_SB+0x92>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005668:	2b00      	cmp	r3, #0
 800566a:	d108      	bne.n	800567e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	2b00      	cmp	r3, #0
 8005672:	d032      	beq.n	80056da <I2C_Master_SB+0x100>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	2b00      	cmp	r3, #0
 800567c:	d02d      	beq.n	80056da <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800568c:	605a      	str	r2, [r3, #4]
}
 800568e:	e024      	b.n	80056da <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10e      	bne.n	80056b6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569c:	b29b      	uxth	r3, r3
 800569e:	11db      	asrs	r3, r3, #7
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f003 0306 	and.w	r3, r3, #6
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	f063 030f 	orn	r3, r3, #15
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	611a      	str	r2, [r3, #16]
}
 80056b4:	e011      	b.n	80056da <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d10d      	bne.n	80056da <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	11db      	asrs	r3, r3, #7
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f003 0306 	and.w	r3, r3, #6
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f063 030e 	orn	r3, r3, #14
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	611a      	str	r2, [r3, #16]
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <I2C_Master_ADD10+0x26>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d108      	bne.n	800571c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00c      	beq.n	800572c <I2C_Master_ADD10+0x48>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800572a:	605a      	str	r2, [r3, #4]
  }
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr

08005736 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005736:	b480      	push	{r7}
 8005738:	b091      	sub	sp, #68	@ 0x44
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005744:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005752:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b22      	cmp	r3, #34	@ 0x22
 800575e:	f040 8174 	bne.w	8005a4a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10f      	bne.n	800578a <I2C_Master_ADDR+0x54>
 800576a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800576e:	2b40      	cmp	r3, #64	@ 0x40
 8005770:	d10b      	bne.n	800578a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005772:	2300      	movs	r3, #0
 8005774:	633b      	str	r3, [r7, #48]	@ 0x30
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	633b      	str	r3, [r7, #48]	@ 0x30
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	633b      	str	r3, [r7, #48]	@ 0x30
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	e16b      	b.n	8005a62 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578e:	2b00      	cmp	r3, #0
 8005790:	d11d      	bne.n	80057ce <I2C_Master_ADDR+0x98>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800579a:	d118      	bne.n	80057ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800579c:	2300      	movs	r3, #0
 800579e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80057cc:	e149      	b.n	8005a62 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d113      	bne.n	8005800 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d8:	2300      	movs	r3, #0
 80057da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e120      	b.n	8005a42 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b01      	cmp	r3, #1
 8005808:	f040 808a 	bne.w	8005920 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800580c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005812:	d137      	bne.n	8005884 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005822:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800582e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005832:	d113      	bne.n	800585c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005842:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005844:	2300      	movs	r3, #0
 8005846:	627b      	str	r3, [r7, #36]	@ 0x24
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	e0f2      	b.n	8005a42 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585c:	2300      	movs	r3, #0
 800585e:	623b      	str	r3, [r7, #32]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	623b      	str	r3, [r7, #32]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	623b      	str	r3, [r7, #32]
 8005870:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e0de      	b.n	8005a42 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005886:	2b08      	cmp	r3, #8
 8005888:	d02e      	beq.n	80058e8 <I2C_Master_ADDR+0x1b2>
 800588a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588c:	2b20      	cmp	r3, #32
 800588e:	d02b      	beq.n	80058e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005892:	2b12      	cmp	r3, #18
 8005894:	d102      	bne.n	800589c <I2C_Master_ADDR+0x166>
 8005896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005898:	2b01      	cmp	r3, #1
 800589a:	d125      	bne.n	80058e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d00e      	beq.n	80058c0 <I2C_Master_ADDR+0x18a>
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d00b      	beq.n	80058c0 <I2C_Master_ADDR+0x18a>
 80058a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d008      	beq.n	80058c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e007      	b.n	80058d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d0:	2300      	movs	r3, #0
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	61fb      	str	r3, [r7, #28]
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	e0ac      	b.n	8005a42 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f8:	2300      	movs	r3, #0
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e090      	b.n	8005a42 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d158      	bne.n	80059dc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592c:	2b04      	cmp	r3, #4
 800592e:	d021      	beq.n	8005974 <I2C_Master_ADDR+0x23e>
 8005930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005932:	2b02      	cmp	r3, #2
 8005934:	d01e      	beq.n	8005974 <I2C_Master_ADDR+0x23e>
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	2b10      	cmp	r3, #16
 800593a:	d01b      	beq.n	8005974 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800594a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	e012      	b.n	800599a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005982:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059a8:	d14b      	bne.n	8005a42 <I2C_Master_ADDR+0x30c>
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059b0:	d00b      	beq.n	80059ca <I2C_Master_ADDR+0x294>
 80059b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d008      	beq.n	80059ca <I2C_Master_ADDR+0x294>
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d005      	beq.n	80059ca <I2C_Master_ADDR+0x294>
 80059be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d002      	beq.n	80059ca <I2C_Master_ADDR+0x294>
 80059c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d13b      	bne.n	8005a42 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	e032      	b.n	8005a42 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059ea:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059fa:	d117      	bne.n	8005a2c <I2C_Master_ADDR+0x2f6>
 80059fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a02:	d00b      	beq.n	8005a1c <I2C_Master_ADDR+0x2e6>
 8005a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d008      	beq.n	8005a1c <I2C_Master_ADDR+0x2e6>
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d005      	beq.n	8005a1c <I2C_Master_ADDR+0x2e6>
 8005a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a12:	2b10      	cmp	r3, #16
 8005a14:	d002      	beq.n	8005a1c <I2C_Master_ADDR+0x2e6>
 8005a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d107      	bne.n	8005a2c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a2a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a48:	e00b      	b.n	8005a62 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	60bb      	str	r3, [r7, #8]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
}
 8005a60:	e7ff      	b.n	8005a62 <I2C_Master_ADDR+0x32c>
 8005a62:	bf00      	nop
 8005a64:	3744      	adds	r7, #68	@ 0x44
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d02b      	beq.n	8005ade <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d114      	bne.n	8005ade <I2C_SlaveTransmit_TXE+0x72>
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	2b29      	cmp	r3, #41	@ 0x29
 8005ab8:	d111      	bne.n	8005ade <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ac8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2221      	movs	r2, #33	@ 0x21
 8005ace:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2228      	movs	r2, #40	@ 0x28
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff f9cf 	bl	8004e7c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ade:	bf00      	nop
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d011      	beq.n	8005b1c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02c      	beq.n	8005b9a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691a      	ldr	r2, [r3, #16]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d114      	bne.n	8005b9a <I2C_SlaveReceive_RXNE+0x74>
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
 8005b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b74:	d111      	bne.n	8005b9a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b84:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2222      	movs	r2, #34	@ 0x22
 8005b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2228      	movs	r2, #40	@ 0x28
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff f97a 	bl	8004e8e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d012      	beq.n	8005bda <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691a      	ldr	r2, [r3, #16]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005bfe:	2b28      	cmp	r3, #40	@ 0x28
 8005c00:	d127      	bne.n	8005c52 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c10:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	089b      	lsrs	r3, r3, #2
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	09db      	lsrs	r3, r3, #7
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d103      	bne.n	8005c36 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	81bb      	strh	r3, [r7, #12]
 8005c34:	e002      	b.n	8005c3c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c44:	89ba      	ldrh	r2, [r7, #12]
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff f928 	bl	8004ea0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c50:	e00e      	b.n	8005c70 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c52:	2300      	movs	r3, #0
 8005c54:	60bb      	str	r3, [r7, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	60bb      	str	r3, [r7, #8]
 8005c66:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c86:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c96:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60bb      	str	r3, [r7, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	60bb      	str	r3, [r7, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cd4:	d172      	bne.n	8005dbc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2b22      	cmp	r3, #34	@ 0x22
 8005cda:	d002      	beq.n	8005ce2 <I2C_Slave_STOPF+0x6a>
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ce0:	d135      	bne.n	8005d4e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfe:	f043 0204 	orr.w	r2, r3, #4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fd fe9a 	bl	8003a54 <HAL_DMA_GetState>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d049      	beq.n	8005dba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2a:	4a69      	ldr	r2, [pc, #420]	@ (8005ed0 <I2C_Slave_STOPF+0x258>)
 8005d2c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fd fe16 	bl	8003964 <HAL_DMA_Abort_IT>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d03d      	beq.n	8005dba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d4c:	e035      	b.n	8005dba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6a:	f043 0204 	orr.w	r2, r3, #4
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fd fe64 	bl	8003a54 <HAL_DMA_GetState>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d014      	beq.n	8005dbc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d96:	4a4e      	ldr	r2, [pc, #312]	@ (8005ed0 <I2C_Slave_STOPF+0x258>)
 8005d98:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fd fde0 	bl	8003964 <HAL_DMA_Abort_IT>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d008      	beq.n	8005dbc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005db4:	4610      	mov	r0, r2
 8005db6:	4798      	blx	r3
 8005db8:	e000      	b.n	8005dbc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d03e      	beq.n	8005e44 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d112      	bne.n	8005dfa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e04:	2b40      	cmp	r3, #64	@ 0x40
 8005e06:	d112      	bne.n	8005e2e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	f043 0204 	orr.w	r2, r3, #4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f8b7 	bl	8005fc0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e52:	e039      	b.n	8005ec8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e58:	d109      	bne.n	8005e6e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2228      	movs	r2, #40	@ 0x28
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff f810 	bl	8004e8e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b28      	cmp	r3, #40	@ 0x28
 8005e78:	d111      	bne.n	8005e9e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a15      	ldr	r2, [pc, #84]	@ (8005ed4 <I2C_Slave_STOPF+0x25c>)
 8005e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff f80f 	bl	8004eba <HAL_I2C_ListenCpltCallback>
}
 8005e9c:	e014      	b.n	8005ec8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea2:	2b22      	cmp	r3, #34	@ 0x22
 8005ea4:	d002      	beq.n	8005eac <I2C_Slave_STOPF+0x234>
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	2b22      	cmp	r3, #34	@ 0x22
 8005eaa:	d10d      	bne.n	8005ec8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fe ffe3 	bl	8004e8e <HAL_I2C_SlaveRxCpltCallback>
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	080064c5 	.word	0x080064c5
 8005ed4:	ffff0000 	.word	0xffff0000

08005ed8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d002      	beq.n	8005efa <I2C_Slave_AF+0x22>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d129      	bne.n	8005f4e <I2C_Slave_AF+0x76>
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b28      	cmp	r3, #40	@ 0x28
 8005efe:	d126      	bne.n	8005f4e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a2e      	ldr	r2, [pc, #184]	@ (8005fbc <I2C_Slave_AF+0xe4>)
 8005f04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f14:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f1e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f2e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fe ffb7 	bl	8004eba <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005f4c:	e031      	b.n	8005fb2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b21      	cmp	r3, #33	@ 0x21
 8005f52:	d129      	bne.n	8005fa8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a19      	ldr	r2, [pc, #100]	@ (8005fbc <I2C_Slave_AF+0xe4>)
 8005f58:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2221      	movs	r2, #33	@ 0x21
 8005f5e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f7e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f88:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f98:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fe f890 	bl	80040c0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7fe ff6b 	bl	8004e7c <HAL_I2C_SlaveTxCpltCallback>
}
 8005fa6:	e004      	b.n	8005fb2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fb0:	615a      	str	r2, [r3, #20]
}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	ffff0000 	.word	0xffff0000

08005fc0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005fd8:	7bbb      	ldrb	r3, [r7, #14]
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d002      	beq.n	8005fe4 <I2C_ITError+0x24>
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
 8005fe0:	2b40      	cmp	r3, #64	@ 0x40
 8005fe2:	d10a      	bne.n	8005ffa <I2C_ITError+0x3a>
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	2b22      	cmp	r3, #34	@ 0x22
 8005fe8:	d107      	bne.n	8005ffa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ff8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006000:	2b28      	cmp	r3, #40	@ 0x28
 8006002:	d107      	bne.n	8006014 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2228      	movs	r2, #40	@ 0x28
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006012:	e015      	b.n	8006040 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800601e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006022:	d00a      	beq.n	800603a <I2C_ITError+0x7a>
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	2b60      	cmp	r3, #96	@ 0x60
 8006028:	d007      	beq.n	800603a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800604a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800604e:	d162      	bne.n	8006116 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800605e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006064:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b01      	cmp	r3, #1
 800606c:	d020      	beq.n	80060b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006072:	4a6a      	ldr	r2, [pc, #424]	@ (800621c <I2C_ITError+0x25c>)
 8006074:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800607a:	4618      	mov	r0, r3
 800607c:	f7fd fc72 	bl	8003964 <HAL_DMA_Abort_IT>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8089 	beq.w	800619a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80060aa:	4610      	mov	r0, r2
 80060ac:	4798      	blx	r3
 80060ae:	e074      	b.n	800619a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b4:	4a59      	ldr	r2, [pc, #356]	@ (800621c <I2C_ITError+0x25c>)
 80060b6:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fd fc51 	bl	8003964 <HAL_DMA_Abort_IT>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d068      	beq.n	800619a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d2:	2b40      	cmp	r3, #64	@ 0x40
 80060d4:	d10b      	bne.n	80060ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0201 	bic.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006110:	4610      	mov	r0, r2
 8006112:	4798      	blx	r3
 8006114:	e041      	b.n	800619a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b60      	cmp	r3, #96	@ 0x60
 8006120:	d125      	bne.n	800616e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613a:	2b40      	cmp	r3, #64	@ 0x40
 800613c:	d10b      	bne.n	8006156 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0201 	bic.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fe fecb 	bl	8004f02 <HAL_I2C_AbortCpltCallback>
 800616c:	e015      	b.n	800619a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006178:	2b40      	cmp	r3, #64	@ 0x40
 800617a:	d10b      	bne.n	8006194 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7fe feab 	bl	8004ef0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10e      	bne.n	80061c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d109      	bne.n	80061c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80061d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d113      	bne.n	8006214 <I2C_ITError+0x254>
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	2b28      	cmp	r3, #40	@ 0x28
 80061f0:	d110      	bne.n	8006214 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006220 <I2C_ITError+0x260>)
 80061f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fe fe53 	bl	8004eba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006214:	bf00      	nop
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	080064c5 	.word	0x080064c5
 8006220:	ffff0000 	.word	0xffff0000

08006224 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	460b      	mov	r3, r1
 8006232:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006238:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b08      	cmp	r3, #8
 800623e:	d006      	beq.n	800624e <I2C_MasterRequestWrite+0x2a>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d003      	beq.n	800624e <I2C_MasterRequestWrite+0x2a>
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800624c:	d108      	bne.n	8006260 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e00b      	b.n	8006278 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006264:	2b12      	cmp	r3, #18
 8006266:	d107      	bne.n	8006278 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006276:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f9c5 	bl	8006614 <I2C_WaitOnFlagUntilTimeout>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00d      	beq.n	80062ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800629e:	d103      	bne.n	80062a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e035      	b.n	8006318 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062b4:	d108      	bne.n	80062c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062b6:	897b      	ldrh	r3, [r7, #10]
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062c4:	611a      	str	r2, [r3, #16]
 80062c6:	e01b      	b.n	8006300 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80062c8:	897b      	ldrh	r3, [r7, #10]
 80062ca:	11db      	asrs	r3, r3, #7
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	f003 0306 	and.w	r3, r3, #6
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f063 030f 	orn	r3, r3, #15
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	490e      	ldr	r1, [pc, #56]	@ (8006320 <I2C_MasterRequestWrite+0xfc>)
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fa0e 	bl	8006708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e010      	b.n	8006318 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80062f6:	897b      	ldrh	r3, [r7, #10]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	4907      	ldr	r1, [pc, #28]	@ (8006324 <I2C_MasterRequestWrite+0x100>)
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 f9fe 	bl	8006708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	00010008 	.word	0x00010008
 8006324:	00010002 	.word	0x00010002

08006328 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af02      	add	r7, sp, #8
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	607a      	str	r2, [r7, #4]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	460b      	mov	r3, r1
 8006336:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800634c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b08      	cmp	r3, #8
 8006352:	d006      	beq.n	8006362 <I2C_MasterRequestRead+0x3a>
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d003      	beq.n	8006362 <I2C_MasterRequestRead+0x3a>
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006360:	d108      	bne.n	8006374 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e00b      	b.n	800638c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006378:	2b11      	cmp	r3, #17
 800637a:	d107      	bne.n	800638c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800638a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f93b 	bl	8006614 <I2C_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00d      	beq.n	80063c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063b2:	d103      	bne.n	80063bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e079      	b.n	80064b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063c8:	d108      	bne.n	80063dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063ca:	897b      	ldrh	r3, [r7, #10]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f043 0301 	orr.w	r3, r3, #1
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	611a      	str	r2, [r3, #16]
 80063da:	e05f      	b.n	800649c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80063dc:	897b      	ldrh	r3, [r7, #10]
 80063de:	11db      	asrs	r3, r3, #7
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 0306 	and.w	r3, r3, #6
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	f063 030f 	orn	r3, r3, #15
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	4930      	ldr	r1, [pc, #192]	@ (80064bc <I2C_MasterRequestRead+0x194>)
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f984 	bl	8006708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e054      	b.n	80064b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800640a:	897b      	ldrh	r3, [r7, #10]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	4929      	ldr	r1, [pc, #164]	@ (80064c0 <I2C_MasterRequestRead+0x198>)
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 f974 	bl	8006708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e044      	b.n	80064b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800644e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f8d9 	bl	8006614 <I2C_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00d      	beq.n	8006484 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006476:	d103      	bne.n	8006480 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800647e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e017      	b.n	80064b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006484:	897b      	ldrh	r3, [r7, #10]
 8006486:	11db      	asrs	r3, r3, #7
 8006488:	b2db      	uxtb	r3, r3
 800648a:	f003 0306 	and.w	r3, r3, #6
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f063 030e 	orn	r3, r3, #14
 8006494:	b2da      	uxtb	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4907      	ldr	r1, [pc, #28]	@ (80064c0 <I2C_MasterRequestRead+0x198>)
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f930 	bl	8006708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	00010008 	.word	0x00010008
 80064c0:	00010002 	.word	0x00010002

080064c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80064de:	4b4b      	ldr	r3, [pc, #300]	@ (800660c <I2C_DMAAbort+0x148>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	08db      	lsrs	r3, r3, #3
 80064e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006610 <I2C_DMAAbort+0x14c>)
 80064e6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ea:	0a1a      	lsrs	r2, r3, #8
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	00da      	lsls	r2, r3, #3
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006502:	f043 0220 	orr.w	r2, r3, #32
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800650a:	e00a      	b.n	8006522 <I2C_DMAAbort+0x5e>
    }
    count--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3b01      	subs	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800651c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006520:	d0ea      	beq.n	80064f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800652e:	2200      	movs	r2, #0
 8006530:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653e:	2200      	movs	r2, #0
 8006540:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006550:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2200      	movs	r2, #0
 8006556:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006564:	2200      	movs	r2, #0
 8006566:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006574:	2200      	movs	r2, #0
 8006576:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b60      	cmp	r3, #96	@ 0x60
 8006592:	d10e      	bne.n	80065b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2200      	movs	r2, #0
 80065a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80065aa:	6978      	ldr	r0, [r7, #20]
 80065ac:	f7fe fca9 	bl	8004f02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065b0:	e027      	b.n	8006602 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065b2:	7cfb      	ldrb	r3, [r7, #19]
 80065b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065b8:	2b28      	cmp	r3, #40	@ 0x28
 80065ba:	d117      	bne.n	80065ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2228      	movs	r2, #40	@ 0x28
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80065ea:	e007      	b.n	80065fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80065fc:	6978      	ldr	r0, [r7, #20]
 80065fe:	f7fe fc77 	bl	8004ef0 <HAL_I2C_ErrorCallback>
}
 8006602:	bf00      	nop
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20000008 	.word	0x20000008
 8006610:	14f8b589 	.word	0x14f8b589

08006614 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	603b      	str	r3, [r7, #0]
 8006620:	4613      	mov	r3, r2
 8006622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006624:	e048      	b.n	80066b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662c:	d044      	beq.n	80066b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662e:	f7fd f823 	bl	8003678 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d302      	bcc.n	8006644 <I2C_WaitOnFlagUntilTimeout+0x30>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d139      	bne.n	80066b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	0c1b      	lsrs	r3, r3, #16
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b01      	cmp	r3, #1
 800664c:	d10d      	bne.n	800666a <I2C_WaitOnFlagUntilTimeout+0x56>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	43da      	mvns	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	4013      	ands	r3, r2
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	bf0c      	ite	eq
 8006660:	2301      	moveq	r3, #1
 8006662:	2300      	movne	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	e00c      	b.n	8006684 <I2C_WaitOnFlagUntilTimeout+0x70>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	43da      	mvns	r2, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4013      	ands	r3, r2
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	bf0c      	ite	eq
 800667c:	2301      	moveq	r3, #1
 800667e:	2300      	movne	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	79fb      	ldrb	r3, [r7, #7]
 8006686:	429a      	cmp	r2, r3
 8006688:	d116      	bne.n	80066b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a4:	f043 0220 	orr.w	r2, r3, #32
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e023      	b.n	8006700 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	0c1b      	lsrs	r3, r3, #16
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d10d      	bne.n	80066de <I2C_WaitOnFlagUntilTimeout+0xca>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	43da      	mvns	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4013      	ands	r3, r2
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bf0c      	ite	eq
 80066d4:	2301      	moveq	r3, #1
 80066d6:	2300      	movne	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	e00c      	b.n	80066f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	43da      	mvns	r2, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4013      	ands	r3, r2
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	bf0c      	ite	eq
 80066f0:	2301      	moveq	r3, #1
 80066f2:	2300      	movne	r3, #0
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d093      	beq.n	8006626 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006716:	e071      	b.n	80067fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006726:	d123      	bne.n	8006770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006736:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675c:	f043 0204 	orr.w	r2, r3, #4
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e067      	b.n	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d041      	beq.n	80067fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006778:	f7fc ff7e 	bl	8003678 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d302      	bcc.n	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d136      	bne.n	80067fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b01      	cmp	r3, #1
 8006796:	d10c      	bne.n	80067b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	43da      	mvns	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4013      	ands	r3, r2
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	bf14      	ite	ne
 80067aa:	2301      	movne	r3, #1
 80067ac:	2300      	moveq	r3, #0
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	e00b      	b.n	80067ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	43da      	mvns	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4013      	ands	r3, r2
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bf14      	ite	ne
 80067c4:	2301      	movne	r3, #1
 80067c6:	2300      	moveq	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d016      	beq.n	80067fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e8:	f043 0220 	orr.w	r2, r3, #32
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e021      	b.n	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	0c1b      	lsrs	r3, r3, #16
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b01      	cmp	r3, #1
 8006804:	d10c      	bne.n	8006820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	43da      	mvns	r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	4013      	ands	r3, r2
 8006812:	b29b      	uxth	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	bf14      	ite	ne
 8006818:	2301      	movne	r3, #1
 800681a:	2300      	moveq	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	e00b      	b.n	8006838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	43da      	mvns	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4013      	ands	r3, r2
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	bf14      	ite	ne
 8006832:	2301      	movne	r3, #1
 8006834:	2300      	moveq	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	f47f af6d 	bne.w	8006718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006854:	e034      	b.n	80068c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f915 	bl	8006a86 <I2C_IsAcknowledgeFailed>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e034      	b.n	80068d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686c:	d028      	beq.n	80068c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686e:	f7fc ff03 	bl	8003678 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	429a      	cmp	r2, r3
 800687c:	d302      	bcc.n	8006884 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11d      	bne.n	80068c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800688e:	2b80      	cmp	r3, #128	@ 0x80
 8006890:	d016      	beq.n	80068c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e007      	b.n	80068d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ca:	2b80      	cmp	r3, #128	@ 0x80
 80068cc:	d1c3      	bne.n	8006856 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068e4:	e034      	b.n	8006950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 f8cd 	bl	8006a86 <I2C_IsAcknowledgeFailed>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e034      	b.n	8006960 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fc:	d028      	beq.n	8006950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068fe:	f7fc febb 	bl	8003678 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	429a      	cmp	r2, r3
 800690c:	d302      	bcc.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d11d      	bne.n	8006950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b04      	cmp	r3, #4
 8006920:	d016      	beq.n	8006950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693c:	f043 0220 	orr.w	r2, r3, #32
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e007      	b.n	8006960 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b04      	cmp	r3, #4
 800695c:	d1c3      	bne.n	80068e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006974:	4b13      	ldr	r3, [pc, #76]	@ (80069c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	08db      	lsrs	r3, r3, #3
 800697a:	4a13      	ldr	r2, [pc, #76]	@ (80069c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800697c:	fba2 2303 	umull	r2, r3, r2, r3
 8006980:	0a1a      	lsrs	r2, r3, #8
 8006982:	4613      	mov	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3b01      	subs	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d107      	bne.n	80069a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699a:	f043 0220 	orr.w	r2, r3, #32
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e008      	b.n	80069b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b4:	d0e9      	beq.n	800698a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20000008 	.word	0x20000008
 80069c8:	14f8b589 	.word	0x14f8b589

080069cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069d8:	e049      	b.n	8006a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	f003 0310 	and.w	r3, r3, #16
 80069e4:	2b10      	cmp	r3, #16
 80069e6:	d119      	bne.n	8006a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f06f 0210 	mvn.w	r2, #16
 80069f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e030      	b.n	8006a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1c:	f7fc fe2c 	bl	8003678 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d302      	bcc.n	8006a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d11d      	bne.n	8006a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3c:	2b40      	cmp	r3, #64	@ 0x40
 8006a3e:	d016      	beq.n	8006a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5a:	f043 0220 	orr.w	r2, r3, #32
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e007      	b.n	8006a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a78:	2b40      	cmp	r3, #64	@ 0x40
 8006a7a:	d1ae      	bne.n	80069da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a9c:	d11b      	bne.n	8006ad6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006aa6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac2:	f043 0204 	orr.w	r2, r3, #4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr

08006ae2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aee:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006af2:	d103      	bne.n	8006afc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006afa:	e007      	b.n	8006b0c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b00:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006b04:	d102      	bne.n	8006b0c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2208      	movs	r2, #8
 8006b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr
	...

08006b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e272      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 8087 	beq.w	8006c46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b38:	4b92      	ldr	r3, [pc, #584]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f003 030c 	and.w	r3, r3, #12
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d00c      	beq.n	8006b5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b44:	4b8f      	ldr	r3, [pc, #572]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f003 030c 	and.w	r3, r3, #12
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d112      	bne.n	8006b76 <HAL_RCC_OscConfig+0x5e>
 8006b50:	4b8c      	ldr	r3, [pc, #560]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b5c:	d10b      	bne.n	8006b76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b5e:	4b89      	ldr	r3, [pc, #548]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d06c      	beq.n	8006c44 <HAL_RCC_OscConfig+0x12c>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d168      	bne.n	8006c44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e24c      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b7e:	d106      	bne.n	8006b8e <HAL_RCC_OscConfig+0x76>
 8006b80:	4b80      	ldr	r3, [pc, #512]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a7f      	ldr	r2, [pc, #508]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	e02e      	b.n	8006bec <HAL_RCC_OscConfig+0xd4>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10c      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x98>
 8006b96:	4b7b      	ldr	r3, [pc, #492]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a7a      	ldr	r2, [pc, #488]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	4b78      	ldr	r3, [pc, #480]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a77      	ldr	r2, [pc, #476]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006ba8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	e01d      	b.n	8006bec <HAL_RCC_OscConfig+0xd4>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_RCC_OscConfig+0xbc>
 8006bba:	4b72      	ldr	r3, [pc, #456]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a71      	ldr	r2, [pc, #452]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a6e      	ldr	r2, [pc, #440]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e00b      	b.n	8006bec <HAL_RCC_OscConfig+0xd4>
 8006bd4:	4b6b      	ldr	r3, [pc, #428]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a6a      	ldr	r2, [pc, #424]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	4b68      	ldr	r3, [pc, #416]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a67      	ldr	r2, [pc, #412]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d013      	beq.n	8006c1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf4:	f7fc fd40 	bl	8003678 <HAL_GetTick>
 8006bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bfc:	f7fc fd3c 	bl	8003678 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b64      	cmp	r3, #100	@ 0x64
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e200      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0f0      	beq.n	8006bfc <HAL_RCC_OscConfig+0xe4>
 8006c1a:	e014      	b.n	8006c46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1c:	f7fc fd2c 	bl	8003678 <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c24:	f7fc fd28 	bl	8003678 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b64      	cmp	r3, #100	@ 0x64
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e1ec      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c36:	4b53      	ldr	r3, [pc, #332]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f0      	bne.n	8006c24 <HAL_RCC_OscConfig+0x10c>
 8006c42:	e000      	b.n	8006c46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d063      	beq.n	8006d1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c52:	4b4c      	ldr	r3, [pc, #304]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f003 030c 	and.w	r3, r3, #12
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c5e:	4b49      	ldr	r3, [pc, #292]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f003 030c 	and.w	r3, r3, #12
 8006c66:	2b08      	cmp	r3, #8
 8006c68:	d11c      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x18c>
 8006c6a:	4b46      	ldr	r3, [pc, #280]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d116      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c76:	4b43      	ldr	r3, [pc, #268]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <HAL_RCC_OscConfig+0x176>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d001      	beq.n	8006c8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e1c0      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	4939      	ldr	r1, [pc, #228]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ca2:	e03a      	b.n	8006d1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d020      	beq.n	8006cee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cac:	4b36      	ldr	r3, [pc, #216]	@ (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb2:	f7fc fce1 	bl	8003678 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cba:	f7fc fcdd 	bl	8003678 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e1a1      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0f0      	beq.n	8006cba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	4927      	ldr	r1, [pc, #156]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	600b      	str	r3, [r1, #0]
 8006cec:	e015      	b.n	8006d1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cee:	4b26      	ldr	r3, [pc, #152]	@ (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf4:	f7fc fcc0 	bl	8003678 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cfc:	f7fc fcbc 	bl	8003678 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e180      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1f0      	bne.n	8006cfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0308 	and.w	r3, r3, #8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d03a      	beq.n	8006d9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d019      	beq.n	8006d62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d2e:	4b17      	ldr	r3, [pc, #92]	@ (8006d8c <HAL_RCC_OscConfig+0x274>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d34:	f7fc fca0 	bl	8003678 <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d3c:	f7fc fc9c 	bl	8003678 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e160      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d84 <HAL_RCC_OscConfig+0x26c>)
 8006d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d5a:	2001      	movs	r0, #1
 8006d5c:	f000 face 	bl	80072fc <RCC_Delay>
 8006d60:	e01c      	b.n	8006d9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d62:	4b0a      	ldr	r3, [pc, #40]	@ (8006d8c <HAL_RCC_OscConfig+0x274>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d68:	f7fc fc86 	bl	8003678 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d6e:	e00f      	b.n	8006d90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d70:	f7fc fc82 	bl	8003678 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d908      	bls.n	8006d90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e146      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
 8006d82:	bf00      	nop
 8006d84:	40021000 	.word	0x40021000
 8006d88:	42420000 	.word	0x42420000
 8006d8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d90:	4b92      	ldr	r3, [pc, #584]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e9      	bne.n	8006d70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 80a6 	beq.w	8006ef6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006daa:	2300      	movs	r3, #0
 8006dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dae:	4b8b      	ldr	r3, [pc, #556]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10d      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dba:	4b88      	ldr	r3, [pc, #544]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	4a87      	ldr	r2, [pc, #540]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dc4:	61d3      	str	r3, [r2, #28]
 8006dc6:	4b85      	ldr	r3, [pc, #532]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dce:	60bb      	str	r3, [r7, #8]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd6:	4b82      	ldr	r3, [pc, #520]	@ (8006fe0 <HAL_RCC_OscConfig+0x4c8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d118      	bne.n	8006e14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006de2:	4b7f      	ldr	r3, [pc, #508]	@ (8006fe0 <HAL_RCC_OscConfig+0x4c8>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a7e      	ldr	r2, [pc, #504]	@ (8006fe0 <HAL_RCC_OscConfig+0x4c8>)
 8006de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dee:	f7fc fc43 	bl	8003678 <HAL_GetTick>
 8006df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df4:	e008      	b.n	8006e08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006df6:	f7fc fc3f 	bl	8003678 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	2b64      	cmp	r3, #100	@ 0x64
 8006e02:	d901      	bls.n	8006e08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e103      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e08:	4b75      	ldr	r3, [pc, #468]	@ (8006fe0 <HAL_RCC_OscConfig+0x4c8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0f0      	beq.n	8006df6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d106      	bne.n	8006e2a <HAL_RCC_OscConfig+0x312>
 8006e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	4a6e      	ldr	r2, [pc, #440]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e22:	f043 0301 	orr.w	r3, r3, #1
 8006e26:	6213      	str	r3, [r2, #32]
 8006e28:	e02d      	b.n	8006e86 <HAL_RCC_OscConfig+0x36e>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10c      	bne.n	8006e4c <HAL_RCC_OscConfig+0x334>
 8006e32:	4b6a      	ldr	r3, [pc, #424]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	4a69      	ldr	r2, [pc, #420]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	6213      	str	r3, [r2, #32]
 8006e3e:	4b67      	ldr	r3, [pc, #412]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	4a66      	ldr	r2, [pc, #408]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e44:	f023 0304 	bic.w	r3, r3, #4
 8006e48:	6213      	str	r3, [r2, #32]
 8006e4a:	e01c      	b.n	8006e86 <HAL_RCC_OscConfig+0x36e>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	2b05      	cmp	r3, #5
 8006e52:	d10c      	bne.n	8006e6e <HAL_RCC_OscConfig+0x356>
 8006e54:	4b61      	ldr	r3, [pc, #388]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	4a60      	ldr	r2, [pc, #384]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e5a:	f043 0304 	orr.w	r3, r3, #4
 8006e5e:	6213      	str	r3, [r2, #32]
 8006e60:	4b5e      	ldr	r3, [pc, #376]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	4a5d      	ldr	r2, [pc, #372]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e66:	f043 0301 	orr.w	r3, r3, #1
 8006e6a:	6213      	str	r3, [r2, #32]
 8006e6c:	e00b      	b.n	8006e86 <HAL_RCC_OscConfig+0x36e>
 8006e6e:	4b5b      	ldr	r3, [pc, #364]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	4a5a      	ldr	r2, [pc, #360]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	6213      	str	r3, [r2, #32]
 8006e7a:	4b58      	ldr	r3, [pc, #352]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	4a57      	ldr	r2, [pc, #348]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006e80:	f023 0304 	bic.w	r3, r3, #4
 8006e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d015      	beq.n	8006eba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e8e:	f7fc fbf3 	bl	8003678 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e94:	e00a      	b.n	8006eac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e96:	f7fc fbef 	bl	8003678 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e0b1      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eac:	4b4b      	ldr	r3, [pc, #300]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0ee      	beq.n	8006e96 <HAL_RCC_OscConfig+0x37e>
 8006eb8:	e014      	b.n	8006ee4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eba:	f7fc fbdd 	bl	8003678 <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ec0:	e00a      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec2:	f7fc fbd9 	bl	8003678 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e09b      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ed8:	4b40      	ldr	r3, [pc, #256]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1ee      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d105      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eea:	4b3c      	ldr	r3, [pc, #240]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	4a3b      	ldr	r2, [pc, #236]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ef4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 8087 	beq.w	800700e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f00:	4b36      	ldr	r3, [pc, #216]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f003 030c 	and.w	r3, r3, #12
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d061      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d146      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f14:	4b33      	ldr	r3, [pc, #204]	@ (8006fe4 <HAL_RCC_OscConfig+0x4cc>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1a:	f7fc fbad 	bl	8003678 <HAL_GetTick>
 8006f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f22:	f7fc fba9 	bl	8003678 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e06d      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f34:	4b29      	ldr	r3, [pc, #164]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1f0      	bne.n	8006f22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f48:	d108      	bne.n	8006f5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f4a:	4b24      	ldr	r3, [pc, #144]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	4921      	ldr	r1, [pc, #132]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a19      	ldr	r1, [r3, #32]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	491b      	ldr	r1, [pc, #108]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f74:	4b1b      	ldr	r3, [pc, #108]	@ (8006fe4 <HAL_RCC_OscConfig+0x4cc>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f7a:	f7fc fb7d 	bl	8003678 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f82:	f7fc fb79 	bl	8003678 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e03d      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f94:	4b11      	ldr	r3, [pc, #68]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0f0      	beq.n	8006f82 <HAL_RCC_OscConfig+0x46a>
 8006fa0:	e035      	b.n	800700e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa2:	4b10      	ldr	r3, [pc, #64]	@ (8006fe4 <HAL_RCC_OscConfig+0x4cc>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa8:	f7fc fb66 	bl	8003678 <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fb0:	f7fc fb62 	bl	8003678 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e026      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fc2:	4b06      	ldr	r3, [pc, #24]	@ (8006fdc <HAL_RCC_OscConfig+0x4c4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f0      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x498>
 8006fce:	e01e      	b.n	800700e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d107      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e019      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	40007000 	.word	0x40007000
 8006fe4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8007018 <HAL_RCC_OscConfig+0x500>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d106      	bne.n	800700a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007006:	429a      	cmp	r2, r3
 8007008:	d001      	beq.n	800700e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40021000 	.word	0x40021000

0800701c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e0d0      	b.n	80071d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007030:	4b6a      	ldr	r3, [pc, #424]	@ (80071dc <HAL_RCC_ClockConfig+0x1c0>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	429a      	cmp	r2, r3
 800703c:	d910      	bls.n	8007060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800703e:	4b67      	ldr	r3, [pc, #412]	@ (80071dc <HAL_RCC_ClockConfig+0x1c0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f023 0207 	bic.w	r2, r3, #7
 8007046:	4965      	ldr	r1, [pc, #404]	@ (80071dc <HAL_RCC_ClockConfig+0x1c0>)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	4313      	orrs	r3, r2
 800704c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800704e:	4b63      	ldr	r3, [pc, #396]	@ (80071dc <HAL_RCC_ClockConfig+0x1c0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d001      	beq.n	8007060 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e0b8      	b.n	80071d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d020      	beq.n	80070ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007078:	4b59      	ldr	r3, [pc, #356]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	4a58      	ldr	r2, [pc, #352]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 800707e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007082:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007090:	4b53      	ldr	r3, [pc, #332]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	4a52      	ldr	r2, [pc, #328]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 8007096:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800709a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800709c:	4b50      	ldr	r3, [pc, #320]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	494d      	ldr	r1, [pc, #308]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d040      	beq.n	800713c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d107      	bne.n	80070d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c2:	4b47      	ldr	r3, [pc, #284]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d115      	bne.n	80070fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e07f      	b.n	80071d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d107      	bne.n	80070ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070da:	4b41      	ldr	r3, [pc, #260]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d109      	bne.n	80070fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e073      	b.n	80071d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ea:	4b3d      	ldr	r3, [pc, #244]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e06b      	b.n	80071d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070fa:	4b39      	ldr	r3, [pc, #228]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f023 0203 	bic.w	r2, r3, #3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	4936      	ldr	r1, [pc, #216]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 8007108:	4313      	orrs	r3, r2
 800710a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800710c:	f7fc fab4 	bl	8003678 <HAL_GetTick>
 8007110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007112:	e00a      	b.n	800712a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007114:	f7fc fab0 	bl	8003678 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007122:	4293      	cmp	r3, r2
 8007124:	d901      	bls.n	800712a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e053      	b.n	80071d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800712a:	4b2d      	ldr	r3, [pc, #180]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f003 020c 	and.w	r2, r3, #12
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	429a      	cmp	r2, r3
 800713a:	d1eb      	bne.n	8007114 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800713c:	4b27      	ldr	r3, [pc, #156]	@ (80071dc <HAL_RCC_ClockConfig+0x1c0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d210      	bcs.n	800716c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800714a:	4b24      	ldr	r3, [pc, #144]	@ (80071dc <HAL_RCC_ClockConfig+0x1c0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f023 0207 	bic.w	r2, r3, #7
 8007152:	4922      	ldr	r1, [pc, #136]	@ (80071dc <HAL_RCC_ClockConfig+0x1c0>)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	4313      	orrs	r3, r2
 8007158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800715a:	4b20      	ldr	r3, [pc, #128]	@ (80071dc <HAL_RCC_ClockConfig+0x1c0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	d001      	beq.n	800716c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e032      	b.n	80071d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d008      	beq.n	800718a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007178:	4b19      	ldr	r3, [pc, #100]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	4916      	ldr	r1, [pc, #88]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 8007186:	4313      	orrs	r3, r2
 8007188:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0308 	and.w	r3, r3, #8
 8007192:	2b00      	cmp	r3, #0
 8007194:	d009      	beq.n	80071aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007196:	4b12      	ldr	r3, [pc, #72]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	490e      	ldr	r1, [pc, #56]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071aa:	f000 f821 	bl	80071f0 <HAL_RCC_GetSysClockFreq>
 80071ae:	4602      	mov	r2, r0
 80071b0:	4b0b      	ldr	r3, [pc, #44]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c4>)
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	091b      	lsrs	r3, r3, #4
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	490a      	ldr	r1, [pc, #40]	@ (80071e4 <HAL_RCC_ClockConfig+0x1c8>)
 80071bc:	5ccb      	ldrb	r3, [r1, r3]
 80071be:	fa22 f303 	lsr.w	r3, r2, r3
 80071c2:	4a09      	ldr	r2, [pc, #36]	@ (80071e8 <HAL_RCC_ClockConfig+0x1cc>)
 80071c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071c6:	4b09      	ldr	r3, [pc, #36]	@ (80071ec <HAL_RCC_ClockConfig+0x1d0>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fc fa12 	bl	80035f4 <HAL_InitTick>

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40022000 	.word	0x40022000
 80071e0:	40021000 	.word	0x40021000
 80071e4:	0800cee4 	.word	0x0800cee4
 80071e8:	20000008 	.word	0x20000008
 80071ec:	2000000c 	.word	0x2000000c

080071f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	2300      	movs	r3, #0
 80071fc:	60bb      	str	r3, [r7, #8]
 80071fe:	2300      	movs	r3, #0
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	2300      	movs	r3, #0
 8007204:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800720a:	4b1e      	ldr	r3, [pc, #120]	@ (8007284 <HAL_RCC_GetSysClockFreq+0x94>)
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f003 030c 	and.w	r3, r3, #12
 8007216:	2b04      	cmp	r3, #4
 8007218:	d002      	beq.n	8007220 <HAL_RCC_GetSysClockFreq+0x30>
 800721a:	2b08      	cmp	r3, #8
 800721c:	d003      	beq.n	8007226 <HAL_RCC_GetSysClockFreq+0x36>
 800721e:	e027      	b.n	8007270 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007220:	4b19      	ldr	r3, [pc, #100]	@ (8007288 <HAL_RCC_GetSysClockFreq+0x98>)
 8007222:	613b      	str	r3, [r7, #16]
      break;
 8007224:	e027      	b.n	8007276 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	0c9b      	lsrs	r3, r3, #18
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	4a17      	ldr	r2, [pc, #92]	@ (800728c <HAL_RCC_GetSysClockFreq+0x9c>)
 8007230:	5cd3      	ldrb	r3, [r2, r3]
 8007232:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d010      	beq.n	8007260 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800723e:	4b11      	ldr	r3, [pc, #68]	@ (8007284 <HAL_RCC_GetSysClockFreq+0x94>)
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	0c5b      	lsrs	r3, r3, #17
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	4a11      	ldr	r2, [pc, #68]	@ (8007290 <HAL_RCC_GetSysClockFreq+0xa0>)
 800724a:	5cd3      	ldrb	r3, [r2, r3]
 800724c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a0d      	ldr	r2, [pc, #52]	@ (8007288 <HAL_RCC_GetSysClockFreq+0x98>)
 8007252:	fb03 f202 	mul.w	r2, r3, r2
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	fbb2 f3f3 	udiv	r3, r2, r3
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e004      	b.n	800726a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a0c      	ldr	r2, [pc, #48]	@ (8007294 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007264:	fb02 f303 	mul.w	r3, r2, r3
 8007268:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	613b      	str	r3, [r7, #16]
      break;
 800726e:	e002      	b.n	8007276 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007270:	4b05      	ldr	r3, [pc, #20]	@ (8007288 <HAL_RCC_GetSysClockFreq+0x98>)
 8007272:	613b      	str	r3, [r7, #16]
      break;
 8007274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007276:	693b      	ldr	r3, [r7, #16]
}
 8007278:	4618      	mov	r0, r3
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	40021000 	.word	0x40021000
 8007288:	007a1200 	.word	0x007a1200
 800728c:	0800cefc 	.word	0x0800cefc
 8007290:	0800cf0c 	.word	0x0800cf0c
 8007294:	003d0900 	.word	0x003d0900

08007298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800729c:	4b02      	ldr	r3, [pc, #8]	@ (80072a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800729e:	681b      	ldr	r3, [r3, #0]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr
 80072a8:	20000008 	.word	0x20000008

080072ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072b0:	f7ff fff2 	bl	8007298 <HAL_RCC_GetHCLKFreq>
 80072b4:	4602      	mov	r2, r0
 80072b6:	4b05      	ldr	r3, [pc, #20]	@ (80072cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	0a1b      	lsrs	r3, r3, #8
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	4903      	ldr	r1, [pc, #12]	@ (80072d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072c2:	5ccb      	ldrb	r3, [r1, r3]
 80072c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40021000 	.word	0x40021000
 80072d0:	0800cef4 	.word	0x0800cef4

080072d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072d8:	f7ff ffde 	bl	8007298 <HAL_RCC_GetHCLKFreq>
 80072dc:	4602      	mov	r2, r0
 80072de:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	0adb      	lsrs	r3, r3, #11
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	4903      	ldr	r1, [pc, #12]	@ (80072f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072ea:	5ccb      	ldrb	r3, [r1, r3]
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	40021000 	.word	0x40021000
 80072f8:	0800cef4 	.word	0x0800cef4

080072fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007304:	4b0a      	ldr	r3, [pc, #40]	@ (8007330 <RCC_Delay+0x34>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a0a      	ldr	r2, [pc, #40]	@ (8007334 <RCC_Delay+0x38>)
 800730a:	fba2 2303 	umull	r2, r3, r2, r3
 800730e:	0a5b      	lsrs	r3, r3, #9
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	fb02 f303 	mul.w	r3, r2, r3
 8007316:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007318:	bf00      	nop
  }
  while (Delay --);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1e5a      	subs	r2, r3, #1
 800731e:	60fa      	str	r2, [r7, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1f9      	bne.n	8007318 <RCC_Delay+0x1c>
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr
 8007330:	20000008 	.word	0x20000008
 8007334:	10624dd3 	.word	0x10624dd3

08007338 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e076      	b.n	8007438 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734e:	2b00      	cmp	r3, #0
 8007350:	d108      	bne.n	8007364 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800735a:	d009      	beq.n	8007370 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	61da      	str	r2, [r3, #28]
 8007362:	e005      	b.n	8007370 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fb fe4e 	bl	800302c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f4:	ea42 0103 	orr.w	r1, r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	0c1a      	lsrs	r2, r3, #16
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f002 0204 	and.w	r2, r2, #4
 8007416:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69da      	ldr	r2, [r3, #28]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007426:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	4613      	mov	r3, r2
 800744e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007450:	f7fc f912 	bl	8003678 <HAL_GetTick>
 8007454:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b01      	cmp	r3, #1
 8007464:	d001      	beq.n	800746a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007466:	2302      	movs	r3, #2
 8007468:	e12a      	b.n	80076c0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <HAL_SPI_Transmit+0x36>
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e122      	b.n	80076c0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_SPI_Transmit+0x48>
 8007484:	2302      	movs	r3, #2
 8007486:	e11b      	b.n	80076c0 <HAL_SPI_Transmit+0x280>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2203      	movs	r2, #3
 8007494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	88fa      	ldrh	r2, [r7, #6]
 80074a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	88fa      	ldrh	r2, [r7, #6]
 80074ae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074d6:	d10f      	bne.n	80074f8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007502:	2b40      	cmp	r3, #64	@ 0x40
 8007504:	d007      	beq.n	8007516 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007514:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800751e:	d152      	bne.n	80075c6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_SPI_Transmit+0xee>
 8007528:	8b7b      	ldrh	r3, [r7, #26]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d145      	bne.n	80075ba <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007532:	881a      	ldrh	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753e:	1c9a      	adds	r2, r3, #2
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007552:	e032      	b.n	80075ba <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b02      	cmp	r3, #2
 8007560:	d112      	bne.n	8007588 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	881a      	ldrh	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007572:	1c9a      	adds	r2, r3, #2
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007586:	e018      	b.n	80075ba <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007588:	f7fc f876 	bl	8003678 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d803      	bhi.n	80075a0 <HAL_SPI_Transmit+0x160>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d102      	bne.n	80075a6 <HAL_SPI_Transmit+0x166>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e082      	b.n	80076c0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1c7      	bne.n	8007554 <HAL_SPI_Transmit+0x114>
 80075c4:	e053      	b.n	800766e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <HAL_SPI_Transmit+0x194>
 80075ce:	8b7b      	ldrh	r3, [r7, #26]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d147      	bne.n	8007664 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	330c      	adds	r3, #12
 80075de:	7812      	ldrb	r2, [r2, #0]
 80075e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3b01      	subs	r3, #1
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075fa:	e033      	b.n	8007664 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b02      	cmp	r3, #2
 8007608:	d113      	bne.n	8007632 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	7812      	ldrb	r2, [r2, #0]
 8007616:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007626:	b29b      	uxth	r3, r3
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007630:	e018      	b.n	8007664 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007632:	f7fc f821 	bl	8003678 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	429a      	cmp	r2, r3
 8007640:	d803      	bhi.n	800764a <HAL_SPI_Transmit+0x20a>
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007648:	d102      	bne.n	8007650 <HAL_SPI_Transmit+0x210>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d109      	bne.n	8007664 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e02d      	b.n	80076c0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1c6      	bne.n	80075fc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fbc4 	bl	8007e00 <SPI_EndRxTxTransaction>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2220      	movs	r2, #32
 8007682:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800768c:	2300      	movs	r3, #0
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80076be:	2300      	movs	r3, #0
  }
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3720      	adds	r7, #32
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b088      	sub	sp, #32
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	603b      	str	r3, [r7, #0]
 80076d4:	4613      	mov	r3, r2
 80076d6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d001      	beq.n	80076e8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80076e4:	2302      	movs	r3, #2
 80076e6:	e104      	b.n	80078f2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076f0:	d112      	bne.n	8007718 <HAL_SPI_Receive+0x50>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10e      	bne.n	8007718 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2204      	movs	r2, #4
 80076fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007702:	88fa      	ldrh	r2, [r7, #6]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	4613      	mov	r3, r2
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	68b9      	ldr	r1, [r7, #8]
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 f8f3 	bl	80078fa <HAL_SPI_TransmitReceive>
 8007714:	4603      	mov	r3, r0
 8007716:	e0ec      	b.n	80078f2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007718:	f7fb ffae 	bl	8003678 <HAL_GetTick>
 800771c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <HAL_SPI_Receive+0x62>
 8007724:	88fb      	ldrh	r3, [r7, #6]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e0e1      	b.n	80078f2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007734:	2b01      	cmp	r3, #1
 8007736:	d101      	bne.n	800773c <HAL_SPI_Receive+0x74>
 8007738:	2302      	movs	r3, #2
 800773a:	e0da      	b.n	80078f2 <HAL_SPI_Receive+0x22a>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2204      	movs	r2, #4
 8007748:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	88fa      	ldrh	r2, [r7, #6]
 800775c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	88fa      	ldrh	r2, [r7, #6]
 8007762:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800778a:	d10f      	bne.n	80077ac <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800779a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b6:	2b40      	cmp	r3, #64	@ 0x40
 80077b8:	d007      	beq.n	80077ca <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d170      	bne.n	80078b4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80077d2:	e035      	b.n	8007840 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d115      	bne.n	800780e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f103 020c 	add.w	r2, r3, #12
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ee:	7812      	ldrb	r2, [r2, #0]
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800780c:	e018      	b.n	8007840 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800780e:	f7fb ff33 	bl	8003678 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d803      	bhi.n	8007826 <HAL_SPI_Receive+0x15e>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007824:	d102      	bne.n	800782c <HAL_SPI_Receive+0x164>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d109      	bne.n	8007840 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e058      	b.n	80078f2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1c4      	bne.n	80077d4 <HAL_SPI_Receive+0x10c>
 800784a:	e038      	b.n	80078be <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b01      	cmp	r3, #1
 8007858:	d113      	bne.n	8007882 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007864:	b292      	uxth	r2, r2
 8007866:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786c:	1c9a      	adds	r2, r3, #2
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007880:	e018      	b.n	80078b4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007882:	f7fb fef9 	bl	8003678 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d803      	bhi.n	800789a <HAL_SPI_Receive+0x1d2>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d102      	bne.n	80078a0 <HAL_SPI_Receive+0x1d8>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d109      	bne.n	80078b4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e01e      	b.n	80078f2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1c6      	bne.n	800784c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 fa4a 	bl	8007d5c <SPI_EndRxTransaction>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2220      	movs	r2, #32
 80078d2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e000      	b.n	80078f2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80078f0:	2300      	movs	r3, #0
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b08a      	sub	sp, #40	@ 0x28
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
 8007906:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007908:	2301      	movs	r3, #1
 800790a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800790c:	f7fb feb4 	bl	8003678 <HAL_GetTick>
 8007910:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007918:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007920:	887b      	ldrh	r3, [r7, #2]
 8007922:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007924:	7ffb      	ldrb	r3, [r7, #31]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d00c      	beq.n	8007944 <HAL_SPI_TransmitReceive+0x4a>
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007930:	d106      	bne.n	8007940 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d102      	bne.n	8007940 <HAL_SPI_TransmitReceive+0x46>
 800793a:	7ffb      	ldrb	r3, [r7, #31]
 800793c:	2b04      	cmp	r3, #4
 800793e:	d001      	beq.n	8007944 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007940:	2302      	movs	r3, #2
 8007942:	e17f      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <HAL_SPI_TransmitReceive+0x5c>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <HAL_SPI_TransmitReceive+0x5c>
 8007950:	887b      	ldrh	r3, [r7, #2]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e174      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007960:	2b01      	cmp	r3, #1
 8007962:	d101      	bne.n	8007968 <HAL_SPI_TransmitReceive+0x6e>
 8007964:	2302      	movs	r3, #2
 8007966:	e16d      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x34a>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b04      	cmp	r3, #4
 800797a:	d003      	beq.n	8007984 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2205      	movs	r2, #5
 8007980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	887a      	ldrh	r2, [r7, #2]
 8007994:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	887a      	ldrh	r2, [r7, #2]
 800799a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	887a      	ldrh	r2, [r7, #2]
 80079a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	887a      	ldrh	r2, [r7, #2]
 80079ac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c4:	2b40      	cmp	r3, #64	@ 0x40
 80079c6:	d007      	beq.n	80079d8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079e0:	d17e      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <HAL_SPI_TransmitReceive+0xf6>
 80079ea:	8afb      	ldrh	r3, [r7, #22]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d16c      	bne.n	8007aca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f4:	881a      	ldrh	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a00:	1c9a      	adds	r2, r3, #2
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a14:	e059      	b.n	8007aca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d11b      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x162>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d016      	beq.n	8007a5c <HAL_SPI_TransmitReceive+0x162>
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d113      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a38:	881a      	ldrh	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a44:	1c9a      	adds	r2, r3, #2
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d119      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x1a4>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d014      	beq.n	8007a9e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7e:	b292      	uxth	r2, r2
 8007a80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a86:	1c9a      	adds	r2, r3, #2
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a9e:	f7fb fdeb 	bl	8003678 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d80d      	bhi.n	8007aca <HAL_SPI_TransmitReceive+0x1d0>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d009      	beq.n	8007aca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e0bc      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1a0      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x11c>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d19b      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x11c>
 8007ade:	e082      	b.n	8007be6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <HAL_SPI_TransmitReceive+0x1f4>
 8007ae8:	8afb      	ldrh	r3, [r7, #22]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d171      	bne.n	8007bd2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	330c      	adds	r3, #12
 8007af8:	7812      	ldrb	r2, [r2, #0]
 8007afa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b14:	e05d      	b.n	8007bd2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d11c      	bne.n	8007b5e <HAL_SPI_TransmitReceive+0x264>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d017      	beq.n	8007b5e <HAL_SPI_TransmitReceive+0x264>
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d114      	bne.n	8007b5e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	330c      	adds	r3, #12
 8007b3e:	7812      	ldrb	r2, [r2, #0]
 8007b40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d119      	bne.n	8007ba0 <HAL_SPI_TransmitReceive+0x2a6>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d014      	beq.n	8007ba0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b80:	b2d2      	uxtb	r2, r2
 8007b82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ba0:	f7fb fd6a 	bl	8003678 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d803      	bhi.n	8007bb8 <HAL_SPI_TransmitReceive+0x2be>
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d102      	bne.n	8007bbe <HAL_SPI_TransmitReceive+0x2c4>
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d109      	bne.n	8007bd2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e038      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d19c      	bne.n	8007b16 <HAL_SPI_TransmitReceive+0x21c>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d197      	bne.n	8007b16 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007be6:	6a3a      	ldr	r2, [r7, #32]
 8007be8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f908 	bl	8007e00 <SPI_EndRxTxTransaction>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d008      	beq.n	8007c08 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e01d      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10a      	bne.n	8007c26 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c10:	2300      	movs	r3, #0
 8007c12:	613b      	str	r3, [r7, #16]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	613b      	str	r3, [r7, #16]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e000      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007c42:	2300      	movs	r3, #0
  }
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3728      	adds	r7, #40	@ 0x28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c5c:	f7fb fd0c 	bl	8003678 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c64:	1a9b      	subs	r3, r3, r2
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	4413      	add	r3, r2
 8007c6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c6c:	f7fb fd04 	bl	8003678 <HAL_GetTick>
 8007c70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c72:	4b39      	ldr	r3, [pc, #228]	@ (8007d58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	015b      	lsls	r3, r3, #5
 8007c78:	0d1b      	lsrs	r3, r3, #20
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	fb02 f303 	mul.w	r3, r2, r3
 8007c80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c82:	e054      	b.n	8007d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8a:	d050      	beq.n	8007d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c8c:	f7fb fcf4 	bl	8003678 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d902      	bls.n	8007ca2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d13d      	bne.n	8007d1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007cb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cba:	d111      	bne.n	8007ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cc4:	d004      	beq.n	8007cd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cce:	d107      	bne.n	8007ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ce8:	d10f      	bne.n	8007d0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e017      	b.n	8007d4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	4013      	ands	r3, r2
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	bf0c      	ite	eq
 8007d3e:	2301      	moveq	r3, #1
 8007d40:	2300      	movne	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d19b      	bne.n	8007c84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000008 	.word	0x20000008

08007d5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d70:	d111      	bne.n	8007d96 <SPI_EndRxTransaction+0x3a>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d7a:	d004      	beq.n	8007d86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d84:	d107      	bne.n	8007d96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d94:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d9e:	d117      	bne.n	8007dd0 <SPI_EndRxTransaction+0x74>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007da8:	d112      	bne.n	8007dd0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2200      	movs	r2, #0
 8007db2:	2101      	movs	r1, #1
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff ff49 	bl	8007c4c <SPI_WaitFlagStateUntilTimeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01a      	beq.n	8007df6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc4:	f043 0220 	orr.w	r2, r3, #32
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e013      	b.n	8007df8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2180      	movs	r1, #128	@ 0x80
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7ff ff36 	bl	8007c4c <SPI_WaitFlagStateUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dea:	f043 0220 	orr.w	r2, r3, #32
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e000      	b.n	8007df8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2201      	movs	r2, #1
 8007e14:	2102      	movs	r1, #2
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff ff18 	bl	8007c4c <SPI_WaitFlagStateUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d007      	beq.n	8007e32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e26:	f043 0220 	orr.w	r2, r3, #32
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e013      	b.n	8007e5a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2180      	movs	r1, #128	@ 0x80
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f7ff ff05 	bl	8007c4c <SPI_WaitFlagStateUntilTimeout>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d007      	beq.n	8007e58 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e4c:	f043 0220 	orr.w	r2, r3, #32
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e000      	b.n	8007e5a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e042      	b.n	8007efa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d106      	bne.n	8007e8e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7fb fad3 	bl	8003434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2224      	movs	r2, #36	@ 0x24
 8007e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68da      	ldr	r2, [r3, #12]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ea4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fd0a 	bl	80088c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	691a      	ldr	r2, [r3, #16]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007eba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695a      	ldr	r2, [r3, #20]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007eca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007eda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b085      	sub	sp, #20
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d121      	bne.n	8007f60 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <HAL_UART_Transmit_IT+0x26>
 8007f22:	88fb      	ldrh	r3, [r7, #6]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e01a      	b.n	8007f62 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	88fa      	ldrh	r2, [r7, #6]
 8007f36:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	88fa      	ldrh	r2, [r7, #6]
 8007f3c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2221      	movs	r2, #33	@ 0x21
 8007f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f5a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e000      	b.n	8007f62 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007f60:	2302      	movs	r3, #2
  }
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d112      	bne.n	8007fac <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <HAL_UART_Receive_IT+0x26>
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e00b      	b.n	8007fae <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	68b9      	ldr	r1, [r7, #8]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 fab7 	bl	8008516 <UART_Start_Receive_IT>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	e000      	b.n	8007fae <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007fac:	2302      	movs	r3, #2
  }
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b0ba      	sub	sp, #232	@ 0xe8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10f      	bne.n	800801e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <HAL_UART_IRQHandler+0x66>
 800800a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fb93 	bl	8008742 <UART_Receive_IT>
      return;
 800801c:	e25b      	b.n	80084d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800801e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 80de 	beq.w	80081e4 <HAL_UART_IRQHandler+0x22c>
 8008028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	d106      	bne.n	8008042 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008038:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80d1 	beq.w	80081e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00b      	beq.n	8008066 <HAL_UART_IRQHandler+0xae>
 800804e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008056:	2b00      	cmp	r3, #0
 8008058:	d005      	beq.n	8008066 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800805e:	f043 0201 	orr.w	r2, r3, #1
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800806a:	f003 0304 	and.w	r3, r3, #4
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <HAL_UART_IRQHandler+0xd2>
 8008072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008082:	f043 0202 	orr.w	r2, r3, #2
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800808a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <HAL_UART_IRQHandler+0xf6>
 8008096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d005      	beq.n	80080ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a6:	f043 0204 	orr.w	r2, r3, #4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80080ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b2:	f003 0308 	and.w	r3, r3, #8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d011      	beq.n	80080de <HAL_UART_IRQHandler+0x126>
 80080ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d105      	bne.n	80080d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80080c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d6:	f043 0208 	orr.w	r2, r3, #8
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 81f2 	beq.w	80084cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ec:	f003 0320 	and.w	r3, r3, #32
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d008      	beq.n	8008106 <HAL_UART_IRQHandler+0x14e>
 80080f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fb1e 	bl	8008742 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008110:	2b00      	cmp	r3, #0
 8008112:	bf14      	ite	ne
 8008114:	2301      	movne	r3, #1
 8008116:	2300      	moveq	r3, #0
 8008118:	b2db      	uxtb	r3, r3
 800811a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008122:	f003 0308 	and.w	r3, r3, #8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <HAL_UART_IRQHandler+0x17a>
 800812a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800812e:	2b00      	cmp	r3, #0
 8008130:	d04f      	beq.n	80081d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fa28 	bl	8008588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	d041      	beq.n	80081ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3314      	adds	r3, #20
 800814c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008154:	e853 3f00 	ldrex	r3, [r3]
 8008158:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800815c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008160:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3314      	adds	r3, #20
 800816e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008172:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008176:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800817e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800818a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1d9      	bne.n	8008146 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d013      	beq.n	80081c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800819e:	4a7e      	ldr	r2, [pc, #504]	@ (8008398 <HAL_UART_IRQHandler+0x3e0>)
 80081a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fb fbdc 	bl	8003964 <HAL_DMA_Abort_IT>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d016      	beq.n	80081e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80081bc:	4610      	mov	r0, r2
 80081be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c0:	e00e      	b.n	80081e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f993 	bl	80084ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c8:	e00a      	b.n	80081e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f98f 	bl	80084ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d0:	e006      	b.n	80081e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f98b 	bl	80084ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80081de:	e175      	b.n	80084cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e0:	bf00      	nop
    return;
 80081e2:	e173      	b.n	80084cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	f040 814f 	bne.w	800848c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80081ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081f2:	f003 0310 	and.w	r3, r3, #16
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 8148 	beq.w	800848c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80081fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008200:	f003 0310 	and.w	r3, r3, #16
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8141 	beq.w	800848c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800820a:	2300      	movs	r3, #0
 800820c:	60bb      	str	r3, [r7, #8]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60bb      	str	r3, [r7, #8]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 80b6 	beq.w	800839c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800823c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 8145 	beq.w	80084d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800824a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800824e:	429a      	cmp	r2, r3
 8008250:	f080 813e 	bcs.w	80084d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800825a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	2b20      	cmp	r3, #32
 8008264:	f000 8088 	beq.w	8008378 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	330c      	adds	r3, #12
 800826e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800827e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008282:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008286:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	330c      	adds	r3, #12
 8008290:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008294:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008298:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80082a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1d9      	bne.n	8008268 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3314      	adds	r3, #20
 80082ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082c6:	f023 0301 	bic.w	r3, r3, #1
 80082ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3314      	adds	r3, #20
 80082d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80082d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80082dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80082e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e1      	bne.n	80082b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3314      	adds	r3, #20
 80082f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008300:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008302:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3314      	adds	r3, #20
 8008310:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008314:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008316:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008318:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800831a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800831c:	e841 2300 	strex	r3, r2, [r1]
 8008320:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008322:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1e3      	bne.n	80082f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2220      	movs	r2, #32
 800832c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	330c      	adds	r3, #12
 800833c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008348:	f023 0310 	bic.w	r3, r3, #16
 800834c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	330c      	adds	r3, #12
 8008356:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800835a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800835c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008360:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e3      	bne.n	8008336 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008372:	4618      	mov	r0, r3
 8008374:	f7fb fabb 	bl	80038ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2202      	movs	r2, #2
 800837c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008386:	b29b      	uxth	r3, r3
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	b29b      	uxth	r3, r3
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f8b6 	bl	8008500 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008394:	e09c      	b.n	80084d0 <HAL_UART_IRQHandler+0x518>
 8008396:	bf00      	nop
 8008398:	0800864d 	.word	0x0800864d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 808e 	beq.w	80084d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80083b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8089 	beq.w	80084d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	330c      	adds	r3, #12
 80083c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	330c      	adds	r3, #12
 80083e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80083e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80083e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1e3      	bne.n	80083c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3314      	adds	r3, #20
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	623b      	str	r3, [r7, #32]
   return(result);
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f023 0301 	bic.w	r3, r3, #1
 8008410:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3314      	adds	r3, #20
 800841a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800841e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008420:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800842c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e3      	bne.n	80083fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	330c      	adds	r3, #12
 8008446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 0310 	bic.w	r3, r3, #16
 8008456:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	330c      	adds	r3, #12
 8008460:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008464:	61fa      	str	r2, [r7, #28]
 8008466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008468:	69b9      	ldr	r1, [r7, #24]
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	e841 2300 	strex	r3, r2, [r1]
 8008470:	617b      	str	r3, [r7, #20]
   return(result);
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e3      	bne.n	8008440 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800847e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f83b 	bl	8008500 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800848a:	e023      	b.n	80084d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800848c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008494:	2b00      	cmp	r3, #0
 8008496:	d009      	beq.n	80084ac <HAL_UART_IRQHandler+0x4f4>
 8008498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800849c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f8e5 	bl	8008674 <UART_Transmit_IT>
    return;
 80084aa:	e014      	b.n	80084d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00e      	beq.n	80084d6 <HAL_UART_IRQHandler+0x51e>
 80084b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d008      	beq.n	80084d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f924 	bl	8008712 <UART_EndTransmit_IT>
    return;
 80084ca:	e004      	b.n	80084d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80084cc:	bf00      	nop
 80084ce:	e002      	b.n	80084d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80084d0:	bf00      	nop
 80084d2:	e000      	b.n	80084d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80084d4:	bf00      	nop
  }
}
 80084d6:	37e8      	adds	r7, #232	@ 0xe8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bc80      	pop	{r7}
 80084ec:	4770      	bx	lr

080084ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084f6:	bf00      	nop
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bc80      	pop	{r7}
 80084fe:	4770      	bx	lr

08008500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	bc80      	pop	{r7}
 8008514:	4770      	bx	lr

08008516 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008516:	b480      	push	{r7}
 8008518:	b085      	sub	sp, #20
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	4613      	mov	r3, r2
 8008522:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	88fa      	ldrh	r2, [r7, #6]
 800852e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	88fa      	ldrh	r2, [r7, #6]
 8008534:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2222      	movs	r2, #34	@ 0x22
 8008540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800855a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	695a      	ldr	r2, [r3, #20]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0201 	orr.w	r2, r2, #1
 800856a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0220 	orr.w	r2, r2, #32
 800857a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	bc80      	pop	{r7}
 8008586:	4770      	bx	lr

08008588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008588:	b480      	push	{r7}
 800858a:	b095      	sub	sp, #84	@ 0x54
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	330c      	adds	r3, #12
 8008596:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800859a:	e853 3f00 	ldrex	r3, [r3]
 800859e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80085b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80085b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085b8:	e841 2300 	strex	r3, r2, [r1]
 80085bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e5      	bne.n	8008590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3314      	adds	r3, #20
 80085ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	f023 0301 	bic.w	r3, r3, #1
 80085da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3314      	adds	r3, #20
 80085e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085ec:	e841 2300 	strex	r3, r2, [r1]
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1e5      	bne.n	80085c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d119      	bne.n	8008634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	330c      	adds	r3, #12
 8008606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f023 0310 	bic.w	r3, r3, #16
 8008616:	647b      	str	r3, [r7, #68]	@ 0x44
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	330c      	adds	r3, #12
 800861e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008620:	61ba      	str	r2, [r7, #24]
 8008622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	6979      	ldr	r1, [r7, #20]
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	613b      	str	r3, [r7, #16]
   return(result);
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e5      	bne.n	8008600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2220      	movs	r2, #32
 8008638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008642:	bf00      	nop
 8008644:	3754      	adds	r7, #84	@ 0x54
 8008646:	46bd      	mov	sp, r7
 8008648:	bc80      	pop	{r7}
 800864a:	4770      	bx	lr

0800864c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7ff ff41 	bl	80084ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b21      	cmp	r3, #33	@ 0x21
 8008686:	d13e      	bne.n	8008706 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008690:	d114      	bne.n	80086bc <UART_Transmit_IT+0x48>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d110      	bne.n	80086bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	461a      	mov	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	1c9a      	adds	r2, r3, #2
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	621a      	str	r2, [r3, #32]
 80086ba:	e008      	b.n	80086ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	1c59      	adds	r1, r3, #1
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	6211      	str	r1, [r2, #32]
 80086c6:	781a      	ldrb	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	3b01      	subs	r3, #1
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	4619      	mov	r1, r3
 80086dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10f      	bne.n	8008702 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68da      	ldr	r2, [r3, #12]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68da      	ldr	r2, [r3, #12]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008700:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	e000      	b.n	8008708 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008706:	2302      	movs	r3, #2
  }
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	bc80      	pop	{r7}
 8008710:	4770      	bx	lr

08008712 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b082      	sub	sp, #8
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008728:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2220      	movs	r2, #32
 800872e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff fed2 	bl	80084dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b08c      	sub	sp, #48	@ 0x30
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b22      	cmp	r3, #34	@ 0x22
 8008754:	f040 80ae 	bne.w	80088b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008760:	d117      	bne.n	8008792 <UART_Receive_IT+0x50>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d113      	bne.n	8008792 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800876a:	2300      	movs	r3, #0
 800876c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008772:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	b29b      	uxth	r3, r3
 800877c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008780:	b29a      	uxth	r2, r3
 8008782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008784:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878a:	1c9a      	adds	r2, r3, #2
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008790:	e026      	b.n	80087e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008796:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008798:	2300      	movs	r3, #0
 800879a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a4:	d007      	beq.n	80087b6 <UART_Receive_IT+0x74>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <UART_Receive_IT+0x82>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d106      	bne.n	80087c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	e008      	b.n	80087d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	4619      	mov	r1, r3
 80087ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d15d      	bne.n	80088b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0220 	bic.w	r2, r2, #32
 8008802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	695a      	ldr	r2, [r3, #20]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0201 	bic.w	r2, r2, #1
 8008822:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2220      	movs	r2, #32
 8008828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008836:	2b01      	cmp	r3, #1
 8008838:	d135      	bne.n	80088a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	330c      	adds	r3, #12
 8008846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	e853 3f00 	ldrex	r3, [r3]
 800884e:	613b      	str	r3, [r7, #16]
   return(result);
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f023 0310 	bic.w	r3, r3, #16
 8008856:	627b      	str	r3, [r7, #36]	@ 0x24
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	330c      	adds	r3, #12
 800885e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008860:	623a      	str	r2, [r7, #32]
 8008862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	69f9      	ldr	r1, [r7, #28]
 8008866:	6a3a      	ldr	r2, [r7, #32]
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	61bb      	str	r3, [r7, #24]
   return(result);
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e5      	bne.n	8008840 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0310 	and.w	r3, r3, #16
 800887e:	2b10      	cmp	r3, #16
 8008880:	d10a      	bne.n	8008898 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fe2e 	bl	8008500 <HAL_UARTEx_RxEventCallback>
 80088a4:	e002      	b.n	80088ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7f9 fd46 	bl	8002338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	e002      	b.n	80088b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	e000      	b.n	80088b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80088b4:	2302      	movs	r3, #2
  }
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3730      	adds	r7, #48	@ 0x30
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	689a      	ldr	r2, [r3, #8]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80088fa:	f023 030c 	bic.w	r3, r3, #12
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6812      	ldr	r2, [r2, #0]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	430b      	orrs	r3, r1
 8008906:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699a      	ldr	r2, [r3, #24]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a2c      	ldr	r2, [pc, #176]	@ (80089d4 <UART_SetConfig+0x114>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d103      	bne.n	8008930 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008928:	f7fe fcd4 	bl	80072d4 <HAL_RCC_GetPCLK2Freq>
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	e002      	b.n	8008936 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008930:	f7fe fcbc 	bl	80072ac <HAL_RCC_GetPCLK1Freq>
 8008934:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4613      	mov	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	009a      	lsls	r2, r3, #2
 8008940:	441a      	add	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	fbb2 f3f3 	udiv	r3, r2, r3
 800894c:	4a22      	ldr	r2, [pc, #136]	@ (80089d8 <UART_SetConfig+0x118>)
 800894e:	fba2 2303 	umull	r2, r3, r2, r3
 8008952:	095b      	lsrs	r3, r3, #5
 8008954:	0119      	lsls	r1, r3, #4
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009a      	lsls	r2, r3, #2
 8008960:	441a      	add	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	fbb2 f2f3 	udiv	r2, r2, r3
 800896c:	4b1a      	ldr	r3, [pc, #104]	@ (80089d8 <UART_SetConfig+0x118>)
 800896e:	fba3 0302 	umull	r0, r3, r3, r2
 8008972:	095b      	lsrs	r3, r3, #5
 8008974:	2064      	movs	r0, #100	@ 0x64
 8008976:	fb00 f303 	mul.w	r3, r0, r3
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	3332      	adds	r3, #50	@ 0x32
 8008980:	4a15      	ldr	r2, [pc, #84]	@ (80089d8 <UART_SetConfig+0x118>)
 8008982:	fba2 2303 	umull	r2, r3, r2, r3
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800898c:	4419      	add	r1, r3
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	009a      	lsls	r2, r3, #2
 8008998:	441a      	add	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80089a4:	4b0c      	ldr	r3, [pc, #48]	@ (80089d8 <UART_SetConfig+0x118>)
 80089a6:	fba3 0302 	umull	r0, r3, r3, r2
 80089aa:	095b      	lsrs	r3, r3, #5
 80089ac:	2064      	movs	r0, #100	@ 0x64
 80089ae:	fb00 f303 	mul.w	r3, r0, r3
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	011b      	lsls	r3, r3, #4
 80089b6:	3332      	adds	r3, #50	@ 0x32
 80089b8:	4a07      	ldr	r2, [pc, #28]	@ (80089d8 <UART_SetConfig+0x118>)
 80089ba:	fba2 2303 	umull	r2, r3, r2, r3
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	f003 020f 	and.w	r2, r3, #15
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	440a      	add	r2, r1
 80089ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80089cc:	bf00      	nop
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	40013800 	.word	0x40013800
 80089d8:	51eb851f 	.word	0x51eb851f

080089dc <sqrt>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	4606      	mov	r6, r0
 80089e0:	460f      	mov	r7, r1
 80089e2:	f000 f81f 	bl	8008a24 <__ieee754_sqrt>
 80089e6:	4632      	mov	r2, r6
 80089e8:	4604      	mov	r4, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	463b      	mov	r3, r7
 80089ee:	4630      	mov	r0, r6
 80089f0:	4639      	mov	r1, r7
 80089f2:	f7f8 f80b 	bl	8000a0c <__aeabi_dcmpun>
 80089f6:	b990      	cbnz	r0, 8008a1e <sqrt+0x42>
 80089f8:	2200      	movs	r2, #0
 80089fa:	2300      	movs	r3, #0
 80089fc:	4630      	mov	r0, r6
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f7 ffdc 	bl	80009bc <__aeabi_dcmplt>
 8008a04:	b158      	cbz	r0, 8008a1e <sqrt+0x42>
 8008a06:	f001 fd69 	bl	800a4dc <__errno>
 8008a0a:	2321      	movs	r3, #33	@ 0x21
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	6003      	str	r3, [r0, #0]
 8008a10:	2300      	movs	r3, #0
 8008a12:	4610      	mov	r0, r2
 8008a14:	4619      	mov	r1, r3
 8008a16:	f7f7 fe89 	bl	800072c <__aeabi_ddiv>
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	460d      	mov	r5, r1
 8008a1e:	4620      	mov	r0, r4
 8008a20:	4629      	mov	r1, r5
 8008a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a24 <__ieee754_sqrt>:
 8008a24:	4a65      	ldr	r2, [pc, #404]	@ (8008bbc <__ieee754_sqrt+0x198>)
 8008a26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2a:	438a      	bics	r2, r1
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	460f      	mov	r7, r1
 8008a30:	460b      	mov	r3, r1
 8008a32:	4604      	mov	r4, r0
 8008a34:	d10e      	bne.n	8008a54 <__ieee754_sqrt+0x30>
 8008a36:	4602      	mov	r2, r0
 8008a38:	f7f7 fd4e 	bl	80004d8 <__aeabi_dmul>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4630      	mov	r0, r6
 8008a42:	4639      	mov	r1, r7
 8008a44:	f7f7 fb92 	bl	800016c <__adddf3>
 8008a48:	4606      	mov	r6, r0
 8008a4a:	460f      	mov	r7, r1
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	4639      	mov	r1, r7
 8008a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a54:	2900      	cmp	r1, #0
 8008a56:	dc0c      	bgt.n	8008a72 <__ieee754_sqrt+0x4e>
 8008a58:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008a5c:	4302      	orrs	r2, r0
 8008a5e:	d0f5      	beq.n	8008a4c <__ieee754_sqrt+0x28>
 8008a60:	b189      	cbz	r1, 8008a86 <__ieee754_sqrt+0x62>
 8008a62:	4602      	mov	r2, r0
 8008a64:	f7f7 fb80 	bl	8000168 <__aeabi_dsub>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	f7f7 fe5e 	bl	800072c <__aeabi_ddiv>
 8008a70:	e7ea      	b.n	8008a48 <__ieee754_sqrt+0x24>
 8008a72:	150a      	asrs	r2, r1, #20
 8008a74:	d115      	bne.n	8008aa2 <__ieee754_sqrt+0x7e>
 8008a76:	2100      	movs	r1, #0
 8008a78:	e009      	b.n	8008a8e <__ieee754_sqrt+0x6a>
 8008a7a:	0ae3      	lsrs	r3, r4, #11
 8008a7c:	3a15      	subs	r2, #21
 8008a7e:	0564      	lsls	r4, r4, #21
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0fa      	beq.n	8008a7a <__ieee754_sqrt+0x56>
 8008a84:	e7f7      	b.n	8008a76 <__ieee754_sqrt+0x52>
 8008a86:	460a      	mov	r2, r1
 8008a88:	e7fa      	b.n	8008a80 <__ieee754_sqrt+0x5c>
 8008a8a:	005b      	lsls	r3, r3, #1
 8008a8c:	3101      	adds	r1, #1
 8008a8e:	02d8      	lsls	r0, r3, #11
 8008a90:	d5fb      	bpl.n	8008a8a <__ieee754_sqrt+0x66>
 8008a92:	1e48      	subs	r0, r1, #1
 8008a94:	1a12      	subs	r2, r2, r0
 8008a96:	f1c1 0020 	rsb	r0, r1, #32
 8008a9a:	fa24 f000 	lsr.w	r0, r4, r0
 8008a9e:	4303      	orrs	r3, r0
 8008aa0:	408c      	lsls	r4, r1
 8008aa2:	2700      	movs	r7, #0
 8008aa4:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8008aa8:	2116      	movs	r1, #22
 8008aaa:	07d2      	lsls	r2, r2, #31
 8008aac:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008ab0:	463a      	mov	r2, r7
 8008ab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008aba:	bf5c      	itt	pl
 8008abc:	005b      	lslpl	r3, r3, #1
 8008abe:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008ac2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ac6:	bf58      	it	pl
 8008ac8:	0064      	lslpl	r4, r4, #1
 8008aca:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008ace:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ad2:	0064      	lsls	r4, r4, #1
 8008ad4:	1815      	adds	r5, r2, r0
 8008ad6:	429d      	cmp	r5, r3
 8008ad8:	bfde      	ittt	le
 8008ada:	182a      	addle	r2, r5, r0
 8008adc:	1b5b      	suble	r3, r3, r5
 8008ade:	183f      	addle	r7, r7, r0
 8008ae0:	0fe5      	lsrs	r5, r4, #31
 8008ae2:	3901      	subs	r1, #1
 8008ae4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008ae8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008aec:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008af0:	d1f0      	bne.n	8008ad4 <__ieee754_sqrt+0xb0>
 8008af2:	460d      	mov	r5, r1
 8008af4:	2620      	movs	r6, #32
 8008af6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008afa:	4293      	cmp	r3, r2
 8008afc:	eb00 0c01 	add.w	ip, r0, r1
 8008b00:	dc02      	bgt.n	8008b08 <__ieee754_sqrt+0xe4>
 8008b02:	d113      	bne.n	8008b2c <__ieee754_sqrt+0x108>
 8008b04:	45a4      	cmp	ip, r4
 8008b06:	d811      	bhi.n	8008b2c <__ieee754_sqrt+0x108>
 8008b08:	f1bc 0f00 	cmp.w	ip, #0
 8008b0c:	eb0c 0100 	add.w	r1, ip, r0
 8008b10:	da3e      	bge.n	8008b90 <__ieee754_sqrt+0x16c>
 8008b12:	2900      	cmp	r1, #0
 8008b14:	db3c      	blt.n	8008b90 <__ieee754_sqrt+0x16c>
 8008b16:	f102 0e01 	add.w	lr, r2, #1
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	4672      	mov	r2, lr
 8008b1e:	45a4      	cmp	ip, r4
 8008b20:	bf88      	it	hi
 8008b22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008b26:	eba4 040c 	sub.w	r4, r4, ip
 8008b2a:	4405      	add	r5, r0
 8008b2c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008b30:	3e01      	subs	r6, #1
 8008b32:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008b36:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008b3a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008b3e:	d1dc      	bne.n	8008afa <__ieee754_sqrt+0xd6>
 8008b40:	431c      	orrs	r4, r3
 8008b42:	d01a      	beq.n	8008b7a <__ieee754_sqrt+0x156>
 8008b44:	4c1e      	ldr	r4, [pc, #120]	@ (8008bc0 <__ieee754_sqrt+0x19c>)
 8008b46:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8008bc4 <__ieee754_sqrt+0x1a0>
 8008b4a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008b4e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b52:	f7f7 fb09 	bl	8000168 <__aeabi_dsub>
 8008b56:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4650      	mov	r0, sl
 8008b60:	4659      	mov	r1, fp
 8008b62:	f7f7 ff35 	bl	80009d0 <__aeabi_dcmple>
 8008b66:	b140      	cbz	r0, 8008b7a <__ieee754_sqrt+0x156>
 8008b68:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008b6c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b70:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008b74:	d10e      	bne.n	8008b94 <__ieee754_sqrt+0x170>
 8008b76:	4635      	mov	r5, r6
 8008b78:	3701      	adds	r7, #1
 8008b7a:	107b      	asrs	r3, r7, #1
 8008b7c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b80:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008b84:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8008b88:	086b      	lsrs	r3, r5, #1
 8008b8a:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8008b8e:	e75b      	b.n	8008a48 <__ieee754_sqrt+0x24>
 8008b90:	4696      	mov	lr, r2
 8008b92:	e7c2      	b.n	8008b1a <__ieee754_sqrt+0xf6>
 8008b94:	f7f7 faea 	bl	800016c <__adddf3>
 8008b98:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4650      	mov	r0, sl
 8008ba2:	4659      	mov	r1, fp
 8008ba4:	f7f7 ff0a 	bl	80009bc <__aeabi_dcmplt>
 8008ba8:	b120      	cbz	r0, 8008bb4 <__ieee754_sqrt+0x190>
 8008baa:	1cab      	adds	r3, r5, #2
 8008bac:	bf08      	it	eq
 8008bae:	3701      	addeq	r7, #1
 8008bb0:	3502      	adds	r5, #2
 8008bb2:	e7e2      	b.n	8008b7a <__ieee754_sqrt+0x156>
 8008bb4:	1c6b      	adds	r3, r5, #1
 8008bb6:	f023 0501 	bic.w	r5, r3, #1
 8008bba:	e7de      	b.n	8008b7a <__ieee754_sqrt+0x156>
 8008bbc:	7ff00000 	.word	0x7ff00000
 8008bc0:	0800cf18 	.word	0x0800cf18
 8008bc4:	0800cf10 	.word	0x0800cf10

08008bc8 <atof>:
 8008bc8:	2100      	movs	r1, #0
 8008bca:	f000 bdfd 	b.w	80097c8 <strtod>

08008bce <atoi>:
 8008bce:	220a      	movs	r2, #10
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	f000 be7f 	b.w	80098d4 <strtol>

08008bd6 <sulp>:
 8008bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bda:	460f      	mov	r7, r1
 8008bdc:	4690      	mov	r8, r2
 8008bde:	f003 fae1 	bl	800c1a4 <__ulp>
 8008be2:	4604      	mov	r4, r0
 8008be4:	460d      	mov	r5, r1
 8008be6:	f1b8 0f00 	cmp.w	r8, #0
 8008bea:	d011      	beq.n	8008c10 <sulp+0x3a>
 8008bec:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008bf0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd0b      	ble.n	8008c10 <sulp+0x3a>
 8008bf8:	2400      	movs	r4, #0
 8008bfa:	051b      	lsls	r3, r3, #20
 8008bfc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008c00:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008c04:	4622      	mov	r2, r4
 8008c06:	462b      	mov	r3, r5
 8008c08:	f7f7 fc66 	bl	80004d8 <__aeabi_dmul>
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	460d      	mov	r5, r1
 8008c10:	4620      	mov	r0, r4
 8008c12:	4629      	mov	r1, r5
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c18 <_strtod_l>:
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	b09f      	sub	sp, #124	@ 0x7c
 8008c1e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008c20:	2200      	movs	r2, #0
 8008c22:	460c      	mov	r4, r1
 8008c24:	921a      	str	r2, [sp, #104]	@ 0x68
 8008c26:	f04f 0a00 	mov.w	sl, #0
 8008c2a:	f04f 0b00 	mov.w	fp, #0
 8008c2e:	460a      	mov	r2, r1
 8008c30:	9005      	str	r0, [sp, #20]
 8008c32:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c34:	7811      	ldrb	r1, [r2, #0]
 8008c36:	292b      	cmp	r1, #43	@ 0x2b
 8008c38:	d048      	beq.n	8008ccc <_strtod_l+0xb4>
 8008c3a:	d836      	bhi.n	8008caa <_strtod_l+0x92>
 8008c3c:	290d      	cmp	r1, #13
 8008c3e:	d830      	bhi.n	8008ca2 <_strtod_l+0x8a>
 8008c40:	2908      	cmp	r1, #8
 8008c42:	d830      	bhi.n	8008ca6 <_strtod_l+0x8e>
 8008c44:	2900      	cmp	r1, #0
 8008c46:	d039      	beq.n	8008cbc <_strtod_l+0xa4>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c4e:	782a      	ldrb	r2, [r5, #0]
 8008c50:	2a30      	cmp	r2, #48	@ 0x30
 8008c52:	f040 80b0 	bne.w	8008db6 <_strtod_l+0x19e>
 8008c56:	786a      	ldrb	r2, [r5, #1]
 8008c58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c5c:	2a58      	cmp	r2, #88	@ 0x58
 8008c5e:	d16c      	bne.n	8008d3a <_strtod_l+0x122>
 8008c60:	9302      	str	r3, [sp, #8]
 8008c62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c64:	4a8f      	ldr	r2, [pc, #572]	@ (8008ea4 <_strtod_l+0x28c>)
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	ab1a      	add	r3, sp, #104	@ 0x68
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	9805      	ldr	r0, [sp, #20]
 8008c6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c70:	a919      	add	r1, sp, #100	@ 0x64
 8008c72:	f002 fb91 	bl	800b398 <__gethex>
 8008c76:	f010 060f 	ands.w	r6, r0, #15
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	d005      	beq.n	8008c8a <_strtod_l+0x72>
 8008c7e:	2e06      	cmp	r6, #6
 8008c80:	d126      	bne.n	8008cd0 <_strtod_l+0xb8>
 8008c82:	2300      	movs	r3, #0
 8008c84:	3501      	adds	r5, #1
 8008c86:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c88:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f040 8582 	bne.w	8009796 <_strtod_l+0xb7e>
 8008c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c94:	b1bb      	cbz	r3, 8008cc6 <_strtod_l+0xae>
 8008c96:	4650      	mov	r0, sl
 8008c98:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008c9c:	b01f      	add	sp, #124	@ 0x7c
 8008c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca2:	2920      	cmp	r1, #32
 8008ca4:	d1d0      	bne.n	8008c48 <_strtod_l+0x30>
 8008ca6:	3201      	adds	r2, #1
 8008ca8:	e7c3      	b.n	8008c32 <_strtod_l+0x1a>
 8008caa:	292d      	cmp	r1, #45	@ 0x2d
 8008cac:	d1cc      	bne.n	8008c48 <_strtod_l+0x30>
 8008cae:	2101      	movs	r1, #1
 8008cb0:	910e      	str	r1, [sp, #56]	@ 0x38
 8008cb2:	1c51      	adds	r1, r2, #1
 8008cb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008cb6:	7852      	ldrb	r2, [r2, #1]
 8008cb8:	2a00      	cmp	r2, #0
 8008cba:	d1c7      	bne.n	8008c4c <_strtod_l+0x34>
 8008cbc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008cbe:	9419      	str	r4, [sp, #100]	@ 0x64
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f040 8566 	bne.w	8009792 <_strtod_l+0xb7a>
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	4659      	mov	r1, fp
 8008cca:	e7e7      	b.n	8008c9c <_strtod_l+0x84>
 8008ccc:	2100      	movs	r1, #0
 8008cce:	e7ef      	b.n	8008cb0 <_strtod_l+0x98>
 8008cd0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008cd2:	b13a      	cbz	r2, 8008ce4 <_strtod_l+0xcc>
 8008cd4:	2135      	movs	r1, #53	@ 0x35
 8008cd6:	a81c      	add	r0, sp, #112	@ 0x70
 8008cd8:	f003 fb54 	bl	800c384 <__copybits>
 8008cdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cde:	9805      	ldr	r0, [sp, #20]
 8008ce0:	f002 ff34 	bl	800bb4c <_Bfree>
 8008ce4:	3e01      	subs	r6, #1
 8008ce6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008ce8:	2e04      	cmp	r6, #4
 8008cea:	d806      	bhi.n	8008cfa <_strtod_l+0xe2>
 8008cec:	e8df f006 	tbb	[pc, r6]
 8008cf0:	201d0314 	.word	0x201d0314
 8008cf4:	14          	.byte	0x14
 8008cf5:	00          	.byte	0x00
 8008cf6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008cfa:	05e1      	lsls	r1, r4, #23
 8008cfc:	bf48      	it	mi
 8008cfe:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008d02:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d06:	0d1b      	lsrs	r3, r3, #20
 8008d08:	051b      	lsls	r3, r3, #20
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1bd      	bne.n	8008c8a <_strtod_l+0x72>
 8008d0e:	f001 fbe5 	bl	800a4dc <__errno>
 8008d12:	2322      	movs	r3, #34	@ 0x22
 8008d14:	6003      	str	r3, [r0, #0]
 8008d16:	e7b8      	b.n	8008c8a <_strtod_l+0x72>
 8008d18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008d1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008d20:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008d24:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d28:	e7e7      	b.n	8008cfa <_strtod_l+0xe2>
 8008d2a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008ea8 <_strtod_l+0x290>
 8008d2e:	e7e4      	b.n	8008cfa <_strtod_l+0xe2>
 8008d30:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008d34:	f04f 3aff 	mov.w	sl, #4294967295
 8008d38:	e7df      	b.n	8008cfa <_strtod_l+0xe2>
 8008d3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d40:	785b      	ldrb	r3, [r3, #1]
 8008d42:	2b30      	cmp	r3, #48	@ 0x30
 8008d44:	d0f9      	beq.n	8008d3a <_strtod_l+0x122>
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d09f      	beq.n	8008c8a <_strtod_l+0x72>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	2700      	movs	r7, #0
 8008d4e:	220a      	movs	r2, #10
 8008d50:	46b9      	mov	r9, r7
 8008d52:	9308      	str	r3, [sp, #32]
 8008d54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d56:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008d58:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d5a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008d5c:	7805      	ldrb	r5, [r0, #0]
 8008d5e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008d62:	b2d9      	uxtb	r1, r3
 8008d64:	2909      	cmp	r1, #9
 8008d66:	d928      	bls.n	8008dba <_strtod_l+0x1a2>
 8008d68:	2201      	movs	r2, #1
 8008d6a:	4950      	ldr	r1, [pc, #320]	@ (8008eac <_strtod_l+0x294>)
 8008d6c:	f001 fb59 	bl	800a422 <strncmp>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d032      	beq.n	8008dda <_strtod_l+0x1c2>
 8008d74:	2000      	movs	r0, #0
 8008d76:	462a      	mov	r2, r5
 8008d78:	4603      	mov	r3, r0
 8008d7a:	464d      	mov	r5, r9
 8008d7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d7e:	2a65      	cmp	r2, #101	@ 0x65
 8008d80:	d001      	beq.n	8008d86 <_strtod_l+0x16e>
 8008d82:	2a45      	cmp	r2, #69	@ 0x45
 8008d84:	d114      	bne.n	8008db0 <_strtod_l+0x198>
 8008d86:	b91d      	cbnz	r5, 8008d90 <_strtod_l+0x178>
 8008d88:	9a08      	ldr	r2, [sp, #32]
 8008d8a:	4302      	orrs	r2, r0
 8008d8c:	d096      	beq.n	8008cbc <_strtod_l+0xa4>
 8008d8e:	2500      	movs	r5, #0
 8008d90:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d92:	1c62      	adds	r2, r4, #1
 8008d94:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d96:	7862      	ldrb	r2, [r4, #1]
 8008d98:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d9a:	d07a      	beq.n	8008e92 <_strtod_l+0x27a>
 8008d9c:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d9e:	d07e      	beq.n	8008e9e <_strtod_l+0x286>
 8008da0:	f04f 0c00 	mov.w	ip, #0
 8008da4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008da8:	2909      	cmp	r1, #9
 8008daa:	f240 8085 	bls.w	8008eb8 <_strtod_l+0x2a0>
 8008dae:	9419      	str	r4, [sp, #100]	@ 0x64
 8008db0:	f04f 0800 	mov.w	r8, #0
 8008db4:	e0a5      	b.n	8008f02 <_strtod_l+0x2ea>
 8008db6:	2300      	movs	r3, #0
 8008db8:	e7c8      	b.n	8008d4c <_strtod_l+0x134>
 8008dba:	f1b9 0f08 	cmp.w	r9, #8
 8008dbe:	bfd8      	it	le
 8008dc0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008dc2:	f100 0001 	add.w	r0, r0, #1
 8008dc6:	bfd6      	itet	le
 8008dc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008dcc:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008dd0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008dd2:	f109 0901 	add.w	r9, r9, #1
 8008dd6:	9019      	str	r0, [sp, #100]	@ 0x64
 8008dd8:	e7bf      	b.n	8008d5a <_strtod_l+0x142>
 8008dda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	9219      	str	r2, [sp, #100]	@ 0x64
 8008de0:	785a      	ldrb	r2, [r3, #1]
 8008de2:	f1b9 0f00 	cmp.w	r9, #0
 8008de6:	d03b      	beq.n	8008e60 <_strtod_l+0x248>
 8008de8:	464d      	mov	r5, r9
 8008dea:	900a      	str	r0, [sp, #40]	@ 0x28
 8008dec:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008df0:	2b09      	cmp	r3, #9
 8008df2:	d912      	bls.n	8008e1a <_strtod_l+0x202>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e7c2      	b.n	8008d7e <_strtod_l+0x166>
 8008df8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e00:	785a      	ldrb	r2, [r3, #1]
 8008e02:	2a30      	cmp	r2, #48	@ 0x30
 8008e04:	d0f8      	beq.n	8008df8 <_strtod_l+0x1e0>
 8008e06:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008e0a:	2b08      	cmp	r3, #8
 8008e0c:	f200 84c8 	bhi.w	80097a0 <_strtod_l+0xb88>
 8008e10:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e12:	2000      	movs	r0, #0
 8008e14:	4605      	mov	r5, r0
 8008e16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e18:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e1a:	3a30      	subs	r2, #48	@ 0x30
 8008e1c:	f100 0301 	add.w	r3, r0, #1
 8008e20:	d018      	beq.n	8008e54 <_strtod_l+0x23c>
 8008e22:	462e      	mov	r6, r5
 8008e24:	f04f 0e0a 	mov.w	lr, #10
 8008e28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e2a:	4419      	add	r1, r3
 8008e2c:	910a      	str	r1, [sp, #40]	@ 0x28
 8008e2e:	1c71      	adds	r1, r6, #1
 8008e30:	eba1 0c05 	sub.w	ip, r1, r5
 8008e34:	4563      	cmp	r3, ip
 8008e36:	dc15      	bgt.n	8008e64 <_strtod_l+0x24c>
 8008e38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008e3c:	182b      	adds	r3, r5, r0
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	f105 0501 	add.w	r5, r5, #1
 8008e44:	4405      	add	r5, r0
 8008e46:	dc1a      	bgt.n	8008e7e <_strtod_l+0x266>
 8008e48:	230a      	movs	r3, #10
 8008e4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e4c:	fb03 2301 	mla	r3, r3, r1, r2
 8008e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e52:	2300      	movs	r3, #0
 8008e54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e56:	4618      	mov	r0, r3
 8008e58:	1c51      	adds	r1, r2, #1
 8008e5a:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e5c:	7852      	ldrb	r2, [r2, #1]
 8008e5e:	e7c5      	b.n	8008dec <_strtod_l+0x1d4>
 8008e60:	4648      	mov	r0, r9
 8008e62:	e7ce      	b.n	8008e02 <_strtod_l+0x1ea>
 8008e64:	2e08      	cmp	r6, #8
 8008e66:	dc05      	bgt.n	8008e74 <_strtod_l+0x25c>
 8008e68:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008e6a:	fb0e f606 	mul.w	r6, lr, r6
 8008e6e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008e70:	460e      	mov	r6, r1
 8008e72:	e7dc      	b.n	8008e2e <_strtod_l+0x216>
 8008e74:	2910      	cmp	r1, #16
 8008e76:	bfd8      	it	le
 8008e78:	fb0e f707 	mulle.w	r7, lr, r7
 8008e7c:	e7f8      	b.n	8008e70 <_strtod_l+0x258>
 8008e7e:	2b0f      	cmp	r3, #15
 8008e80:	bfdc      	itt	le
 8008e82:	230a      	movle	r3, #10
 8008e84:	fb03 2707 	mlale	r7, r3, r7, r2
 8008e88:	e7e3      	b.n	8008e52 <_strtod_l+0x23a>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e77a      	b.n	8008d88 <_strtod_l+0x170>
 8008e92:	f04f 0c00 	mov.w	ip, #0
 8008e96:	1ca2      	adds	r2, r4, #2
 8008e98:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e9a:	78a2      	ldrb	r2, [r4, #2]
 8008e9c:	e782      	b.n	8008da4 <_strtod_l+0x18c>
 8008e9e:	f04f 0c01 	mov.w	ip, #1
 8008ea2:	e7f8      	b.n	8008e96 <_strtod_l+0x27e>
 8008ea4:	0800d108 	.word	0x0800d108
 8008ea8:	7ff00000 	.word	0x7ff00000
 8008eac:	0800cf20 	.word	0x0800cf20
 8008eb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008eb2:	1c51      	adds	r1, r2, #1
 8008eb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008eb6:	7852      	ldrb	r2, [r2, #1]
 8008eb8:	2a30      	cmp	r2, #48	@ 0x30
 8008eba:	d0f9      	beq.n	8008eb0 <_strtod_l+0x298>
 8008ebc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008ec0:	2908      	cmp	r1, #8
 8008ec2:	f63f af75 	bhi.w	8008db0 <_strtod_l+0x198>
 8008ec6:	f04f 080a 	mov.w	r8, #10
 8008eca:	3a30      	subs	r2, #48	@ 0x30
 8008ecc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ece:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ed0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008ed2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ed4:	1c56      	adds	r6, r2, #1
 8008ed6:	9619      	str	r6, [sp, #100]	@ 0x64
 8008ed8:	7852      	ldrb	r2, [r2, #1]
 8008eda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008ede:	f1be 0f09 	cmp.w	lr, #9
 8008ee2:	d939      	bls.n	8008f58 <_strtod_l+0x340>
 8008ee4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ee6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008eea:	1a76      	subs	r6, r6, r1
 8008eec:	2e08      	cmp	r6, #8
 8008eee:	dc03      	bgt.n	8008ef8 <_strtod_l+0x2e0>
 8008ef0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ef2:	4588      	cmp	r8, r1
 8008ef4:	bfa8      	it	ge
 8008ef6:	4688      	movge	r8, r1
 8008ef8:	f1bc 0f00 	cmp.w	ip, #0
 8008efc:	d001      	beq.n	8008f02 <_strtod_l+0x2ea>
 8008efe:	f1c8 0800 	rsb	r8, r8, #0
 8008f02:	2d00      	cmp	r5, #0
 8008f04:	d14e      	bne.n	8008fa4 <_strtod_l+0x38c>
 8008f06:	9908      	ldr	r1, [sp, #32]
 8008f08:	4308      	orrs	r0, r1
 8008f0a:	f47f aebe 	bne.w	8008c8a <_strtod_l+0x72>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f47f aed4 	bne.w	8008cbc <_strtod_l+0xa4>
 8008f14:	2a69      	cmp	r2, #105	@ 0x69
 8008f16:	d028      	beq.n	8008f6a <_strtod_l+0x352>
 8008f18:	dc25      	bgt.n	8008f66 <_strtod_l+0x34e>
 8008f1a:	2a49      	cmp	r2, #73	@ 0x49
 8008f1c:	d025      	beq.n	8008f6a <_strtod_l+0x352>
 8008f1e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008f20:	f47f aecc 	bne.w	8008cbc <_strtod_l+0xa4>
 8008f24:	4999      	ldr	r1, [pc, #612]	@ (800918c <_strtod_l+0x574>)
 8008f26:	a819      	add	r0, sp, #100	@ 0x64
 8008f28:	f002 fc58 	bl	800b7dc <__match>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f43f aec5 	beq.w	8008cbc <_strtod_l+0xa4>
 8008f32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b28      	cmp	r3, #40	@ 0x28
 8008f38:	d12e      	bne.n	8008f98 <_strtod_l+0x380>
 8008f3a:	4995      	ldr	r1, [pc, #596]	@ (8009190 <_strtod_l+0x578>)
 8008f3c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f3e:	a819      	add	r0, sp, #100	@ 0x64
 8008f40:	f002 fc60 	bl	800b804 <__hexnan>
 8008f44:	2805      	cmp	r0, #5
 8008f46:	d127      	bne.n	8008f98 <_strtod_l+0x380>
 8008f48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008f4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008f52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008f56:	e698      	b.n	8008c8a <_strtod_l+0x72>
 8008f58:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f5a:	fb08 2101 	mla	r1, r8, r1, r2
 8008f5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008f62:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f64:	e7b5      	b.n	8008ed2 <_strtod_l+0x2ba>
 8008f66:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f68:	e7da      	b.n	8008f20 <_strtod_l+0x308>
 8008f6a:	498a      	ldr	r1, [pc, #552]	@ (8009194 <_strtod_l+0x57c>)
 8008f6c:	a819      	add	r0, sp, #100	@ 0x64
 8008f6e:	f002 fc35 	bl	800b7dc <__match>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f43f aea2 	beq.w	8008cbc <_strtod_l+0xa4>
 8008f78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f7a:	4987      	ldr	r1, [pc, #540]	@ (8009198 <_strtod_l+0x580>)
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	a819      	add	r0, sp, #100	@ 0x64
 8008f80:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f82:	f002 fc2b 	bl	800b7dc <__match>
 8008f86:	b910      	cbnz	r0, 8008f8e <_strtod_l+0x376>
 8008f88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f8e:	f04f 0a00 	mov.w	sl, #0
 8008f92:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800919c <_strtod_l+0x584>
 8008f96:	e678      	b.n	8008c8a <_strtod_l+0x72>
 8008f98:	4881      	ldr	r0, [pc, #516]	@ (80091a0 <_strtod_l+0x588>)
 8008f9a:	f001 fae9 	bl	800a570 <nan>
 8008f9e:	4682      	mov	sl, r0
 8008fa0:	468b      	mov	fp, r1
 8008fa2:	e672      	b.n	8008c8a <_strtod_l+0x72>
 8008fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fa6:	f1b9 0f00 	cmp.w	r9, #0
 8008faa:	bf08      	it	eq
 8008fac:	46a9      	moveq	r9, r5
 8008fae:	eba8 0303 	sub.w	r3, r8, r3
 8008fb2:	2d10      	cmp	r5, #16
 8008fb4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008fb6:	462c      	mov	r4, r5
 8008fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fba:	bfa8      	it	ge
 8008fbc:	2410      	movge	r4, #16
 8008fbe:	f7f7 fa11 	bl	80003e4 <__aeabi_ui2d>
 8008fc2:	2d09      	cmp	r5, #9
 8008fc4:	4682      	mov	sl, r0
 8008fc6:	468b      	mov	fp, r1
 8008fc8:	dc11      	bgt.n	8008fee <_strtod_l+0x3d6>
 8008fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f43f ae5c 	beq.w	8008c8a <_strtod_l+0x72>
 8008fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd4:	dd76      	ble.n	80090c4 <_strtod_l+0x4ac>
 8008fd6:	2b16      	cmp	r3, #22
 8008fd8:	dc5d      	bgt.n	8009096 <_strtod_l+0x47e>
 8008fda:	4972      	ldr	r1, [pc, #456]	@ (80091a4 <_strtod_l+0x58c>)
 8008fdc:	4652      	mov	r2, sl
 8008fde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fe2:	465b      	mov	r3, fp
 8008fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe8:	f7f7 fa76 	bl	80004d8 <__aeabi_dmul>
 8008fec:	e7d7      	b.n	8008f9e <_strtod_l+0x386>
 8008fee:	4b6d      	ldr	r3, [pc, #436]	@ (80091a4 <_strtod_l+0x58c>)
 8008ff0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ff4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008ff8:	f7f7 fa6e 	bl	80004d8 <__aeabi_dmul>
 8008ffc:	4682      	mov	sl, r0
 8008ffe:	4638      	mov	r0, r7
 8009000:	468b      	mov	fp, r1
 8009002:	f7f7 f9ef 	bl	80003e4 <__aeabi_ui2d>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4650      	mov	r0, sl
 800900c:	4659      	mov	r1, fp
 800900e:	f7f7 f8ad 	bl	800016c <__adddf3>
 8009012:	2d0f      	cmp	r5, #15
 8009014:	4682      	mov	sl, r0
 8009016:	468b      	mov	fp, r1
 8009018:	ddd7      	ble.n	8008fca <_strtod_l+0x3b2>
 800901a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901c:	1b2c      	subs	r4, r5, r4
 800901e:	441c      	add	r4, r3
 8009020:	2c00      	cmp	r4, #0
 8009022:	f340 8093 	ble.w	800914c <_strtod_l+0x534>
 8009026:	f014 030f 	ands.w	r3, r4, #15
 800902a:	d00a      	beq.n	8009042 <_strtod_l+0x42a>
 800902c:	495d      	ldr	r1, [pc, #372]	@ (80091a4 <_strtod_l+0x58c>)
 800902e:	4652      	mov	r2, sl
 8009030:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009038:	465b      	mov	r3, fp
 800903a:	f7f7 fa4d 	bl	80004d8 <__aeabi_dmul>
 800903e:	4682      	mov	sl, r0
 8009040:	468b      	mov	fp, r1
 8009042:	f034 040f 	bics.w	r4, r4, #15
 8009046:	d073      	beq.n	8009130 <_strtod_l+0x518>
 8009048:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800904c:	dd49      	ble.n	80090e2 <_strtod_l+0x4ca>
 800904e:	2400      	movs	r4, #0
 8009050:	46a0      	mov	r8, r4
 8009052:	46a1      	mov	r9, r4
 8009054:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009056:	2322      	movs	r3, #34	@ 0x22
 8009058:	f04f 0a00 	mov.w	sl, #0
 800905c:	9a05      	ldr	r2, [sp, #20]
 800905e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800919c <_strtod_l+0x584>
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009066:	2b00      	cmp	r3, #0
 8009068:	f43f ae0f 	beq.w	8008c8a <_strtod_l+0x72>
 800906c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800906e:	9805      	ldr	r0, [sp, #20]
 8009070:	f002 fd6c 	bl	800bb4c <_Bfree>
 8009074:	4649      	mov	r1, r9
 8009076:	9805      	ldr	r0, [sp, #20]
 8009078:	f002 fd68 	bl	800bb4c <_Bfree>
 800907c:	4641      	mov	r1, r8
 800907e:	9805      	ldr	r0, [sp, #20]
 8009080:	f002 fd64 	bl	800bb4c <_Bfree>
 8009084:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009086:	9805      	ldr	r0, [sp, #20]
 8009088:	f002 fd60 	bl	800bb4c <_Bfree>
 800908c:	4621      	mov	r1, r4
 800908e:	9805      	ldr	r0, [sp, #20]
 8009090:	f002 fd5c 	bl	800bb4c <_Bfree>
 8009094:	e5f9      	b.n	8008c8a <_strtod_l+0x72>
 8009096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009098:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800909c:	4293      	cmp	r3, r2
 800909e:	dbbc      	blt.n	800901a <_strtod_l+0x402>
 80090a0:	4c40      	ldr	r4, [pc, #256]	@ (80091a4 <_strtod_l+0x58c>)
 80090a2:	f1c5 050f 	rsb	r5, r5, #15
 80090a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80090aa:	4652      	mov	r2, sl
 80090ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090b0:	465b      	mov	r3, fp
 80090b2:	f7f7 fa11 	bl	80004d8 <__aeabi_dmul>
 80090b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b8:	1b5d      	subs	r5, r3, r5
 80090ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80090be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090c2:	e791      	b.n	8008fe8 <_strtod_l+0x3d0>
 80090c4:	3316      	adds	r3, #22
 80090c6:	dba8      	blt.n	800901a <_strtod_l+0x402>
 80090c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ca:	4650      	mov	r0, sl
 80090cc:	eba3 0808 	sub.w	r8, r3, r8
 80090d0:	4b34      	ldr	r3, [pc, #208]	@ (80091a4 <_strtod_l+0x58c>)
 80090d2:	4659      	mov	r1, fp
 80090d4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80090d8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80090dc:	f7f7 fb26 	bl	800072c <__aeabi_ddiv>
 80090e0:	e75d      	b.n	8008f9e <_strtod_l+0x386>
 80090e2:	2300      	movs	r3, #0
 80090e4:	4650      	mov	r0, sl
 80090e6:	4659      	mov	r1, fp
 80090e8:	461e      	mov	r6, r3
 80090ea:	4f2f      	ldr	r7, [pc, #188]	@ (80091a8 <_strtod_l+0x590>)
 80090ec:	1124      	asrs	r4, r4, #4
 80090ee:	2c01      	cmp	r4, #1
 80090f0:	dc21      	bgt.n	8009136 <_strtod_l+0x51e>
 80090f2:	b10b      	cbz	r3, 80090f8 <_strtod_l+0x4e0>
 80090f4:	4682      	mov	sl, r0
 80090f6:	468b      	mov	fp, r1
 80090f8:	492b      	ldr	r1, [pc, #172]	@ (80091a8 <_strtod_l+0x590>)
 80090fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80090fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009102:	4652      	mov	r2, sl
 8009104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009108:	465b      	mov	r3, fp
 800910a:	f7f7 f9e5 	bl	80004d8 <__aeabi_dmul>
 800910e:	4b23      	ldr	r3, [pc, #140]	@ (800919c <_strtod_l+0x584>)
 8009110:	460a      	mov	r2, r1
 8009112:	400b      	ands	r3, r1
 8009114:	4925      	ldr	r1, [pc, #148]	@ (80091ac <_strtod_l+0x594>)
 8009116:	4682      	mov	sl, r0
 8009118:	428b      	cmp	r3, r1
 800911a:	d898      	bhi.n	800904e <_strtod_l+0x436>
 800911c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009120:	428b      	cmp	r3, r1
 8009122:	bf86      	itte	hi
 8009124:	f04f 3aff 	movhi.w	sl, #4294967295
 8009128:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80091b0 <_strtod_l+0x598>
 800912c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009130:	2300      	movs	r3, #0
 8009132:	9308      	str	r3, [sp, #32]
 8009134:	e076      	b.n	8009224 <_strtod_l+0x60c>
 8009136:	07e2      	lsls	r2, r4, #31
 8009138:	d504      	bpl.n	8009144 <_strtod_l+0x52c>
 800913a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800913e:	f7f7 f9cb 	bl	80004d8 <__aeabi_dmul>
 8009142:	2301      	movs	r3, #1
 8009144:	3601      	adds	r6, #1
 8009146:	1064      	asrs	r4, r4, #1
 8009148:	3708      	adds	r7, #8
 800914a:	e7d0      	b.n	80090ee <_strtod_l+0x4d6>
 800914c:	d0f0      	beq.n	8009130 <_strtod_l+0x518>
 800914e:	4264      	negs	r4, r4
 8009150:	f014 020f 	ands.w	r2, r4, #15
 8009154:	d00a      	beq.n	800916c <_strtod_l+0x554>
 8009156:	4b13      	ldr	r3, [pc, #76]	@ (80091a4 <_strtod_l+0x58c>)
 8009158:	4650      	mov	r0, sl
 800915a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800915e:	4659      	mov	r1, fp
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	f7f7 fae2 	bl	800072c <__aeabi_ddiv>
 8009168:	4682      	mov	sl, r0
 800916a:	468b      	mov	fp, r1
 800916c:	1124      	asrs	r4, r4, #4
 800916e:	d0df      	beq.n	8009130 <_strtod_l+0x518>
 8009170:	2c1f      	cmp	r4, #31
 8009172:	dd1f      	ble.n	80091b4 <_strtod_l+0x59c>
 8009174:	2400      	movs	r4, #0
 8009176:	46a0      	mov	r8, r4
 8009178:	46a1      	mov	r9, r4
 800917a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800917c:	2322      	movs	r3, #34	@ 0x22
 800917e:	9a05      	ldr	r2, [sp, #20]
 8009180:	f04f 0a00 	mov.w	sl, #0
 8009184:	f04f 0b00 	mov.w	fp, #0
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	e76b      	b.n	8009064 <_strtod_l+0x44c>
 800918c:	0800cf2f 	.word	0x0800cf2f
 8009190:	0800d0f4 	.word	0x0800d0f4
 8009194:	0800cf27 	.word	0x0800cf27
 8009198:	0800cf61 	.word	0x0800cf61
 800919c:	7ff00000 	.word	0x7ff00000
 80091a0:	0800d0f0 	.word	0x0800d0f0
 80091a4:	0800d280 	.word	0x0800d280
 80091a8:	0800d258 	.word	0x0800d258
 80091ac:	7ca00000 	.word	0x7ca00000
 80091b0:	7fefffff 	.word	0x7fefffff
 80091b4:	f014 0310 	ands.w	r3, r4, #16
 80091b8:	bf18      	it	ne
 80091ba:	236a      	movne	r3, #106	@ 0x6a
 80091bc:	4650      	mov	r0, sl
 80091be:	9308      	str	r3, [sp, #32]
 80091c0:	4659      	mov	r1, fp
 80091c2:	2300      	movs	r3, #0
 80091c4:	4e77      	ldr	r6, [pc, #476]	@ (80093a4 <_strtod_l+0x78c>)
 80091c6:	07e7      	lsls	r7, r4, #31
 80091c8:	d504      	bpl.n	80091d4 <_strtod_l+0x5bc>
 80091ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091ce:	f7f7 f983 	bl	80004d8 <__aeabi_dmul>
 80091d2:	2301      	movs	r3, #1
 80091d4:	1064      	asrs	r4, r4, #1
 80091d6:	f106 0608 	add.w	r6, r6, #8
 80091da:	d1f4      	bne.n	80091c6 <_strtod_l+0x5ae>
 80091dc:	b10b      	cbz	r3, 80091e2 <_strtod_l+0x5ca>
 80091de:	4682      	mov	sl, r0
 80091e0:	468b      	mov	fp, r1
 80091e2:	9b08      	ldr	r3, [sp, #32]
 80091e4:	b1b3      	cbz	r3, 8009214 <_strtod_l+0x5fc>
 80091e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80091ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	4659      	mov	r1, fp
 80091f2:	dd0f      	ble.n	8009214 <_strtod_l+0x5fc>
 80091f4:	2b1f      	cmp	r3, #31
 80091f6:	dd58      	ble.n	80092aa <_strtod_l+0x692>
 80091f8:	2b34      	cmp	r3, #52	@ 0x34
 80091fa:	bfd8      	it	le
 80091fc:	f04f 33ff 	movle.w	r3, #4294967295
 8009200:	f04f 0a00 	mov.w	sl, #0
 8009204:	bfcf      	iteee	gt
 8009206:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800920a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800920e:	4093      	lslle	r3, r2
 8009210:	ea03 0b01 	andle.w	fp, r3, r1
 8009214:	2200      	movs	r2, #0
 8009216:	2300      	movs	r3, #0
 8009218:	4650      	mov	r0, sl
 800921a:	4659      	mov	r1, fp
 800921c:	f7f7 fbc4 	bl	80009a8 <__aeabi_dcmpeq>
 8009220:	2800      	cmp	r0, #0
 8009222:	d1a7      	bne.n	8009174 <_strtod_l+0x55c>
 8009224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009226:	464a      	mov	r2, r9
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800922c:	462b      	mov	r3, r5
 800922e:	9805      	ldr	r0, [sp, #20]
 8009230:	f002 fcf4 	bl	800bc1c <__s2b>
 8009234:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009236:	2800      	cmp	r0, #0
 8009238:	f43f af09 	beq.w	800904e <_strtod_l+0x436>
 800923c:	2400      	movs	r4, #0
 800923e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009242:	2a00      	cmp	r2, #0
 8009244:	eba3 0308 	sub.w	r3, r3, r8
 8009248:	bfa8      	it	ge
 800924a:	2300      	movge	r3, #0
 800924c:	46a0      	mov	r8, r4
 800924e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009250:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009254:	9316      	str	r3, [sp, #88]	@ 0x58
 8009256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009258:	9805      	ldr	r0, [sp, #20]
 800925a:	6859      	ldr	r1, [r3, #4]
 800925c:	f002 fc36 	bl	800bacc <_Balloc>
 8009260:	4681      	mov	r9, r0
 8009262:	2800      	cmp	r0, #0
 8009264:	f43f aef7 	beq.w	8009056 <_strtod_l+0x43e>
 8009268:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800926a:	300c      	adds	r0, #12
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	f103 010c 	add.w	r1, r3, #12
 8009272:	3202      	adds	r2, #2
 8009274:	0092      	lsls	r2, r2, #2
 8009276:	f001 f96c 	bl	800a552 <memcpy>
 800927a:	ab1c      	add	r3, sp, #112	@ 0x70
 800927c:	9301      	str	r3, [sp, #4]
 800927e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	4652      	mov	r2, sl
 8009284:	465b      	mov	r3, fp
 8009286:	9805      	ldr	r0, [sp, #20]
 8009288:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800928c:	f002 fff2 	bl	800c274 <__d2b>
 8009290:	901a      	str	r0, [sp, #104]	@ 0x68
 8009292:	2800      	cmp	r0, #0
 8009294:	f43f aedf 	beq.w	8009056 <_strtod_l+0x43e>
 8009298:	2101      	movs	r1, #1
 800929a:	9805      	ldr	r0, [sp, #20]
 800929c:	f002 fd54 	bl	800bd48 <__i2b>
 80092a0:	4680      	mov	r8, r0
 80092a2:	b948      	cbnz	r0, 80092b8 <_strtod_l+0x6a0>
 80092a4:	f04f 0800 	mov.w	r8, #0
 80092a8:	e6d5      	b.n	8009056 <_strtod_l+0x43e>
 80092aa:	f04f 32ff 	mov.w	r2, #4294967295
 80092ae:	fa02 f303 	lsl.w	r3, r2, r3
 80092b2:	ea03 0a0a 	and.w	sl, r3, sl
 80092b6:	e7ad      	b.n	8009214 <_strtod_l+0x5fc>
 80092b8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80092ba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80092bc:	2d00      	cmp	r5, #0
 80092be:	bfab      	itete	ge
 80092c0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80092c2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80092c4:	18ef      	addge	r7, r5, r3
 80092c6:	1b5e      	sublt	r6, r3, r5
 80092c8:	9b08      	ldr	r3, [sp, #32]
 80092ca:	bfa8      	it	ge
 80092cc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80092ce:	eba5 0503 	sub.w	r5, r5, r3
 80092d2:	4415      	add	r5, r2
 80092d4:	4b34      	ldr	r3, [pc, #208]	@ (80093a8 <_strtod_l+0x790>)
 80092d6:	f105 35ff 	add.w	r5, r5, #4294967295
 80092da:	bfb8      	it	lt
 80092dc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80092de:	429d      	cmp	r5, r3
 80092e0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80092e4:	da50      	bge.n	8009388 <_strtod_l+0x770>
 80092e6:	1b5b      	subs	r3, r3, r5
 80092e8:	2b1f      	cmp	r3, #31
 80092ea:	f04f 0101 	mov.w	r1, #1
 80092ee:	eba2 0203 	sub.w	r2, r2, r3
 80092f2:	dc3d      	bgt.n	8009370 <_strtod_l+0x758>
 80092f4:	fa01 f303 	lsl.w	r3, r1, r3
 80092f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092fa:	2300      	movs	r3, #0
 80092fc:	9310      	str	r3, [sp, #64]	@ 0x40
 80092fe:	18bd      	adds	r5, r7, r2
 8009300:	9b08      	ldr	r3, [sp, #32]
 8009302:	42af      	cmp	r7, r5
 8009304:	4416      	add	r6, r2
 8009306:	441e      	add	r6, r3
 8009308:	463b      	mov	r3, r7
 800930a:	bfa8      	it	ge
 800930c:	462b      	movge	r3, r5
 800930e:	42b3      	cmp	r3, r6
 8009310:	bfa8      	it	ge
 8009312:	4633      	movge	r3, r6
 8009314:	2b00      	cmp	r3, #0
 8009316:	bfc2      	ittt	gt
 8009318:	1aed      	subgt	r5, r5, r3
 800931a:	1af6      	subgt	r6, r6, r3
 800931c:	1aff      	subgt	r7, r7, r3
 800931e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009320:	2b00      	cmp	r3, #0
 8009322:	dd16      	ble.n	8009352 <_strtod_l+0x73a>
 8009324:	4641      	mov	r1, r8
 8009326:	461a      	mov	r2, r3
 8009328:	9805      	ldr	r0, [sp, #20]
 800932a:	f002 fdc5 	bl	800beb8 <__pow5mult>
 800932e:	4680      	mov	r8, r0
 8009330:	2800      	cmp	r0, #0
 8009332:	d0b7      	beq.n	80092a4 <_strtod_l+0x68c>
 8009334:	4601      	mov	r1, r0
 8009336:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009338:	9805      	ldr	r0, [sp, #20]
 800933a:	f002 fd1b 	bl	800bd74 <__multiply>
 800933e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009340:	2800      	cmp	r0, #0
 8009342:	f43f ae88 	beq.w	8009056 <_strtod_l+0x43e>
 8009346:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009348:	9805      	ldr	r0, [sp, #20]
 800934a:	f002 fbff 	bl	800bb4c <_Bfree>
 800934e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009350:	931a      	str	r3, [sp, #104]	@ 0x68
 8009352:	2d00      	cmp	r5, #0
 8009354:	dc1d      	bgt.n	8009392 <_strtod_l+0x77a>
 8009356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	dd27      	ble.n	80093ac <_strtod_l+0x794>
 800935c:	4649      	mov	r1, r9
 800935e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009360:	9805      	ldr	r0, [sp, #20]
 8009362:	f002 fda9 	bl	800beb8 <__pow5mult>
 8009366:	4681      	mov	r9, r0
 8009368:	bb00      	cbnz	r0, 80093ac <_strtod_l+0x794>
 800936a:	f04f 0900 	mov.w	r9, #0
 800936e:	e672      	b.n	8009056 <_strtod_l+0x43e>
 8009370:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009374:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009378:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800937c:	35e2      	adds	r5, #226	@ 0xe2
 800937e:	fa01 f305 	lsl.w	r3, r1, r5
 8009382:	9310      	str	r3, [sp, #64]	@ 0x40
 8009384:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009386:	e7ba      	b.n	80092fe <_strtod_l+0x6e6>
 8009388:	2300      	movs	r3, #0
 800938a:	9310      	str	r3, [sp, #64]	@ 0x40
 800938c:	2301      	movs	r3, #1
 800938e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009390:	e7b5      	b.n	80092fe <_strtod_l+0x6e6>
 8009392:	462a      	mov	r2, r5
 8009394:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009396:	9805      	ldr	r0, [sp, #20]
 8009398:	f002 fde8 	bl	800bf6c <__lshift>
 800939c:	901a      	str	r0, [sp, #104]	@ 0x68
 800939e:	2800      	cmp	r0, #0
 80093a0:	d1d9      	bne.n	8009356 <_strtod_l+0x73e>
 80093a2:	e658      	b.n	8009056 <_strtod_l+0x43e>
 80093a4:	0800d120 	.word	0x0800d120
 80093a8:	fffffc02 	.word	0xfffffc02
 80093ac:	2e00      	cmp	r6, #0
 80093ae:	dd07      	ble.n	80093c0 <_strtod_l+0x7a8>
 80093b0:	4649      	mov	r1, r9
 80093b2:	4632      	mov	r2, r6
 80093b4:	9805      	ldr	r0, [sp, #20]
 80093b6:	f002 fdd9 	bl	800bf6c <__lshift>
 80093ba:	4681      	mov	r9, r0
 80093bc:	2800      	cmp	r0, #0
 80093be:	d0d4      	beq.n	800936a <_strtod_l+0x752>
 80093c0:	2f00      	cmp	r7, #0
 80093c2:	dd08      	ble.n	80093d6 <_strtod_l+0x7be>
 80093c4:	4641      	mov	r1, r8
 80093c6:	463a      	mov	r2, r7
 80093c8:	9805      	ldr	r0, [sp, #20]
 80093ca:	f002 fdcf 	bl	800bf6c <__lshift>
 80093ce:	4680      	mov	r8, r0
 80093d0:	2800      	cmp	r0, #0
 80093d2:	f43f ae40 	beq.w	8009056 <_strtod_l+0x43e>
 80093d6:	464a      	mov	r2, r9
 80093d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093da:	9805      	ldr	r0, [sp, #20]
 80093dc:	f002 fe4e 	bl	800c07c <__mdiff>
 80093e0:	4604      	mov	r4, r0
 80093e2:	2800      	cmp	r0, #0
 80093e4:	f43f ae37 	beq.w	8009056 <_strtod_l+0x43e>
 80093e8:	68c3      	ldr	r3, [r0, #12]
 80093ea:	4641      	mov	r1, r8
 80093ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093ee:	2300      	movs	r3, #0
 80093f0:	60c3      	str	r3, [r0, #12]
 80093f2:	f002 fe27 	bl	800c044 <__mcmp>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	da3d      	bge.n	8009476 <_strtod_l+0x85e>
 80093fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093fc:	ea53 030a 	orrs.w	r3, r3, sl
 8009400:	d163      	bne.n	80094ca <_strtod_l+0x8b2>
 8009402:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009406:	2b00      	cmp	r3, #0
 8009408:	d15f      	bne.n	80094ca <_strtod_l+0x8b2>
 800940a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800940e:	0d1b      	lsrs	r3, r3, #20
 8009410:	051b      	lsls	r3, r3, #20
 8009412:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009416:	d958      	bls.n	80094ca <_strtod_l+0x8b2>
 8009418:	6963      	ldr	r3, [r4, #20]
 800941a:	b913      	cbnz	r3, 8009422 <_strtod_l+0x80a>
 800941c:	6923      	ldr	r3, [r4, #16]
 800941e:	2b01      	cmp	r3, #1
 8009420:	dd53      	ble.n	80094ca <_strtod_l+0x8b2>
 8009422:	4621      	mov	r1, r4
 8009424:	2201      	movs	r2, #1
 8009426:	9805      	ldr	r0, [sp, #20]
 8009428:	f002 fda0 	bl	800bf6c <__lshift>
 800942c:	4641      	mov	r1, r8
 800942e:	4604      	mov	r4, r0
 8009430:	f002 fe08 	bl	800c044 <__mcmp>
 8009434:	2800      	cmp	r0, #0
 8009436:	dd48      	ble.n	80094ca <_strtod_l+0x8b2>
 8009438:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800943c:	9a08      	ldr	r2, [sp, #32]
 800943e:	0d1b      	lsrs	r3, r3, #20
 8009440:	051b      	lsls	r3, r3, #20
 8009442:	2a00      	cmp	r2, #0
 8009444:	d062      	beq.n	800950c <_strtod_l+0x8f4>
 8009446:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800944a:	d85f      	bhi.n	800950c <_strtod_l+0x8f4>
 800944c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009450:	f67f ae94 	bls.w	800917c <_strtod_l+0x564>
 8009454:	4650      	mov	r0, sl
 8009456:	4659      	mov	r1, fp
 8009458:	4ba3      	ldr	r3, [pc, #652]	@ (80096e8 <_strtod_l+0xad0>)
 800945a:	2200      	movs	r2, #0
 800945c:	f7f7 f83c 	bl	80004d8 <__aeabi_dmul>
 8009460:	4ba2      	ldr	r3, [pc, #648]	@ (80096ec <_strtod_l+0xad4>)
 8009462:	4682      	mov	sl, r0
 8009464:	400b      	ands	r3, r1
 8009466:	468b      	mov	fp, r1
 8009468:	2b00      	cmp	r3, #0
 800946a:	f47f adff 	bne.w	800906c <_strtod_l+0x454>
 800946e:	2322      	movs	r3, #34	@ 0x22
 8009470:	9a05      	ldr	r2, [sp, #20]
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	e5fa      	b.n	800906c <_strtod_l+0x454>
 8009476:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800947a:	d165      	bne.n	8009548 <_strtod_l+0x930>
 800947c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800947e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009482:	b35a      	cbz	r2, 80094dc <_strtod_l+0x8c4>
 8009484:	4a9a      	ldr	r2, [pc, #616]	@ (80096f0 <_strtod_l+0xad8>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d12b      	bne.n	80094e2 <_strtod_l+0x8ca>
 800948a:	9b08      	ldr	r3, [sp, #32]
 800948c:	4651      	mov	r1, sl
 800948e:	b303      	cbz	r3, 80094d2 <_strtod_l+0x8ba>
 8009490:	465a      	mov	r2, fp
 8009492:	4b96      	ldr	r3, [pc, #600]	@ (80096ec <_strtod_l+0xad4>)
 8009494:	4013      	ands	r3, r2
 8009496:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800949a:	f04f 32ff 	mov.w	r2, #4294967295
 800949e:	d81b      	bhi.n	80094d8 <_strtod_l+0x8c0>
 80094a0:	0d1b      	lsrs	r3, r3, #20
 80094a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80094a6:	fa02 f303 	lsl.w	r3, r2, r3
 80094aa:	4299      	cmp	r1, r3
 80094ac:	d119      	bne.n	80094e2 <_strtod_l+0x8ca>
 80094ae:	4b91      	ldr	r3, [pc, #580]	@ (80096f4 <_strtod_l+0xadc>)
 80094b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d102      	bne.n	80094bc <_strtod_l+0x8a4>
 80094b6:	3101      	adds	r1, #1
 80094b8:	f43f adcd 	beq.w	8009056 <_strtod_l+0x43e>
 80094bc:	f04f 0a00 	mov.w	sl, #0
 80094c0:	4b8a      	ldr	r3, [pc, #552]	@ (80096ec <_strtod_l+0xad4>)
 80094c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094c4:	401a      	ands	r2, r3
 80094c6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80094ca:	9b08      	ldr	r3, [sp, #32]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1c1      	bne.n	8009454 <_strtod_l+0x83c>
 80094d0:	e5cc      	b.n	800906c <_strtod_l+0x454>
 80094d2:	f04f 33ff 	mov.w	r3, #4294967295
 80094d6:	e7e8      	b.n	80094aa <_strtod_l+0x892>
 80094d8:	4613      	mov	r3, r2
 80094da:	e7e6      	b.n	80094aa <_strtod_l+0x892>
 80094dc:	ea53 030a 	orrs.w	r3, r3, sl
 80094e0:	d0aa      	beq.n	8009438 <_strtod_l+0x820>
 80094e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094e4:	b1db      	cbz	r3, 800951e <_strtod_l+0x906>
 80094e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094e8:	4213      	tst	r3, r2
 80094ea:	d0ee      	beq.n	80094ca <_strtod_l+0x8b2>
 80094ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ee:	4650      	mov	r0, sl
 80094f0:	4659      	mov	r1, fp
 80094f2:	9a08      	ldr	r2, [sp, #32]
 80094f4:	b1bb      	cbz	r3, 8009526 <_strtod_l+0x90e>
 80094f6:	f7ff fb6e 	bl	8008bd6 <sulp>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009502:	f7f6 fe33 	bl	800016c <__adddf3>
 8009506:	4682      	mov	sl, r0
 8009508:	468b      	mov	fp, r1
 800950a:	e7de      	b.n	80094ca <_strtod_l+0x8b2>
 800950c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009510:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009514:	f04f 3aff 	mov.w	sl, #4294967295
 8009518:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800951c:	e7d5      	b.n	80094ca <_strtod_l+0x8b2>
 800951e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009520:	ea13 0f0a 	tst.w	r3, sl
 8009524:	e7e1      	b.n	80094ea <_strtod_l+0x8d2>
 8009526:	f7ff fb56 	bl	8008bd6 <sulp>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009532:	f7f6 fe19 	bl	8000168 <__aeabi_dsub>
 8009536:	2200      	movs	r2, #0
 8009538:	2300      	movs	r3, #0
 800953a:	4682      	mov	sl, r0
 800953c:	468b      	mov	fp, r1
 800953e:	f7f7 fa33 	bl	80009a8 <__aeabi_dcmpeq>
 8009542:	2800      	cmp	r0, #0
 8009544:	d0c1      	beq.n	80094ca <_strtod_l+0x8b2>
 8009546:	e619      	b.n	800917c <_strtod_l+0x564>
 8009548:	4641      	mov	r1, r8
 800954a:	4620      	mov	r0, r4
 800954c:	f002 feea 	bl	800c324 <__ratio>
 8009550:	2200      	movs	r2, #0
 8009552:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009556:	4606      	mov	r6, r0
 8009558:	460f      	mov	r7, r1
 800955a:	f7f7 fa39 	bl	80009d0 <__aeabi_dcmple>
 800955e:	2800      	cmp	r0, #0
 8009560:	d06d      	beq.n	800963e <_strtod_l+0xa26>
 8009562:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d178      	bne.n	800965a <_strtod_l+0xa42>
 8009568:	f1ba 0f00 	cmp.w	sl, #0
 800956c:	d156      	bne.n	800961c <_strtod_l+0xa04>
 800956e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009574:	2b00      	cmp	r3, #0
 8009576:	d158      	bne.n	800962a <_strtod_l+0xa12>
 8009578:	2200      	movs	r2, #0
 800957a:	4630      	mov	r0, r6
 800957c:	4639      	mov	r1, r7
 800957e:	4b5e      	ldr	r3, [pc, #376]	@ (80096f8 <_strtod_l+0xae0>)
 8009580:	f7f7 fa1c 	bl	80009bc <__aeabi_dcmplt>
 8009584:	2800      	cmp	r0, #0
 8009586:	d157      	bne.n	8009638 <_strtod_l+0xa20>
 8009588:	4630      	mov	r0, r6
 800958a:	4639      	mov	r1, r7
 800958c:	2200      	movs	r2, #0
 800958e:	4b5b      	ldr	r3, [pc, #364]	@ (80096fc <_strtod_l+0xae4>)
 8009590:	f7f6 ffa2 	bl	80004d8 <__aeabi_dmul>
 8009594:	4606      	mov	r6, r0
 8009596:	460f      	mov	r7, r1
 8009598:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800959c:	9606      	str	r6, [sp, #24]
 800959e:	9307      	str	r3, [sp, #28]
 80095a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095a4:	4d51      	ldr	r5, [pc, #324]	@ (80096ec <_strtod_l+0xad4>)
 80095a6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80095aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ac:	401d      	ands	r5, r3
 80095ae:	4b54      	ldr	r3, [pc, #336]	@ (8009700 <_strtod_l+0xae8>)
 80095b0:	429d      	cmp	r5, r3
 80095b2:	f040 80ab 	bne.w	800970c <_strtod_l+0xaf4>
 80095b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095b8:	4650      	mov	r0, sl
 80095ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80095be:	4659      	mov	r1, fp
 80095c0:	f002 fdf0 	bl	800c1a4 <__ulp>
 80095c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095c8:	f7f6 ff86 	bl	80004d8 <__aeabi_dmul>
 80095cc:	4652      	mov	r2, sl
 80095ce:	465b      	mov	r3, fp
 80095d0:	f7f6 fdcc 	bl	800016c <__adddf3>
 80095d4:	460b      	mov	r3, r1
 80095d6:	4945      	ldr	r1, [pc, #276]	@ (80096ec <_strtod_l+0xad4>)
 80095d8:	4a4a      	ldr	r2, [pc, #296]	@ (8009704 <_strtod_l+0xaec>)
 80095da:	4019      	ands	r1, r3
 80095dc:	4291      	cmp	r1, r2
 80095de:	4682      	mov	sl, r0
 80095e0:	d942      	bls.n	8009668 <_strtod_l+0xa50>
 80095e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095e4:	4b43      	ldr	r3, [pc, #268]	@ (80096f4 <_strtod_l+0xadc>)
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d103      	bne.n	80095f2 <_strtod_l+0x9da>
 80095ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095ec:	3301      	adds	r3, #1
 80095ee:	f43f ad32 	beq.w	8009056 <_strtod_l+0x43e>
 80095f2:	f04f 3aff 	mov.w	sl, #4294967295
 80095f6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80096f4 <_strtod_l+0xadc>
 80095fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095fc:	9805      	ldr	r0, [sp, #20]
 80095fe:	f002 faa5 	bl	800bb4c <_Bfree>
 8009602:	4649      	mov	r1, r9
 8009604:	9805      	ldr	r0, [sp, #20]
 8009606:	f002 faa1 	bl	800bb4c <_Bfree>
 800960a:	4641      	mov	r1, r8
 800960c:	9805      	ldr	r0, [sp, #20]
 800960e:	f002 fa9d 	bl	800bb4c <_Bfree>
 8009612:	4621      	mov	r1, r4
 8009614:	9805      	ldr	r0, [sp, #20]
 8009616:	f002 fa99 	bl	800bb4c <_Bfree>
 800961a:	e61c      	b.n	8009256 <_strtod_l+0x63e>
 800961c:	f1ba 0f01 	cmp.w	sl, #1
 8009620:	d103      	bne.n	800962a <_strtod_l+0xa12>
 8009622:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009624:	2b00      	cmp	r3, #0
 8009626:	f43f ada9 	beq.w	800917c <_strtod_l+0x564>
 800962a:	2200      	movs	r2, #0
 800962c:	4b36      	ldr	r3, [pc, #216]	@ (8009708 <_strtod_l+0xaf0>)
 800962e:	2600      	movs	r6, #0
 8009630:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009634:	4f30      	ldr	r7, [pc, #192]	@ (80096f8 <_strtod_l+0xae0>)
 8009636:	e7b3      	b.n	80095a0 <_strtod_l+0x988>
 8009638:	2600      	movs	r6, #0
 800963a:	4f30      	ldr	r7, [pc, #192]	@ (80096fc <_strtod_l+0xae4>)
 800963c:	e7ac      	b.n	8009598 <_strtod_l+0x980>
 800963e:	4630      	mov	r0, r6
 8009640:	4639      	mov	r1, r7
 8009642:	4b2e      	ldr	r3, [pc, #184]	@ (80096fc <_strtod_l+0xae4>)
 8009644:	2200      	movs	r2, #0
 8009646:	f7f6 ff47 	bl	80004d8 <__aeabi_dmul>
 800964a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800964c:	4606      	mov	r6, r0
 800964e:	460f      	mov	r7, r1
 8009650:	2b00      	cmp	r3, #0
 8009652:	d0a1      	beq.n	8009598 <_strtod_l+0x980>
 8009654:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009658:	e7a2      	b.n	80095a0 <_strtod_l+0x988>
 800965a:	2200      	movs	r2, #0
 800965c:	4b26      	ldr	r3, [pc, #152]	@ (80096f8 <_strtod_l+0xae0>)
 800965e:	4616      	mov	r6, r2
 8009660:	461f      	mov	r7, r3
 8009662:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009666:	e79b      	b.n	80095a0 <_strtod_l+0x988>
 8009668:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800966c:	9b08      	ldr	r3, [sp, #32]
 800966e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1c1      	bne.n	80095fa <_strtod_l+0x9e2>
 8009676:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800967a:	0d1b      	lsrs	r3, r3, #20
 800967c:	051b      	lsls	r3, r3, #20
 800967e:	429d      	cmp	r5, r3
 8009680:	d1bb      	bne.n	80095fa <_strtod_l+0x9e2>
 8009682:	4630      	mov	r0, r6
 8009684:	4639      	mov	r1, r7
 8009686:	f7f7 fd63 	bl	8001150 <__aeabi_d2lz>
 800968a:	f7f6 fef7 	bl	800047c <__aeabi_l2d>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4630      	mov	r0, r6
 8009694:	4639      	mov	r1, r7
 8009696:	f7f6 fd67 	bl	8000168 <__aeabi_dsub>
 800969a:	460b      	mov	r3, r1
 800969c:	4602      	mov	r2, r0
 800969e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80096a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80096a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096a8:	ea46 060a 	orr.w	r6, r6, sl
 80096ac:	431e      	orrs	r6, r3
 80096ae:	d06a      	beq.n	8009786 <_strtod_l+0xb6e>
 80096b0:	a309      	add	r3, pc, #36	@ (adr r3, 80096d8 <_strtod_l+0xac0>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	f7f7 f981 	bl	80009bc <__aeabi_dcmplt>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	f47f acd6 	bne.w	800906c <_strtod_l+0x454>
 80096c0:	a307      	add	r3, pc, #28	@ (adr r3, 80096e0 <_strtod_l+0xac8>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096ca:	f7f7 f995 	bl	80009f8 <__aeabi_dcmpgt>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d093      	beq.n	80095fa <_strtod_l+0x9e2>
 80096d2:	e4cb      	b.n	800906c <_strtod_l+0x454>
 80096d4:	f3af 8000 	nop.w
 80096d8:	94a03595 	.word	0x94a03595
 80096dc:	3fdfffff 	.word	0x3fdfffff
 80096e0:	35afe535 	.word	0x35afe535
 80096e4:	3fe00000 	.word	0x3fe00000
 80096e8:	39500000 	.word	0x39500000
 80096ec:	7ff00000 	.word	0x7ff00000
 80096f0:	000fffff 	.word	0x000fffff
 80096f4:	7fefffff 	.word	0x7fefffff
 80096f8:	3ff00000 	.word	0x3ff00000
 80096fc:	3fe00000 	.word	0x3fe00000
 8009700:	7fe00000 	.word	0x7fe00000
 8009704:	7c9fffff 	.word	0x7c9fffff
 8009708:	bff00000 	.word	0xbff00000
 800970c:	9b08      	ldr	r3, [sp, #32]
 800970e:	b323      	cbz	r3, 800975a <_strtod_l+0xb42>
 8009710:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009714:	d821      	bhi.n	800975a <_strtod_l+0xb42>
 8009716:	a328      	add	r3, pc, #160	@ (adr r3, 80097b8 <_strtod_l+0xba0>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f7 f956 	bl	80009d0 <__aeabi_dcmple>
 8009724:	b1a0      	cbz	r0, 8009750 <_strtod_l+0xb38>
 8009726:	4639      	mov	r1, r7
 8009728:	4630      	mov	r0, r6
 800972a:	f7f7 f9ad 	bl	8000a88 <__aeabi_d2uiz>
 800972e:	2801      	cmp	r0, #1
 8009730:	bf38      	it	cc
 8009732:	2001      	movcc	r0, #1
 8009734:	f7f6 fe56 	bl	80003e4 <__aeabi_ui2d>
 8009738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800973a:	4606      	mov	r6, r0
 800973c:	460f      	mov	r7, r1
 800973e:	b9fb      	cbnz	r3, 8009780 <_strtod_l+0xb68>
 8009740:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009744:	9014      	str	r0, [sp, #80]	@ 0x50
 8009746:	9315      	str	r3, [sp, #84]	@ 0x54
 8009748:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800974c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009750:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009752:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009756:	1b5b      	subs	r3, r3, r5
 8009758:	9311      	str	r3, [sp, #68]	@ 0x44
 800975a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800975e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009762:	f002 fd1f 	bl	800c1a4 <__ulp>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	4650      	mov	r0, sl
 800976c:	4659      	mov	r1, fp
 800976e:	f7f6 feb3 	bl	80004d8 <__aeabi_dmul>
 8009772:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009776:	f7f6 fcf9 	bl	800016c <__adddf3>
 800977a:	4682      	mov	sl, r0
 800977c:	468b      	mov	fp, r1
 800977e:	e775      	b.n	800966c <_strtod_l+0xa54>
 8009780:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009784:	e7e0      	b.n	8009748 <_strtod_l+0xb30>
 8009786:	a30e      	add	r3, pc, #56	@ (adr r3, 80097c0 <_strtod_l+0xba8>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f7f7 f916 	bl	80009bc <__aeabi_dcmplt>
 8009790:	e79d      	b.n	80096ce <_strtod_l+0xab6>
 8009792:	2300      	movs	r3, #0
 8009794:	930e      	str	r3, [sp, #56]	@ 0x38
 8009796:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009798:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	f7ff ba79 	b.w	8008c92 <_strtod_l+0x7a>
 80097a0:	2a65      	cmp	r2, #101	@ 0x65
 80097a2:	f43f ab72 	beq.w	8008e8a <_strtod_l+0x272>
 80097a6:	2a45      	cmp	r2, #69	@ 0x45
 80097a8:	f43f ab6f 	beq.w	8008e8a <_strtod_l+0x272>
 80097ac:	2301      	movs	r3, #1
 80097ae:	f7ff bbaa 	b.w	8008f06 <_strtod_l+0x2ee>
 80097b2:	bf00      	nop
 80097b4:	f3af 8000 	nop.w
 80097b8:	ffc00000 	.word	0xffc00000
 80097bc:	41dfffff 	.word	0x41dfffff
 80097c0:	94a03595 	.word	0x94a03595
 80097c4:	3fcfffff 	.word	0x3fcfffff

080097c8 <strtod>:
 80097c8:	460a      	mov	r2, r1
 80097ca:	4601      	mov	r1, r0
 80097cc:	4802      	ldr	r0, [pc, #8]	@ (80097d8 <strtod+0x10>)
 80097ce:	4b03      	ldr	r3, [pc, #12]	@ (80097dc <strtod+0x14>)
 80097d0:	6800      	ldr	r0, [r0, #0]
 80097d2:	f7ff ba21 	b.w	8008c18 <_strtod_l>
 80097d6:	bf00      	nop
 80097d8:	2000018c 	.word	0x2000018c
 80097dc:	20000020 	.word	0x20000020

080097e0 <_strtol_l.isra.0>:
 80097e0:	2b24      	cmp	r3, #36	@ 0x24
 80097e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e6:	4686      	mov	lr, r0
 80097e8:	4690      	mov	r8, r2
 80097ea:	d801      	bhi.n	80097f0 <_strtol_l.isra.0+0x10>
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d106      	bne.n	80097fe <_strtol_l.isra.0+0x1e>
 80097f0:	f000 fe74 	bl	800a4dc <__errno>
 80097f4:	2316      	movs	r3, #22
 80097f6:	6003      	str	r3, [r0, #0]
 80097f8:	2000      	movs	r0, #0
 80097fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fe:	460d      	mov	r5, r1
 8009800:	4833      	ldr	r0, [pc, #204]	@ (80098d0 <_strtol_l.isra.0+0xf0>)
 8009802:	462a      	mov	r2, r5
 8009804:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009808:	5d06      	ldrb	r6, [r0, r4]
 800980a:	f016 0608 	ands.w	r6, r6, #8
 800980e:	d1f8      	bne.n	8009802 <_strtol_l.isra.0+0x22>
 8009810:	2c2d      	cmp	r4, #45	@ 0x2d
 8009812:	d110      	bne.n	8009836 <_strtol_l.isra.0+0x56>
 8009814:	2601      	movs	r6, #1
 8009816:	782c      	ldrb	r4, [r5, #0]
 8009818:	1c95      	adds	r5, r2, #2
 800981a:	f033 0210 	bics.w	r2, r3, #16
 800981e:	d115      	bne.n	800984c <_strtol_l.isra.0+0x6c>
 8009820:	2c30      	cmp	r4, #48	@ 0x30
 8009822:	d10d      	bne.n	8009840 <_strtol_l.isra.0+0x60>
 8009824:	782a      	ldrb	r2, [r5, #0]
 8009826:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800982a:	2a58      	cmp	r2, #88	@ 0x58
 800982c:	d108      	bne.n	8009840 <_strtol_l.isra.0+0x60>
 800982e:	786c      	ldrb	r4, [r5, #1]
 8009830:	3502      	adds	r5, #2
 8009832:	2310      	movs	r3, #16
 8009834:	e00a      	b.n	800984c <_strtol_l.isra.0+0x6c>
 8009836:	2c2b      	cmp	r4, #43	@ 0x2b
 8009838:	bf04      	itt	eq
 800983a:	782c      	ldrbeq	r4, [r5, #0]
 800983c:	1c95      	addeq	r5, r2, #2
 800983e:	e7ec      	b.n	800981a <_strtol_l.isra.0+0x3a>
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1f6      	bne.n	8009832 <_strtol_l.isra.0+0x52>
 8009844:	2c30      	cmp	r4, #48	@ 0x30
 8009846:	bf14      	ite	ne
 8009848:	230a      	movne	r3, #10
 800984a:	2308      	moveq	r3, #8
 800984c:	2200      	movs	r2, #0
 800984e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009852:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009856:	fbbc f9f3 	udiv	r9, ip, r3
 800985a:	4610      	mov	r0, r2
 800985c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009860:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009864:	2f09      	cmp	r7, #9
 8009866:	d80f      	bhi.n	8009888 <_strtol_l.isra.0+0xa8>
 8009868:	463c      	mov	r4, r7
 800986a:	42a3      	cmp	r3, r4
 800986c:	dd1b      	ble.n	80098a6 <_strtol_l.isra.0+0xc6>
 800986e:	1c57      	adds	r7, r2, #1
 8009870:	d007      	beq.n	8009882 <_strtol_l.isra.0+0xa2>
 8009872:	4581      	cmp	r9, r0
 8009874:	d314      	bcc.n	80098a0 <_strtol_l.isra.0+0xc0>
 8009876:	d101      	bne.n	800987c <_strtol_l.isra.0+0x9c>
 8009878:	45a2      	cmp	sl, r4
 800987a:	db11      	blt.n	80098a0 <_strtol_l.isra.0+0xc0>
 800987c:	2201      	movs	r2, #1
 800987e:	fb00 4003 	mla	r0, r0, r3, r4
 8009882:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009886:	e7eb      	b.n	8009860 <_strtol_l.isra.0+0x80>
 8009888:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800988c:	2f19      	cmp	r7, #25
 800988e:	d801      	bhi.n	8009894 <_strtol_l.isra.0+0xb4>
 8009890:	3c37      	subs	r4, #55	@ 0x37
 8009892:	e7ea      	b.n	800986a <_strtol_l.isra.0+0x8a>
 8009894:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009898:	2f19      	cmp	r7, #25
 800989a:	d804      	bhi.n	80098a6 <_strtol_l.isra.0+0xc6>
 800989c:	3c57      	subs	r4, #87	@ 0x57
 800989e:	e7e4      	b.n	800986a <_strtol_l.isra.0+0x8a>
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295
 80098a4:	e7ed      	b.n	8009882 <_strtol_l.isra.0+0xa2>
 80098a6:	1c53      	adds	r3, r2, #1
 80098a8:	d108      	bne.n	80098bc <_strtol_l.isra.0+0xdc>
 80098aa:	2322      	movs	r3, #34	@ 0x22
 80098ac:	4660      	mov	r0, ip
 80098ae:	f8ce 3000 	str.w	r3, [lr]
 80098b2:	f1b8 0f00 	cmp.w	r8, #0
 80098b6:	d0a0      	beq.n	80097fa <_strtol_l.isra.0+0x1a>
 80098b8:	1e69      	subs	r1, r5, #1
 80098ba:	e006      	b.n	80098ca <_strtol_l.isra.0+0xea>
 80098bc:	b106      	cbz	r6, 80098c0 <_strtol_l.isra.0+0xe0>
 80098be:	4240      	negs	r0, r0
 80098c0:	f1b8 0f00 	cmp.w	r8, #0
 80098c4:	d099      	beq.n	80097fa <_strtol_l.isra.0+0x1a>
 80098c6:	2a00      	cmp	r2, #0
 80098c8:	d1f6      	bne.n	80098b8 <_strtol_l.isra.0+0xd8>
 80098ca:	f8c8 1000 	str.w	r1, [r8]
 80098ce:	e794      	b.n	80097fa <_strtol_l.isra.0+0x1a>
 80098d0:	0800d149 	.word	0x0800d149

080098d4 <strtol>:
 80098d4:	4613      	mov	r3, r2
 80098d6:	460a      	mov	r2, r1
 80098d8:	4601      	mov	r1, r0
 80098da:	4802      	ldr	r0, [pc, #8]	@ (80098e4 <strtol+0x10>)
 80098dc:	6800      	ldr	r0, [r0, #0]
 80098de:	f7ff bf7f 	b.w	80097e0 <_strtol_l.isra.0>
 80098e2:	bf00      	nop
 80098e4:	2000018c 	.word	0x2000018c

080098e8 <__cvt>:
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ee:	461d      	mov	r5, r3
 80098f0:	bfbb      	ittet	lt
 80098f2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80098f6:	461d      	movlt	r5, r3
 80098f8:	2300      	movge	r3, #0
 80098fa:	232d      	movlt	r3, #45	@ 0x2d
 80098fc:	b088      	sub	sp, #32
 80098fe:	4614      	mov	r4, r2
 8009900:	bfb8      	it	lt
 8009902:	4614      	movlt	r4, r2
 8009904:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009906:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009908:	7013      	strb	r3, [r2, #0]
 800990a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800990c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009910:	f023 0820 	bic.w	r8, r3, #32
 8009914:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009918:	d005      	beq.n	8009926 <__cvt+0x3e>
 800991a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800991e:	d100      	bne.n	8009922 <__cvt+0x3a>
 8009920:	3601      	adds	r6, #1
 8009922:	2302      	movs	r3, #2
 8009924:	e000      	b.n	8009928 <__cvt+0x40>
 8009926:	2303      	movs	r3, #3
 8009928:	aa07      	add	r2, sp, #28
 800992a:	9204      	str	r2, [sp, #16]
 800992c:	aa06      	add	r2, sp, #24
 800992e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009932:	e9cd 3600 	strd	r3, r6, [sp]
 8009936:	4622      	mov	r2, r4
 8009938:	462b      	mov	r3, r5
 800993a:	f000 fea9 	bl	800a690 <_dtoa_r>
 800993e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009942:	4607      	mov	r7, r0
 8009944:	d119      	bne.n	800997a <__cvt+0x92>
 8009946:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009948:	07db      	lsls	r3, r3, #31
 800994a:	d50e      	bpl.n	800996a <__cvt+0x82>
 800994c:	eb00 0906 	add.w	r9, r0, r6
 8009950:	2200      	movs	r2, #0
 8009952:	2300      	movs	r3, #0
 8009954:	4620      	mov	r0, r4
 8009956:	4629      	mov	r1, r5
 8009958:	f7f7 f826 	bl	80009a8 <__aeabi_dcmpeq>
 800995c:	b108      	cbz	r0, 8009962 <__cvt+0x7a>
 800995e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009962:	2230      	movs	r2, #48	@ 0x30
 8009964:	9b07      	ldr	r3, [sp, #28]
 8009966:	454b      	cmp	r3, r9
 8009968:	d31e      	bcc.n	80099a8 <__cvt+0xc0>
 800996a:	4638      	mov	r0, r7
 800996c:	9b07      	ldr	r3, [sp, #28]
 800996e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009970:	1bdb      	subs	r3, r3, r7
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	b008      	add	sp, #32
 8009976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800997e:	eb00 0906 	add.w	r9, r0, r6
 8009982:	d1e5      	bne.n	8009950 <__cvt+0x68>
 8009984:	7803      	ldrb	r3, [r0, #0]
 8009986:	2b30      	cmp	r3, #48	@ 0x30
 8009988:	d10a      	bne.n	80099a0 <__cvt+0xb8>
 800998a:	2200      	movs	r2, #0
 800998c:	2300      	movs	r3, #0
 800998e:	4620      	mov	r0, r4
 8009990:	4629      	mov	r1, r5
 8009992:	f7f7 f809 	bl	80009a8 <__aeabi_dcmpeq>
 8009996:	b918      	cbnz	r0, 80099a0 <__cvt+0xb8>
 8009998:	f1c6 0601 	rsb	r6, r6, #1
 800999c:	f8ca 6000 	str.w	r6, [sl]
 80099a0:	f8da 3000 	ldr.w	r3, [sl]
 80099a4:	4499      	add	r9, r3
 80099a6:	e7d3      	b.n	8009950 <__cvt+0x68>
 80099a8:	1c59      	adds	r1, r3, #1
 80099aa:	9107      	str	r1, [sp, #28]
 80099ac:	701a      	strb	r2, [r3, #0]
 80099ae:	e7d9      	b.n	8009964 <__cvt+0x7c>

080099b0 <__exponent>:
 80099b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099b2:	2900      	cmp	r1, #0
 80099b4:	bfb6      	itet	lt
 80099b6:	232d      	movlt	r3, #45	@ 0x2d
 80099b8:	232b      	movge	r3, #43	@ 0x2b
 80099ba:	4249      	neglt	r1, r1
 80099bc:	2909      	cmp	r1, #9
 80099be:	7002      	strb	r2, [r0, #0]
 80099c0:	7043      	strb	r3, [r0, #1]
 80099c2:	dd29      	ble.n	8009a18 <__exponent+0x68>
 80099c4:	f10d 0307 	add.w	r3, sp, #7
 80099c8:	461d      	mov	r5, r3
 80099ca:	270a      	movs	r7, #10
 80099cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80099d0:	461a      	mov	r2, r3
 80099d2:	fb07 1416 	mls	r4, r7, r6, r1
 80099d6:	3430      	adds	r4, #48	@ 0x30
 80099d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80099dc:	460c      	mov	r4, r1
 80099de:	2c63      	cmp	r4, #99	@ 0x63
 80099e0:	4631      	mov	r1, r6
 80099e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80099e6:	dcf1      	bgt.n	80099cc <__exponent+0x1c>
 80099e8:	3130      	adds	r1, #48	@ 0x30
 80099ea:	1e94      	subs	r4, r2, #2
 80099ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80099f0:	4623      	mov	r3, r4
 80099f2:	1c41      	adds	r1, r0, #1
 80099f4:	42ab      	cmp	r3, r5
 80099f6:	d30a      	bcc.n	8009a0e <__exponent+0x5e>
 80099f8:	f10d 0309 	add.w	r3, sp, #9
 80099fc:	1a9b      	subs	r3, r3, r2
 80099fe:	42ac      	cmp	r4, r5
 8009a00:	bf88      	it	hi
 8009a02:	2300      	movhi	r3, #0
 8009a04:	3302      	adds	r3, #2
 8009a06:	4403      	add	r3, r0
 8009a08:	1a18      	subs	r0, r3, r0
 8009a0a:	b003      	add	sp, #12
 8009a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a0e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a12:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a16:	e7ed      	b.n	80099f4 <__exponent+0x44>
 8009a18:	2330      	movs	r3, #48	@ 0x30
 8009a1a:	3130      	adds	r1, #48	@ 0x30
 8009a1c:	7083      	strb	r3, [r0, #2]
 8009a1e:	70c1      	strb	r1, [r0, #3]
 8009a20:	1d03      	adds	r3, r0, #4
 8009a22:	e7f1      	b.n	8009a08 <__exponent+0x58>

08009a24 <_printf_float>:
 8009a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a28:	b091      	sub	sp, #68	@ 0x44
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009a30:	4616      	mov	r6, r2
 8009a32:	461f      	mov	r7, r3
 8009a34:	4605      	mov	r5, r0
 8009a36:	f000 fd07 	bl	800a448 <_localeconv_r>
 8009a3a:	6803      	ldr	r3, [r0, #0]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	9308      	str	r3, [sp, #32]
 8009a40:	f7f6 fb86 	bl	8000150 <strlen>
 8009a44:	2300      	movs	r3, #0
 8009a46:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a48:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8009a4e:	3307      	adds	r3, #7
 8009a50:	f023 0307 	bic.w	r3, r3, #7
 8009a54:	f103 0208 	add.w	r2, r3, #8
 8009a58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a5c:	f8d4 b000 	ldr.w	fp, [r4]
 8009a60:	f8c8 2000 	str.w	r2, [r8]
 8009a64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009a6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a6e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009a72:	f04f 32ff 	mov.w	r2, #4294967295
 8009a76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009a7e:	4b9c      	ldr	r3, [pc, #624]	@ (8009cf0 <_printf_float+0x2cc>)
 8009a80:	f7f6 ffc4 	bl	8000a0c <__aeabi_dcmpun>
 8009a84:	bb70      	cbnz	r0, 8009ae4 <_printf_float+0xc0>
 8009a86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8e:	4b98      	ldr	r3, [pc, #608]	@ (8009cf0 <_printf_float+0x2cc>)
 8009a90:	f7f6 ff9e 	bl	80009d0 <__aeabi_dcmple>
 8009a94:	bb30      	cbnz	r0, 8009ae4 <_printf_float+0xc0>
 8009a96:	2200      	movs	r2, #0
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	4649      	mov	r1, r9
 8009a9e:	f7f6 ff8d 	bl	80009bc <__aeabi_dcmplt>
 8009aa2:	b110      	cbz	r0, 8009aaa <_printf_float+0x86>
 8009aa4:	232d      	movs	r3, #45	@ 0x2d
 8009aa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aaa:	4a92      	ldr	r2, [pc, #584]	@ (8009cf4 <_printf_float+0x2d0>)
 8009aac:	4b92      	ldr	r3, [pc, #584]	@ (8009cf8 <_printf_float+0x2d4>)
 8009aae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ab2:	bf8c      	ite	hi
 8009ab4:	4690      	movhi	r8, r2
 8009ab6:	4698      	movls	r8, r3
 8009ab8:	2303      	movs	r3, #3
 8009aba:	f04f 0900 	mov.w	r9, #0
 8009abe:	6123      	str	r3, [r4, #16]
 8009ac0:	f02b 0304 	bic.w	r3, fp, #4
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	4633      	mov	r3, r6
 8009ac8:	4621      	mov	r1, r4
 8009aca:	4628      	mov	r0, r5
 8009acc:	9700      	str	r7, [sp, #0]
 8009ace:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009ad0:	f000 f9d4 	bl	8009e7c <_printf_common>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	f040 8090 	bne.w	8009bfa <_printf_float+0x1d6>
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295
 8009ade:	b011      	add	sp, #68	@ 0x44
 8009ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae4:	4642      	mov	r2, r8
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	4640      	mov	r0, r8
 8009aea:	4649      	mov	r1, r9
 8009aec:	f7f6 ff8e 	bl	8000a0c <__aeabi_dcmpun>
 8009af0:	b148      	cbz	r0, 8009b06 <_printf_float+0xe2>
 8009af2:	464b      	mov	r3, r9
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	bfb8      	it	lt
 8009af8:	232d      	movlt	r3, #45	@ 0x2d
 8009afa:	4a80      	ldr	r2, [pc, #512]	@ (8009cfc <_printf_float+0x2d8>)
 8009afc:	bfb8      	it	lt
 8009afe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b02:	4b7f      	ldr	r3, [pc, #508]	@ (8009d00 <_printf_float+0x2dc>)
 8009b04:	e7d3      	b.n	8009aae <_printf_float+0x8a>
 8009b06:	6863      	ldr	r3, [r4, #4]
 8009b08:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	d13f      	bne.n	8009b90 <_printf_float+0x16c>
 8009b10:	2306      	movs	r3, #6
 8009b12:	6063      	str	r3, [r4, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009b1a:	6023      	str	r3, [r4, #0]
 8009b1c:	9206      	str	r2, [sp, #24]
 8009b1e:	aa0e      	add	r2, sp, #56	@ 0x38
 8009b20:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009b24:	aa0d      	add	r2, sp, #52	@ 0x34
 8009b26:	9203      	str	r2, [sp, #12]
 8009b28:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009b2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009b30:	6863      	ldr	r3, [r4, #4]
 8009b32:	4642      	mov	r2, r8
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	4628      	mov	r0, r5
 8009b38:	464b      	mov	r3, r9
 8009b3a:	910a      	str	r1, [sp, #40]	@ 0x28
 8009b3c:	f7ff fed4 	bl	80098e8 <__cvt>
 8009b40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b42:	4680      	mov	r8, r0
 8009b44:	2947      	cmp	r1, #71	@ 0x47
 8009b46:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009b48:	d128      	bne.n	8009b9c <_printf_float+0x178>
 8009b4a:	1cc8      	adds	r0, r1, #3
 8009b4c:	db02      	blt.n	8009b54 <_printf_float+0x130>
 8009b4e:	6863      	ldr	r3, [r4, #4]
 8009b50:	4299      	cmp	r1, r3
 8009b52:	dd40      	ble.n	8009bd6 <_printf_float+0x1b2>
 8009b54:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b58:	fa5f fa8a 	uxtb.w	sl, sl
 8009b5c:	4652      	mov	r2, sl
 8009b5e:	3901      	subs	r1, #1
 8009b60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b64:	910d      	str	r1, [sp, #52]	@ 0x34
 8009b66:	f7ff ff23 	bl	80099b0 <__exponent>
 8009b6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b6c:	4681      	mov	r9, r0
 8009b6e:	1813      	adds	r3, r2, r0
 8009b70:	2a01      	cmp	r2, #1
 8009b72:	6123      	str	r3, [r4, #16]
 8009b74:	dc02      	bgt.n	8009b7c <_printf_float+0x158>
 8009b76:	6822      	ldr	r2, [r4, #0]
 8009b78:	07d2      	lsls	r2, r2, #31
 8009b7a:	d501      	bpl.n	8009b80 <_printf_float+0x15c>
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	6123      	str	r3, [r4, #16]
 8009b80:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d09e      	beq.n	8009ac6 <_printf_float+0xa2>
 8009b88:	232d      	movs	r3, #45	@ 0x2d
 8009b8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b8e:	e79a      	b.n	8009ac6 <_printf_float+0xa2>
 8009b90:	2947      	cmp	r1, #71	@ 0x47
 8009b92:	d1bf      	bne.n	8009b14 <_printf_float+0xf0>
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1bd      	bne.n	8009b14 <_printf_float+0xf0>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e7ba      	b.n	8009b12 <_printf_float+0xee>
 8009b9c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ba0:	d9dc      	bls.n	8009b5c <_printf_float+0x138>
 8009ba2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ba6:	d118      	bne.n	8009bda <_printf_float+0x1b6>
 8009ba8:	2900      	cmp	r1, #0
 8009baa:	6863      	ldr	r3, [r4, #4]
 8009bac:	dd0b      	ble.n	8009bc6 <_printf_float+0x1a2>
 8009bae:	6121      	str	r1, [r4, #16]
 8009bb0:	b913      	cbnz	r3, 8009bb8 <_printf_float+0x194>
 8009bb2:	6822      	ldr	r2, [r4, #0]
 8009bb4:	07d0      	lsls	r0, r2, #31
 8009bb6:	d502      	bpl.n	8009bbe <_printf_float+0x19a>
 8009bb8:	3301      	adds	r3, #1
 8009bba:	440b      	add	r3, r1
 8009bbc:	6123      	str	r3, [r4, #16]
 8009bbe:	f04f 0900 	mov.w	r9, #0
 8009bc2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009bc4:	e7dc      	b.n	8009b80 <_printf_float+0x15c>
 8009bc6:	b913      	cbnz	r3, 8009bce <_printf_float+0x1aa>
 8009bc8:	6822      	ldr	r2, [r4, #0]
 8009bca:	07d2      	lsls	r2, r2, #31
 8009bcc:	d501      	bpl.n	8009bd2 <_printf_float+0x1ae>
 8009bce:	3302      	adds	r3, #2
 8009bd0:	e7f4      	b.n	8009bbc <_printf_float+0x198>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e7f2      	b.n	8009bbc <_printf_float+0x198>
 8009bd6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009bda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bdc:	4299      	cmp	r1, r3
 8009bde:	db05      	blt.n	8009bec <_printf_float+0x1c8>
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	6121      	str	r1, [r4, #16]
 8009be4:	07d8      	lsls	r0, r3, #31
 8009be6:	d5ea      	bpl.n	8009bbe <_printf_float+0x19a>
 8009be8:	1c4b      	adds	r3, r1, #1
 8009bea:	e7e7      	b.n	8009bbc <_printf_float+0x198>
 8009bec:	2900      	cmp	r1, #0
 8009bee:	bfcc      	ite	gt
 8009bf0:	2201      	movgt	r2, #1
 8009bf2:	f1c1 0202 	rsble	r2, r1, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	e7e0      	b.n	8009bbc <_printf_float+0x198>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	055a      	lsls	r2, r3, #21
 8009bfe:	d407      	bmi.n	8009c10 <_printf_float+0x1ec>
 8009c00:	6923      	ldr	r3, [r4, #16]
 8009c02:	4642      	mov	r2, r8
 8009c04:	4631      	mov	r1, r6
 8009c06:	4628      	mov	r0, r5
 8009c08:	47b8      	blx	r7
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	d12b      	bne.n	8009c66 <_printf_float+0x242>
 8009c0e:	e764      	b.n	8009ada <_printf_float+0xb6>
 8009c10:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c14:	f240 80dc 	bls.w	8009dd0 <_printf_float+0x3ac>
 8009c18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f7f6 fec2 	bl	80009a8 <__aeabi_dcmpeq>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d033      	beq.n	8009c90 <_printf_float+0x26c>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	4a35      	ldr	r2, [pc, #212]	@ (8009d04 <_printf_float+0x2e0>)
 8009c30:	47b8      	blx	r7
 8009c32:	3001      	adds	r0, #1
 8009c34:	f43f af51 	beq.w	8009ada <_printf_float+0xb6>
 8009c38:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009c3c:	4543      	cmp	r3, r8
 8009c3e:	db02      	blt.n	8009c46 <_printf_float+0x222>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	07d8      	lsls	r0, r3, #31
 8009c44:	d50f      	bpl.n	8009c66 <_printf_float+0x242>
 8009c46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	47b8      	blx	r7
 8009c50:	3001      	adds	r0, #1
 8009c52:	f43f af42 	beq.w	8009ada <_printf_float+0xb6>
 8009c56:	f04f 0900 	mov.w	r9, #0
 8009c5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c5e:	f104 0a1a 	add.w	sl, r4, #26
 8009c62:	45c8      	cmp	r8, r9
 8009c64:	dc09      	bgt.n	8009c7a <_printf_float+0x256>
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	079b      	lsls	r3, r3, #30
 8009c6a:	f100 8102 	bmi.w	8009e72 <_printf_float+0x44e>
 8009c6e:	68e0      	ldr	r0, [r4, #12]
 8009c70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c72:	4298      	cmp	r0, r3
 8009c74:	bfb8      	it	lt
 8009c76:	4618      	movlt	r0, r3
 8009c78:	e731      	b.n	8009ade <_printf_float+0xba>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	4652      	mov	r2, sl
 8009c7e:	4631      	mov	r1, r6
 8009c80:	4628      	mov	r0, r5
 8009c82:	47b8      	blx	r7
 8009c84:	3001      	adds	r0, #1
 8009c86:	f43f af28 	beq.w	8009ada <_printf_float+0xb6>
 8009c8a:	f109 0901 	add.w	r9, r9, #1
 8009c8e:	e7e8      	b.n	8009c62 <_printf_float+0x23e>
 8009c90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	dc38      	bgt.n	8009d08 <_printf_float+0x2e4>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4631      	mov	r1, r6
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	4a19      	ldr	r2, [pc, #100]	@ (8009d04 <_printf_float+0x2e0>)
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f43f af1a 	beq.w	8009ada <_printf_float+0xb6>
 8009ca6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009caa:	ea59 0303 	orrs.w	r3, r9, r3
 8009cae:	d102      	bne.n	8009cb6 <_printf_float+0x292>
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	07d9      	lsls	r1, r3, #31
 8009cb4:	d5d7      	bpl.n	8009c66 <_printf_float+0x242>
 8009cb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	47b8      	blx	r7
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	f43f af0a 	beq.w	8009ada <_printf_float+0xb6>
 8009cc6:	f04f 0a00 	mov.w	sl, #0
 8009cca:	f104 0b1a 	add.w	fp, r4, #26
 8009cce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cd0:	425b      	negs	r3, r3
 8009cd2:	4553      	cmp	r3, sl
 8009cd4:	dc01      	bgt.n	8009cda <_printf_float+0x2b6>
 8009cd6:	464b      	mov	r3, r9
 8009cd8:	e793      	b.n	8009c02 <_printf_float+0x1de>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	465a      	mov	r2, fp
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b8      	blx	r7
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	f43f aef8 	beq.w	8009ada <_printf_float+0xb6>
 8009cea:	f10a 0a01 	add.w	sl, sl, #1
 8009cee:	e7ee      	b.n	8009cce <_printf_float+0x2aa>
 8009cf0:	7fefffff 	.word	0x7fefffff
 8009cf4:	0800cf26 	.word	0x0800cf26
 8009cf8:	0800cf22 	.word	0x0800cf22
 8009cfc:	0800cf2e 	.word	0x0800cf2e
 8009d00:	0800cf2a 	.word	0x0800cf2a
 8009d04:	0800cf32 	.word	0x0800cf32
 8009d08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d0a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009d0e:	4553      	cmp	r3, sl
 8009d10:	bfa8      	it	ge
 8009d12:	4653      	movge	r3, sl
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	4699      	mov	r9, r3
 8009d18:	dc36      	bgt.n	8009d88 <_printf_float+0x364>
 8009d1a:	f04f 0b00 	mov.w	fp, #0
 8009d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d22:	f104 021a 	add.w	r2, r4, #26
 8009d26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d28:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d2a:	eba3 0309 	sub.w	r3, r3, r9
 8009d2e:	455b      	cmp	r3, fp
 8009d30:	dc31      	bgt.n	8009d96 <_printf_float+0x372>
 8009d32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d34:	459a      	cmp	sl, r3
 8009d36:	dc3a      	bgt.n	8009dae <_printf_float+0x38a>
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	07da      	lsls	r2, r3, #31
 8009d3c:	d437      	bmi.n	8009dae <_printf_float+0x38a>
 8009d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d40:	ebaa 0903 	sub.w	r9, sl, r3
 8009d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d46:	ebaa 0303 	sub.w	r3, sl, r3
 8009d4a:	4599      	cmp	r9, r3
 8009d4c:	bfa8      	it	ge
 8009d4e:	4699      	movge	r9, r3
 8009d50:	f1b9 0f00 	cmp.w	r9, #0
 8009d54:	dc33      	bgt.n	8009dbe <_printf_float+0x39a>
 8009d56:	f04f 0800 	mov.w	r8, #0
 8009d5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d5e:	f104 0b1a 	add.w	fp, r4, #26
 8009d62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d64:	ebaa 0303 	sub.w	r3, sl, r3
 8009d68:	eba3 0309 	sub.w	r3, r3, r9
 8009d6c:	4543      	cmp	r3, r8
 8009d6e:	f77f af7a 	ble.w	8009c66 <_printf_float+0x242>
 8009d72:	2301      	movs	r3, #1
 8009d74:	465a      	mov	r2, fp
 8009d76:	4631      	mov	r1, r6
 8009d78:	4628      	mov	r0, r5
 8009d7a:	47b8      	blx	r7
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	f43f aeac 	beq.w	8009ada <_printf_float+0xb6>
 8009d82:	f108 0801 	add.w	r8, r8, #1
 8009d86:	e7ec      	b.n	8009d62 <_printf_float+0x33e>
 8009d88:	4642      	mov	r2, r8
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b8      	blx	r7
 8009d90:	3001      	adds	r0, #1
 8009d92:	d1c2      	bne.n	8009d1a <_printf_float+0x2f6>
 8009d94:	e6a1      	b.n	8009ada <_printf_float+0xb6>
 8009d96:	2301      	movs	r3, #1
 8009d98:	4631      	mov	r1, r6
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	920a      	str	r2, [sp, #40]	@ 0x28
 8009d9e:	47b8      	blx	r7
 8009da0:	3001      	adds	r0, #1
 8009da2:	f43f ae9a 	beq.w	8009ada <_printf_float+0xb6>
 8009da6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009da8:	f10b 0b01 	add.w	fp, fp, #1
 8009dac:	e7bb      	b.n	8009d26 <_printf_float+0x302>
 8009dae:	4631      	mov	r1, r6
 8009db0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	d1c0      	bne.n	8009d3e <_printf_float+0x31a>
 8009dbc:	e68d      	b.n	8009ada <_printf_float+0xb6>
 8009dbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dc0:	464b      	mov	r3, r9
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	4442      	add	r2, r8
 8009dc8:	47b8      	blx	r7
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d1c3      	bne.n	8009d56 <_printf_float+0x332>
 8009dce:	e684      	b.n	8009ada <_printf_float+0xb6>
 8009dd0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009dd4:	f1ba 0f01 	cmp.w	sl, #1
 8009dd8:	dc01      	bgt.n	8009dde <_printf_float+0x3ba>
 8009dda:	07db      	lsls	r3, r3, #31
 8009ddc:	d536      	bpl.n	8009e4c <_printf_float+0x428>
 8009dde:	2301      	movs	r3, #1
 8009de0:	4642      	mov	r2, r8
 8009de2:	4631      	mov	r1, r6
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b8      	blx	r7
 8009de8:	3001      	adds	r0, #1
 8009dea:	f43f ae76 	beq.w	8009ada <_printf_float+0xb6>
 8009dee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009df2:	4631      	mov	r1, r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b8      	blx	r7
 8009df8:	3001      	adds	r0, #1
 8009dfa:	f43f ae6e 	beq.w	8009ada <_printf_float+0xb6>
 8009dfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e02:	2200      	movs	r2, #0
 8009e04:	2300      	movs	r3, #0
 8009e06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e0a:	f7f6 fdcd 	bl	80009a8 <__aeabi_dcmpeq>
 8009e0e:	b9c0      	cbnz	r0, 8009e42 <_printf_float+0x41e>
 8009e10:	4653      	mov	r3, sl
 8009e12:	f108 0201 	add.w	r2, r8, #1
 8009e16:	4631      	mov	r1, r6
 8009e18:	4628      	mov	r0, r5
 8009e1a:	47b8      	blx	r7
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d10c      	bne.n	8009e3a <_printf_float+0x416>
 8009e20:	e65b      	b.n	8009ada <_printf_float+0xb6>
 8009e22:	2301      	movs	r3, #1
 8009e24:	465a      	mov	r2, fp
 8009e26:	4631      	mov	r1, r6
 8009e28:	4628      	mov	r0, r5
 8009e2a:	47b8      	blx	r7
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	f43f ae54 	beq.w	8009ada <_printf_float+0xb6>
 8009e32:	f108 0801 	add.w	r8, r8, #1
 8009e36:	45d0      	cmp	r8, sl
 8009e38:	dbf3      	blt.n	8009e22 <_printf_float+0x3fe>
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e40:	e6e0      	b.n	8009c04 <_printf_float+0x1e0>
 8009e42:	f04f 0800 	mov.w	r8, #0
 8009e46:	f104 0b1a 	add.w	fp, r4, #26
 8009e4a:	e7f4      	b.n	8009e36 <_printf_float+0x412>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	4642      	mov	r2, r8
 8009e50:	e7e1      	b.n	8009e16 <_printf_float+0x3f2>
 8009e52:	2301      	movs	r3, #1
 8009e54:	464a      	mov	r2, r9
 8009e56:	4631      	mov	r1, r6
 8009e58:	4628      	mov	r0, r5
 8009e5a:	47b8      	blx	r7
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	f43f ae3c 	beq.w	8009ada <_printf_float+0xb6>
 8009e62:	f108 0801 	add.w	r8, r8, #1
 8009e66:	68e3      	ldr	r3, [r4, #12]
 8009e68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009e6a:	1a5b      	subs	r3, r3, r1
 8009e6c:	4543      	cmp	r3, r8
 8009e6e:	dcf0      	bgt.n	8009e52 <_printf_float+0x42e>
 8009e70:	e6fd      	b.n	8009c6e <_printf_float+0x24a>
 8009e72:	f04f 0800 	mov.w	r8, #0
 8009e76:	f104 0919 	add.w	r9, r4, #25
 8009e7a:	e7f4      	b.n	8009e66 <_printf_float+0x442>

08009e7c <_printf_common>:
 8009e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e80:	4616      	mov	r6, r2
 8009e82:	4698      	mov	r8, r3
 8009e84:	688a      	ldr	r2, [r1, #8]
 8009e86:	690b      	ldr	r3, [r1, #16]
 8009e88:	4607      	mov	r7, r0
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	bfb8      	it	lt
 8009e8e:	4613      	movlt	r3, r2
 8009e90:	6033      	str	r3, [r6, #0]
 8009e92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e96:	460c      	mov	r4, r1
 8009e98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e9c:	b10a      	cbz	r2, 8009ea2 <_printf_common+0x26>
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	6033      	str	r3, [r6, #0]
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	0699      	lsls	r1, r3, #26
 8009ea6:	bf42      	ittt	mi
 8009ea8:	6833      	ldrmi	r3, [r6, #0]
 8009eaa:	3302      	addmi	r3, #2
 8009eac:	6033      	strmi	r3, [r6, #0]
 8009eae:	6825      	ldr	r5, [r4, #0]
 8009eb0:	f015 0506 	ands.w	r5, r5, #6
 8009eb4:	d106      	bne.n	8009ec4 <_printf_common+0x48>
 8009eb6:	f104 0a19 	add.w	sl, r4, #25
 8009eba:	68e3      	ldr	r3, [r4, #12]
 8009ebc:	6832      	ldr	r2, [r6, #0]
 8009ebe:	1a9b      	subs	r3, r3, r2
 8009ec0:	42ab      	cmp	r3, r5
 8009ec2:	dc2b      	bgt.n	8009f1c <_printf_common+0xa0>
 8009ec4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ec8:	6822      	ldr	r2, [r4, #0]
 8009eca:	3b00      	subs	r3, #0
 8009ecc:	bf18      	it	ne
 8009ece:	2301      	movne	r3, #1
 8009ed0:	0692      	lsls	r2, r2, #26
 8009ed2:	d430      	bmi.n	8009f36 <_printf_common+0xba>
 8009ed4:	4641      	mov	r1, r8
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009edc:	47c8      	blx	r9
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d023      	beq.n	8009f2a <_printf_common+0xae>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	6922      	ldr	r2, [r4, #16]
 8009ee6:	f003 0306 	and.w	r3, r3, #6
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	bf14      	ite	ne
 8009eee:	2500      	movne	r5, #0
 8009ef0:	6833      	ldreq	r3, [r6, #0]
 8009ef2:	f04f 0600 	mov.w	r6, #0
 8009ef6:	bf08      	it	eq
 8009ef8:	68e5      	ldreq	r5, [r4, #12]
 8009efa:	f104 041a 	add.w	r4, r4, #26
 8009efe:	bf08      	it	eq
 8009f00:	1aed      	subeq	r5, r5, r3
 8009f02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009f06:	bf08      	it	eq
 8009f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	bfc4      	itt	gt
 8009f10:	1a9b      	subgt	r3, r3, r2
 8009f12:	18ed      	addgt	r5, r5, r3
 8009f14:	42b5      	cmp	r5, r6
 8009f16:	d11a      	bne.n	8009f4e <_printf_common+0xd2>
 8009f18:	2000      	movs	r0, #0
 8009f1a:	e008      	b.n	8009f2e <_printf_common+0xb2>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	4652      	mov	r2, sl
 8009f20:	4641      	mov	r1, r8
 8009f22:	4638      	mov	r0, r7
 8009f24:	47c8      	blx	r9
 8009f26:	3001      	adds	r0, #1
 8009f28:	d103      	bne.n	8009f32 <_printf_common+0xb6>
 8009f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f32:	3501      	adds	r5, #1
 8009f34:	e7c1      	b.n	8009eba <_printf_common+0x3e>
 8009f36:	2030      	movs	r0, #48	@ 0x30
 8009f38:	18e1      	adds	r1, r4, r3
 8009f3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f44:	4422      	add	r2, r4
 8009f46:	3302      	adds	r3, #2
 8009f48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f4c:	e7c2      	b.n	8009ed4 <_printf_common+0x58>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4622      	mov	r2, r4
 8009f52:	4641      	mov	r1, r8
 8009f54:	4638      	mov	r0, r7
 8009f56:	47c8      	blx	r9
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d0e6      	beq.n	8009f2a <_printf_common+0xae>
 8009f5c:	3601      	adds	r6, #1
 8009f5e:	e7d9      	b.n	8009f14 <_printf_common+0x98>

08009f60 <_printf_i>:
 8009f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f64:	7e0f      	ldrb	r7, [r1, #24]
 8009f66:	4691      	mov	r9, r2
 8009f68:	2f78      	cmp	r7, #120	@ 0x78
 8009f6a:	4680      	mov	r8, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	469a      	mov	sl, r3
 8009f70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f76:	d807      	bhi.n	8009f88 <_printf_i+0x28>
 8009f78:	2f62      	cmp	r7, #98	@ 0x62
 8009f7a:	d80a      	bhi.n	8009f92 <_printf_i+0x32>
 8009f7c:	2f00      	cmp	r7, #0
 8009f7e:	f000 80d1 	beq.w	800a124 <_printf_i+0x1c4>
 8009f82:	2f58      	cmp	r7, #88	@ 0x58
 8009f84:	f000 80b8 	beq.w	800a0f8 <_printf_i+0x198>
 8009f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f90:	e03a      	b.n	800a008 <_printf_i+0xa8>
 8009f92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f96:	2b15      	cmp	r3, #21
 8009f98:	d8f6      	bhi.n	8009f88 <_printf_i+0x28>
 8009f9a:	a101      	add	r1, pc, #4	@ (adr r1, 8009fa0 <_printf_i+0x40>)
 8009f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fa0:	08009ff9 	.word	0x08009ff9
 8009fa4:	0800a00d 	.word	0x0800a00d
 8009fa8:	08009f89 	.word	0x08009f89
 8009fac:	08009f89 	.word	0x08009f89
 8009fb0:	08009f89 	.word	0x08009f89
 8009fb4:	08009f89 	.word	0x08009f89
 8009fb8:	0800a00d 	.word	0x0800a00d
 8009fbc:	08009f89 	.word	0x08009f89
 8009fc0:	08009f89 	.word	0x08009f89
 8009fc4:	08009f89 	.word	0x08009f89
 8009fc8:	08009f89 	.word	0x08009f89
 8009fcc:	0800a10b 	.word	0x0800a10b
 8009fd0:	0800a037 	.word	0x0800a037
 8009fd4:	0800a0c5 	.word	0x0800a0c5
 8009fd8:	08009f89 	.word	0x08009f89
 8009fdc:	08009f89 	.word	0x08009f89
 8009fe0:	0800a12d 	.word	0x0800a12d
 8009fe4:	08009f89 	.word	0x08009f89
 8009fe8:	0800a037 	.word	0x0800a037
 8009fec:	08009f89 	.word	0x08009f89
 8009ff0:	08009f89 	.word	0x08009f89
 8009ff4:	0800a0cd 	.word	0x0800a0cd
 8009ff8:	6833      	ldr	r3, [r6, #0]
 8009ffa:	1d1a      	adds	r2, r3, #4
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	6032      	str	r2, [r6, #0]
 800a000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a008:	2301      	movs	r3, #1
 800a00a:	e09c      	b.n	800a146 <_printf_i+0x1e6>
 800a00c:	6833      	ldr	r3, [r6, #0]
 800a00e:	6820      	ldr	r0, [r4, #0]
 800a010:	1d19      	adds	r1, r3, #4
 800a012:	6031      	str	r1, [r6, #0]
 800a014:	0606      	lsls	r6, r0, #24
 800a016:	d501      	bpl.n	800a01c <_printf_i+0xbc>
 800a018:	681d      	ldr	r5, [r3, #0]
 800a01a:	e003      	b.n	800a024 <_printf_i+0xc4>
 800a01c:	0645      	lsls	r5, r0, #25
 800a01e:	d5fb      	bpl.n	800a018 <_printf_i+0xb8>
 800a020:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a024:	2d00      	cmp	r5, #0
 800a026:	da03      	bge.n	800a030 <_printf_i+0xd0>
 800a028:	232d      	movs	r3, #45	@ 0x2d
 800a02a:	426d      	negs	r5, r5
 800a02c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a030:	230a      	movs	r3, #10
 800a032:	4858      	ldr	r0, [pc, #352]	@ (800a194 <_printf_i+0x234>)
 800a034:	e011      	b.n	800a05a <_printf_i+0xfa>
 800a036:	6821      	ldr	r1, [r4, #0]
 800a038:	6833      	ldr	r3, [r6, #0]
 800a03a:	0608      	lsls	r0, r1, #24
 800a03c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a040:	d402      	bmi.n	800a048 <_printf_i+0xe8>
 800a042:	0649      	lsls	r1, r1, #25
 800a044:	bf48      	it	mi
 800a046:	b2ad      	uxthmi	r5, r5
 800a048:	2f6f      	cmp	r7, #111	@ 0x6f
 800a04a:	6033      	str	r3, [r6, #0]
 800a04c:	bf14      	ite	ne
 800a04e:	230a      	movne	r3, #10
 800a050:	2308      	moveq	r3, #8
 800a052:	4850      	ldr	r0, [pc, #320]	@ (800a194 <_printf_i+0x234>)
 800a054:	2100      	movs	r1, #0
 800a056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a05a:	6866      	ldr	r6, [r4, #4]
 800a05c:	2e00      	cmp	r6, #0
 800a05e:	60a6      	str	r6, [r4, #8]
 800a060:	db05      	blt.n	800a06e <_printf_i+0x10e>
 800a062:	6821      	ldr	r1, [r4, #0]
 800a064:	432e      	orrs	r6, r5
 800a066:	f021 0104 	bic.w	r1, r1, #4
 800a06a:	6021      	str	r1, [r4, #0]
 800a06c:	d04b      	beq.n	800a106 <_printf_i+0x1a6>
 800a06e:	4616      	mov	r6, r2
 800a070:	fbb5 f1f3 	udiv	r1, r5, r3
 800a074:	fb03 5711 	mls	r7, r3, r1, r5
 800a078:	5dc7      	ldrb	r7, [r0, r7]
 800a07a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a07e:	462f      	mov	r7, r5
 800a080:	42bb      	cmp	r3, r7
 800a082:	460d      	mov	r5, r1
 800a084:	d9f4      	bls.n	800a070 <_printf_i+0x110>
 800a086:	2b08      	cmp	r3, #8
 800a088:	d10b      	bne.n	800a0a2 <_printf_i+0x142>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	07df      	lsls	r7, r3, #31
 800a08e:	d508      	bpl.n	800a0a2 <_printf_i+0x142>
 800a090:	6923      	ldr	r3, [r4, #16]
 800a092:	6861      	ldr	r1, [r4, #4]
 800a094:	4299      	cmp	r1, r3
 800a096:	bfde      	ittt	le
 800a098:	2330      	movle	r3, #48	@ 0x30
 800a09a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a09e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0a2:	1b92      	subs	r2, r2, r6
 800a0a4:	6122      	str	r2, [r4, #16]
 800a0a6:	464b      	mov	r3, r9
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	f8cd a000 	str.w	sl, [sp]
 800a0b0:	aa03      	add	r2, sp, #12
 800a0b2:	f7ff fee3 	bl	8009e7c <_printf_common>
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	d14a      	bne.n	800a150 <_printf_i+0x1f0>
 800a0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a0be:	b004      	add	sp, #16
 800a0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	f043 0320 	orr.w	r3, r3, #32
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	2778      	movs	r7, #120	@ 0x78
 800a0ce:	4832      	ldr	r0, [pc, #200]	@ (800a198 <_printf_i+0x238>)
 800a0d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	6831      	ldr	r1, [r6, #0]
 800a0d8:	061f      	lsls	r7, r3, #24
 800a0da:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0de:	d402      	bmi.n	800a0e6 <_printf_i+0x186>
 800a0e0:	065f      	lsls	r7, r3, #25
 800a0e2:	bf48      	it	mi
 800a0e4:	b2ad      	uxthmi	r5, r5
 800a0e6:	6031      	str	r1, [r6, #0]
 800a0e8:	07d9      	lsls	r1, r3, #31
 800a0ea:	bf44      	itt	mi
 800a0ec:	f043 0320 	orrmi.w	r3, r3, #32
 800a0f0:	6023      	strmi	r3, [r4, #0]
 800a0f2:	b11d      	cbz	r5, 800a0fc <_printf_i+0x19c>
 800a0f4:	2310      	movs	r3, #16
 800a0f6:	e7ad      	b.n	800a054 <_printf_i+0xf4>
 800a0f8:	4826      	ldr	r0, [pc, #152]	@ (800a194 <_printf_i+0x234>)
 800a0fa:	e7e9      	b.n	800a0d0 <_printf_i+0x170>
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	f023 0320 	bic.w	r3, r3, #32
 800a102:	6023      	str	r3, [r4, #0]
 800a104:	e7f6      	b.n	800a0f4 <_printf_i+0x194>
 800a106:	4616      	mov	r6, r2
 800a108:	e7bd      	b.n	800a086 <_printf_i+0x126>
 800a10a:	6833      	ldr	r3, [r6, #0]
 800a10c:	6825      	ldr	r5, [r4, #0]
 800a10e:	1d18      	adds	r0, r3, #4
 800a110:	6961      	ldr	r1, [r4, #20]
 800a112:	6030      	str	r0, [r6, #0]
 800a114:	062e      	lsls	r6, r5, #24
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	d501      	bpl.n	800a11e <_printf_i+0x1be>
 800a11a:	6019      	str	r1, [r3, #0]
 800a11c:	e002      	b.n	800a124 <_printf_i+0x1c4>
 800a11e:	0668      	lsls	r0, r5, #25
 800a120:	d5fb      	bpl.n	800a11a <_printf_i+0x1ba>
 800a122:	8019      	strh	r1, [r3, #0]
 800a124:	2300      	movs	r3, #0
 800a126:	4616      	mov	r6, r2
 800a128:	6123      	str	r3, [r4, #16]
 800a12a:	e7bc      	b.n	800a0a6 <_printf_i+0x146>
 800a12c:	6833      	ldr	r3, [r6, #0]
 800a12e:	2100      	movs	r1, #0
 800a130:	1d1a      	adds	r2, r3, #4
 800a132:	6032      	str	r2, [r6, #0]
 800a134:	681e      	ldr	r6, [r3, #0]
 800a136:	6862      	ldr	r2, [r4, #4]
 800a138:	4630      	mov	r0, r6
 800a13a:	f000 f9fc 	bl	800a536 <memchr>
 800a13e:	b108      	cbz	r0, 800a144 <_printf_i+0x1e4>
 800a140:	1b80      	subs	r0, r0, r6
 800a142:	6060      	str	r0, [r4, #4]
 800a144:	6863      	ldr	r3, [r4, #4]
 800a146:	6123      	str	r3, [r4, #16]
 800a148:	2300      	movs	r3, #0
 800a14a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a14e:	e7aa      	b.n	800a0a6 <_printf_i+0x146>
 800a150:	4632      	mov	r2, r6
 800a152:	4649      	mov	r1, r9
 800a154:	4640      	mov	r0, r8
 800a156:	6923      	ldr	r3, [r4, #16]
 800a158:	47d0      	blx	sl
 800a15a:	3001      	adds	r0, #1
 800a15c:	d0ad      	beq.n	800a0ba <_printf_i+0x15a>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	079b      	lsls	r3, r3, #30
 800a162:	d413      	bmi.n	800a18c <_printf_i+0x22c>
 800a164:	68e0      	ldr	r0, [r4, #12]
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	4298      	cmp	r0, r3
 800a16a:	bfb8      	it	lt
 800a16c:	4618      	movlt	r0, r3
 800a16e:	e7a6      	b.n	800a0be <_printf_i+0x15e>
 800a170:	2301      	movs	r3, #1
 800a172:	4632      	mov	r2, r6
 800a174:	4649      	mov	r1, r9
 800a176:	4640      	mov	r0, r8
 800a178:	47d0      	blx	sl
 800a17a:	3001      	adds	r0, #1
 800a17c:	d09d      	beq.n	800a0ba <_printf_i+0x15a>
 800a17e:	3501      	adds	r5, #1
 800a180:	68e3      	ldr	r3, [r4, #12]
 800a182:	9903      	ldr	r1, [sp, #12]
 800a184:	1a5b      	subs	r3, r3, r1
 800a186:	42ab      	cmp	r3, r5
 800a188:	dcf2      	bgt.n	800a170 <_printf_i+0x210>
 800a18a:	e7eb      	b.n	800a164 <_printf_i+0x204>
 800a18c:	2500      	movs	r5, #0
 800a18e:	f104 0619 	add.w	r6, r4, #25
 800a192:	e7f5      	b.n	800a180 <_printf_i+0x220>
 800a194:	0800cf34 	.word	0x0800cf34
 800a198:	0800cf45 	.word	0x0800cf45

0800a19c <std>:
 800a19c:	2300      	movs	r3, #0
 800a19e:	b510      	push	{r4, lr}
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a1a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1aa:	6083      	str	r3, [r0, #8]
 800a1ac:	8181      	strh	r1, [r0, #12]
 800a1ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1b0:	81c2      	strh	r2, [r0, #14]
 800a1b2:	6183      	str	r3, [r0, #24]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	2208      	movs	r2, #8
 800a1b8:	305c      	adds	r0, #92	@ 0x5c
 800a1ba:	f000 f92a 	bl	800a412 <memset>
 800a1be:	4b0d      	ldr	r3, [pc, #52]	@ (800a1f4 <std+0x58>)
 800a1c0:	6224      	str	r4, [r4, #32]
 800a1c2:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f8 <std+0x5c>)
 800a1c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a1fc <std+0x60>)
 800a1ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a200 <std+0x64>)
 800a1ce:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a204 <std+0x68>)
 800a1d2:	429c      	cmp	r4, r3
 800a1d4:	d006      	beq.n	800a1e4 <std+0x48>
 800a1d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a1da:	4294      	cmp	r4, r2
 800a1dc:	d002      	beq.n	800a1e4 <std+0x48>
 800a1de:	33d0      	adds	r3, #208	@ 0xd0
 800a1e0:	429c      	cmp	r4, r3
 800a1e2:	d105      	bne.n	800a1f0 <std+0x54>
 800a1e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1ec:	f000 b9a0 	b.w	800a530 <__retarget_lock_init_recursive>
 800a1f0:	bd10      	pop	{r4, pc}
 800a1f2:	bf00      	nop
 800a1f4:	0800a38d 	.word	0x0800a38d
 800a1f8:	0800a3af 	.word	0x0800a3af
 800a1fc:	0800a3e7 	.word	0x0800a3e7
 800a200:	0800a40b 	.word	0x0800a40b
 800a204:	20000c54 	.word	0x20000c54

0800a208 <stdio_exit_handler>:
 800a208:	4a02      	ldr	r2, [pc, #8]	@ (800a214 <stdio_exit_handler+0xc>)
 800a20a:	4903      	ldr	r1, [pc, #12]	@ (800a218 <stdio_exit_handler+0x10>)
 800a20c:	4803      	ldr	r0, [pc, #12]	@ (800a21c <stdio_exit_handler+0x14>)
 800a20e:	f000 b869 	b.w	800a2e4 <_fwalk_sglue>
 800a212:	bf00      	nop
 800a214:	20000014 	.word	0x20000014
 800a218:	0800c7d5 	.word	0x0800c7d5
 800a21c:	20000190 	.word	0x20000190

0800a220 <cleanup_stdio>:
 800a220:	6841      	ldr	r1, [r0, #4]
 800a222:	4b0c      	ldr	r3, [pc, #48]	@ (800a254 <cleanup_stdio+0x34>)
 800a224:	b510      	push	{r4, lr}
 800a226:	4299      	cmp	r1, r3
 800a228:	4604      	mov	r4, r0
 800a22a:	d001      	beq.n	800a230 <cleanup_stdio+0x10>
 800a22c:	f002 fad2 	bl	800c7d4 <_fflush_r>
 800a230:	68a1      	ldr	r1, [r4, #8]
 800a232:	4b09      	ldr	r3, [pc, #36]	@ (800a258 <cleanup_stdio+0x38>)
 800a234:	4299      	cmp	r1, r3
 800a236:	d002      	beq.n	800a23e <cleanup_stdio+0x1e>
 800a238:	4620      	mov	r0, r4
 800a23a:	f002 facb 	bl	800c7d4 <_fflush_r>
 800a23e:	68e1      	ldr	r1, [r4, #12]
 800a240:	4b06      	ldr	r3, [pc, #24]	@ (800a25c <cleanup_stdio+0x3c>)
 800a242:	4299      	cmp	r1, r3
 800a244:	d004      	beq.n	800a250 <cleanup_stdio+0x30>
 800a246:	4620      	mov	r0, r4
 800a248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a24c:	f002 bac2 	b.w	800c7d4 <_fflush_r>
 800a250:	bd10      	pop	{r4, pc}
 800a252:	bf00      	nop
 800a254:	20000c54 	.word	0x20000c54
 800a258:	20000cbc 	.word	0x20000cbc
 800a25c:	20000d24 	.word	0x20000d24

0800a260 <global_stdio_init.part.0>:
 800a260:	b510      	push	{r4, lr}
 800a262:	4b0b      	ldr	r3, [pc, #44]	@ (800a290 <global_stdio_init.part.0+0x30>)
 800a264:	4c0b      	ldr	r4, [pc, #44]	@ (800a294 <global_stdio_init.part.0+0x34>)
 800a266:	4a0c      	ldr	r2, [pc, #48]	@ (800a298 <global_stdio_init.part.0+0x38>)
 800a268:	4620      	mov	r0, r4
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	2104      	movs	r1, #4
 800a26e:	2200      	movs	r2, #0
 800a270:	f7ff ff94 	bl	800a19c <std>
 800a274:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a278:	2201      	movs	r2, #1
 800a27a:	2109      	movs	r1, #9
 800a27c:	f7ff ff8e 	bl	800a19c <std>
 800a280:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a284:	2202      	movs	r2, #2
 800a286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a28a:	2112      	movs	r1, #18
 800a28c:	f7ff bf86 	b.w	800a19c <std>
 800a290:	20000d8c 	.word	0x20000d8c
 800a294:	20000c54 	.word	0x20000c54
 800a298:	0800a209 	.word	0x0800a209

0800a29c <__sfp_lock_acquire>:
 800a29c:	4801      	ldr	r0, [pc, #4]	@ (800a2a4 <__sfp_lock_acquire+0x8>)
 800a29e:	f000 b948 	b.w	800a532 <__retarget_lock_acquire_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	20000d95 	.word	0x20000d95

0800a2a8 <__sfp_lock_release>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	@ (800a2b0 <__sfp_lock_release+0x8>)
 800a2aa:	f000 b943 	b.w	800a534 <__retarget_lock_release_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	20000d95 	.word	0x20000d95

0800a2b4 <__sinit>:
 800a2b4:	b510      	push	{r4, lr}
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	f7ff fff0 	bl	800a29c <__sfp_lock_acquire>
 800a2bc:	6a23      	ldr	r3, [r4, #32]
 800a2be:	b11b      	cbz	r3, 800a2c8 <__sinit+0x14>
 800a2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c4:	f7ff bff0 	b.w	800a2a8 <__sfp_lock_release>
 800a2c8:	4b04      	ldr	r3, [pc, #16]	@ (800a2dc <__sinit+0x28>)
 800a2ca:	6223      	str	r3, [r4, #32]
 800a2cc:	4b04      	ldr	r3, [pc, #16]	@ (800a2e0 <__sinit+0x2c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1f5      	bne.n	800a2c0 <__sinit+0xc>
 800a2d4:	f7ff ffc4 	bl	800a260 <global_stdio_init.part.0>
 800a2d8:	e7f2      	b.n	800a2c0 <__sinit+0xc>
 800a2da:	bf00      	nop
 800a2dc:	0800a221 	.word	0x0800a221
 800a2e0:	20000d8c 	.word	0x20000d8c

0800a2e4 <_fwalk_sglue>:
 800a2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2e8:	4607      	mov	r7, r0
 800a2ea:	4688      	mov	r8, r1
 800a2ec:	4614      	mov	r4, r2
 800a2ee:	2600      	movs	r6, #0
 800a2f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a2f8:	d505      	bpl.n	800a306 <_fwalk_sglue+0x22>
 800a2fa:	6824      	ldr	r4, [r4, #0]
 800a2fc:	2c00      	cmp	r4, #0
 800a2fe:	d1f7      	bne.n	800a2f0 <_fwalk_sglue+0xc>
 800a300:	4630      	mov	r0, r6
 800a302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a306:	89ab      	ldrh	r3, [r5, #12]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d907      	bls.n	800a31c <_fwalk_sglue+0x38>
 800a30c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a310:	3301      	adds	r3, #1
 800a312:	d003      	beq.n	800a31c <_fwalk_sglue+0x38>
 800a314:	4629      	mov	r1, r5
 800a316:	4638      	mov	r0, r7
 800a318:	47c0      	blx	r8
 800a31a:	4306      	orrs	r6, r0
 800a31c:	3568      	adds	r5, #104	@ 0x68
 800a31e:	e7e9      	b.n	800a2f4 <_fwalk_sglue+0x10>

0800a320 <sniprintf>:
 800a320:	b40c      	push	{r2, r3}
 800a322:	b530      	push	{r4, r5, lr}
 800a324:	4b18      	ldr	r3, [pc, #96]	@ (800a388 <sniprintf+0x68>)
 800a326:	1e0c      	subs	r4, r1, #0
 800a328:	681d      	ldr	r5, [r3, #0]
 800a32a:	b09d      	sub	sp, #116	@ 0x74
 800a32c:	da08      	bge.n	800a340 <sniprintf+0x20>
 800a32e:	238b      	movs	r3, #139	@ 0x8b
 800a330:	f04f 30ff 	mov.w	r0, #4294967295
 800a334:	602b      	str	r3, [r5, #0]
 800a336:	b01d      	add	sp, #116	@ 0x74
 800a338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a33c:	b002      	add	sp, #8
 800a33e:	4770      	bx	lr
 800a340:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a344:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a348:	f04f 0300 	mov.w	r3, #0
 800a34c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a34e:	bf0c      	ite	eq
 800a350:	4623      	moveq	r3, r4
 800a352:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a356:	9304      	str	r3, [sp, #16]
 800a358:	9307      	str	r3, [sp, #28]
 800a35a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a35e:	9002      	str	r0, [sp, #8]
 800a360:	9006      	str	r0, [sp, #24]
 800a362:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a366:	4628      	mov	r0, r5
 800a368:	ab21      	add	r3, sp, #132	@ 0x84
 800a36a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a36c:	a902      	add	r1, sp, #8
 800a36e:	9301      	str	r3, [sp, #4]
 800a370:	f002 f8b4 	bl	800c4dc <_svfiprintf_r>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	bfbc      	itt	lt
 800a378:	238b      	movlt	r3, #139	@ 0x8b
 800a37a:	602b      	strlt	r3, [r5, #0]
 800a37c:	2c00      	cmp	r4, #0
 800a37e:	d0da      	beq.n	800a336 <sniprintf+0x16>
 800a380:	2200      	movs	r2, #0
 800a382:	9b02      	ldr	r3, [sp, #8]
 800a384:	701a      	strb	r2, [r3, #0]
 800a386:	e7d6      	b.n	800a336 <sniprintf+0x16>
 800a388:	2000018c 	.word	0x2000018c

0800a38c <__sread>:
 800a38c:	b510      	push	{r4, lr}
 800a38e:	460c      	mov	r4, r1
 800a390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a394:	f000 f87e 	bl	800a494 <_read_r>
 800a398:	2800      	cmp	r0, #0
 800a39a:	bfab      	itete	ge
 800a39c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a39e:	89a3      	ldrhlt	r3, [r4, #12]
 800a3a0:	181b      	addge	r3, r3, r0
 800a3a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a3a6:	bfac      	ite	ge
 800a3a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a3aa:	81a3      	strhlt	r3, [r4, #12]
 800a3ac:	bd10      	pop	{r4, pc}

0800a3ae <__swrite>:
 800a3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b2:	461f      	mov	r7, r3
 800a3b4:	898b      	ldrh	r3, [r1, #12]
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	05db      	lsls	r3, r3, #23
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	4616      	mov	r6, r2
 800a3be:	d505      	bpl.n	800a3cc <__swrite+0x1e>
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c8:	f000 f852 	bl	800a470 <_lseek_r>
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	4632      	mov	r2, r6
 800a3d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3d4:	81a3      	strh	r3, [r4, #12]
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	463b      	mov	r3, r7
 800a3da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e2:	f000 b869 	b.w	800a4b8 <_write_r>

0800a3e6 <__sseek>:
 800a3e6:	b510      	push	{r4, lr}
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ee:	f000 f83f 	bl	800a470 <_lseek_r>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	bf15      	itete	ne
 800a3f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a402:	81a3      	strheq	r3, [r4, #12]
 800a404:	bf18      	it	ne
 800a406:	81a3      	strhne	r3, [r4, #12]
 800a408:	bd10      	pop	{r4, pc}

0800a40a <__sclose>:
 800a40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a40e:	f000 b81f 	b.w	800a450 <_close_r>

0800a412 <memset>:
 800a412:	4603      	mov	r3, r0
 800a414:	4402      	add	r2, r0
 800a416:	4293      	cmp	r3, r2
 800a418:	d100      	bne.n	800a41c <memset+0xa>
 800a41a:	4770      	bx	lr
 800a41c:	f803 1b01 	strb.w	r1, [r3], #1
 800a420:	e7f9      	b.n	800a416 <memset+0x4>

0800a422 <strncmp>:
 800a422:	b510      	push	{r4, lr}
 800a424:	b16a      	cbz	r2, 800a442 <strncmp+0x20>
 800a426:	3901      	subs	r1, #1
 800a428:	1884      	adds	r4, r0, r2
 800a42a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a42e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a432:	429a      	cmp	r2, r3
 800a434:	d103      	bne.n	800a43e <strncmp+0x1c>
 800a436:	42a0      	cmp	r0, r4
 800a438:	d001      	beq.n	800a43e <strncmp+0x1c>
 800a43a:	2a00      	cmp	r2, #0
 800a43c:	d1f5      	bne.n	800a42a <strncmp+0x8>
 800a43e:	1ad0      	subs	r0, r2, r3
 800a440:	bd10      	pop	{r4, pc}
 800a442:	4610      	mov	r0, r2
 800a444:	e7fc      	b.n	800a440 <strncmp+0x1e>
	...

0800a448 <_localeconv_r>:
 800a448:	4800      	ldr	r0, [pc, #0]	@ (800a44c <_localeconv_r+0x4>)
 800a44a:	4770      	bx	lr
 800a44c:	20000110 	.word	0x20000110

0800a450 <_close_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	2300      	movs	r3, #0
 800a454:	4d05      	ldr	r5, [pc, #20]	@ (800a46c <_close_r+0x1c>)
 800a456:	4604      	mov	r4, r0
 800a458:	4608      	mov	r0, r1
 800a45a:	602b      	str	r3, [r5, #0]
 800a45c:	f7f8 ff29 	bl	80032b2 <_close>
 800a460:	1c43      	adds	r3, r0, #1
 800a462:	d102      	bne.n	800a46a <_close_r+0x1a>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	b103      	cbz	r3, 800a46a <_close_r+0x1a>
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	20000d90 	.word	0x20000d90

0800a470 <_lseek_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4604      	mov	r4, r0
 800a474:	4608      	mov	r0, r1
 800a476:	4611      	mov	r1, r2
 800a478:	2200      	movs	r2, #0
 800a47a:	4d05      	ldr	r5, [pc, #20]	@ (800a490 <_lseek_r+0x20>)
 800a47c:	602a      	str	r2, [r5, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	f7f8 ff3b 	bl	80032fa <_lseek>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	d102      	bne.n	800a48e <_lseek_r+0x1e>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	b103      	cbz	r3, 800a48e <_lseek_r+0x1e>
 800a48c:	6023      	str	r3, [r4, #0]
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	20000d90 	.word	0x20000d90

0800a494 <_read_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	4611      	mov	r1, r2
 800a49c:	2200      	movs	r2, #0
 800a49e:	4d05      	ldr	r5, [pc, #20]	@ (800a4b4 <_read_r+0x20>)
 800a4a0:	602a      	str	r2, [r5, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f7f8 fecc 	bl	8003240 <_read>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d102      	bne.n	800a4b2 <_read_r+0x1e>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b103      	cbz	r3, 800a4b2 <_read_r+0x1e>
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	20000d90 	.word	0x20000d90

0800a4b8 <_write_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	4608      	mov	r0, r1
 800a4be:	4611      	mov	r1, r2
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	4d05      	ldr	r5, [pc, #20]	@ (800a4d8 <_write_r+0x20>)
 800a4c4:	602a      	str	r2, [r5, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	f7f8 fed7 	bl	800327a <_write>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_write_r+0x1e>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_write_r+0x1e>
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	20000d90 	.word	0x20000d90

0800a4dc <__errno>:
 800a4dc:	4b01      	ldr	r3, [pc, #4]	@ (800a4e4 <__errno+0x8>)
 800a4de:	6818      	ldr	r0, [r3, #0]
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	2000018c 	.word	0x2000018c

0800a4e8 <__libc_init_array>:
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	2600      	movs	r6, #0
 800a4ec:	4d0c      	ldr	r5, [pc, #48]	@ (800a520 <__libc_init_array+0x38>)
 800a4ee:	4c0d      	ldr	r4, [pc, #52]	@ (800a524 <__libc_init_array+0x3c>)
 800a4f0:	1b64      	subs	r4, r4, r5
 800a4f2:	10a4      	asrs	r4, r4, #2
 800a4f4:	42a6      	cmp	r6, r4
 800a4f6:	d109      	bne.n	800a50c <__libc_init_array+0x24>
 800a4f8:	f002 fcda 	bl	800ceb0 <_init>
 800a4fc:	2600      	movs	r6, #0
 800a4fe:	4d0a      	ldr	r5, [pc, #40]	@ (800a528 <__libc_init_array+0x40>)
 800a500:	4c0a      	ldr	r4, [pc, #40]	@ (800a52c <__libc_init_array+0x44>)
 800a502:	1b64      	subs	r4, r4, r5
 800a504:	10a4      	asrs	r4, r4, #2
 800a506:	42a6      	cmp	r6, r4
 800a508:	d105      	bne.n	800a516 <__libc_init_array+0x2e>
 800a50a:	bd70      	pop	{r4, r5, r6, pc}
 800a50c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a510:	4798      	blx	r3
 800a512:	3601      	adds	r6, #1
 800a514:	e7ee      	b.n	800a4f4 <__libc_init_array+0xc>
 800a516:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51a:	4798      	blx	r3
 800a51c:	3601      	adds	r6, #1
 800a51e:	e7f2      	b.n	800a506 <__libc_init_array+0x1e>
 800a520:	0800d350 	.word	0x0800d350
 800a524:	0800d350 	.word	0x0800d350
 800a528:	0800d350 	.word	0x0800d350
 800a52c:	0800d354 	.word	0x0800d354

0800a530 <__retarget_lock_init_recursive>:
 800a530:	4770      	bx	lr

0800a532 <__retarget_lock_acquire_recursive>:
 800a532:	4770      	bx	lr

0800a534 <__retarget_lock_release_recursive>:
 800a534:	4770      	bx	lr

0800a536 <memchr>:
 800a536:	4603      	mov	r3, r0
 800a538:	b510      	push	{r4, lr}
 800a53a:	b2c9      	uxtb	r1, r1
 800a53c:	4402      	add	r2, r0
 800a53e:	4293      	cmp	r3, r2
 800a540:	4618      	mov	r0, r3
 800a542:	d101      	bne.n	800a548 <memchr+0x12>
 800a544:	2000      	movs	r0, #0
 800a546:	e003      	b.n	800a550 <memchr+0x1a>
 800a548:	7804      	ldrb	r4, [r0, #0]
 800a54a:	3301      	adds	r3, #1
 800a54c:	428c      	cmp	r4, r1
 800a54e:	d1f6      	bne.n	800a53e <memchr+0x8>
 800a550:	bd10      	pop	{r4, pc}

0800a552 <memcpy>:
 800a552:	440a      	add	r2, r1
 800a554:	4291      	cmp	r1, r2
 800a556:	f100 33ff 	add.w	r3, r0, #4294967295
 800a55a:	d100      	bne.n	800a55e <memcpy+0xc>
 800a55c:	4770      	bx	lr
 800a55e:	b510      	push	{r4, lr}
 800a560:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a564:	4291      	cmp	r1, r2
 800a566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a56a:	d1f9      	bne.n	800a560 <memcpy+0xe>
 800a56c:	bd10      	pop	{r4, pc}
	...

0800a570 <nan>:
 800a570:	2000      	movs	r0, #0
 800a572:	4901      	ldr	r1, [pc, #4]	@ (800a578 <nan+0x8>)
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	7ff80000 	.word	0x7ff80000

0800a57c <quorem>:
 800a57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	6903      	ldr	r3, [r0, #16]
 800a582:	690c      	ldr	r4, [r1, #16]
 800a584:	4607      	mov	r7, r0
 800a586:	42a3      	cmp	r3, r4
 800a588:	db7e      	blt.n	800a688 <quorem+0x10c>
 800a58a:	3c01      	subs	r4, #1
 800a58c:	00a3      	lsls	r3, r4, #2
 800a58e:	f100 0514 	add.w	r5, r0, #20
 800a592:	f101 0814 	add.w	r8, r1, #20
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5b2:	d32e      	bcc.n	800a612 <quorem+0x96>
 800a5b4:	f04f 0a00 	mov.w	sl, #0
 800a5b8:	46c4      	mov	ip, r8
 800a5ba:	46ae      	mov	lr, r5
 800a5bc:	46d3      	mov	fp, sl
 800a5be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5c2:	b298      	uxth	r0, r3
 800a5c4:	fb06 a000 	mla	r0, r6, r0, sl
 800a5c8:	0c1b      	lsrs	r3, r3, #16
 800a5ca:	0c02      	lsrs	r2, r0, #16
 800a5cc:	fb06 2303 	mla	r3, r6, r3, r2
 800a5d0:	f8de 2000 	ldr.w	r2, [lr]
 800a5d4:	b280      	uxth	r0, r0
 800a5d6:	b292      	uxth	r2, r2
 800a5d8:	1a12      	subs	r2, r2, r0
 800a5da:	445a      	add	r2, fp
 800a5dc:	f8de 0000 	ldr.w	r0, [lr]
 800a5e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5ee:	b292      	uxth	r2, r2
 800a5f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a5f4:	45e1      	cmp	r9, ip
 800a5f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a5fa:	f84e 2b04 	str.w	r2, [lr], #4
 800a5fe:	d2de      	bcs.n	800a5be <quorem+0x42>
 800a600:	9b00      	ldr	r3, [sp, #0]
 800a602:	58eb      	ldr	r3, [r5, r3]
 800a604:	b92b      	cbnz	r3, 800a612 <quorem+0x96>
 800a606:	9b01      	ldr	r3, [sp, #4]
 800a608:	3b04      	subs	r3, #4
 800a60a:	429d      	cmp	r5, r3
 800a60c:	461a      	mov	r2, r3
 800a60e:	d32f      	bcc.n	800a670 <quorem+0xf4>
 800a610:	613c      	str	r4, [r7, #16]
 800a612:	4638      	mov	r0, r7
 800a614:	f001 fd16 	bl	800c044 <__mcmp>
 800a618:	2800      	cmp	r0, #0
 800a61a:	db25      	blt.n	800a668 <quorem+0xec>
 800a61c:	4629      	mov	r1, r5
 800a61e:	2000      	movs	r0, #0
 800a620:	f858 2b04 	ldr.w	r2, [r8], #4
 800a624:	f8d1 c000 	ldr.w	ip, [r1]
 800a628:	fa1f fe82 	uxth.w	lr, r2
 800a62c:	fa1f f38c 	uxth.w	r3, ip
 800a630:	eba3 030e 	sub.w	r3, r3, lr
 800a634:	4403      	add	r3, r0
 800a636:	0c12      	lsrs	r2, r2, #16
 800a638:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a63c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a640:	b29b      	uxth	r3, r3
 800a642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a646:	45c1      	cmp	r9, r8
 800a648:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a64c:	f841 3b04 	str.w	r3, [r1], #4
 800a650:	d2e6      	bcs.n	800a620 <quorem+0xa4>
 800a652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a65a:	b922      	cbnz	r2, 800a666 <quorem+0xea>
 800a65c:	3b04      	subs	r3, #4
 800a65e:	429d      	cmp	r5, r3
 800a660:	461a      	mov	r2, r3
 800a662:	d30b      	bcc.n	800a67c <quorem+0x100>
 800a664:	613c      	str	r4, [r7, #16]
 800a666:	3601      	adds	r6, #1
 800a668:	4630      	mov	r0, r6
 800a66a:	b003      	add	sp, #12
 800a66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a670:	6812      	ldr	r2, [r2, #0]
 800a672:	3b04      	subs	r3, #4
 800a674:	2a00      	cmp	r2, #0
 800a676:	d1cb      	bne.n	800a610 <quorem+0x94>
 800a678:	3c01      	subs	r4, #1
 800a67a:	e7c6      	b.n	800a60a <quorem+0x8e>
 800a67c:	6812      	ldr	r2, [r2, #0]
 800a67e:	3b04      	subs	r3, #4
 800a680:	2a00      	cmp	r2, #0
 800a682:	d1ef      	bne.n	800a664 <quorem+0xe8>
 800a684:	3c01      	subs	r4, #1
 800a686:	e7ea      	b.n	800a65e <quorem+0xe2>
 800a688:	2000      	movs	r0, #0
 800a68a:	e7ee      	b.n	800a66a <quorem+0xee>
 800a68c:	0000      	movs	r0, r0
	...

0800a690 <_dtoa_r>:
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	4614      	mov	r4, r2
 800a696:	461d      	mov	r5, r3
 800a698:	69c7      	ldr	r7, [r0, #28]
 800a69a:	b097      	sub	sp, #92	@ 0x5c
 800a69c:	4681      	mov	r9, r0
 800a69e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a6a2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a6a4:	b97f      	cbnz	r7, 800a6c6 <_dtoa_r+0x36>
 800a6a6:	2010      	movs	r0, #16
 800a6a8:	f001 f948 	bl	800b93c <malloc>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	f8c9 001c 	str.w	r0, [r9, #28]
 800a6b2:	b920      	cbnz	r0, 800a6be <_dtoa_r+0x2e>
 800a6b4:	21ef      	movs	r1, #239	@ 0xef
 800a6b6:	4bac      	ldr	r3, [pc, #688]	@ (800a968 <_dtoa_r+0x2d8>)
 800a6b8:	48ac      	ldr	r0, [pc, #688]	@ (800a96c <_dtoa_r+0x2dc>)
 800a6ba:	f002 f8dd 	bl	800c878 <__assert_func>
 800a6be:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6c2:	6007      	str	r7, [r0, #0]
 800a6c4:	60c7      	str	r7, [r0, #12]
 800a6c6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6ca:	6819      	ldr	r1, [r3, #0]
 800a6cc:	b159      	cbz	r1, 800a6e6 <_dtoa_r+0x56>
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	4093      	lsls	r3, r2
 800a6d4:	604a      	str	r2, [r1, #4]
 800a6d6:	608b      	str	r3, [r1, #8]
 800a6d8:	4648      	mov	r0, r9
 800a6da:	f001 fa37 	bl	800bb4c <_Bfree>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	1e2b      	subs	r3, r5, #0
 800a6e8:	bfaf      	iteee	ge
 800a6ea:	2300      	movge	r3, #0
 800a6ec:	2201      	movlt	r2, #1
 800a6ee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a6f2:	9307      	strlt	r3, [sp, #28]
 800a6f4:	bfa8      	it	ge
 800a6f6:	6033      	strge	r3, [r6, #0]
 800a6f8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a6fc:	4b9c      	ldr	r3, [pc, #624]	@ (800a970 <_dtoa_r+0x2e0>)
 800a6fe:	bfb8      	it	lt
 800a700:	6032      	strlt	r2, [r6, #0]
 800a702:	ea33 0308 	bics.w	r3, r3, r8
 800a706:	d112      	bne.n	800a72e <_dtoa_r+0x9e>
 800a708:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a70c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a714:	4323      	orrs	r3, r4
 800a716:	f000 855e 	beq.w	800b1d6 <_dtoa_r+0xb46>
 800a71a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a71c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a974 <_dtoa_r+0x2e4>
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 8560 	beq.w	800b1e6 <_dtoa_r+0xb56>
 800a726:	f10a 0303 	add.w	r3, sl, #3
 800a72a:	f000 bd5a 	b.w	800b1e2 <_dtoa_r+0xb52>
 800a72e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a732:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a73a:	2200      	movs	r2, #0
 800a73c:	2300      	movs	r3, #0
 800a73e:	f7f6 f933 	bl	80009a8 <__aeabi_dcmpeq>
 800a742:	4607      	mov	r7, r0
 800a744:	b158      	cbz	r0, 800a75e <_dtoa_r+0xce>
 800a746:	2301      	movs	r3, #1
 800a748:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a74e:	b113      	cbz	r3, 800a756 <_dtoa_r+0xc6>
 800a750:	4b89      	ldr	r3, [pc, #548]	@ (800a978 <_dtoa_r+0x2e8>)
 800a752:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a97c <_dtoa_r+0x2ec>
 800a75a:	f000 bd44 	b.w	800b1e6 <_dtoa_r+0xb56>
 800a75e:	ab14      	add	r3, sp, #80	@ 0x50
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	ab15      	add	r3, sp, #84	@ 0x54
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	4648      	mov	r0, r9
 800a768:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a76c:	f001 fd82 	bl	800c274 <__d2b>
 800a770:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a774:	9003      	str	r0, [sp, #12]
 800a776:	2e00      	cmp	r6, #0
 800a778:	d078      	beq.n	800a86c <_dtoa_r+0x1dc>
 800a77a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a77e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a780:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a788:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a78c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a790:	9712      	str	r7, [sp, #72]	@ 0x48
 800a792:	4619      	mov	r1, r3
 800a794:	2200      	movs	r2, #0
 800a796:	4b7a      	ldr	r3, [pc, #488]	@ (800a980 <_dtoa_r+0x2f0>)
 800a798:	f7f5 fce6 	bl	8000168 <__aeabi_dsub>
 800a79c:	a36c      	add	r3, pc, #432	@ (adr r3, 800a950 <_dtoa_r+0x2c0>)
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f7f5 fe99 	bl	80004d8 <__aeabi_dmul>
 800a7a6:	a36c      	add	r3, pc, #432	@ (adr r3, 800a958 <_dtoa_r+0x2c8>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	f7f5 fcde 	bl	800016c <__adddf3>
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	460d      	mov	r5, r1
 800a7b6:	f7f5 fe25 	bl	8000404 <__aeabi_i2d>
 800a7ba:	a369      	add	r3, pc, #420	@ (adr r3, 800a960 <_dtoa_r+0x2d0>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f7f5 fe8a 	bl	80004d8 <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	f7f5 fcce 	bl	800016c <__adddf3>
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	460d      	mov	r5, r1
 800a7d4:	f7f6 f930 	bl	8000a38 <__aeabi_d2iz>
 800a7d8:	2200      	movs	r2, #0
 800a7da:	4607      	mov	r7, r0
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4620      	mov	r0, r4
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	f7f6 f8eb 	bl	80009bc <__aeabi_dcmplt>
 800a7e6:	b140      	cbz	r0, 800a7fa <_dtoa_r+0x16a>
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f7f5 fe0b 	bl	8000404 <__aeabi_i2d>
 800a7ee:	4622      	mov	r2, r4
 800a7f0:	462b      	mov	r3, r5
 800a7f2:	f7f6 f8d9 	bl	80009a8 <__aeabi_dcmpeq>
 800a7f6:	b900      	cbnz	r0, 800a7fa <_dtoa_r+0x16a>
 800a7f8:	3f01      	subs	r7, #1
 800a7fa:	2f16      	cmp	r7, #22
 800a7fc:	d854      	bhi.n	800a8a8 <_dtoa_r+0x218>
 800a7fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a802:	4b60      	ldr	r3, [pc, #384]	@ (800a984 <_dtoa_r+0x2f4>)
 800a804:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f7f6 f8d6 	bl	80009bc <__aeabi_dcmplt>
 800a810:	2800      	cmp	r0, #0
 800a812:	d04b      	beq.n	800a8ac <_dtoa_r+0x21c>
 800a814:	2300      	movs	r3, #0
 800a816:	3f01      	subs	r7, #1
 800a818:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a81a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a81c:	1b9b      	subs	r3, r3, r6
 800a81e:	1e5a      	subs	r2, r3, #1
 800a820:	bf49      	itett	mi
 800a822:	f1c3 0301 	rsbmi	r3, r3, #1
 800a826:	2300      	movpl	r3, #0
 800a828:	9304      	strmi	r3, [sp, #16]
 800a82a:	2300      	movmi	r3, #0
 800a82c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a82e:	bf54      	ite	pl
 800a830:	9304      	strpl	r3, [sp, #16]
 800a832:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a834:	2f00      	cmp	r7, #0
 800a836:	db3b      	blt.n	800a8b0 <_dtoa_r+0x220>
 800a838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a83a:	970e      	str	r7, [sp, #56]	@ 0x38
 800a83c:	443b      	add	r3, r7
 800a83e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a840:	2300      	movs	r3, #0
 800a842:	930a      	str	r3, [sp, #40]	@ 0x28
 800a844:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a846:	2b09      	cmp	r3, #9
 800a848:	d865      	bhi.n	800a916 <_dtoa_r+0x286>
 800a84a:	2b05      	cmp	r3, #5
 800a84c:	bfc4      	itt	gt
 800a84e:	3b04      	subgt	r3, #4
 800a850:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a852:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a854:	bfc8      	it	gt
 800a856:	2400      	movgt	r4, #0
 800a858:	f1a3 0302 	sub.w	r3, r3, #2
 800a85c:	bfd8      	it	le
 800a85e:	2401      	movle	r4, #1
 800a860:	2b03      	cmp	r3, #3
 800a862:	d864      	bhi.n	800a92e <_dtoa_r+0x29e>
 800a864:	e8df f003 	tbb	[pc, r3]
 800a868:	2c385553 	.word	0x2c385553
 800a86c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a870:	441e      	add	r6, r3
 800a872:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a876:	2b20      	cmp	r3, #32
 800a878:	bfc1      	itttt	gt
 800a87a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a87e:	fa08 f803 	lslgt.w	r8, r8, r3
 800a882:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a886:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a88a:	bfd6      	itet	le
 800a88c:	f1c3 0320 	rsble	r3, r3, #32
 800a890:	ea48 0003 	orrgt.w	r0, r8, r3
 800a894:	fa04 f003 	lslle.w	r0, r4, r3
 800a898:	f7f5 fda4 	bl	80003e4 <__aeabi_ui2d>
 800a89c:	2201      	movs	r2, #1
 800a89e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a8a2:	3e01      	subs	r6, #1
 800a8a4:	9212      	str	r2, [sp, #72]	@ 0x48
 800a8a6:	e774      	b.n	800a792 <_dtoa_r+0x102>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e7b5      	b.n	800a818 <_dtoa_r+0x188>
 800a8ac:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a8ae:	e7b4      	b.n	800a81a <_dtoa_r+0x18a>
 800a8b0:	9b04      	ldr	r3, [sp, #16]
 800a8b2:	1bdb      	subs	r3, r3, r7
 800a8b4:	9304      	str	r3, [sp, #16]
 800a8b6:	427b      	negs	r3, r7
 800a8b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a8be:	e7c1      	b.n	800a844 <_dtoa_r+0x1b4>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8c6:	eb07 0b03 	add.w	fp, r7, r3
 800a8ca:	f10b 0301 	add.w	r3, fp, #1
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	9308      	str	r3, [sp, #32]
 800a8d2:	bfb8      	it	lt
 800a8d4:	2301      	movlt	r3, #1
 800a8d6:	e006      	b.n	800a8e6 <_dtoa_r+0x256>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dd28      	ble.n	800a934 <_dtoa_r+0x2a4>
 800a8e2:	469b      	mov	fp, r3
 800a8e4:	9308      	str	r3, [sp, #32]
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	2204      	movs	r2, #4
 800a8ea:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a8ee:	f102 0514 	add.w	r5, r2, #20
 800a8f2:	429d      	cmp	r5, r3
 800a8f4:	d926      	bls.n	800a944 <_dtoa_r+0x2b4>
 800a8f6:	6041      	str	r1, [r0, #4]
 800a8f8:	4648      	mov	r0, r9
 800a8fa:	f001 f8e7 	bl	800bacc <_Balloc>
 800a8fe:	4682      	mov	sl, r0
 800a900:	2800      	cmp	r0, #0
 800a902:	d143      	bne.n	800a98c <_dtoa_r+0x2fc>
 800a904:	4602      	mov	r2, r0
 800a906:	f240 11af 	movw	r1, #431	@ 0x1af
 800a90a:	4b1f      	ldr	r3, [pc, #124]	@ (800a988 <_dtoa_r+0x2f8>)
 800a90c:	e6d4      	b.n	800a6b8 <_dtoa_r+0x28>
 800a90e:	2300      	movs	r3, #0
 800a910:	e7e3      	b.n	800a8da <_dtoa_r+0x24a>
 800a912:	2300      	movs	r3, #0
 800a914:	e7d5      	b.n	800a8c2 <_dtoa_r+0x232>
 800a916:	2401      	movs	r4, #1
 800a918:	2300      	movs	r3, #0
 800a91a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a91c:	9320      	str	r3, [sp, #128]	@ 0x80
 800a91e:	f04f 3bff 	mov.w	fp, #4294967295
 800a922:	2200      	movs	r2, #0
 800a924:	2312      	movs	r3, #18
 800a926:	f8cd b020 	str.w	fp, [sp, #32]
 800a92a:	9221      	str	r2, [sp, #132]	@ 0x84
 800a92c:	e7db      	b.n	800a8e6 <_dtoa_r+0x256>
 800a92e:	2301      	movs	r3, #1
 800a930:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a932:	e7f4      	b.n	800a91e <_dtoa_r+0x28e>
 800a934:	f04f 0b01 	mov.w	fp, #1
 800a938:	465b      	mov	r3, fp
 800a93a:	f8cd b020 	str.w	fp, [sp, #32]
 800a93e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800a942:	e7d0      	b.n	800a8e6 <_dtoa_r+0x256>
 800a944:	3101      	adds	r1, #1
 800a946:	0052      	lsls	r2, r2, #1
 800a948:	e7d1      	b.n	800a8ee <_dtoa_r+0x25e>
 800a94a:	bf00      	nop
 800a94c:	f3af 8000 	nop.w
 800a950:	636f4361 	.word	0x636f4361
 800a954:	3fd287a7 	.word	0x3fd287a7
 800a958:	8b60c8b3 	.word	0x8b60c8b3
 800a95c:	3fc68a28 	.word	0x3fc68a28
 800a960:	509f79fb 	.word	0x509f79fb
 800a964:	3fd34413 	.word	0x3fd34413
 800a968:	0800cf6b 	.word	0x0800cf6b
 800a96c:	0800cf82 	.word	0x0800cf82
 800a970:	7ff00000 	.word	0x7ff00000
 800a974:	0800cf67 	.word	0x0800cf67
 800a978:	0800cf33 	.word	0x0800cf33
 800a97c:	0800cf32 	.word	0x0800cf32
 800a980:	3ff80000 	.word	0x3ff80000
 800a984:	0800d280 	.word	0x0800d280
 800a988:	0800cfda 	.word	0x0800cfda
 800a98c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a990:	6018      	str	r0, [r3, #0]
 800a992:	9b08      	ldr	r3, [sp, #32]
 800a994:	2b0e      	cmp	r3, #14
 800a996:	f200 80a1 	bhi.w	800aadc <_dtoa_r+0x44c>
 800a99a:	2c00      	cmp	r4, #0
 800a99c:	f000 809e 	beq.w	800aadc <_dtoa_r+0x44c>
 800a9a0:	2f00      	cmp	r7, #0
 800a9a2:	dd33      	ble.n	800aa0c <_dtoa_r+0x37c>
 800a9a4:	4b9c      	ldr	r3, [pc, #624]	@ (800ac18 <_dtoa_r+0x588>)
 800a9a6:	f007 020f 	and.w	r2, r7, #15
 800a9aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9ae:	05f8      	lsls	r0, r7, #23
 800a9b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9b4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800a9b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a9bc:	d516      	bpl.n	800a9ec <_dtoa_r+0x35c>
 800a9be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9c2:	4b96      	ldr	r3, [pc, #600]	@ (800ac1c <_dtoa_r+0x58c>)
 800a9c4:	2603      	movs	r6, #3
 800a9c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9ca:	f7f5 feaf 	bl	800072c <__aeabi_ddiv>
 800a9ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a9d2:	f004 040f 	and.w	r4, r4, #15
 800a9d6:	4d91      	ldr	r5, [pc, #580]	@ (800ac1c <_dtoa_r+0x58c>)
 800a9d8:	b954      	cbnz	r4, 800a9f0 <_dtoa_r+0x360>
 800a9da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a9de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9e2:	f7f5 fea3 	bl	800072c <__aeabi_ddiv>
 800a9e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a9ea:	e028      	b.n	800aa3e <_dtoa_r+0x3ae>
 800a9ec:	2602      	movs	r6, #2
 800a9ee:	e7f2      	b.n	800a9d6 <_dtoa_r+0x346>
 800a9f0:	07e1      	lsls	r1, r4, #31
 800a9f2:	d508      	bpl.n	800aa06 <_dtoa_r+0x376>
 800a9f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a9f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9fc:	f7f5 fd6c 	bl	80004d8 <__aeabi_dmul>
 800aa00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa04:	3601      	adds	r6, #1
 800aa06:	1064      	asrs	r4, r4, #1
 800aa08:	3508      	adds	r5, #8
 800aa0a:	e7e5      	b.n	800a9d8 <_dtoa_r+0x348>
 800aa0c:	f000 80af 	beq.w	800ab6e <_dtoa_r+0x4de>
 800aa10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa14:	427c      	negs	r4, r7
 800aa16:	4b80      	ldr	r3, [pc, #512]	@ (800ac18 <_dtoa_r+0x588>)
 800aa18:	f004 020f 	and.w	r2, r4, #15
 800aa1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	f7f5 fd58 	bl	80004d8 <__aeabi_dmul>
 800aa28:	2602      	movs	r6, #2
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa30:	4d7a      	ldr	r5, [pc, #488]	@ (800ac1c <_dtoa_r+0x58c>)
 800aa32:	1124      	asrs	r4, r4, #4
 800aa34:	2c00      	cmp	r4, #0
 800aa36:	f040 808f 	bne.w	800ab58 <_dtoa_r+0x4c8>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1d3      	bne.n	800a9e6 <_dtoa_r+0x356>
 800aa3e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800aa42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 8094 	beq.w	800ab72 <_dtoa_r+0x4e2>
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	4629      	mov	r1, r5
 800aa50:	4b73      	ldr	r3, [pc, #460]	@ (800ac20 <_dtoa_r+0x590>)
 800aa52:	f7f5 ffb3 	bl	80009bc <__aeabi_dcmplt>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f000 808b 	beq.w	800ab72 <_dtoa_r+0x4e2>
 800aa5c:	9b08      	ldr	r3, [sp, #32]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 8087 	beq.w	800ab72 <_dtoa_r+0x4e2>
 800aa64:	f1bb 0f00 	cmp.w	fp, #0
 800aa68:	dd34      	ble.n	800aad4 <_dtoa_r+0x444>
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	4629      	mov	r1, r5
 800aa70:	4b6c      	ldr	r3, [pc, #432]	@ (800ac24 <_dtoa_r+0x594>)
 800aa72:	f7f5 fd31 	bl	80004d8 <__aeabi_dmul>
 800aa76:	465c      	mov	r4, fp
 800aa78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa7c:	f107 38ff 	add.w	r8, r7, #4294967295
 800aa80:	3601      	adds	r6, #1
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7f5 fcbe 	bl	8000404 <__aeabi_i2d>
 800aa88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa8c:	f7f5 fd24 	bl	80004d8 <__aeabi_dmul>
 800aa90:	2200      	movs	r2, #0
 800aa92:	4b65      	ldr	r3, [pc, #404]	@ (800ac28 <_dtoa_r+0x598>)
 800aa94:	f7f5 fb6a 	bl	800016c <__adddf3>
 800aa98:	4605      	mov	r5, r0
 800aa9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa9e:	2c00      	cmp	r4, #0
 800aaa0:	d16a      	bne.n	800ab78 <_dtoa_r+0x4e8>
 800aaa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	4b60      	ldr	r3, [pc, #384]	@ (800ac2c <_dtoa_r+0x59c>)
 800aaaa:	f7f5 fb5d 	bl	8000168 <__aeabi_dsub>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aab6:	462a      	mov	r2, r5
 800aab8:	4633      	mov	r3, r6
 800aaba:	f7f5 ff9d 	bl	80009f8 <__aeabi_dcmpgt>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	f040 8298 	bne.w	800aff4 <_dtoa_r+0x964>
 800aac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aac8:	462a      	mov	r2, r5
 800aaca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aace:	f7f5 ff75 	bl	80009bc <__aeabi_dcmplt>
 800aad2:	bb38      	cbnz	r0, 800ab24 <_dtoa_r+0x494>
 800aad4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aad8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aadc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f2c0 8157 	blt.w	800ad92 <_dtoa_r+0x702>
 800aae4:	2f0e      	cmp	r7, #14
 800aae6:	f300 8154 	bgt.w	800ad92 <_dtoa_r+0x702>
 800aaea:	4b4b      	ldr	r3, [pc, #300]	@ (800ac18 <_dtoa_r+0x588>)
 800aaec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aaf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aaf4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aaf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f280 80e5 	bge.w	800acca <_dtoa_r+0x63a>
 800ab00:	9b08      	ldr	r3, [sp, #32]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f300 80e1 	bgt.w	800acca <_dtoa_r+0x63a>
 800ab08:	d10c      	bne.n	800ab24 <_dtoa_r+0x494>
 800ab0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4b46      	ldr	r3, [pc, #280]	@ (800ac2c <_dtoa_r+0x59c>)
 800ab12:	f7f5 fce1 	bl	80004d8 <__aeabi_dmul>
 800ab16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab1a:	f7f5 ff63 	bl	80009e4 <__aeabi_dcmpge>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	f000 8266 	beq.w	800aff0 <_dtoa_r+0x960>
 800ab24:	2400      	movs	r4, #0
 800ab26:	4625      	mov	r5, r4
 800ab28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab2a:	4656      	mov	r6, sl
 800ab2c:	ea6f 0803 	mvn.w	r8, r3
 800ab30:	2700      	movs	r7, #0
 800ab32:	4621      	mov	r1, r4
 800ab34:	4648      	mov	r0, r9
 800ab36:	f001 f809 	bl	800bb4c <_Bfree>
 800ab3a:	2d00      	cmp	r5, #0
 800ab3c:	f000 80bd 	beq.w	800acba <_dtoa_r+0x62a>
 800ab40:	b12f      	cbz	r7, 800ab4e <_dtoa_r+0x4be>
 800ab42:	42af      	cmp	r7, r5
 800ab44:	d003      	beq.n	800ab4e <_dtoa_r+0x4be>
 800ab46:	4639      	mov	r1, r7
 800ab48:	4648      	mov	r0, r9
 800ab4a:	f000 ffff 	bl	800bb4c <_Bfree>
 800ab4e:	4629      	mov	r1, r5
 800ab50:	4648      	mov	r0, r9
 800ab52:	f000 fffb 	bl	800bb4c <_Bfree>
 800ab56:	e0b0      	b.n	800acba <_dtoa_r+0x62a>
 800ab58:	07e2      	lsls	r2, r4, #31
 800ab5a:	d505      	bpl.n	800ab68 <_dtoa_r+0x4d8>
 800ab5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab60:	f7f5 fcba 	bl	80004d8 <__aeabi_dmul>
 800ab64:	2301      	movs	r3, #1
 800ab66:	3601      	adds	r6, #1
 800ab68:	1064      	asrs	r4, r4, #1
 800ab6a:	3508      	adds	r5, #8
 800ab6c:	e762      	b.n	800aa34 <_dtoa_r+0x3a4>
 800ab6e:	2602      	movs	r6, #2
 800ab70:	e765      	b.n	800aa3e <_dtoa_r+0x3ae>
 800ab72:	46b8      	mov	r8, r7
 800ab74:	9c08      	ldr	r4, [sp, #32]
 800ab76:	e784      	b.n	800aa82 <_dtoa_r+0x3f2>
 800ab78:	4b27      	ldr	r3, [pc, #156]	@ (800ac18 <_dtoa_r+0x588>)
 800ab7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab84:	4454      	add	r4, sl
 800ab86:	2900      	cmp	r1, #0
 800ab88:	d054      	beq.n	800ac34 <_dtoa_r+0x5a4>
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	4928      	ldr	r1, [pc, #160]	@ (800ac30 <_dtoa_r+0x5a0>)
 800ab8e:	f7f5 fdcd 	bl	800072c <__aeabi_ddiv>
 800ab92:	4633      	mov	r3, r6
 800ab94:	462a      	mov	r2, r5
 800ab96:	f7f5 fae7 	bl	8000168 <__aeabi_dsub>
 800ab9a:	4656      	mov	r6, sl
 800ab9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aba0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aba4:	f7f5 ff48 	bl	8000a38 <__aeabi_d2iz>
 800aba8:	4605      	mov	r5, r0
 800abaa:	f7f5 fc2b 	bl	8000404 <__aeabi_i2d>
 800abae:	4602      	mov	r2, r0
 800abb0:	460b      	mov	r3, r1
 800abb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abb6:	f7f5 fad7 	bl	8000168 <__aeabi_dsub>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	3530      	adds	r5, #48	@ 0x30
 800abc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abc8:	f806 5b01 	strb.w	r5, [r6], #1
 800abcc:	f7f5 fef6 	bl	80009bc <__aeabi_dcmplt>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d172      	bne.n	800acba <_dtoa_r+0x62a>
 800abd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abd8:	2000      	movs	r0, #0
 800abda:	4911      	ldr	r1, [pc, #68]	@ (800ac20 <_dtoa_r+0x590>)
 800abdc:	f7f5 fac4 	bl	8000168 <__aeabi_dsub>
 800abe0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abe4:	f7f5 feea 	bl	80009bc <__aeabi_dcmplt>
 800abe8:	2800      	cmp	r0, #0
 800abea:	f040 80b4 	bne.w	800ad56 <_dtoa_r+0x6c6>
 800abee:	42a6      	cmp	r6, r4
 800abf0:	f43f af70 	beq.w	800aad4 <_dtoa_r+0x444>
 800abf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800abf8:	2200      	movs	r2, #0
 800abfa:	4b0a      	ldr	r3, [pc, #40]	@ (800ac24 <_dtoa_r+0x594>)
 800abfc:	f7f5 fc6c 	bl	80004d8 <__aeabi_dmul>
 800ac00:	2200      	movs	r2, #0
 800ac02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac0a:	4b06      	ldr	r3, [pc, #24]	@ (800ac24 <_dtoa_r+0x594>)
 800ac0c:	f7f5 fc64 	bl	80004d8 <__aeabi_dmul>
 800ac10:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac14:	e7c4      	b.n	800aba0 <_dtoa_r+0x510>
 800ac16:	bf00      	nop
 800ac18:	0800d280 	.word	0x0800d280
 800ac1c:	0800d258 	.word	0x0800d258
 800ac20:	3ff00000 	.word	0x3ff00000
 800ac24:	40240000 	.word	0x40240000
 800ac28:	401c0000 	.word	0x401c0000
 800ac2c:	40140000 	.word	0x40140000
 800ac30:	3fe00000 	.word	0x3fe00000
 800ac34:	4631      	mov	r1, r6
 800ac36:	4628      	mov	r0, r5
 800ac38:	f7f5 fc4e 	bl	80004d8 <__aeabi_dmul>
 800ac3c:	4656      	mov	r6, sl
 800ac3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac42:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ac44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac48:	f7f5 fef6 	bl	8000a38 <__aeabi_d2iz>
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	f7f5 fbd9 	bl	8000404 <__aeabi_i2d>
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac5a:	f7f5 fa85 	bl	8000168 <__aeabi_dsub>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	3530      	adds	r5, #48	@ 0x30
 800ac64:	f806 5b01 	strb.w	r5, [r6], #1
 800ac68:	42a6      	cmp	r6, r4
 800ac6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac6e:	f04f 0200 	mov.w	r2, #0
 800ac72:	d124      	bne.n	800acbe <_dtoa_r+0x62e>
 800ac74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac78:	4bae      	ldr	r3, [pc, #696]	@ (800af34 <_dtoa_r+0x8a4>)
 800ac7a:	f7f5 fa77 	bl	800016c <__adddf3>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac86:	f7f5 feb7 	bl	80009f8 <__aeabi_dcmpgt>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d163      	bne.n	800ad56 <_dtoa_r+0x6c6>
 800ac8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac92:	2000      	movs	r0, #0
 800ac94:	49a7      	ldr	r1, [pc, #668]	@ (800af34 <_dtoa_r+0x8a4>)
 800ac96:	f7f5 fa67 	bl	8000168 <__aeabi_dsub>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aca2:	f7f5 fe8b 	bl	80009bc <__aeabi_dcmplt>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	f43f af14 	beq.w	800aad4 <_dtoa_r+0x444>
 800acac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800acae:	1e73      	subs	r3, r6, #1
 800acb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800acb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acb6:	2b30      	cmp	r3, #48	@ 0x30
 800acb8:	d0f8      	beq.n	800acac <_dtoa_r+0x61c>
 800acba:	4647      	mov	r7, r8
 800acbc:	e03b      	b.n	800ad36 <_dtoa_r+0x6a6>
 800acbe:	4b9e      	ldr	r3, [pc, #632]	@ (800af38 <_dtoa_r+0x8a8>)
 800acc0:	f7f5 fc0a 	bl	80004d8 <__aeabi_dmul>
 800acc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800acc8:	e7bc      	b.n	800ac44 <_dtoa_r+0x5b4>
 800acca:	4656      	mov	r6, sl
 800accc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800acd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acd4:	4620      	mov	r0, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	f7f5 fd28 	bl	800072c <__aeabi_ddiv>
 800acdc:	f7f5 feac 	bl	8000a38 <__aeabi_d2iz>
 800ace0:	4680      	mov	r8, r0
 800ace2:	f7f5 fb8f 	bl	8000404 <__aeabi_i2d>
 800ace6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acea:	f7f5 fbf5 	bl	80004d8 <__aeabi_dmul>
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	4620      	mov	r0, r4
 800acf4:	4629      	mov	r1, r5
 800acf6:	f7f5 fa37 	bl	8000168 <__aeabi_dsub>
 800acfa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800acfe:	9d08      	ldr	r5, [sp, #32]
 800ad00:	f806 4b01 	strb.w	r4, [r6], #1
 800ad04:	eba6 040a 	sub.w	r4, r6, sl
 800ad08:	42a5      	cmp	r5, r4
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	d133      	bne.n	800ad78 <_dtoa_r+0x6e8>
 800ad10:	f7f5 fa2c 	bl	800016c <__adddf3>
 800ad14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad18:	4604      	mov	r4, r0
 800ad1a:	460d      	mov	r5, r1
 800ad1c:	f7f5 fe6c 	bl	80009f8 <__aeabi_dcmpgt>
 800ad20:	b9c0      	cbnz	r0, 800ad54 <_dtoa_r+0x6c4>
 800ad22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad26:	4620      	mov	r0, r4
 800ad28:	4629      	mov	r1, r5
 800ad2a:	f7f5 fe3d 	bl	80009a8 <__aeabi_dcmpeq>
 800ad2e:	b110      	cbz	r0, 800ad36 <_dtoa_r+0x6a6>
 800ad30:	f018 0f01 	tst.w	r8, #1
 800ad34:	d10e      	bne.n	800ad54 <_dtoa_r+0x6c4>
 800ad36:	4648      	mov	r0, r9
 800ad38:	9903      	ldr	r1, [sp, #12]
 800ad3a:	f000 ff07 	bl	800bb4c <_Bfree>
 800ad3e:	2300      	movs	r3, #0
 800ad40:	7033      	strb	r3, [r6, #0]
 800ad42:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ad44:	3701      	adds	r7, #1
 800ad46:	601f      	str	r7, [r3, #0]
 800ad48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 824b 	beq.w	800b1e6 <_dtoa_r+0xb56>
 800ad50:	601e      	str	r6, [r3, #0]
 800ad52:	e248      	b.n	800b1e6 <_dtoa_r+0xb56>
 800ad54:	46b8      	mov	r8, r7
 800ad56:	4633      	mov	r3, r6
 800ad58:	461e      	mov	r6, r3
 800ad5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad5e:	2a39      	cmp	r2, #57	@ 0x39
 800ad60:	d106      	bne.n	800ad70 <_dtoa_r+0x6e0>
 800ad62:	459a      	cmp	sl, r3
 800ad64:	d1f8      	bne.n	800ad58 <_dtoa_r+0x6c8>
 800ad66:	2230      	movs	r2, #48	@ 0x30
 800ad68:	f108 0801 	add.w	r8, r8, #1
 800ad6c:	f88a 2000 	strb.w	r2, [sl]
 800ad70:	781a      	ldrb	r2, [r3, #0]
 800ad72:	3201      	adds	r2, #1
 800ad74:	701a      	strb	r2, [r3, #0]
 800ad76:	e7a0      	b.n	800acba <_dtoa_r+0x62a>
 800ad78:	2200      	movs	r2, #0
 800ad7a:	4b6f      	ldr	r3, [pc, #444]	@ (800af38 <_dtoa_r+0x8a8>)
 800ad7c:	f7f5 fbac 	bl	80004d8 <__aeabi_dmul>
 800ad80:	2200      	movs	r2, #0
 800ad82:	2300      	movs	r3, #0
 800ad84:	4604      	mov	r4, r0
 800ad86:	460d      	mov	r5, r1
 800ad88:	f7f5 fe0e 	bl	80009a8 <__aeabi_dcmpeq>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d09f      	beq.n	800acd0 <_dtoa_r+0x640>
 800ad90:	e7d1      	b.n	800ad36 <_dtoa_r+0x6a6>
 800ad92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad94:	2a00      	cmp	r2, #0
 800ad96:	f000 80ea 	beq.w	800af6e <_dtoa_r+0x8de>
 800ad9a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ad9c:	2a01      	cmp	r2, #1
 800ad9e:	f300 80cd 	bgt.w	800af3c <_dtoa_r+0x8ac>
 800ada2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ada4:	2a00      	cmp	r2, #0
 800ada6:	f000 80c1 	beq.w	800af2c <_dtoa_r+0x89c>
 800adaa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800adae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800adb0:	9e04      	ldr	r6, [sp, #16]
 800adb2:	9a04      	ldr	r2, [sp, #16]
 800adb4:	2101      	movs	r1, #1
 800adb6:	441a      	add	r2, r3
 800adb8:	9204      	str	r2, [sp, #16]
 800adba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adbc:	4648      	mov	r0, r9
 800adbe:	441a      	add	r2, r3
 800adc0:	9209      	str	r2, [sp, #36]	@ 0x24
 800adc2:	f000 ffc1 	bl	800bd48 <__i2b>
 800adc6:	4605      	mov	r5, r0
 800adc8:	b166      	cbz	r6, 800ade4 <_dtoa_r+0x754>
 800adca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adcc:	2b00      	cmp	r3, #0
 800adce:	dd09      	ble.n	800ade4 <_dtoa_r+0x754>
 800add0:	42b3      	cmp	r3, r6
 800add2:	bfa8      	it	ge
 800add4:	4633      	movge	r3, r6
 800add6:	9a04      	ldr	r2, [sp, #16]
 800add8:	1af6      	subs	r6, r6, r3
 800adda:	1ad2      	subs	r2, r2, r3
 800addc:	9204      	str	r2, [sp, #16]
 800adde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ade4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ade6:	b30b      	cbz	r3, 800ae2c <_dtoa_r+0x79c>
 800ade8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 80c6 	beq.w	800af7c <_dtoa_r+0x8ec>
 800adf0:	2c00      	cmp	r4, #0
 800adf2:	f000 80c0 	beq.w	800af76 <_dtoa_r+0x8e6>
 800adf6:	4629      	mov	r1, r5
 800adf8:	4622      	mov	r2, r4
 800adfa:	4648      	mov	r0, r9
 800adfc:	f001 f85c 	bl	800beb8 <__pow5mult>
 800ae00:	9a03      	ldr	r2, [sp, #12]
 800ae02:	4601      	mov	r1, r0
 800ae04:	4605      	mov	r5, r0
 800ae06:	4648      	mov	r0, r9
 800ae08:	f000 ffb4 	bl	800bd74 <__multiply>
 800ae0c:	9903      	ldr	r1, [sp, #12]
 800ae0e:	4680      	mov	r8, r0
 800ae10:	4648      	mov	r0, r9
 800ae12:	f000 fe9b 	bl	800bb4c <_Bfree>
 800ae16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae18:	1b1b      	subs	r3, r3, r4
 800ae1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae1c:	f000 80b1 	beq.w	800af82 <_dtoa_r+0x8f2>
 800ae20:	4641      	mov	r1, r8
 800ae22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae24:	4648      	mov	r0, r9
 800ae26:	f001 f847 	bl	800beb8 <__pow5mult>
 800ae2a:	9003      	str	r0, [sp, #12]
 800ae2c:	2101      	movs	r1, #1
 800ae2e:	4648      	mov	r0, r9
 800ae30:	f000 ff8a 	bl	800bd48 <__i2b>
 800ae34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae36:	4604      	mov	r4, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 81d8 	beq.w	800b1ee <_dtoa_r+0xb5e>
 800ae3e:	461a      	mov	r2, r3
 800ae40:	4601      	mov	r1, r0
 800ae42:	4648      	mov	r0, r9
 800ae44:	f001 f838 	bl	800beb8 <__pow5mult>
 800ae48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	f300 809f 	bgt.w	800af90 <_dtoa_r+0x900>
 800ae52:	9b06      	ldr	r3, [sp, #24]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f040 8097 	bne.w	800af88 <_dtoa_r+0x8f8>
 800ae5a:	9b07      	ldr	r3, [sp, #28]
 800ae5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f040 8093 	bne.w	800af8c <_dtoa_r+0x8fc>
 800ae66:	9b07      	ldr	r3, [sp, #28]
 800ae68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae6c:	0d1b      	lsrs	r3, r3, #20
 800ae6e:	051b      	lsls	r3, r3, #20
 800ae70:	b133      	cbz	r3, 800ae80 <_dtoa_r+0x7f0>
 800ae72:	9b04      	ldr	r3, [sp, #16]
 800ae74:	3301      	adds	r3, #1
 800ae76:	9304      	str	r3, [sp, #16]
 800ae78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae7e:	2301      	movs	r3, #1
 800ae80:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f000 81b8 	beq.w	800b1fa <_dtoa_r+0xb6a>
 800ae8a:	6923      	ldr	r3, [r4, #16]
 800ae8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae90:	6918      	ldr	r0, [r3, #16]
 800ae92:	f000 ff0d 	bl	800bcb0 <__hi0bits>
 800ae96:	f1c0 0020 	rsb	r0, r0, #32
 800ae9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae9c:	4418      	add	r0, r3
 800ae9e:	f010 001f 	ands.w	r0, r0, #31
 800aea2:	f000 8082 	beq.w	800afaa <_dtoa_r+0x91a>
 800aea6:	f1c0 0320 	rsb	r3, r0, #32
 800aeaa:	2b04      	cmp	r3, #4
 800aeac:	dd73      	ble.n	800af96 <_dtoa_r+0x906>
 800aeae:	9b04      	ldr	r3, [sp, #16]
 800aeb0:	f1c0 001c 	rsb	r0, r0, #28
 800aeb4:	4403      	add	r3, r0
 800aeb6:	9304      	str	r3, [sp, #16]
 800aeb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeba:	4406      	add	r6, r0
 800aebc:	4403      	add	r3, r0
 800aebe:	9309      	str	r3, [sp, #36]	@ 0x24
 800aec0:	9b04      	ldr	r3, [sp, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	dd05      	ble.n	800aed2 <_dtoa_r+0x842>
 800aec6:	461a      	mov	r2, r3
 800aec8:	4648      	mov	r0, r9
 800aeca:	9903      	ldr	r1, [sp, #12]
 800aecc:	f001 f84e 	bl	800bf6c <__lshift>
 800aed0:	9003      	str	r0, [sp, #12]
 800aed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	dd05      	ble.n	800aee4 <_dtoa_r+0x854>
 800aed8:	4621      	mov	r1, r4
 800aeda:	461a      	mov	r2, r3
 800aedc:	4648      	mov	r0, r9
 800aede:	f001 f845 	bl	800bf6c <__lshift>
 800aee2:	4604      	mov	r4, r0
 800aee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d061      	beq.n	800afae <_dtoa_r+0x91e>
 800aeea:	4621      	mov	r1, r4
 800aeec:	9803      	ldr	r0, [sp, #12]
 800aeee:	f001 f8a9 	bl	800c044 <__mcmp>
 800aef2:	2800      	cmp	r0, #0
 800aef4:	da5b      	bge.n	800afae <_dtoa_r+0x91e>
 800aef6:	2300      	movs	r3, #0
 800aef8:	220a      	movs	r2, #10
 800aefa:	4648      	mov	r0, r9
 800aefc:	9903      	ldr	r1, [sp, #12]
 800aefe:	f000 fe47 	bl	800bb90 <__multadd>
 800af02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af04:	f107 38ff 	add.w	r8, r7, #4294967295
 800af08:	9003      	str	r0, [sp, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 8177 	beq.w	800b1fe <_dtoa_r+0xb6e>
 800af10:	4629      	mov	r1, r5
 800af12:	2300      	movs	r3, #0
 800af14:	220a      	movs	r2, #10
 800af16:	4648      	mov	r0, r9
 800af18:	f000 fe3a 	bl	800bb90 <__multadd>
 800af1c:	f1bb 0f00 	cmp.w	fp, #0
 800af20:	4605      	mov	r5, r0
 800af22:	dc6f      	bgt.n	800b004 <_dtoa_r+0x974>
 800af24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800af26:	2b02      	cmp	r3, #2
 800af28:	dc49      	bgt.n	800afbe <_dtoa_r+0x92e>
 800af2a:	e06b      	b.n	800b004 <_dtoa_r+0x974>
 800af2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af32:	e73c      	b.n	800adae <_dtoa_r+0x71e>
 800af34:	3fe00000 	.word	0x3fe00000
 800af38:	40240000 	.word	0x40240000
 800af3c:	9b08      	ldr	r3, [sp, #32]
 800af3e:	1e5c      	subs	r4, r3, #1
 800af40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af42:	42a3      	cmp	r3, r4
 800af44:	db09      	blt.n	800af5a <_dtoa_r+0x8ca>
 800af46:	1b1c      	subs	r4, r3, r4
 800af48:	9b08      	ldr	r3, [sp, #32]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f6bf af30 	bge.w	800adb0 <_dtoa_r+0x720>
 800af50:	9b04      	ldr	r3, [sp, #16]
 800af52:	9a08      	ldr	r2, [sp, #32]
 800af54:	1a9e      	subs	r6, r3, r2
 800af56:	2300      	movs	r3, #0
 800af58:	e72b      	b.n	800adb2 <_dtoa_r+0x722>
 800af5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af5e:	1ae3      	subs	r3, r4, r3
 800af60:	441a      	add	r2, r3
 800af62:	940a      	str	r4, [sp, #40]	@ 0x28
 800af64:	9e04      	ldr	r6, [sp, #16]
 800af66:	2400      	movs	r4, #0
 800af68:	9b08      	ldr	r3, [sp, #32]
 800af6a:	920e      	str	r2, [sp, #56]	@ 0x38
 800af6c:	e721      	b.n	800adb2 <_dtoa_r+0x722>
 800af6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af70:	9e04      	ldr	r6, [sp, #16]
 800af72:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af74:	e728      	b.n	800adc8 <_dtoa_r+0x738>
 800af76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800af7a:	e751      	b.n	800ae20 <_dtoa_r+0x790>
 800af7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af7e:	9903      	ldr	r1, [sp, #12]
 800af80:	e750      	b.n	800ae24 <_dtoa_r+0x794>
 800af82:	f8cd 800c 	str.w	r8, [sp, #12]
 800af86:	e751      	b.n	800ae2c <_dtoa_r+0x79c>
 800af88:	2300      	movs	r3, #0
 800af8a:	e779      	b.n	800ae80 <_dtoa_r+0x7f0>
 800af8c:	9b06      	ldr	r3, [sp, #24]
 800af8e:	e777      	b.n	800ae80 <_dtoa_r+0x7f0>
 800af90:	2300      	movs	r3, #0
 800af92:	930a      	str	r3, [sp, #40]	@ 0x28
 800af94:	e779      	b.n	800ae8a <_dtoa_r+0x7fa>
 800af96:	d093      	beq.n	800aec0 <_dtoa_r+0x830>
 800af98:	9a04      	ldr	r2, [sp, #16]
 800af9a:	331c      	adds	r3, #28
 800af9c:	441a      	add	r2, r3
 800af9e:	9204      	str	r2, [sp, #16]
 800afa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afa2:	441e      	add	r6, r3
 800afa4:	441a      	add	r2, r3
 800afa6:	9209      	str	r2, [sp, #36]	@ 0x24
 800afa8:	e78a      	b.n	800aec0 <_dtoa_r+0x830>
 800afaa:	4603      	mov	r3, r0
 800afac:	e7f4      	b.n	800af98 <_dtoa_r+0x908>
 800afae:	9b08      	ldr	r3, [sp, #32]
 800afb0:	46b8      	mov	r8, r7
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	dc20      	bgt.n	800aff8 <_dtoa_r+0x968>
 800afb6:	469b      	mov	fp, r3
 800afb8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800afba:	2b02      	cmp	r3, #2
 800afbc:	dd1e      	ble.n	800affc <_dtoa_r+0x96c>
 800afbe:	f1bb 0f00 	cmp.w	fp, #0
 800afc2:	f47f adb1 	bne.w	800ab28 <_dtoa_r+0x498>
 800afc6:	4621      	mov	r1, r4
 800afc8:	465b      	mov	r3, fp
 800afca:	2205      	movs	r2, #5
 800afcc:	4648      	mov	r0, r9
 800afce:	f000 fddf 	bl	800bb90 <__multadd>
 800afd2:	4601      	mov	r1, r0
 800afd4:	4604      	mov	r4, r0
 800afd6:	9803      	ldr	r0, [sp, #12]
 800afd8:	f001 f834 	bl	800c044 <__mcmp>
 800afdc:	2800      	cmp	r0, #0
 800afde:	f77f ada3 	ble.w	800ab28 <_dtoa_r+0x498>
 800afe2:	4656      	mov	r6, sl
 800afe4:	2331      	movs	r3, #49	@ 0x31
 800afe6:	f108 0801 	add.w	r8, r8, #1
 800afea:	f806 3b01 	strb.w	r3, [r6], #1
 800afee:	e59f      	b.n	800ab30 <_dtoa_r+0x4a0>
 800aff0:	46b8      	mov	r8, r7
 800aff2:	9c08      	ldr	r4, [sp, #32]
 800aff4:	4625      	mov	r5, r4
 800aff6:	e7f4      	b.n	800afe2 <_dtoa_r+0x952>
 800aff8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800affc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 8101 	beq.w	800b206 <_dtoa_r+0xb76>
 800b004:	2e00      	cmp	r6, #0
 800b006:	dd05      	ble.n	800b014 <_dtoa_r+0x984>
 800b008:	4629      	mov	r1, r5
 800b00a:	4632      	mov	r2, r6
 800b00c:	4648      	mov	r0, r9
 800b00e:	f000 ffad 	bl	800bf6c <__lshift>
 800b012:	4605      	mov	r5, r0
 800b014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b016:	2b00      	cmp	r3, #0
 800b018:	d05c      	beq.n	800b0d4 <_dtoa_r+0xa44>
 800b01a:	4648      	mov	r0, r9
 800b01c:	6869      	ldr	r1, [r5, #4]
 800b01e:	f000 fd55 	bl	800bacc <_Balloc>
 800b022:	4606      	mov	r6, r0
 800b024:	b928      	cbnz	r0, 800b032 <_dtoa_r+0x9a2>
 800b026:	4602      	mov	r2, r0
 800b028:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b02c:	4b80      	ldr	r3, [pc, #512]	@ (800b230 <_dtoa_r+0xba0>)
 800b02e:	f7ff bb43 	b.w	800a6b8 <_dtoa_r+0x28>
 800b032:	692a      	ldr	r2, [r5, #16]
 800b034:	f105 010c 	add.w	r1, r5, #12
 800b038:	3202      	adds	r2, #2
 800b03a:	0092      	lsls	r2, r2, #2
 800b03c:	300c      	adds	r0, #12
 800b03e:	f7ff fa88 	bl	800a552 <memcpy>
 800b042:	2201      	movs	r2, #1
 800b044:	4631      	mov	r1, r6
 800b046:	4648      	mov	r0, r9
 800b048:	f000 ff90 	bl	800bf6c <__lshift>
 800b04c:	462f      	mov	r7, r5
 800b04e:	4605      	mov	r5, r0
 800b050:	f10a 0301 	add.w	r3, sl, #1
 800b054:	9304      	str	r3, [sp, #16]
 800b056:	eb0a 030b 	add.w	r3, sl, fp
 800b05a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b05c:	9b06      	ldr	r3, [sp, #24]
 800b05e:	f003 0301 	and.w	r3, r3, #1
 800b062:	9309      	str	r3, [sp, #36]	@ 0x24
 800b064:	9b04      	ldr	r3, [sp, #16]
 800b066:	4621      	mov	r1, r4
 800b068:	9803      	ldr	r0, [sp, #12]
 800b06a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b06e:	f7ff fa85 	bl	800a57c <quorem>
 800b072:	4603      	mov	r3, r0
 800b074:	4639      	mov	r1, r7
 800b076:	3330      	adds	r3, #48	@ 0x30
 800b078:	9006      	str	r0, [sp, #24]
 800b07a:	9803      	ldr	r0, [sp, #12]
 800b07c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b07e:	f000 ffe1 	bl	800c044 <__mcmp>
 800b082:	462a      	mov	r2, r5
 800b084:	9008      	str	r0, [sp, #32]
 800b086:	4621      	mov	r1, r4
 800b088:	4648      	mov	r0, r9
 800b08a:	f000 fff7 	bl	800c07c <__mdiff>
 800b08e:	68c2      	ldr	r2, [r0, #12]
 800b090:	4606      	mov	r6, r0
 800b092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b094:	bb02      	cbnz	r2, 800b0d8 <_dtoa_r+0xa48>
 800b096:	4601      	mov	r1, r0
 800b098:	9803      	ldr	r0, [sp, #12]
 800b09a:	f000 ffd3 	bl	800c044 <__mcmp>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4648      	mov	r0, r9
 800b0a6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800b0aa:	f000 fd4f 	bl	800bb4c <_Bfree>
 800b0ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b0b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b0b2:	9e04      	ldr	r6, [sp, #16]
 800b0b4:	ea42 0103 	orr.w	r1, r2, r3
 800b0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ba:	4319      	orrs	r1, r3
 800b0bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0be:	d10d      	bne.n	800b0dc <_dtoa_r+0xa4c>
 800b0c0:	2b39      	cmp	r3, #57	@ 0x39
 800b0c2:	d027      	beq.n	800b114 <_dtoa_r+0xa84>
 800b0c4:	9a08      	ldr	r2, [sp, #32]
 800b0c6:	2a00      	cmp	r2, #0
 800b0c8:	dd01      	ble.n	800b0ce <_dtoa_r+0xa3e>
 800b0ca:	9b06      	ldr	r3, [sp, #24]
 800b0cc:	3331      	adds	r3, #49	@ 0x31
 800b0ce:	f88b 3000 	strb.w	r3, [fp]
 800b0d2:	e52e      	b.n	800ab32 <_dtoa_r+0x4a2>
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	e7b9      	b.n	800b04c <_dtoa_r+0x9bc>
 800b0d8:	2201      	movs	r2, #1
 800b0da:	e7e2      	b.n	800b0a2 <_dtoa_r+0xa12>
 800b0dc:	9908      	ldr	r1, [sp, #32]
 800b0de:	2900      	cmp	r1, #0
 800b0e0:	db04      	blt.n	800b0ec <_dtoa_r+0xa5c>
 800b0e2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b0e4:	4301      	orrs	r1, r0
 800b0e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0e8:	4301      	orrs	r1, r0
 800b0ea:	d120      	bne.n	800b12e <_dtoa_r+0xa9e>
 800b0ec:	2a00      	cmp	r2, #0
 800b0ee:	ddee      	ble.n	800b0ce <_dtoa_r+0xa3e>
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	9903      	ldr	r1, [sp, #12]
 800b0f4:	4648      	mov	r0, r9
 800b0f6:	9304      	str	r3, [sp, #16]
 800b0f8:	f000 ff38 	bl	800bf6c <__lshift>
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	9003      	str	r0, [sp, #12]
 800b100:	f000 ffa0 	bl	800c044 <__mcmp>
 800b104:	2800      	cmp	r0, #0
 800b106:	9b04      	ldr	r3, [sp, #16]
 800b108:	dc02      	bgt.n	800b110 <_dtoa_r+0xa80>
 800b10a:	d1e0      	bne.n	800b0ce <_dtoa_r+0xa3e>
 800b10c:	07da      	lsls	r2, r3, #31
 800b10e:	d5de      	bpl.n	800b0ce <_dtoa_r+0xa3e>
 800b110:	2b39      	cmp	r3, #57	@ 0x39
 800b112:	d1da      	bne.n	800b0ca <_dtoa_r+0xa3a>
 800b114:	2339      	movs	r3, #57	@ 0x39
 800b116:	f88b 3000 	strb.w	r3, [fp]
 800b11a:	4633      	mov	r3, r6
 800b11c:	461e      	mov	r6, r3
 800b11e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b122:	3b01      	subs	r3, #1
 800b124:	2a39      	cmp	r2, #57	@ 0x39
 800b126:	d04e      	beq.n	800b1c6 <_dtoa_r+0xb36>
 800b128:	3201      	adds	r2, #1
 800b12a:	701a      	strb	r2, [r3, #0]
 800b12c:	e501      	b.n	800ab32 <_dtoa_r+0x4a2>
 800b12e:	2a00      	cmp	r2, #0
 800b130:	dd03      	ble.n	800b13a <_dtoa_r+0xaaa>
 800b132:	2b39      	cmp	r3, #57	@ 0x39
 800b134:	d0ee      	beq.n	800b114 <_dtoa_r+0xa84>
 800b136:	3301      	adds	r3, #1
 800b138:	e7c9      	b.n	800b0ce <_dtoa_r+0xa3e>
 800b13a:	9a04      	ldr	r2, [sp, #16]
 800b13c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b13e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b142:	428a      	cmp	r2, r1
 800b144:	d028      	beq.n	800b198 <_dtoa_r+0xb08>
 800b146:	2300      	movs	r3, #0
 800b148:	220a      	movs	r2, #10
 800b14a:	9903      	ldr	r1, [sp, #12]
 800b14c:	4648      	mov	r0, r9
 800b14e:	f000 fd1f 	bl	800bb90 <__multadd>
 800b152:	42af      	cmp	r7, r5
 800b154:	9003      	str	r0, [sp, #12]
 800b156:	f04f 0300 	mov.w	r3, #0
 800b15a:	f04f 020a 	mov.w	r2, #10
 800b15e:	4639      	mov	r1, r7
 800b160:	4648      	mov	r0, r9
 800b162:	d107      	bne.n	800b174 <_dtoa_r+0xae4>
 800b164:	f000 fd14 	bl	800bb90 <__multadd>
 800b168:	4607      	mov	r7, r0
 800b16a:	4605      	mov	r5, r0
 800b16c:	9b04      	ldr	r3, [sp, #16]
 800b16e:	3301      	adds	r3, #1
 800b170:	9304      	str	r3, [sp, #16]
 800b172:	e777      	b.n	800b064 <_dtoa_r+0x9d4>
 800b174:	f000 fd0c 	bl	800bb90 <__multadd>
 800b178:	4629      	mov	r1, r5
 800b17a:	4607      	mov	r7, r0
 800b17c:	2300      	movs	r3, #0
 800b17e:	220a      	movs	r2, #10
 800b180:	4648      	mov	r0, r9
 800b182:	f000 fd05 	bl	800bb90 <__multadd>
 800b186:	4605      	mov	r5, r0
 800b188:	e7f0      	b.n	800b16c <_dtoa_r+0xadc>
 800b18a:	f1bb 0f00 	cmp.w	fp, #0
 800b18e:	bfcc      	ite	gt
 800b190:	465e      	movgt	r6, fp
 800b192:	2601      	movle	r6, #1
 800b194:	2700      	movs	r7, #0
 800b196:	4456      	add	r6, sl
 800b198:	2201      	movs	r2, #1
 800b19a:	9903      	ldr	r1, [sp, #12]
 800b19c:	4648      	mov	r0, r9
 800b19e:	9304      	str	r3, [sp, #16]
 800b1a0:	f000 fee4 	bl	800bf6c <__lshift>
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	9003      	str	r0, [sp, #12]
 800b1a8:	f000 ff4c 	bl	800c044 <__mcmp>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	dcb4      	bgt.n	800b11a <_dtoa_r+0xa8a>
 800b1b0:	d102      	bne.n	800b1b8 <_dtoa_r+0xb28>
 800b1b2:	9b04      	ldr	r3, [sp, #16]
 800b1b4:	07db      	lsls	r3, r3, #31
 800b1b6:	d4b0      	bmi.n	800b11a <_dtoa_r+0xa8a>
 800b1b8:	4633      	mov	r3, r6
 800b1ba:	461e      	mov	r6, r3
 800b1bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1c0:	2a30      	cmp	r2, #48	@ 0x30
 800b1c2:	d0fa      	beq.n	800b1ba <_dtoa_r+0xb2a>
 800b1c4:	e4b5      	b.n	800ab32 <_dtoa_r+0x4a2>
 800b1c6:	459a      	cmp	sl, r3
 800b1c8:	d1a8      	bne.n	800b11c <_dtoa_r+0xa8c>
 800b1ca:	2331      	movs	r3, #49	@ 0x31
 800b1cc:	f108 0801 	add.w	r8, r8, #1
 800b1d0:	f88a 3000 	strb.w	r3, [sl]
 800b1d4:	e4ad      	b.n	800ab32 <_dtoa_r+0x4a2>
 800b1d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b1d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b234 <_dtoa_r+0xba4>
 800b1dc:	b11b      	cbz	r3, 800b1e6 <_dtoa_r+0xb56>
 800b1de:	f10a 0308 	add.w	r3, sl, #8
 800b1e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b1e4:	6013      	str	r3, [r2, #0]
 800b1e6:	4650      	mov	r0, sl
 800b1e8:	b017      	add	sp, #92	@ 0x5c
 800b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	f77f ae2e 	ble.w	800ae52 <_dtoa_r+0x7c2>
 800b1f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	e64d      	b.n	800ae9a <_dtoa_r+0x80a>
 800b1fe:	f1bb 0f00 	cmp.w	fp, #0
 800b202:	f77f aed9 	ble.w	800afb8 <_dtoa_r+0x928>
 800b206:	4656      	mov	r6, sl
 800b208:	4621      	mov	r1, r4
 800b20a:	9803      	ldr	r0, [sp, #12]
 800b20c:	f7ff f9b6 	bl	800a57c <quorem>
 800b210:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b214:	f806 3b01 	strb.w	r3, [r6], #1
 800b218:	eba6 020a 	sub.w	r2, r6, sl
 800b21c:	4593      	cmp	fp, r2
 800b21e:	ddb4      	ble.n	800b18a <_dtoa_r+0xafa>
 800b220:	2300      	movs	r3, #0
 800b222:	220a      	movs	r2, #10
 800b224:	4648      	mov	r0, r9
 800b226:	9903      	ldr	r1, [sp, #12]
 800b228:	f000 fcb2 	bl	800bb90 <__multadd>
 800b22c:	9003      	str	r0, [sp, #12]
 800b22e:	e7eb      	b.n	800b208 <_dtoa_r+0xb78>
 800b230:	0800cfda 	.word	0x0800cfda
 800b234:	0800cf5e 	.word	0x0800cf5e

0800b238 <_free_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	4605      	mov	r5, r0
 800b23c:	2900      	cmp	r1, #0
 800b23e:	d040      	beq.n	800b2c2 <_free_r+0x8a>
 800b240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b244:	1f0c      	subs	r4, r1, #4
 800b246:	2b00      	cmp	r3, #0
 800b248:	bfb8      	it	lt
 800b24a:	18e4      	addlt	r4, r4, r3
 800b24c:	f000 fc32 	bl	800bab4 <__malloc_lock>
 800b250:	4a1c      	ldr	r2, [pc, #112]	@ (800b2c4 <_free_r+0x8c>)
 800b252:	6813      	ldr	r3, [r2, #0]
 800b254:	b933      	cbnz	r3, 800b264 <_free_r+0x2c>
 800b256:	6063      	str	r3, [r4, #4]
 800b258:	6014      	str	r4, [r2, #0]
 800b25a:	4628      	mov	r0, r5
 800b25c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b260:	f000 bc2e 	b.w	800bac0 <__malloc_unlock>
 800b264:	42a3      	cmp	r3, r4
 800b266:	d908      	bls.n	800b27a <_free_r+0x42>
 800b268:	6820      	ldr	r0, [r4, #0]
 800b26a:	1821      	adds	r1, r4, r0
 800b26c:	428b      	cmp	r3, r1
 800b26e:	bf01      	itttt	eq
 800b270:	6819      	ldreq	r1, [r3, #0]
 800b272:	685b      	ldreq	r3, [r3, #4]
 800b274:	1809      	addeq	r1, r1, r0
 800b276:	6021      	streq	r1, [r4, #0]
 800b278:	e7ed      	b.n	800b256 <_free_r+0x1e>
 800b27a:	461a      	mov	r2, r3
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	b10b      	cbz	r3, 800b284 <_free_r+0x4c>
 800b280:	42a3      	cmp	r3, r4
 800b282:	d9fa      	bls.n	800b27a <_free_r+0x42>
 800b284:	6811      	ldr	r1, [r2, #0]
 800b286:	1850      	adds	r0, r2, r1
 800b288:	42a0      	cmp	r0, r4
 800b28a:	d10b      	bne.n	800b2a4 <_free_r+0x6c>
 800b28c:	6820      	ldr	r0, [r4, #0]
 800b28e:	4401      	add	r1, r0
 800b290:	1850      	adds	r0, r2, r1
 800b292:	4283      	cmp	r3, r0
 800b294:	6011      	str	r1, [r2, #0]
 800b296:	d1e0      	bne.n	800b25a <_free_r+0x22>
 800b298:	6818      	ldr	r0, [r3, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	4408      	add	r0, r1
 800b29e:	6010      	str	r0, [r2, #0]
 800b2a0:	6053      	str	r3, [r2, #4]
 800b2a2:	e7da      	b.n	800b25a <_free_r+0x22>
 800b2a4:	d902      	bls.n	800b2ac <_free_r+0x74>
 800b2a6:	230c      	movs	r3, #12
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	e7d6      	b.n	800b25a <_free_r+0x22>
 800b2ac:	6820      	ldr	r0, [r4, #0]
 800b2ae:	1821      	adds	r1, r4, r0
 800b2b0:	428b      	cmp	r3, r1
 800b2b2:	bf01      	itttt	eq
 800b2b4:	6819      	ldreq	r1, [r3, #0]
 800b2b6:	685b      	ldreq	r3, [r3, #4]
 800b2b8:	1809      	addeq	r1, r1, r0
 800b2ba:	6021      	streq	r1, [r4, #0]
 800b2bc:	6063      	str	r3, [r4, #4]
 800b2be:	6054      	str	r4, [r2, #4]
 800b2c0:	e7cb      	b.n	800b25a <_free_r+0x22>
 800b2c2:	bd38      	pop	{r3, r4, r5, pc}
 800b2c4:	20000d9c 	.word	0x20000d9c

0800b2c8 <rshift>:
 800b2c8:	6903      	ldr	r3, [r0, #16]
 800b2ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2d2:	f100 0414 	add.w	r4, r0, #20
 800b2d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2da:	dd46      	ble.n	800b36a <rshift+0xa2>
 800b2dc:	f011 011f 	ands.w	r1, r1, #31
 800b2e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2e8:	d10c      	bne.n	800b304 <rshift+0x3c>
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	f100 0710 	add.w	r7, r0, #16
 800b2f0:	42b1      	cmp	r1, r6
 800b2f2:	d335      	bcc.n	800b360 <rshift+0x98>
 800b2f4:	1a9b      	subs	r3, r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	1eea      	subs	r2, r5, #3
 800b2fa:	4296      	cmp	r6, r2
 800b2fc:	bf38      	it	cc
 800b2fe:	2300      	movcc	r3, #0
 800b300:	4423      	add	r3, r4
 800b302:	e015      	b.n	800b330 <rshift+0x68>
 800b304:	46a1      	mov	r9, r4
 800b306:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b30a:	f1c1 0820 	rsb	r8, r1, #32
 800b30e:	40cf      	lsrs	r7, r1
 800b310:	f105 0e04 	add.w	lr, r5, #4
 800b314:	4576      	cmp	r6, lr
 800b316:	46f4      	mov	ip, lr
 800b318:	d816      	bhi.n	800b348 <rshift+0x80>
 800b31a:	1a9a      	subs	r2, r3, r2
 800b31c:	0092      	lsls	r2, r2, #2
 800b31e:	3a04      	subs	r2, #4
 800b320:	3501      	adds	r5, #1
 800b322:	42ae      	cmp	r6, r5
 800b324:	bf38      	it	cc
 800b326:	2200      	movcc	r2, #0
 800b328:	18a3      	adds	r3, r4, r2
 800b32a:	50a7      	str	r7, [r4, r2]
 800b32c:	b107      	cbz	r7, 800b330 <rshift+0x68>
 800b32e:	3304      	adds	r3, #4
 800b330:	42a3      	cmp	r3, r4
 800b332:	eba3 0204 	sub.w	r2, r3, r4
 800b336:	bf08      	it	eq
 800b338:	2300      	moveq	r3, #0
 800b33a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b33e:	6102      	str	r2, [r0, #16]
 800b340:	bf08      	it	eq
 800b342:	6143      	streq	r3, [r0, #20]
 800b344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b348:	f8dc c000 	ldr.w	ip, [ip]
 800b34c:	fa0c fc08 	lsl.w	ip, ip, r8
 800b350:	ea4c 0707 	orr.w	r7, ip, r7
 800b354:	f849 7b04 	str.w	r7, [r9], #4
 800b358:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b35c:	40cf      	lsrs	r7, r1
 800b35e:	e7d9      	b.n	800b314 <rshift+0x4c>
 800b360:	f851 cb04 	ldr.w	ip, [r1], #4
 800b364:	f847 cf04 	str.w	ip, [r7, #4]!
 800b368:	e7c2      	b.n	800b2f0 <rshift+0x28>
 800b36a:	4623      	mov	r3, r4
 800b36c:	e7e0      	b.n	800b330 <rshift+0x68>

0800b36e <__hexdig_fun>:
 800b36e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b372:	2b09      	cmp	r3, #9
 800b374:	d802      	bhi.n	800b37c <__hexdig_fun+0xe>
 800b376:	3820      	subs	r0, #32
 800b378:	b2c0      	uxtb	r0, r0
 800b37a:	4770      	bx	lr
 800b37c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b380:	2b05      	cmp	r3, #5
 800b382:	d801      	bhi.n	800b388 <__hexdig_fun+0x1a>
 800b384:	3847      	subs	r0, #71	@ 0x47
 800b386:	e7f7      	b.n	800b378 <__hexdig_fun+0xa>
 800b388:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b38c:	2b05      	cmp	r3, #5
 800b38e:	d801      	bhi.n	800b394 <__hexdig_fun+0x26>
 800b390:	3827      	subs	r0, #39	@ 0x27
 800b392:	e7f1      	b.n	800b378 <__hexdig_fun+0xa>
 800b394:	2000      	movs	r0, #0
 800b396:	4770      	bx	lr

0800b398 <__gethex>:
 800b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	468a      	mov	sl, r1
 800b39e:	4690      	mov	r8, r2
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	9302      	str	r3, [sp, #8]
 800b3a4:	680b      	ldr	r3, [r1, #0]
 800b3a6:	9001      	str	r0, [sp, #4]
 800b3a8:	1c9c      	adds	r4, r3, #2
 800b3aa:	46a1      	mov	r9, r4
 800b3ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b3b0:	2830      	cmp	r0, #48	@ 0x30
 800b3b2:	d0fa      	beq.n	800b3aa <__gethex+0x12>
 800b3b4:	eba9 0303 	sub.w	r3, r9, r3
 800b3b8:	f1a3 0b02 	sub.w	fp, r3, #2
 800b3bc:	f7ff ffd7 	bl	800b36e <__hexdig_fun>
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d168      	bne.n	800b498 <__gethex+0x100>
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	4648      	mov	r0, r9
 800b3ca:	499f      	ldr	r1, [pc, #636]	@ (800b648 <__gethex+0x2b0>)
 800b3cc:	f7ff f829 	bl	800a422 <strncmp>
 800b3d0:	4607      	mov	r7, r0
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d167      	bne.n	800b4a6 <__gethex+0x10e>
 800b3d6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b3da:	4626      	mov	r6, r4
 800b3dc:	f7ff ffc7 	bl	800b36e <__hexdig_fun>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d062      	beq.n	800b4aa <__gethex+0x112>
 800b3e4:	4623      	mov	r3, r4
 800b3e6:	7818      	ldrb	r0, [r3, #0]
 800b3e8:	4699      	mov	r9, r3
 800b3ea:	2830      	cmp	r0, #48	@ 0x30
 800b3ec:	f103 0301 	add.w	r3, r3, #1
 800b3f0:	d0f9      	beq.n	800b3e6 <__gethex+0x4e>
 800b3f2:	f7ff ffbc 	bl	800b36e <__hexdig_fun>
 800b3f6:	fab0 f580 	clz	r5, r0
 800b3fa:	f04f 0b01 	mov.w	fp, #1
 800b3fe:	096d      	lsrs	r5, r5, #5
 800b400:	464a      	mov	r2, r9
 800b402:	4616      	mov	r6, r2
 800b404:	7830      	ldrb	r0, [r6, #0]
 800b406:	3201      	adds	r2, #1
 800b408:	f7ff ffb1 	bl	800b36e <__hexdig_fun>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d1f8      	bne.n	800b402 <__gethex+0x6a>
 800b410:	2201      	movs	r2, #1
 800b412:	4630      	mov	r0, r6
 800b414:	498c      	ldr	r1, [pc, #560]	@ (800b648 <__gethex+0x2b0>)
 800b416:	f7ff f804 	bl	800a422 <strncmp>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d13f      	bne.n	800b49e <__gethex+0x106>
 800b41e:	b944      	cbnz	r4, 800b432 <__gethex+0x9a>
 800b420:	1c74      	adds	r4, r6, #1
 800b422:	4622      	mov	r2, r4
 800b424:	4616      	mov	r6, r2
 800b426:	7830      	ldrb	r0, [r6, #0]
 800b428:	3201      	adds	r2, #1
 800b42a:	f7ff ffa0 	bl	800b36e <__hexdig_fun>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d1f8      	bne.n	800b424 <__gethex+0x8c>
 800b432:	1ba4      	subs	r4, r4, r6
 800b434:	00a7      	lsls	r7, r4, #2
 800b436:	7833      	ldrb	r3, [r6, #0]
 800b438:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b43c:	2b50      	cmp	r3, #80	@ 0x50
 800b43e:	d13e      	bne.n	800b4be <__gethex+0x126>
 800b440:	7873      	ldrb	r3, [r6, #1]
 800b442:	2b2b      	cmp	r3, #43	@ 0x2b
 800b444:	d033      	beq.n	800b4ae <__gethex+0x116>
 800b446:	2b2d      	cmp	r3, #45	@ 0x2d
 800b448:	d034      	beq.n	800b4b4 <__gethex+0x11c>
 800b44a:	2400      	movs	r4, #0
 800b44c:	1c71      	adds	r1, r6, #1
 800b44e:	7808      	ldrb	r0, [r1, #0]
 800b450:	f7ff ff8d 	bl	800b36e <__hexdig_fun>
 800b454:	1e43      	subs	r3, r0, #1
 800b456:	b2db      	uxtb	r3, r3
 800b458:	2b18      	cmp	r3, #24
 800b45a:	d830      	bhi.n	800b4be <__gethex+0x126>
 800b45c:	f1a0 0210 	sub.w	r2, r0, #16
 800b460:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b464:	f7ff ff83 	bl	800b36e <__hexdig_fun>
 800b468:	f100 3cff 	add.w	ip, r0, #4294967295
 800b46c:	fa5f fc8c 	uxtb.w	ip, ip
 800b470:	f1bc 0f18 	cmp.w	ip, #24
 800b474:	f04f 030a 	mov.w	r3, #10
 800b478:	d91e      	bls.n	800b4b8 <__gethex+0x120>
 800b47a:	b104      	cbz	r4, 800b47e <__gethex+0xe6>
 800b47c:	4252      	negs	r2, r2
 800b47e:	4417      	add	r7, r2
 800b480:	f8ca 1000 	str.w	r1, [sl]
 800b484:	b1ed      	cbz	r5, 800b4c2 <__gethex+0x12a>
 800b486:	f1bb 0f00 	cmp.w	fp, #0
 800b48a:	bf0c      	ite	eq
 800b48c:	2506      	moveq	r5, #6
 800b48e:	2500      	movne	r5, #0
 800b490:	4628      	mov	r0, r5
 800b492:	b005      	add	sp, #20
 800b494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b498:	2500      	movs	r5, #0
 800b49a:	462c      	mov	r4, r5
 800b49c:	e7b0      	b.n	800b400 <__gethex+0x68>
 800b49e:	2c00      	cmp	r4, #0
 800b4a0:	d1c7      	bne.n	800b432 <__gethex+0x9a>
 800b4a2:	4627      	mov	r7, r4
 800b4a4:	e7c7      	b.n	800b436 <__gethex+0x9e>
 800b4a6:	464e      	mov	r6, r9
 800b4a8:	462f      	mov	r7, r5
 800b4aa:	2501      	movs	r5, #1
 800b4ac:	e7c3      	b.n	800b436 <__gethex+0x9e>
 800b4ae:	2400      	movs	r4, #0
 800b4b0:	1cb1      	adds	r1, r6, #2
 800b4b2:	e7cc      	b.n	800b44e <__gethex+0xb6>
 800b4b4:	2401      	movs	r4, #1
 800b4b6:	e7fb      	b.n	800b4b0 <__gethex+0x118>
 800b4b8:	fb03 0002 	mla	r0, r3, r2, r0
 800b4bc:	e7ce      	b.n	800b45c <__gethex+0xc4>
 800b4be:	4631      	mov	r1, r6
 800b4c0:	e7de      	b.n	800b480 <__gethex+0xe8>
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	eba6 0309 	sub.w	r3, r6, r9
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	2b07      	cmp	r3, #7
 800b4cc:	dc0a      	bgt.n	800b4e4 <__gethex+0x14c>
 800b4ce:	9801      	ldr	r0, [sp, #4]
 800b4d0:	f000 fafc 	bl	800bacc <_Balloc>
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	b940      	cbnz	r0, 800b4ea <__gethex+0x152>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	21e4      	movs	r1, #228	@ 0xe4
 800b4dc:	4b5b      	ldr	r3, [pc, #364]	@ (800b64c <__gethex+0x2b4>)
 800b4de:	485c      	ldr	r0, [pc, #368]	@ (800b650 <__gethex+0x2b8>)
 800b4e0:	f001 f9ca 	bl	800c878 <__assert_func>
 800b4e4:	3101      	adds	r1, #1
 800b4e6:	105b      	asrs	r3, r3, #1
 800b4e8:	e7ef      	b.n	800b4ca <__gethex+0x132>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f100 0a14 	add.w	sl, r0, #20
 800b4f0:	4655      	mov	r5, sl
 800b4f2:	469b      	mov	fp, r3
 800b4f4:	45b1      	cmp	r9, r6
 800b4f6:	d337      	bcc.n	800b568 <__gethex+0x1d0>
 800b4f8:	f845 bb04 	str.w	fp, [r5], #4
 800b4fc:	eba5 050a 	sub.w	r5, r5, sl
 800b500:	10ad      	asrs	r5, r5, #2
 800b502:	6125      	str	r5, [r4, #16]
 800b504:	4658      	mov	r0, fp
 800b506:	f000 fbd3 	bl	800bcb0 <__hi0bits>
 800b50a:	016d      	lsls	r5, r5, #5
 800b50c:	f8d8 6000 	ldr.w	r6, [r8]
 800b510:	1a2d      	subs	r5, r5, r0
 800b512:	42b5      	cmp	r5, r6
 800b514:	dd54      	ble.n	800b5c0 <__gethex+0x228>
 800b516:	1bad      	subs	r5, r5, r6
 800b518:	4629      	mov	r1, r5
 800b51a:	4620      	mov	r0, r4
 800b51c:	f000 ff55 	bl	800c3ca <__any_on>
 800b520:	4681      	mov	r9, r0
 800b522:	b178      	cbz	r0, 800b544 <__gethex+0x1ac>
 800b524:	f04f 0901 	mov.w	r9, #1
 800b528:	1e6b      	subs	r3, r5, #1
 800b52a:	1159      	asrs	r1, r3, #5
 800b52c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b530:	f003 021f 	and.w	r2, r3, #31
 800b534:	fa09 f202 	lsl.w	r2, r9, r2
 800b538:	420a      	tst	r2, r1
 800b53a:	d003      	beq.n	800b544 <__gethex+0x1ac>
 800b53c:	454b      	cmp	r3, r9
 800b53e:	dc36      	bgt.n	800b5ae <__gethex+0x216>
 800b540:	f04f 0902 	mov.w	r9, #2
 800b544:	4629      	mov	r1, r5
 800b546:	4620      	mov	r0, r4
 800b548:	f7ff febe 	bl	800b2c8 <rshift>
 800b54c:	442f      	add	r7, r5
 800b54e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b552:	42bb      	cmp	r3, r7
 800b554:	da42      	bge.n	800b5dc <__gethex+0x244>
 800b556:	4621      	mov	r1, r4
 800b558:	9801      	ldr	r0, [sp, #4]
 800b55a:	f000 faf7 	bl	800bb4c <_Bfree>
 800b55e:	2300      	movs	r3, #0
 800b560:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b562:	25a3      	movs	r5, #163	@ 0xa3
 800b564:	6013      	str	r3, [r2, #0]
 800b566:	e793      	b.n	800b490 <__gethex+0xf8>
 800b568:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b56c:	2a2e      	cmp	r2, #46	@ 0x2e
 800b56e:	d012      	beq.n	800b596 <__gethex+0x1fe>
 800b570:	2b20      	cmp	r3, #32
 800b572:	d104      	bne.n	800b57e <__gethex+0x1e6>
 800b574:	f845 bb04 	str.w	fp, [r5], #4
 800b578:	f04f 0b00 	mov.w	fp, #0
 800b57c:	465b      	mov	r3, fp
 800b57e:	7830      	ldrb	r0, [r6, #0]
 800b580:	9303      	str	r3, [sp, #12]
 800b582:	f7ff fef4 	bl	800b36e <__hexdig_fun>
 800b586:	9b03      	ldr	r3, [sp, #12]
 800b588:	f000 000f 	and.w	r0, r0, #15
 800b58c:	4098      	lsls	r0, r3
 800b58e:	ea4b 0b00 	orr.w	fp, fp, r0
 800b592:	3304      	adds	r3, #4
 800b594:	e7ae      	b.n	800b4f4 <__gethex+0x15c>
 800b596:	45b1      	cmp	r9, r6
 800b598:	d8ea      	bhi.n	800b570 <__gethex+0x1d8>
 800b59a:	2201      	movs	r2, #1
 800b59c:	4630      	mov	r0, r6
 800b59e:	492a      	ldr	r1, [pc, #168]	@ (800b648 <__gethex+0x2b0>)
 800b5a0:	9303      	str	r3, [sp, #12]
 800b5a2:	f7fe ff3e 	bl	800a422 <strncmp>
 800b5a6:	9b03      	ldr	r3, [sp, #12]
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d1e1      	bne.n	800b570 <__gethex+0x1d8>
 800b5ac:	e7a2      	b.n	800b4f4 <__gethex+0x15c>
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	1ea9      	subs	r1, r5, #2
 800b5b2:	f000 ff0a 	bl	800c3ca <__any_on>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d0c2      	beq.n	800b540 <__gethex+0x1a8>
 800b5ba:	f04f 0903 	mov.w	r9, #3
 800b5be:	e7c1      	b.n	800b544 <__gethex+0x1ac>
 800b5c0:	da09      	bge.n	800b5d6 <__gethex+0x23e>
 800b5c2:	1b75      	subs	r5, r6, r5
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	462a      	mov	r2, r5
 800b5c8:	9801      	ldr	r0, [sp, #4]
 800b5ca:	f000 fccf 	bl	800bf6c <__lshift>
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	1b7f      	subs	r7, r7, r5
 800b5d2:	f100 0a14 	add.w	sl, r0, #20
 800b5d6:	f04f 0900 	mov.w	r9, #0
 800b5da:	e7b8      	b.n	800b54e <__gethex+0x1b6>
 800b5dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5e0:	42bd      	cmp	r5, r7
 800b5e2:	dd6f      	ble.n	800b6c4 <__gethex+0x32c>
 800b5e4:	1bed      	subs	r5, r5, r7
 800b5e6:	42ae      	cmp	r6, r5
 800b5e8:	dc34      	bgt.n	800b654 <__gethex+0x2bc>
 800b5ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d022      	beq.n	800b638 <__gethex+0x2a0>
 800b5f2:	2b03      	cmp	r3, #3
 800b5f4:	d024      	beq.n	800b640 <__gethex+0x2a8>
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d115      	bne.n	800b626 <__gethex+0x28e>
 800b5fa:	42ae      	cmp	r6, r5
 800b5fc:	d113      	bne.n	800b626 <__gethex+0x28e>
 800b5fe:	2e01      	cmp	r6, #1
 800b600:	d10b      	bne.n	800b61a <__gethex+0x282>
 800b602:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b606:	9a02      	ldr	r2, [sp, #8]
 800b608:	2562      	movs	r5, #98	@ 0x62
 800b60a:	6013      	str	r3, [r2, #0]
 800b60c:	2301      	movs	r3, #1
 800b60e:	6123      	str	r3, [r4, #16]
 800b610:	f8ca 3000 	str.w	r3, [sl]
 800b614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b616:	601c      	str	r4, [r3, #0]
 800b618:	e73a      	b.n	800b490 <__gethex+0xf8>
 800b61a:	4620      	mov	r0, r4
 800b61c:	1e71      	subs	r1, r6, #1
 800b61e:	f000 fed4 	bl	800c3ca <__any_on>
 800b622:	2800      	cmp	r0, #0
 800b624:	d1ed      	bne.n	800b602 <__gethex+0x26a>
 800b626:	4621      	mov	r1, r4
 800b628:	9801      	ldr	r0, [sp, #4]
 800b62a:	f000 fa8f 	bl	800bb4c <_Bfree>
 800b62e:	2300      	movs	r3, #0
 800b630:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b632:	2550      	movs	r5, #80	@ 0x50
 800b634:	6013      	str	r3, [r2, #0]
 800b636:	e72b      	b.n	800b490 <__gethex+0xf8>
 800b638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1f3      	bne.n	800b626 <__gethex+0x28e>
 800b63e:	e7e0      	b.n	800b602 <__gethex+0x26a>
 800b640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1dd      	bne.n	800b602 <__gethex+0x26a>
 800b646:	e7ee      	b.n	800b626 <__gethex+0x28e>
 800b648:	0800cf20 	.word	0x0800cf20
 800b64c:	0800cfda 	.word	0x0800cfda
 800b650:	0800cfeb 	.word	0x0800cfeb
 800b654:	1e6f      	subs	r7, r5, #1
 800b656:	f1b9 0f00 	cmp.w	r9, #0
 800b65a:	d130      	bne.n	800b6be <__gethex+0x326>
 800b65c:	b127      	cbz	r7, 800b668 <__gethex+0x2d0>
 800b65e:	4639      	mov	r1, r7
 800b660:	4620      	mov	r0, r4
 800b662:	f000 feb2 	bl	800c3ca <__any_on>
 800b666:	4681      	mov	r9, r0
 800b668:	2301      	movs	r3, #1
 800b66a:	4629      	mov	r1, r5
 800b66c:	1b76      	subs	r6, r6, r5
 800b66e:	2502      	movs	r5, #2
 800b670:	117a      	asrs	r2, r7, #5
 800b672:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b676:	f007 071f 	and.w	r7, r7, #31
 800b67a:	40bb      	lsls	r3, r7
 800b67c:	4213      	tst	r3, r2
 800b67e:	4620      	mov	r0, r4
 800b680:	bf18      	it	ne
 800b682:	f049 0902 	orrne.w	r9, r9, #2
 800b686:	f7ff fe1f 	bl	800b2c8 <rshift>
 800b68a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b68e:	f1b9 0f00 	cmp.w	r9, #0
 800b692:	d047      	beq.n	800b724 <__gethex+0x38c>
 800b694:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d015      	beq.n	800b6c8 <__gethex+0x330>
 800b69c:	2b03      	cmp	r3, #3
 800b69e:	d017      	beq.n	800b6d0 <__gethex+0x338>
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d109      	bne.n	800b6b8 <__gethex+0x320>
 800b6a4:	f019 0f02 	tst.w	r9, #2
 800b6a8:	d006      	beq.n	800b6b8 <__gethex+0x320>
 800b6aa:	f8da 3000 	ldr.w	r3, [sl]
 800b6ae:	ea49 0903 	orr.w	r9, r9, r3
 800b6b2:	f019 0f01 	tst.w	r9, #1
 800b6b6:	d10e      	bne.n	800b6d6 <__gethex+0x33e>
 800b6b8:	f045 0510 	orr.w	r5, r5, #16
 800b6bc:	e032      	b.n	800b724 <__gethex+0x38c>
 800b6be:	f04f 0901 	mov.w	r9, #1
 800b6c2:	e7d1      	b.n	800b668 <__gethex+0x2d0>
 800b6c4:	2501      	movs	r5, #1
 800b6c6:	e7e2      	b.n	800b68e <__gethex+0x2f6>
 800b6c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ca:	f1c3 0301 	rsb	r3, r3, #1
 800b6ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d0f0      	beq.n	800b6b8 <__gethex+0x320>
 800b6d6:	f04f 0c00 	mov.w	ip, #0
 800b6da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b6de:	f104 0314 	add.w	r3, r4, #20
 800b6e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b6e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b6f4:	d01b      	beq.n	800b72e <__gethex+0x396>
 800b6f6:	3201      	adds	r2, #1
 800b6f8:	6002      	str	r2, [r0, #0]
 800b6fa:	2d02      	cmp	r5, #2
 800b6fc:	f104 0314 	add.w	r3, r4, #20
 800b700:	d13c      	bne.n	800b77c <__gethex+0x3e4>
 800b702:	f8d8 2000 	ldr.w	r2, [r8]
 800b706:	3a01      	subs	r2, #1
 800b708:	42b2      	cmp	r2, r6
 800b70a:	d109      	bne.n	800b720 <__gethex+0x388>
 800b70c:	2201      	movs	r2, #1
 800b70e:	1171      	asrs	r1, r6, #5
 800b710:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b714:	f006 061f 	and.w	r6, r6, #31
 800b718:	fa02 f606 	lsl.w	r6, r2, r6
 800b71c:	421e      	tst	r6, r3
 800b71e:	d13a      	bne.n	800b796 <__gethex+0x3fe>
 800b720:	f045 0520 	orr.w	r5, r5, #32
 800b724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b726:	601c      	str	r4, [r3, #0]
 800b728:	9b02      	ldr	r3, [sp, #8]
 800b72a:	601f      	str	r7, [r3, #0]
 800b72c:	e6b0      	b.n	800b490 <__gethex+0xf8>
 800b72e:	4299      	cmp	r1, r3
 800b730:	f843 cc04 	str.w	ip, [r3, #-4]
 800b734:	d8d9      	bhi.n	800b6ea <__gethex+0x352>
 800b736:	68a3      	ldr	r3, [r4, #8]
 800b738:	459b      	cmp	fp, r3
 800b73a:	db17      	blt.n	800b76c <__gethex+0x3d4>
 800b73c:	6861      	ldr	r1, [r4, #4]
 800b73e:	9801      	ldr	r0, [sp, #4]
 800b740:	3101      	adds	r1, #1
 800b742:	f000 f9c3 	bl	800bacc <_Balloc>
 800b746:	4681      	mov	r9, r0
 800b748:	b918      	cbnz	r0, 800b752 <__gethex+0x3ba>
 800b74a:	4602      	mov	r2, r0
 800b74c:	2184      	movs	r1, #132	@ 0x84
 800b74e:	4b19      	ldr	r3, [pc, #100]	@ (800b7b4 <__gethex+0x41c>)
 800b750:	e6c5      	b.n	800b4de <__gethex+0x146>
 800b752:	6922      	ldr	r2, [r4, #16]
 800b754:	f104 010c 	add.w	r1, r4, #12
 800b758:	3202      	adds	r2, #2
 800b75a:	0092      	lsls	r2, r2, #2
 800b75c:	300c      	adds	r0, #12
 800b75e:	f7fe fef8 	bl	800a552 <memcpy>
 800b762:	4621      	mov	r1, r4
 800b764:	9801      	ldr	r0, [sp, #4]
 800b766:	f000 f9f1 	bl	800bb4c <_Bfree>
 800b76a:	464c      	mov	r4, r9
 800b76c:	6923      	ldr	r3, [r4, #16]
 800b76e:	1c5a      	adds	r2, r3, #1
 800b770:	6122      	str	r2, [r4, #16]
 800b772:	2201      	movs	r2, #1
 800b774:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b778:	615a      	str	r2, [r3, #20]
 800b77a:	e7be      	b.n	800b6fa <__gethex+0x362>
 800b77c:	6922      	ldr	r2, [r4, #16]
 800b77e:	455a      	cmp	r2, fp
 800b780:	dd0b      	ble.n	800b79a <__gethex+0x402>
 800b782:	2101      	movs	r1, #1
 800b784:	4620      	mov	r0, r4
 800b786:	f7ff fd9f 	bl	800b2c8 <rshift>
 800b78a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b78e:	3701      	adds	r7, #1
 800b790:	42bb      	cmp	r3, r7
 800b792:	f6ff aee0 	blt.w	800b556 <__gethex+0x1be>
 800b796:	2501      	movs	r5, #1
 800b798:	e7c2      	b.n	800b720 <__gethex+0x388>
 800b79a:	f016 061f 	ands.w	r6, r6, #31
 800b79e:	d0fa      	beq.n	800b796 <__gethex+0x3fe>
 800b7a0:	4453      	add	r3, sl
 800b7a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b7a6:	f000 fa83 	bl	800bcb0 <__hi0bits>
 800b7aa:	f1c6 0620 	rsb	r6, r6, #32
 800b7ae:	42b0      	cmp	r0, r6
 800b7b0:	dbe7      	blt.n	800b782 <__gethex+0x3ea>
 800b7b2:	e7f0      	b.n	800b796 <__gethex+0x3fe>
 800b7b4:	0800cfda 	.word	0x0800cfda

0800b7b8 <L_shift>:
 800b7b8:	f1c2 0208 	rsb	r2, r2, #8
 800b7bc:	0092      	lsls	r2, r2, #2
 800b7be:	b570      	push	{r4, r5, r6, lr}
 800b7c0:	f1c2 0620 	rsb	r6, r2, #32
 800b7c4:	6843      	ldr	r3, [r0, #4]
 800b7c6:	6804      	ldr	r4, [r0, #0]
 800b7c8:	fa03 f506 	lsl.w	r5, r3, r6
 800b7cc:	432c      	orrs	r4, r5
 800b7ce:	40d3      	lsrs	r3, r2
 800b7d0:	6004      	str	r4, [r0, #0]
 800b7d2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b7d6:	4288      	cmp	r0, r1
 800b7d8:	d3f4      	bcc.n	800b7c4 <L_shift+0xc>
 800b7da:	bd70      	pop	{r4, r5, r6, pc}

0800b7dc <__match>:
 800b7dc:	b530      	push	{r4, r5, lr}
 800b7de:	6803      	ldr	r3, [r0, #0]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7e6:	b914      	cbnz	r4, 800b7ee <__match+0x12>
 800b7e8:	6003      	str	r3, [r0, #0]
 800b7ea:	2001      	movs	r0, #1
 800b7ec:	bd30      	pop	{r4, r5, pc}
 800b7ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7f2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b7f6:	2d19      	cmp	r5, #25
 800b7f8:	bf98      	it	ls
 800b7fa:	3220      	addls	r2, #32
 800b7fc:	42a2      	cmp	r2, r4
 800b7fe:	d0f0      	beq.n	800b7e2 <__match+0x6>
 800b800:	2000      	movs	r0, #0
 800b802:	e7f3      	b.n	800b7ec <__match+0x10>

0800b804 <__hexnan>:
 800b804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b808:	2500      	movs	r5, #0
 800b80a:	680b      	ldr	r3, [r1, #0]
 800b80c:	4682      	mov	sl, r0
 800b80e:	115e      	asrs	r6, r3, #5
 800b810:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b814:	f013 031f 	ands.w	r3, r3, #31
 800b818:	bf18      	it	ne
 800b81a:	3604      	addne	r6, #4
 800b81c:	1f37      	subs	r7, r6, #4
 800b81e:	4690      	mov	r8, r2
 800b820:	46b9      	mov	r9, r7
 800b822:	463c      	mov	r4, r7
 800b824:	46ab      	mov	fp, r5
 800b826:	b087      	sub	sp, #28
 800b828:	6801      	ldr	r1, [r0, #0]
 800b82a:	9301      	str	r3, [sp, #4]
 800b82c:	f846 5c04 	str.w	r5, [r6, #-4]
 800b830:	9502      	str	r5, [sp, #8]
 800b832:	784a      	ldrb	r2, [r1, #1]
 800b834:	1c4b      	adds	r3, r1, #1
 800b836:	9303      	str	r3, [sp, #12]
 800b838:	b342      	cbz	r2, 800b88c <__hexnan+0x88>
 800b83a:	4610      	mov	r0, r2
 800b83c:	9105      	str	r1, [sp, #20]
 800b83e:	9204      	str	r2, [sp, #16]
 800b840:	f7ff fd95 	bl	800b36e <__hexdig_fun>
 800b844:	2800      	cmp	r0, #0
 800b846:	d151      	bne.n	800b8ec <__hexnan+0xe8>
 800b848:	9a04      	ldr	r2, [sp, #16]
 800b84a:	9905      	ldr	r1, [sp, #20]
 800b84c:	2a20      	cmp	r2, #32
 800b84e:	d818      	bhi.n	800b882 <__hexnan+0x7e>
 800b850:	9b02      	ldr	r3, [sp, #8]
 800b852:	459b      	cmp	fp, r3
 800b854:	dd13      	ble.n	800b87e <__hexnan+0x7a>
 800b856:	454c      	cmp	r4, r9
 800b858:	d206      	bcs.n	800b868 <__hexnan+0x64>
 800b85a:	2d07      	cmp	r5, #7
 800b85c:	dc04      	bgt.n	800b868 <__hexnan+0x64>
 800b85e:	462a      	mov	r2, r5
 800b860:	4649      	mov	r1, r9
 800b862:	4620      	mov	r0, r4
 800b864:	f7ff ffa8 	bl	800b7b8 <L_shift>
 800b868:	4544      	cmp	r4, r8
 800b86a:	d952      	bls.n	800b912 <__hexnan+0x10e>
 800b86c:	2300      	movs	r3, #0
 800b86e:	f1a4 0904 	sub.w	r9, r4, #4
 800b872:	f844 3c04 	str.w	r3, [r4, #-4]
 800b876:	461d      	mov	r5, r3
 800b878:	464c      	mov	r4, r9
 800b87a:	f8cd b008 	str.w	fp, [sp, #8]
 800b87e:	9903      	ldr	r1, [sp, #12]
 800b880:	e7d7      	b.n	800b832 <__hexnan+0x2e>
 800b882:	2a29      	cmp	r2, #41	@ 0x29
 800b884:	d157      	bne.n	800b936 <__hexnan+0x132>
 800b886:	3102      	adds	r1, #2
 800b888:	f8ca 1000 	str.w	r1, [sl]
 800b88c:	f1bb 0f00 	cmp.w	fp, #0
 800b890:	d051      	beq.n	800b936 <__hexnan+0x132>
 800b892:	454c      	cmp	r4, r9
 800b894:	d206      	bcs.n	800b8a4 <__hexnan+0xa0>
 800b896:	2d07      	cmp	r5, #7
 800b898:	dc04      	bgt.n	800b8a4 <__hexnan+0xa0>
 800b89a:	462a      	mov	r2, r5
 800b89c:	4649      	mov	r1, r9
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f7ff ff8a 	bl	800b7b8 <L_shift>
 800b8a4:	4544      	cmp	r4, r8
 800b8a6:	d936      	bls.n	800b916 <__hexnan+0x112>
 800b8a8:	4623      	mov	r3, r4
 800b8aa:	f1a8 0204 	sub.w	r2, r8, #4
 800b8ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800b8b2:	429f      	cmp	r7, r3
 800b8b4:	f842 1f04 	str.w	r1, [r2, #4]!
 800b8b8:	d2f9      	bcs.n	800b8ae <__hexnan+0xaa>
 800b8ba:	1b3b      	subs	r3, r7, r4
 800b8bc:	f023 0303 	bic.w	r3, r3, #3
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	3401      	adds	r4, #1
 800b8c4:	3e03      	subs	r6, #3
 800b8c6:	42b4      	cmp	r4, r6
 800b8c8:	bf88      	it	hi
 800b8ca:	2304      	movhi	r3, #4
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	4443      	add	r3, r8
 800b8d0:	f843 2b04 	str.w	r2, [r3], #4
 800b8d4:	429f      	cmp	r7, r3
 800b8d6:	d2fb      	bcs.n	800b8d0 <__hexnan+0xcc>
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	b91b      	cbnz	r3, 800b8e4 <__hexnan+0xe0>
 800b8dc:	4547      	cmp	r7, r8
 800b8de:	d128      	bne.n	800b932 <__hexnan+0x12e>
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	603b      	str	r3, [r7, #0]
 800b8e4:	2005      	movs	r0, #5
 800b8e6:	b007      	add	sp, #28
 800b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ec:	3501      	adds	r5, #1
 800b8ee:	2d08      	cmp	r5, #8
 800b8f0:	f10b 0b01 	add.w	fp, fp, #1
 800b8f4:	dd06      	ble.n	800b904 <__hexnan+0x100>
 800b8f6:	4544      	cmp	r4, r8
 800b8f8:	d9c1      	bls.n	800b87e <__hexnan+0x7a>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	2501      	movs	r5, #1
 800b8fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800b902:	3c04      	subs	r4, #4
 800b904:	6822      	ldr	r2, [r4, #0]
 800b906:	f000 000f 	and.w	r0, r0, #15
 800b90a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b90e:	6020      	str	r0, [r4, #0]
 800b910:	e7b5      	b.n	800b87e <__hexnan+0x7a>
 800b912:	2508      	movs	r5, #8
 800b914:	e7b3      	b.n	800b87e <__hexnan+0x7a>
 800b916:	9b01      	ldr	r3, [sp, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d0dd      	beq.n	800b8d8 <__hexnan+0xd4>
 800b91c:	f04f 32ff 	mov.w	r2, #4294967295
 800b920:	f1c3 0320 	rsb	r3, r3, #32
 800b924:	40da      	lsrs	r2, r3
 800b926:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b92a:	4013      	ands	r3, r2
 800b92c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b930:	e7d2      	b.n	800b8d8 <__hexnan+0xd4>
 800b932:	3f04      	subs	r7, #4
 800b934:	e7d0      	b.n	800b8d8 <__hexnan+0xd4>
 800b936:	2004      	movs	r0, #4
 800b938:	e7d5      	b.n	800b8e6 <__hexnan+0xe2>
	...

0800b93c <malloc>:
 800b93c:	4b02      	ldr	r3, [pc, #8]	@ (800b948 <malloc+0xc>)
 800b93e:	4601      	mov	r1, r0
 800b940:	6818      	ldr	r0, [r3, #0]
 800b942:	f000 b825 	b.w	800b990 <_malloc_r>
 800b946:	bf00      	nop
 800b948:	2000018c 	.word	0x2000018c

0800b94c <sbrk_aligned>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	4e0f      	ldr	r6, [pc, #60]	@ (800b98c <sbrk_aligned+0x40>)
 800b950:	460c      	mov	r4, r1
 800b952:	6831      	ldr	r1, [r6, #0]
 800b954:	4605      	mov	r5, r0
 800b956:	b911      	cbnz	r1, 800b95e <sbrk_aligned+0x12>
 800b958:	f000 ff7e 	bl	800c858 <_sbrk_r>
 800b95c:	6030      	str	r0, [r6, #0]
 800b95e:	4621      	mov	r1, r4
 800b960:	4628      	mov	r0, r5
 800b962:	f000 ff79 	bl	800c858 <_sbrk_r>
 800b966:	1c43      	adds	r3, r0, #1
 800b968:	d103      	bne.n	800b972 <sbrk_aligned+0x26>
 800b96a:	f04f 34ff 	mov.w	r4, #4294967295
 800b96e:	4620      	mov	r0, r4
 800b970:	bd70      	pop	{r4, r5, r6, pc}
 800b972:	1cc4      	adds	r4, r0, #3
 800b974:	f024 0403 	bic.w	r4, r4, #3
 800b978:	42a0      	cmp	r0, r4
 800b97a:	d0f8      	beq.n	800b96e <sbrk_aligned+0x22>
 800b97c:	1a21      	subs	r1, r4, r0
 800b97e:	4628      	mov	r0, r5
 800b980:	f000 ff6a 	bl	800c858 <_sbrk_r>
 800b984:	3001      	adds	r0, #1
 800b986:	d1f2      	bne.n	800b96e <sbrk_aligned+0x22>
 800b988:	e7ef      	b.n	800b96a <sbrk_aligned+0x1e>
 800b98a:	bf00      	nop
 800b98c:	20000d98 	.word	0x20000d98

0800b990 <_malloc_r>:
 800b990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b994:	1ccd      	adds	r5, r1, #3
 800b996:	f025 0503 	bic.w	r5, r5, #3
 800b99a:	3508      	adds	r5, #8
 800b99c:	2d0c      	cmp	r5, #12
 800b99e:	bf38      	it	cc
 800b9a0:	250c      	movcc	r5, #12
 800b9a2:	2d00      	cmp	r5, #0
 800b9a4:	4606      	mov	r6, r0
 800b9a6:	db01      	blt.n	800b9ac <_malloc_r+0x1c>
 800b9a8:	42a9      	cmp	r1, r5
 800b9aa:	d904      	bls.n	800b9b6 <_malloc_r+0x26>
 800b9ac:	230c      	movs	r3, #12
 800b9ae:	6033      	str	r3, [r6, #0]
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba8c <_malloc_r+0xfc>
 800b9ba:	f000 f87b 	bl	800bab4 <__malloc_lock>
 800b9be:	f8d8 3000 	ldr.w	r3, [r8]
 800b9c2:	461c      	mov	r4, r3
 800b9c4:	bb44      	cbnz	r4, 800ba18 <_malloc_r+0x88>
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f7ff ffbf 	bl	800b94c <sbrk_aligned>
 800b9ce:	1c43      	adds	r3, r0, #1
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	d158      	bne.n	800ba86 <_malloc_r+0xf6>
 800b9d4:	f8d8 4000 	ldr.w	r4, [r8]
 800b9d8:	4627      	mov	r7, r4
 800b9da:	2f00      	cmp	r7, #0
 800b9dc:	d143      	bne.n	800ba66 <_malloc_r+0xd6>
 800b9de:	2c00      	cmp	r4, #0
 800b9e0:	d04b      	beq.n	800ba7a <_malloc_r+0xea>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	4639      	mov	r1, r7
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	eb04 0903 	add.w	r9, r4, r3
 800b9ec:	f000 ff34 	bl	800c858 <_sbrk_r>
 800b9f0:	4581      	cmp	r9, r0
 800b9f2:	d142      	bne.n	800ba7a <_malloc_r+0xea>
 800b9f4:	6821      	ldr	r1, [r4, #0]
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	1a6d      	subs	r5, r5, r1
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	f7ff ffa6 	bl	800b94c <sbrk_aligned>
 800ba00:	3001      	adds	r0, #1
 800ba02:	d03a      	beq.n	800ba7a <_malloc_r+0xea>
 800ba04:	6823      	ldr	r3, [r4, #0]
 800ba06:	442b      	add	r3, r5
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	bb62      	cbnz	r2, 800ba6c <_malloc_r+0xdc>
 800ba12:	f8c8 7000 	str.w	r7, [r8]
 800ba16:	e00f      	b.n	800ba38 <_malloc_r+0xa8>
 800ba18:	6822      	ldr	r2, [r4, #0]
 800ba1a:	1b52      	subs	r2, r2, r5
 800ba1c:	d420      	bmi.n	800ba60 <_malloc_r+0xd0>
 800ba1e:	2a0b      	cmp	r2, #11
 800ba20:	d917      	bls.n	800ba52 <_malloc_r+0xc2>
 800ba22:	1961      	adds	r1, r4, r5
 800ba24:	42a3      	cmp	r3, r4
 800ba26:	6025      	str	r5, [r4, #0]
 800ba28:	bf18      	it	ne
 800ba2a:	6059      	strne	r1, [r3, #4]
 800ba2c:	6863      	ldr	r3, [r4, #4]
 800ba2e:	bf08      	it	eq
 800ba30:	f8c8 1000 	streq.w	r1, [r8]
 800ba34:	5162      	str	r2, [r4, r5]
 800ba36:	604b      	str	r3, [r1, #4]
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f000 f841 	bl	800bac0 <__malloc_unlock>
 800ba3e:	f104 000b 	add.w	r0, r4, #11
 800ba42:	1d23      	adds	r3, r4, #4
 800ba44:	f020 0007 	bic.w	r0, r0, #7
 800ba48:	1ac2      	subs	r2, r0, r3
 800ba4a:	bf1c      	itt	ne
 800ba4c:	1a1b      	subne	r3, r3, r0
 800ba4e:	50a3      	strne	r3, [r4, r2]
 800ba50:	e7af      	b.n	800b9b2 <_malloc_r+0x22>
 800ba52:	6862      	ldr	r2, [r4, #4]
 800ba54:	42a3      	cmp	r3, r4
 800ba56:	bf0c      	ite	eq
 800ba58:	f8c8 2000 	streq.w	r2, [r8]
 800ba5c:	605a      	strne	r2, [r3, #4]
 800ba5e:	e7eb      	b.n	800ba38 <_malloc_r+0xa8>
 800ba60:	4623      	mov	r3, r4
 800ba62:	6864      	ldr	r4, [r4, #4]
 800ba64:	e7ae      	b.n	800b9c4 <_malloc_r+0x34>
 800ba66:	463c      	mov	r4, r7
 800ba68:	687f      	ldr	r7, [r7, #4]
 800ba6a:	e7b6      	b.n	800b9da <_malloc_r+0x4a>
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	42a3      	cmp	r3, r4
 800ba72:	d1fb      	bne.n	800ba6c <_malloc_r+0xdc>
 800ba74:	2300      	movs	r3, #0
 800ba76:	6053      	str	r3, [r2, #4]
 800ba78:	e7de      	b.n	800ba38 <_malloc_r+0xa8>
 800ba7a:	230c      	movs	r3, #12
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	6033      	str	r3, [r6, #0]
 800ba80:	f000 f81e 	bl	800bac0 <__malloc_unlock>
 800ba84:	e794      	b.n	800b9b0 <_malloc_r+0x20>
 800ba86:	6005      	str	r5, [r0, #0]
 800ba88:	e7d6      	b.n	800ba38 <_malloc_r+0xa8>
 800ba8a:	bf00      	nop
 800ba8c:	20000d9c 	.word	0x20000d9c

0800ba90 <__ascii_mbtowc>:
 800ba90:	b082      	sub	sp, #8
 800ba92:	b901      	cbnz	r1, 800ba96 <__ascii_mbtowc+0x6>
 800ba94:	a901      	add	r1, sp, #4
 800ba96:	b142      	cbz	r2, 800baaa <__ascii_mbtowc+0x1a>
 800ba98:	b14b      	cbz	r3, 800baae <__ascii_mbtowc+0x1e>
 800ba9a:	7813      	ldrb	r3, [r2, #0]
 800ba9c:	600b      	str	r3, [r1, #0]
 800ba9e:	7812      	ldrb	r2, [r2, #0]
 800baa0:	1e10      	subs	r0, r2, #0
 800baa2:	bf18      	it	ne
 800baa4:	2001      	movne	r0, #1
 800baa6:	b002      	add	sp, #8
 800baa8:	4770      	bx	lr
 800baaa:	4610      	mov	r0, r2
 800baac:	e7fb      	b.n	800baa6 <__ascii_mbtowc+0x16>
 800baae:	f06f 0001 	mvn.w	r0, #1
 800bab2:	e7f8      	b.n	800baa6 <__ascii_mbtowc+0x16>

0800bab4 <__malloc_lock>:
 800bab4:	4801      	ldr	r0, [pc, #4]	@ (800babc <__malloc_lock+0x8>)
 800bab6:	f7fe bd3c 	b.w	800a532 <__retarget_lock_acquire_recursive>
 800baba:	bf00      	nop
 800babc:	20000d94 	.word	0x20000d94

0800bac0 <__malloc_unlock>:
 800bac0:	4801      	ldr	r0, [pc, #4]	@ (800bac8 <__malloc_unlock+0x8>)
 800bac2:	f7fe bd37 	b.w	800a534 <__retarget_lock_release_recursive>
 800bac6:	bf00      	nop
 800bac8:	20000d94 	.word	0x20000d94

0800bacc <_Balloc>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	69c6      	ldr	r6, [r0, #28]
 800bad0:	4604      	mov	r4, r0
 800bad2:	460d      	mov	r5, r1
 800bad4:	b976      	cbnz	r6, 800baf4 <_Balloc+0x28>
 800bad6:	2010      	movs	r0, #16
 800bad8:	f7ff ff30 	bl	800b93c <malloc>
 800badc:	4602      	mov	r2, r0
 800bade:	61e0      	str	r0, [r4, #28]
 800bae0:	b920      	cbnz	r0, 800baec <_Balloc+0x20>
 800bae2:	216b      	movs	r1, #107	@ 0x6b
 800bae4:	4b17      	ldr	r3, [pc, #92]	@ (800bb44 <_Balloc+0x78>)
 800bae6:	4818      	ldr	r0, [pc, #96]	@ (800bb48 <_Balloc+0x7c>)
 800bae8:	f000 fec6 	bl	800c878 <__assert_func>
 800baec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baf0:	6006      	str	r6, [r0, #0]
 800baf2:	60c6      	str	r6, [r0, #12]
 800baf4:	69e6      	ldr	r6, [r4, #28]
 800baf6:	68f3      	ldr	r3, [r6, #12]
 800baf8:	b183      	cbz	r3, 800bb1c <_Balloc+0x50>
 800bafa:	69e3      	ldr	r3, [r4, #28]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb02:	b9b8      	cbnz	r0, 800bb34 <_Balloc+0x68>
 800bb04:	2101      	movs	r1, #1
 800bb06:	fa01 f605 	lsl.w	r6, r1, r5
 800bb0a:	1d72      	adds	r2, r6, #5
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	0092      	lsls	r2, r2, #2
 800bb10:	f000 fed0 	bl	800c8b4 <_calloc_r>
 800bb14:	b160      	cbz	r0, 800bb30 <_Balloc+0x64>
 800bb16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb1a:	e00e      	b.n	800bb3a <_Balloc+0x6e>
 800bb1c:	2221      	movs	r2, #33	@ 0x21
 800bb1e:	2104      	movs	r1, #4
 800bb20:	4620      	mov	r0, r4
 800bb22:	f000 fec7 	bl	800c8b4 <_calloc_r>
 800bb26:	69e3      	ldr	r3, [r4, #28]
 800bb28:	60f0      	str	r0, [r6, #12]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e4      	bne.n	800bafa <_Balloc+0x2e>
 800bb30:	2000      	movs	r0, #0
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	6802      	ldr	r2, [r0, #0]
 800bb36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb40:	e7f7      	b.n	800bb32 <_Balloc+0x66>
 800bb42:	bf00      	nop
 800bb44:	0800cf6b 	.word	0x0800cf6b
 800bb48:	0800d04b 	.word	0x0800d04b

0800bb4c <_Bfree>:
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	69c6      	ldr	r6, [r0, #28]
 800bb50:	4605      	mov	r5, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	b976      	cbnz	r6, 800bb74 <_Bfree+0x28>
 800bb56:	2010      	movs	r0, #16
 800bb58:	f7ff fef0 	bl	800b93c <malloc>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	61e8      	str	r0, [r5, #28]
 800bb60:	b920      	cbnz	r0, 800bb6c <_Bfree+0x20>
 800bb62:	218f      	movs	r1, #143	@ 0x8f
 800bb64:	4b08      	ldr	r3, [pc, #32]	@ (800bb88 <_Bfree+0x3c>)
 800bb66:	4809      	ldr	r0, [pc, #36]	@ (800bb8c <_Bfree+0x40>)
 800bb68:	f000 fe86 	bl	800c878 <__assert_func>
 800bb6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb70:	6006      	str	r6, [r0, #0]
 800bb72:	60c6      	str	r6, [r0, #12]
 800bb74:	b13c      	cbz	r4, 800bb86 <_Bfree+0x3a>
 800bb76:	69eb      	ldr	r3, [r5, #28]
 800bb78:	6862      	ldr	r2, [r4, #4]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb80:	6021      	str	r1, [r4, #0]
 800bb82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb86:	bd70      	pop	{r4, r5, r6, pc}
 800bb88:	0800cf6b 	.word	0x0800cf6b
 800bb8c:	0800d04b 	.word	0x0800d04b

0800bb90 <__multadd>:
 800bb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb94:	4607      	mov	r7, r0
 800bb96:	460c      	mov	r4, r1
 800bb98:	461e      	mov	r6, r3
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	690d      	ldr	r5, [r1, #16]
 800bb9e:	f101 0c14 	add.w	ip, r1, #20
 800bba2:	f8dc 3000 	ldr.w	r3, [ip]
 800bba6:	3001      	adds	r0, #1
 800bba8:	b299      	uxth	r1, r3
 800bbaa:	fb02 6101 	mla	r1, r2, r1, r6
 800bbae:	0c1e      	lsrs	r6, r3, #16
 800bbb0:	0c0b      	lsrs	r3, r1, #16
 800bbb2:	fb02 3306 	mla	r3, r2, r6, r3
 800bbb6:	b289      	uxth	r1, r1
 800bbb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbbc:	4285      	cmp	r5, r0
 800bbbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbc2:	f84c 1b04 	str.w	r1, [ip], #4
 800bbc6:	dcec      	bgt.n	800bba2 <__multadd+0x12>
 800bbc8:	b30e      	cbz	r6, 800bc0e <__multadd+0x7e>
 800bbca:	68a3      	ldr	r3, [r4, #8]
 800bbcc:	42ab      	cmp	r3, r5
 800bbce:	dc19      	bgt.n	800bc04 <__multadd+0x74>
 800bbd0:	6861      	ldr	r1, [r4, #4]
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	3101      	adds	r1, #1
 800bbd6:	f7ff ff79 	bl	800bacc <_Balloc>
 800bbda:	4680      	mov	r8, r0
 800bbdc:	b928      	cbnz	r0, 800bbea <__multadd+0x5a>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	21ba      	movs	r1, #186	@ 0xba
 800bbe2:	4b0c      	ldr	r3, [pc, #48]	@ (800bc14 <__multadd+0x84>)
 800bbe4:	480c      	ldr	r0, [pc, #48]	@ (800bc18 <__multadd+0x88>)
 800bbe6:	f000 fe47 	bl	800c878 <__assert_func>
 800bbea:	6922      	ldr	r2, [r4, #16]
 800bbec:	f104 010c 	add.w	r1, r4, #12
 800bbf0:	3202      	adds	r2, #2
 800bbf2:	0092      	lsls	r2, r2, #2
 800bbf4:	300c      	adds	r0, #12
 800bbf6:	f7fe fcac 	bl	800a552 <memcpy>
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	f7ff ffa5 	bl	800bb4c <_Bfree>
 800bc02:	4644      	mov	r4, r8
 800bc04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc08:	3501      	adds	r5, #1
 800bc0a:	615e      	str	r6, [r3, #20]
 800bc0c:	6125      	str	r5, [r4, #16]
 800bc0e:	4620      	mov	r0, r4
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc14:	0800cfda 	.word	0x0800cfda
 800bc18:	0800d04b 	.word	0x0800d04b

0800bc1c <__s2b>:
 800bc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc20:	4615      	mov	r5, r2
 800bc22:	2209      	movs	r2, #9
 800bc24:	461f      	mov	r7, r3
 800bc26:	3308      	adds	r3, #8
 800bc28:	460c      	mov	r4, r1
 800bc2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc2e:	4606      	mov	r6, r0
 800bc30:	2201      	movs	r2, #1
 800bc32:	2100      	movs	r1, #0
 800bc34:	429a      	cmp	r2, r3
 800bc36:	db09      	blt.n	800bc4c <__s2b+0x30>
 800bc38:	4630      	mov	r0, r6
 800bc3a:	f7ff ff47 	bl	800bacc <_Balloc>
 800bc3e:	b940      	cbnz	r0, 800bc52 <__s2b+0x36>
 800bc40:	4602      	mov	r2, r0
 800bc42:	21d3      	movs	r1, #211	@ 0xd3
 800bc44:	4b18      	ldr	r3, [pc, #96]	@ (800bca8 <__s2b+0x8c>)
 800bc46:	4819      	ldr	r0, [pc, #100]	@ (800bcac <__s2b+0x90>)
 800bc48:	f000 fe16 	bl	800c878 <__assert_func>
 800bc4c:	0052      	lsls	r2, r2, #1
 800bc4e:	3101      	adds	r1, #1
 800bc50:	e7f0      	b.n	800bc34 <__s2b+0x18>
 800bc52:	9b08      	ldr	r3, [sp, #32]
 800bc54:	2d09      	cmp	r5, #9
 800bc56:	6143      	str	r3, [r0, #20]
 800bc58:	f04f 0301 	mov.w	r3, #1
 800bc5c:	6103      	str	r3, [r0, #16]
 800bc5e:	dd16      	ble.n	800bc8e <__s2b+0x72>
 800bc60:	f104 0909 	add.w	r9, r4, #9
 800bc64:	46c8      	mov	r8, r9
 800bc66:	442c      	add	r4, r5
 800bc68:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	220a      	movs	r2, #10
 800bc70:	4630      	mov	r0, r6
 800bc72:	3b30      	subs	r3, #48	@ 0x30
 800bc74:	f7ff ff8c 	bl	800bb90 <__multadd>
 800bc78:	45a0      	cmp	r8, r4
 800bc7a:	d1f5      	bne.n	800bc68 <__s2b+0x4c>
 800bc7c:	f1a5 0408 	sub.w	r4, r5, #8
 800bc80:	444c      	add	r4, r9
 800bc82:	1b2d      	subs	r5, r5, r4
 800bc84:	1963      	adds	r3, r4, r5
 800bc86:	42bb      	cmp	r3, r7
 800bc88:	db04      	blt.n	800bc94 <__s2b+0x78>
 800bc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc8e:	2509      	movs	r5, #9
 800bc90:	340a      	adds	r4, #10
 800bc92:	e7f6      	b.n	800bc82 <__s2b+0x66>
 800bc94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc98:	4601      	mov	r1, r0
 800bc9a:	220a      	movs	r2, #10
 800bc9c:	4630      	mov	r0, r6
 800bc9e:	3b30      	subs	r3, #48	@ 0x30
 800bca0:	f7ff ff76 	bl	800bb90 <__multadd>
 800bca4:	e7ee      	b.n	800bc84 <__s2b+0x68>
 800bca6:	bf00      	nop
 800bca8:	0800cfda 	.word	0x0800cfda
 800bcac:	0800d04b 	.word	0x0800d04b

0800bcb0 <__hi0bits>:
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bcb6:	bf3a      	itte	cc
 800bcb8:	0403      	lslcc	r3, r0, #16
 800bcba:	2010      	movcc	r0, #16
 800bcbc:	2000      	movcs	r0, #0
 800bcbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bcc2:	bf3c      	itt	cc
 800bcc4:	021b      	lslcc	r3, r3, #8
 800bcc6:	3008      	addcc	r0, #8
 800bcc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bccc:	bf3c      	itt	cc
 800bcce:	011b      	lslcc	r3, r3, #4
 800bcd0:	3004      	addcc	r0, #4
 800bcd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcd6:	bf3c      	itt	cc
 800bcd8:	009b      	lslcc	r3, r3, #2
 800bcda:	3002      	addcc	r0, #2
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	db05      	blt.n	800bcec <__hi0bits+0x3c>
 800bce0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bce4:	f100 0001 	add.w	r0, r0, #1
 800bce8:	bf08      	it	eq
 800bcea:	2020      	moveq	r0, #32
 800bcec:	4770      	bx	lr

0800bcee <__lo0bits>:
 800bcee:	6803      	ldr	r3, [r0, #0]
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	f013 0007 	ands.w	r0, r3, #7
 800bcf6:	d00b      	beq.n	800bd10 <__lo0bits+0x22>
 800bcf8:	07d9      	lsls	r1, r3, #31
 800bcfa:	d421      	bmi.n	800bd40 <__lo0bits+0x52>
 800bcfc:	0798      	lsls	r0, r3, #30
 800bcfe:	bf49      	itett	mi
 800bd00:	085b      	lsrmi	r3, r3, #1
 800bd02:	089b      	lsrpl	r3, r3, #2
 800bd04:	2001      	movmi	r0, #1
 800bd06:	6013      	strmi	r3, [r2, #0]
 800bd08:	bf5c      	itt	pl
 800bd0a:	2002      	movpl	r0, #2
 800bd0c:	6013      	strpl	r3, [r2, #0]
 800bd0e:	4770      	bx	lr
 800bd10:	b299      	uxth	r1, r3
 800bd12:	b909      	cbnz	r1, 800bd18 <__lo0bits+0x2a>
 800bd14:	2010      	movs	r0, #16
 800bd16:	0c1b      	lsrs	r3, r3, #16
 800bd18:	b2d9      	uxtb	r1, r3
 800bd1a:	b909      	cbnz	r1, 800bd20 <__lo0bits+0x32>
 800bd1c:	3008      	adds	r0, #8
 800bd1e:	0a1b      	lsrs	r3, r3, #8
 800bd20:	0719      	lsls	r1, r3, #28
 800bd22:	bf04      	itt	eq
 800bd24:	091b      	lsreq	r3, r3, #4
 800bd26:	3004      	addeq	r0, #4
 800bd28:	0799      	lsls	r1, r3, #30
 800bd2a:	bf04      	itt	eq
 800bd2c:	089b      	lsreq	r3, r3, #2
 800bd2e:	3002      	addeq	r0, #2
 800bd30:	07d9      	lsls	r1, r3, #31
 800bd32:	d403      	bmi.n	800bd3c <__lo0bits+0x4e>
 800bd34:	085b      	lsrs	r3, r3, #1
 800bd36:	f100 0001 	add.w	r0, r0, #1
 800bd3a:	d003      	beq.n	800bd44 <__lo0bits+0x56>
 800bd3c:	6013      	str	r3, [r2, #0]
 800bd3e:	4770      	bx	lr
 800bd40:	2000      	movs	r0, #0
 800bd42:	4770      	bx	lr
 800bd44:	2020      	movs	r0, #32
 800bd46:	4770      	bx	lr

0800bd48 <__i2b>:
 800bd48:	b510      	push	{r4, lr}
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	2101      	movs	r1, #1
 800bd4e:	f7ff febd 	bl	800bacc <_Balloc>
 800bd52:	4602      	mov	r2, r0
 800bd54:	b928      	cbnz	r0, 800bd62 <__i2b+0x1a>
 800bd56:	f240 1145 	movw	r1, #325	@ 0x145
 800bd5a:	4b04      	ldr	r3, [pc, #16]	@ (800bd6c <__i2b+0x24>)
 800bd5c:	4804      	ldr	r0, [pc, #16]	@ (800bd70 <__i2b+0x28>)
 800bd5e:	f000 fd8b 	bl	800c878 <__assert_func>
 800bd62:	2301      	movs	r3, #1
 800bd64:	6144      	str	r4, [r0, #20]
 800bd66:	6103      	str	r3, [r0, #16]
 800bd68:	bd10      	pop	{r4, pc}
 800bd6a:	bf00      	nop
 800bd6c:	0800cfda 	.word	0x0800cfda
 800bd70:	0800d04b 	.word	0x0800d04b

0800bd74 <__multiply>:
 800bd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd78:	4617      	mov	r7, r2
 800bd7a:	690a      	ldr	r2, [r1, #16]
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	4689      	mov	r9, r1
 800bd80:	429a      	cmp	r2, r3
 800bd82:	bfa2      	ittt	ge
 800bd84:	463b      	movge	r3, r7
 800bd86:	460f      	movge	r7, r1
 800bd88:	4699      	movge	r9, r3
 800bd8a:	693d      	ldr	r5, [r7, #16]
 800bd8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	6879      	ldr	r1, [r7, #4]
 800bd94:	eb05 060a 	add.w	r6, r5, sl
 800bd98:	42b3      	cmp	r3, r6
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	bfb8      	it	lt
 800bd9e:	3101      	addlt	r1, #1
 800bda0:	f7ff fe94 	bl	800bacc <_Balloc>
 800bda4:	b930      	cbnz	r0, 800bdb4 <__multiply+0x40>
 800bda6:	4602      	mov	r2, r0
 800bda8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bdac:	4b40      	ldr	r3, [pc, #256]	@ (800beb0 <__multiply+0x13c>)
 800bdae:	4841      	ldr	r0, [pc, #260]	@ (800beb4 <__multiply+0x140>)
 800bdb0:	f000 fd62 	bl	800c878 <__assert_func>
 800bdb4:	f100 0414 	add.w	r4, r0, #20
 800bdb8:	4623      	mov	r3, r4
 800bdba:	2200      	movs	r2, #0
 800bdbc:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bdc0:	4573      	cmp	r3, lr
 800bdc2:	d320      	bcc.n	800be06 <__multiply+0x92>
 800bdc4:	f107 0814 	add.w	r8, r7, #20
 800bdc8:	f109 0114 	add.w	r1, r9, #20
 800bdcc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bdd0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bdd4:	9302      	str	r3, [sp, #8]
 800bdd6:	1beb      	subs	r3, r5, r7
 800bdd8:	3b15      	subs	r3, #21
 800bdda:	f023 0303 	bic.w	r3, r3, #3
 800bdde:	3304      	adds	r3, #4
 800bde0:	3715      	adds	r7, #21
 800bde2:	42bd      	cmp	r5, r7
 800bde4:	bf38      	it	cc
 800bde6:	2304      	movcc	r3, #4
 800bde8:	9301      	str	r3, [sp, #4]
 800bdea:	9b02      	ldr	r3, [sp, #8]
 800bdec:	9103      	str	r1, [sp, #12]
 800bdee:	428b      	cmp	r3, r1
 800bdf0:	d80c      	bhi.n	800be0c <__multiply+0x98>
 800bdf2:	2e00      	cmp	r6, #0
 800bdf4:	dd03      	ble.n	800bdfe <__multiply+0x8a>
 800bdf6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d055      	beq.n	800beaa <__multiply+0x136>
 800bdfe:	6106      	str	r6, [r0, #16]
 800be00:	b005      	add	sp, #20
 800be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be06:	f843 2b04 	str.w	r2, [r3], #4
 800be0a:	e7d9      	b.n	800bdc0 <__multiply+0x4c>
 800be0c:	f8b1 a000 	ldrh.w	sl, [r1]
 800be10:	f1ba 0f00 	cmp.w	sl, #0
 800be14:	d01f      	beq.n	800be56 <__multiply+0xe2>
 800be16:	46c4      	mov	ip, r8
 800be18:	46a1      	mov	r9, r4
 800be1a:	2700      	movs	r7, #0
 800be1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be20:	f8d9 3000 	ldr.w	r3, [r9]
 800be24:	fa1f fb82 	uxth.w	fp, r2
 800be28:	b29b      	uxth	r3, r3
 800be2a:	fb0a 330b 	mla	r3, sl, fp, r3
 800be2e:	443b      	add	r3, r7
 800be30:	f8d9 7000 	ldr.w	r7, [r9]
 800be34:	0c12      	lsrs	r2, r2, #16
 800be36:	0c3f      	lsrs	r7, r7, #16
 800be38:	fb0a 7202 	mla	r2, sl, r2, r7
 800be3c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800be40:	b29b      	uxth	r3, r3
 800be42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be46:	4565      	cmp	r5, ip
 800be48:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800be4c:	f849 3b04 	str.w	r3, [r9], #4
 800be50:	d8e4      	bhi.n	800be1c <__multiply+0xa8>
 800be52:	9b01      	ldr	r3, [sp, #4]
 800be54:	50e7      	str	r7, [r4, r3]
 800be56:	9b03      	ldr	r3, [sp, #12]
 800be58:	3104      	adds	r1, #4
 800be5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800be5e:	f1b9 0f00 	cmp.w	r9, #0
 800be62:	d020      	beq.n	800bea6 <__multiply+0x132>
 800be64:	4647      	mov	r7, r8
 800be66:	46a4      	mov	ip, r4
 800be68:	f04f 0a00 	mov.w	sl, #0
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	f8b7 b000 	ldrh.w	fp, [r7]
 800be72:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800be76:	b29b      	uxth	r3, r3
 800be78:	fb09 220b 	mla	r2, r9, fp, r2
 800be7c:	4452      	add	r2, sl
 800be7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be82:	f84c 3b04 	str.w	r3, [ip], #4
 800be86:	f857 3b04 	ldr.w	r3, [r7], #4
 800be8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be8e:	f8bc 3000 	ldrh.w	r3, [ip]
 800be92:	42bd      	cmp	r5, r7
 800be94:	fb09 330a 	mla	r3, r9, sl, r3
 800be98:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800be9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bea0:	d8e5      	bhi.n	800be6e <__multiply+0xfa>
 800bea2:	9a01      	ldr	r2, [sp, #4]
 800bea4:	50a3      	str	r3, [r4, r2]
 800bea6:	3404      	adds	r4, #4
 800bea8:	e79f      	b.n	800bdea <__multiply+0x76>
 800beaa:	3e01      	subs	r6, #1
 800beac:	e7a1      	b.n	800bdf2 <__multiply+0x7e>
 800beae:	bf00      	nop
 800beb0:	0800cfda 	.word	0x0800cfda
 800beb4:	0800d04b 	.word	0x0800d04b

0800beb8 <__pow5mult>:
 800beb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bebc:	4615      	mov	r5, r2
 800bebe:	f012 0203 	ands.w	r2, r2, #3
 800bec2:	4607      	mov	r7, r0
 800bec4:	460e      	mov	r6, r1
 800bec6:	d007      	beq.n	800bed8 <__pow5mult+0x20>
 800bec8:	4c25      	ldr	r4, [pc, #148]	@ (800bf60 <__pow5mult+0xa8>)
 800beca:	3a01      	subs	r2, #1
 800becc:	2300      	movs	r3, #0
 800bece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bed2:	f7ff fe5d 	bl	800bb90 <__multadd>
 800bed6:	4606      	mov	r6, r0
 800bed8:	10ad      	asrs	r5, r5, #2
 800beda:	d03d      	beq.n	800bf58 <__pow5mult+0xa0>
 800bedc:	69fc      	ldr	r4, [r7, #28]
 800bede:	b97c      	cbnz	r4, 800bf00 <__pow5mult+0x48>
 800bee0:	2010      	movs	r0, #16
 800bee2:	f7ff fd2b 	bl	800b93c <malloc>
 800bee6:	4602      	mov	r2, r0
 800bee8:	61f8      	str	r0, [r7, #28]
 800beea:	b928      	cbnz	r0, 800bef8 <__pow5mult+0x40>
 800beec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bef0:	4b1c      	ldr	r3, [pc, #112]	@ (800bf64 <__pow5mult+0xac>)
 800bef2:	481d      	ldr	r0, [pc, #116]	@ (800bf68 <__pow5mult+0xb0>)
 800bef4:	f000 fcc0 	bl	800c878 <__assert_func>
 800bef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800befc:	6004      	str	r4, [r0, #0]
 800befe:	60c4      	str	r4, [r0, #12]
 800bf00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bf04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf08:	b94c      	cbnz	r4, 800bf1e <__pow5mult+0x66>
 800bf0a:	f240 2171 	movw	r1, #625	@ 0x271
 800bf0e:	4638      	mov	r0, r7
 800bf10:	f7ff ff1a 	bl	800bd48 <__i2b>
 800bf14:	2300      	movs	r3, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf1c:	6003      	str	r3, [r0, #0]
 800bf1e:	f04f 0900 	mov.w	r9, #0
 800bf22:	07eb      	lsls	r3, r5, #31
 800bf24:	d50a      	bpl.n	800bf3c <__pow5mult+0x84>
 800bf26:	4631      	mov	r1, r6
 800bf28:	4622      	mov	r2, r4
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	f7ff ff22 	bl	800bd74 <__multiply>
 800bf30:	4680      	mov	r8, r0
 800bf32:	4631      	mov	r1, r6
 800bf34:	4638      	mov	r0, r7
 800bf36:	f7ff fe09 	bl	800bb4c <_Bfree>
 800bf3a:	4646      	mov	r6, r8
 800bf3c:	106d      	asrs	r5, r5, #1
 800bf3e:	d00b      	beq.n	800bf58 <__pow5mult+0xa0>
 800bf40:	6820      	ldr	r0, [r4, #0]
 800bf42:	b938      	cbnz	r0, 800bf54 <__pow5mult+0x9c>
 800bf44:	4622      	mov	r2, r4
 800bf46:	4621      	mov	r1, r4
 800bf48:	4638      	mov	r0, r7
 800bf4a:	f7ff ff13 	bl	800bd74 <__multiply>
 800bf4e:	6020      	str	r0, [r4, #0]
 800bf50:	f8c0 9000 	str.w	r9, [r0]
 800bf54:	4604      	mov	r4, r0
 800bf56:	e7e4      	b.n	800bf22 <__pow5mult+0x6a>
 800bf58:	4630      	mov	r0, r6
 800bf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf5e:	bf00      	nop
 800bf60:	0800d24c 	.word	0x0800d24c
 800bf64:	0800cf6b 	.word	0x0800cf6b
 800bf68:	0800d04b 	.word	0x0800d04b

0800bf6c <__lshift>:
 800bf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf70:	460c      	mov	r4, r1
 800bf72:	4607      	mov	r7, r0
 800bf74:	4691      	mov	r9, r2
 800bf76:	6923      	ldr	r3, [r4, #16]
 800bf78:	6849      	ldr	r1, [r1, #4]
 800bf7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf7e:	68a3      	ldr	r3, [r4, #8]
 800bf80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf84:	f108 0601 	add.w	r6, r8, #1
 800bf88:	42b3      	cmp	r3, r6
 800bf8a:	db0b      	blt.n	800bfa4 <__lshift+0x38>
 800bf8c:	4638      	mov	r0, r7
 800bf8e:	f7ff fd9d 	bl	800bacc <_Balloc>
 800bf92:	4605      	mov	r5, r0
 800bf94:	b948      	cbnz	r0, 800bfaa <__lshift+0x3e>
 800bf96:	4602      	mov	r2, r0
 800bf98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bf9c:	4b27      	ldr	r3, [pc, #156]	@ (800c03c <__lshift+0xd0>)
 800bf9e:	4828      	ldr	r0, [pc, #160]	@ (800c040 <__lshift+0xd4>)
 800bfa0:	f000 fc6a 	bl	800c878 <__assert_func>
 800bfa4:	3101      	adds	r1, #1
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	e7ee      	b.n	800bf88 <__lshift+0x1c>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f100 0114 	add.w	r1, r0, #20
 800bfb0:	f100 0210 	add.w	r2, r0, #16
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	4553      	cmp	r3, sl
 800bfb8:	db33      	blt.n	800c022 <__lshift+0xb6>
 800bfba:	6920      	ldr	r0, [r4, #16]
 800bfbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfc0:	f104 0314 	add.w	r3, r4, #20
 800bfc4:	f019 091f 	ands.w	r9, r9, #31
 800bfc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bfd0:	d02b      	beq.n	800c02a <__lshift+0xbe>
 800bfd2:	468a      	mov	sl, r1
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f1c9 0e20 	rsb	lr, r9, #32
 800bfda:	6818      	ldr	r0, [r3, #0]
 800bfdc:	fa00 f009 	lsl.w	r0, r0, r9
 800bfe0:	4310      	orrs	r0, r2
 800bfe2:	f84a 0b04 	str.w	r0, [sl], #4
 800bfe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfea:	459c      	cmp	ip, r3
 800bfec:	fa22 f20e 	lsr.w	r2, r2, lr
 800bff0:	d8f3      	bhi.n	800bfda <__lshift+0x6e>
 800bff2:	ebac 0304 	sub.w	r3, ip, r4
 800bff6:	3b15      	subs	r3, #21
 800bff8:	f023 0303 	bic.w	r3, r3, #3
 800bffc:	3304      	adds	r3, #4
 800bffe:	f104 0015 	add.w	r0, r4, #21
 800c002:	4560      	cmp	r0, ip
 800c004:	bf88      	it	hi
 800c006:	2304      	movhi	r3, #4
 800c008:	50ca      	str	r2, [r1, r3]
 800c00a:	b10a      	cbz	r2, 800c010 <__lshift+0xa4>
 800c00c:	f108 0602 	add.w	r6, r8, #2
 800c010:	3e01      	subs	r6, #1
 800c012:	4638      	mov	r0, r7
 800c014:	4621      	mov	r1, r4
 800c016:	612e      	str	r6, [r5, #16]
 800c018:	f7ff fd98 	bl	800bb4c <_Bfree>
 800c01c:	4628      	mov	r0, r5
 800c01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c022:	f842 0f04 	str.w	r0, [r2, #4]!
 800c026:	3301      	adds	r3, #1
 800c028:	e7c5      	b.n	800bfb6 <__lshift+0x4a>
 800c02a:	3904      	subs	r1, #4
 800c02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c030:	459c      	cmp	ip, r3
 800c032:	f841 2f04 	str.w	r2, [r1, #4]!
 800c036:	d8f9      	bhi.n	800c02c <__lshift+0xc0>
 800c038:	e7ea      	b.n	800c010 <__lshift+0xa4>
 800c03a:	bf00      	nop
 800c03c:	0800cfda 	.word	0x0800cfda
 800c040:	0800d04b 	.word	0x0800d04b

0800c044 <__mcmp>:
 800c044:	4603      	mov	r3, r0
 800c046:	690a      	ldr	r2, [r1, #16]
 800c048:	6900      	ldr	r0, [r0, #16]
 800c04a:	b530      	push	{r4, r5, lr}
 800c04c:	1a80      	subs	r0, r0, r2
 800c04e:	d10e      	bne.n	800c06e <__mcmp+0x2a>
 800c050:	3314      	adds	r3, #20
 800c052:	3114      	adds	r1, #20
 800c054:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c058:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c05c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c064:	4295      	cmp	r5, r2
 800c066:	d003      	beq.n	800c070 <__mcmp+0x2c>
 800c068:	d205      	bcs.n	800c076 <__mcmp+0x32>
 800c06a:	f04f 30ff 	mov.w	r0, #4294967295
 800c06e:	bd30      	pop	{r4, r5, pc}
 800c070:	42a3      	cmp	r3, r4
 800c072:	d3f3      	bcc.n	800c05c <__mcmp+0x18>
 800c074:	e7fb      	b.n	800c06e <__mcmp+0x2a>
 800c076:	2001      	movs	r0, #1
 800c078:	e7f9      	b.n	800c06e <__mcmp+0x2a>
	...

0800c07c <__mdiff>:
 800c07c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c080:	4689      	mov	r9, r1
 800c082:	4606      	mov	r6, r0
 800c084:	4611      	mov	r1, r2
 800c086:	4648      	mov	r0, r9
 800c088:	4614      	mov	r4, r2
 800c08a:	f7ff ffdb 	bl	800c044 <__mcmp>
 800c08e:	1e05      	subs	r5, r0, #0
 800c090:	d112      	bne.n	800c0b8 <__mdiff+0x3c>
 800c092:	4629      	mov	r1, r5
 800c094:	4630      	mov	r0, r6
 800c096:	f7ff fd19 	bl	800bacc <_Balloc>
 800c09a:	4602      	mov	r2, r0
 800c09c:	b928      	cbnz	r0, 800c0aa <__mdiff+0x2e>
 800c09e:	f240 2137 	movw	r1, #567	@ 0x237
 800c0a2:	4b3e      	ldr	r3, [pc, #248]	@ (800c19c <__mdiff+0x120>)
 800c0a4:	483e      	ldr	r0, [pc, #248]	@ (800c1a0 <__mdiff+0x124>)
 800c0a6:	f000 fbe7 	bl	800c878 <__assert_func>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0b0:	4610      	mov	r0, r2
 800c0b2:	b003      	add	sp, #12
 800c0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b8:	bfbc      	itt	lt
 800c0ba:	464b      	movlt	r3, r9
 800c0bc:	46a1      	movlt	r9, r4
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c0c4:	bfba      	itte	lt
 800c0c6:	461c      	movlt	r4, r3
 800c0c8:	2501      	movlt	r5, #1
 800c0ca:	2500      	movge	r5, #0
 800c0cc:	f7ff fcfe 	bl	800bacc <_Balloc>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	b918      	cbnz	r0, 800c0dc <__mdiff+0x60>
 800c0d4:	f240 2145 	movw	r1, #581	@ 0x245
 800c0d8:	4b30      	ldr	r3, [pc, #192]	@ (800c19c <__mdiff+0x120>)
 800c0da:	e7e3      	b.n	800c0a4 <__mdiff+0x28>
 800c0dc:	f100 0b14 	add.w	fp, r0, #20
 800c0e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c0e4:	f109 0310 	add.w	r3, r9, #16
 800c0e8:	60c5      	str	r5, [r0, #12]
 800c0ea:	f04f 0c00 	mov.w	ip, #0
 800c0ee:	f109 0514 	add.w	r5, r9, #20
 800c0f2:	46d9      	mov	r9, fp
 800c0f4:	6926      	ldr	r6, [r4, #16]
 800c0f6:	f104 0e14 	add.w	lr, r4, #20
 800c0fa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c0fe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c102:	9301      	str	r3, [sp, #4]
 800c104:	9b01      	ldr	r3, [sp, #4]
 800c106:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c10a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c10e:	b281      	uxth	r1, r0
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	fa1f f38a 	uxth.w	r3, sl
 800c116:	1a5b      	subs	r3, r3, r1
 800c118:	0c00      	lsrs	r0, r0, #16
 800c11a:	4463      	add	r3, ip
 800c11c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c120:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c124:	b29b      	uxth	r3, r3
 800c126:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c12a:	4576      	cmp	r6, lr
 800c12c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c130:	f849 3b04 	str.w	r3, [r9], #4
 800c134:	d8e6      	bhi.n	800c104 <__mdiff+0x88>
 800c136:	1b33      	subs	r3, r6, r4
 800c138:	3b15      	subs	r3, #21
 800c13a:	f023 0303 	bic.w	r3, r3, #3
 800c13e:	3415      	adds	r4, #21
 800c140:	3304      	adds	r3, #4
 800c142:	42a6      	cmp	r6, r4
 800c144:	bf38      	it	cc
 800c146:	2304      	movcc	r3, #4
 800c148:	441d      	add	r5, r3
 800c14a:	445b      	add	r3, fp
 800c14c:	461e      	mov	r6, r3
 800c14e:	462c      	mov	r4, r5
 800c150:	4544      	cmp	r4, r8
 800c152:	d30e      	bcc.n	800c172 <__mdiff+0xf6>
 800c154:	f108 0103 	add.w	r1, r8, #3
 800c158:	1b49      	subs	r1, r1, r5
 800c15a:	f021 0103 	bic.w	r1, r1, #3
 800c15e:	3d03      	subs	r5, #3
 800c160:	45a8      	cmp	r8, r5
 800c162:	bf38      	it	cc
 800c164:	2100      	movcc	r1, #0
 800c166:	440b      	add	r3, r1
 800c168:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c16c:	b199      	cbz	r1, 800c196 <__mdiff+0x11a>
 800c16e:	6117      	str	r7, [r2, #16]
 800c170:	e79e      	b.n	800c0b0 <__mdiff+0x34>
 800c172:	46e6      	mov	lr, ip
 800c174:	f854 1b04 	ldr.w	r1, [r4], #4
 800c178:	fa1f fc81 	uxth.w	ip, r1
 800c17c:	44f4      	add	ip, lr
 800c17e:	0c08      	lsrs	r0, r1, #16
 800c180:	4471      	add	r1, lr
 800c182:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c186:	b289      	uxth	r1, r1
 800c188:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c18c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c190:	f846 1b04 	str.w	r1, [r6], #4
 800c194:	e7dc      	b.n	800c150 <__mdiff+0xd4>
 800c196:	3f01      	subs	r7, #1
 800c198:	e7e6      	b.n	800c168 <__mdiff+0xec>
 800c19a:	bf00      	nop
 800c19c:	0800cfda 	.word	0x0800cfda
 800c1a0:	0800d04b 	.word	0x0800d04b

0800c1a4 <__ulp>:
 800c1a4:	4b0e      	ldr	r3, [pc, #56]	@ (800c1e0 <__ulp+0x3c>)
 800c1a6:	400b      	ands	r3, r1
 800c1a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	dc08      	bgt.n	800c1c2 <__ulp+0x1e>
 800c1b0:	425b      	negs	r3, r3
 800c1b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c1b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c1ba:	da04      	bge.n	800c1c6 <__ulp+0x22>
 800c1bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c1c0:	4113      	asrs	r3, r2
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	e008      	b.n	800c1d8 <__ulp+0x34>
 800c1c6:	f1a2 0314 	sub.w	r3, r2, #20
 800c1ca:	2b1e      	cmp	r3, #30
 800c1cc:	bfd6      	itet	le
 800c1ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c1d2:	2201      	movgt	r2, #1
 800c1d4:	40da      	lsrle	r2, r3
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4610      	mov	r0, r2
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	7ff00000 	.word	0x7ff00000

0800c1e4 <__b2d>:
 800c1e4:	6902      	ldr	r2, [r0, #16]
 800c1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e8:	f100 0614 	add.w	r6, r0, #20
 800c1ec:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c1f0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800c1f4:	4f1e      	ldr	r7, [pc, #120]	@ (800c270 <__b2d+0x8c>)
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f7ff fd5a 	bl	800bcb0 <__hi0bits>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	f1c0 0020 	rsb	r0, r0, #32
 800c202:	2b0a      	cmp	r3, #10
 800c204:	f1a2 0504 	sub.w	r5, r2, #4
 800c208:	6008      	str	r0, [r1, #0]
 800c20a:	dc12      	bgt.n	800c232 <__b2d+0x4e>
 800c20c:	42ae      	cmp	r6, r5
 800c20e:	bf2c      	ite	cs
 800c210:	2200      	movcs	r2, #0
 800c212:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c216:	f1c3 0c0b 	rsb	ip, r3, #11
 800c21a:	3315      	adds	r3, #21
 800c21c:	fa24 fe0c 	lsr.w	lr, r4, ip
 800c220:	fa04 f303 	lsl.w	r3, r4, r3
 800c224:	fa22 f20c 	lsr.w	r2, r2, ip
 800c228:	ea4e 0107 	orr.w	r1, lr, r7
 800c22c:	431a      	orrs	r2, r3
 800c22e:	4610      	mov	r0, r2
 800c230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c232:	42ae      	cmp	r6, r5
 800c234:	bf36      	itet	cc
 800c236:	f1a2 0508 	subcc.w	r5, r2, #8
 800c23a:	2200      	movcs	r2, #0
 800c23c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c240:	3b0b      	subs	r3, #11
 800c242:	d012      	beq.n	800c26a <__b2d+0x86>
 800c244:	f1c3 0720 	rsb	r7, r3, #32
 800c248:	fa22 f107 	lsr.w	r1, r2, r7
 800c24c:	409c      	lsls	r4, r3
 800c24e:	430c      	orrs	r4, r1
 800c250:	42b5      	cmp	r5, r6
 800c252:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800c256:	bf94      	ite	ls
 800c258:	2400      	movls	r4, #0
 800c25a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800c25e:	409a      	lsls	r2, r3
 800c260:	40fc      	lsrs	r4, r7
 800c262:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c266:	4322      	orrs	r2, r4
 800c268:	e7e1      	b.n	800c22e <__b2d+0x4a>
 800c26a:	ea44 0107 	orr.w	r1, r4, r7
 800c26e:	e7de      	b.n	800c22e <__b2d+0x4a>
 800c270:	3ff00000 	.word	0x3ff00000

0800c274 <__d2b>:
 800c274:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c278:	2101      	movs	r1, #1
 800c27a:	4690      	mov	r8, r2
 800c27c:	4699      	mov	r9, r3
 800c27e:	9e08      	ldr	r6, [sp, #32]
 800c280:	f7ff fc24 	bl	800bacc <_Balloc>
 800c284:	4604      	mov	r4, r0
 800c286:	b930      	cbnz	r0, 800c296 <__d2b+0x22>
 800c288:	4602      	mov	r2, r0
 800c28a:	f240 310f 	movw	r1, #783	@ 0x30f
 800c28e:	4b23      	ldr	r3, [pc, #140]	@ (800c31c <__d2b+0xa8>)
 800c290:	4823      	ldr	r0, [pc, #140]	@ (800c320 <__d2b+0xac>)
 800c292:	f000 faf1 	bl	800c878 <__assert_func>
 800c296:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c29a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c29e:	b10d      	cbz	r5, 800c2a4 <__d2b+0x30>
 800c2a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	f1b8 0300 	subs.w	r3, r8, #0
 800c2aa:	d024      	beq.n	800c2f6 <__d2b+0x82>
 800c2ac:	4668      	mov	r0, sp
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	f7ff fd1d 	bl	800bcee <__lo0bits>
 800c2b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c2b8:	b1d8      	cbz	r0, 800c2f2 <__d2b+0x7e>
 800c2ba:	f1c0 0320 	rsb	r3, r0, #32
 800c2be:	fa02 f303 	lsl.w	r3, r2, r3
 800c2c2:	430b      	orrs	r3, r1
 800c2c4:	40c2      	lsrs	r2, r0
 800c2c6:	6163      	str	r3, [r4, #20]
 800c2c8:	9201      	str	r2, [sp, #4]
 800c2ca:	9b01      	ldr	r3, [sp, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	bf0c      	ite	eq
 800c2d0:	2201      	moveq	r2, #1
 800c2d2:	2202      	movne	r2, #2
 800c2d4:	61a3      	str	r3, [r4, #24]
 800c2d6:	6122      	str	r2, [r4, #16]
 800c2d8:	b1ad      	cbz	r5, 800c306 <__d2b+0x92>
 800c2da:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c2de:	4405      	add	r5, r0
 800c2e0:	6035      	str	r5, [r6, #0]
 800c2e2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e8:	6018      	str	r0, [r3, #0]
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	b002      	add	sp, #8
 800c2ee:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c2f2:	6161      	str	r1, [r4, #20]
 800c2f4:	e7e9      	b.n	800c2ca <__d2b+0x56>
 800c2f6:	a801      	add	r0, sp, #4
 800c2f8:	f7ff fcf9 	bl	800bcee <__lo0bits>
 800c2fc:	9b01      	ldr	r3, [sp, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	6163      	str	r3, [r4, #20]
 800c302:	3020      	adds	r0, #32
 800c304:	e7e7      	b.n	800c2d6 <__d2b+0x62>
 800c306:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c30a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c30e:	6030      	str	r0, [r6, #0]
 800c310:	6918      	ldr	r0, [r3, #16]
 800c312:	f7ff fccd 	bl	800bcb0 <__hi0bits>
 800c316:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c31a:	e7e4      	b.n	800c2e6 <__d2b+0x72>
 800c31c:	0800cfda 	.word	0x0800cfda
 800c320:	0800d04b 	.word	0x0800d04b

0800c324 <__ratio>:
 800c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c328:	b085      	sub	sp, #20
 800c32a:	e9cd 1000 	strd	r1, r0, [sp]
 800c32e:	a902      	add	r1, sp, #8
 800c330:	f7ff ff58 	bl	800c1e4 <__b2d>
 800c334:	468b      	mov	fp, r1
 800c336:	4606      	mov	r6, r0
 800c338:	460f      	mov	r7, r1
 800c33a:	9800      	ldr	r0, [sp, #0]
 800c33c:	a903      	add	r1, sp, #12
 800c33e:	f7ff ff51 	bl	800c1e4 <__b2d>
 800c342:	460d      	mov	r5, r1
 800c344:	9b01      	ldr	r3, [sp, #4]
 800c346:	4689      	mov	r9, r1
 800c348:	6919      	ldr	r1, [r3, #16]
 800c34a:	9b00      	ldr	r3, [sp, #0]
 800c34c:	4604      	mov	r4, r0
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	4630      	mov	r0, r6
 800c352:	1ac9      	subs	r1, r1, r3
 800c354:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c358:	1a9b      	subs	r3, r3, r2
 800c35a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c35e:	2b00      	cmp	r3, #0
 800c360:	bfcd      	iteet	gt
 800c362:	463a      	movgt	r2, r7
 800c364:	462a      	movle	r2, r5
 800c366:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c36a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c36e:	bfd8      	it	le
 800c370:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c374:	464b      	mov	r3, r9
 800c376:	4622      	mov	r2, r4
 800c378:	4659      	mov	r1, fp
 800c37a:	f7f4 f9d7 	bl	800072c <__aeabi_ddiv>
 800c37e:	b005      	add	sp, #20
 800c380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c384 <__copybits>:
 800c384:	3901      	subs	r1, #1
 800c386:	b570      	push	{r4, r5, r6, lr}
 800c388:	1149      	asrs	r1, r1, #5
 800c38a:	6914      	ldr	r4, [r2, #16]
 800c38c:	3101      	adds	r1, #1
 800c38e:	f102 0314 	add.w	r3, r2, #20
 800c392:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c396:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c39a:	1f05      	subs	r5, r0, #4
 800c39c:	42a3      	cmp	r3, r4
 800c39e:	d30c      	bcc.n	800c3ba <__copybits+0x36>
 800c3a0:	1aa3      	subs	r3, r4, r2
 800c3a2:	3b11      	subs	r3, #17
 800c3a4:	f023 0303 	bic.w	r3, r3, #3
 800c3a8:	3211      	adds	r2, #17
 800c3aa:	42a2      	cmp	r2, r4
 800c3ac:	bf88      	it	hi
 800c3ae:	2300      	movhi	r3, #0
 800c3b0:	4418      	add	r0, r3
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	4288      	cmp	r0, r1
 800c3b6:	d305      	bcc.n	800c3c4 <__copybits+0x40>
 800c3b8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800c3be:	f845 6f04 	str.w	r6, [r5, #4]!
 800c3c2:	e7eb      	b.n	800c39c <__copybits+0x18>
 800c3c4:	f840 3b04 	str.w	r3, [r0], #4
 800c3c8:	e7f4      	b.n	800c3b4 <__copybits+0x30>

0800c3ca <__any_on>:
 800c3ca:	f100 0214 	add.w	r2, r0, #20
 800c3ce:	6900      	ldr	r0, [r0, #16]
 800c3d0:	114b      	asrs	r3, r1, #5
 800c3d2:	4298      	cmp	r0, r3
 800c3d4:	b510      	push	{r4, lr}
 800c3d6:	db11      	blt.n	800c3fc <__any_on+0x32>
 800c3d8:	dd0a      	ble.n	800c3f0 <__any_on+0x26>
 800c3da:	f011 011f 	ands.w	r1, r1, #31
 800c3de:	d007      	beq.n	800c3f0 <__any_on+0x26>
 800c3e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c3e4:	fa24 f001 	lsr.w	r0, r4, r1
 800c3e8:	fa00 f101 	lsl.w	r1, r0, r1
 800c3ec:	428c      	cmp	r4, r1
 800c3ee:	d10b      	bne.n	800c408 <__any_on+0x3e>
 800c3f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d803      	bhi.n	800c400 <__any_on+0x36>
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	bd10      	pop	{r4, pc}
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	e7f7      	b.n	800c3f0 <__any_on+0x26>
 800c400:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c404:	2900      	cmp	r1, #0
 800c406:	d0f5      	beq.n	800c3f4 <__any_on+0x2a>
 800c408:	2001      	movs	r0, #1
 800c40a:	e7f6      	b.n	800c3fa <__any_on+0x30>

0800c40c <__ascii_wctomb>:
 800c40c:	4603      	mov	r3, r0
 800c40e:	4608      	mov	r0, r1
 800c410:	b141      	cbz	r1, 800c424 <__ascii_wctomb+0x18>
 800c412:	2aff      	cmp	r2, #255	@ 0xff
 800c414:	d904      	bls.n	800c420 <__ascii_wctomb+0x14>
 800c416:	228a      	movs	r2, #138	@ 0x8a
 800c418:	f04f 30ff 	mov.w	r0, #4294967295
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	4770      	bx	lr
 800c420:	2001      	movs	r0, #1
 800c422:	700a      	strb	r2, [r1, #0]
 800c424:	4770      	bx	lr

0800c426 <__ssputs_r>:
 800c426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c42a:	461f      	mov	r7, r3
 800c42c:	688e      	ldr	r6, [r1, #8]
 800c42e:	4682      	mov	sl, r0
 800c430:	42be      	cmp	r6, r7
 800c432:	460c      	mov	r4, r1
 800c434:	4690      	mov	r8, r2
 800c436:	680b      	ldr	r3, [r1, #0]
 800c438:	d82d      	bhi.n	800c496 <__ssputs_r+0x70>
 800c43a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c43e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c442:	d026      	beq.n	800c492 <__ssputs_r+0x6c>
 800c444:	6965      	ldr	r5, [r4, #20]
 800c446:	6909      	ldr	r1, [r1, #16]
 800c448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c44c:	eba3 0901 	sub.w	r9, r3, r1
 800c450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c454:	1c7b      	adds	r3, r7, #1
 800c456:	444b      	add	r3, r9
 800c458:	106d      	asrs	r5, r5, #1
 800c45a:	429d      	cmp	r5, r3
 800c45c:	bf38      	it	cc
 800c45e:	461d      	movcc	r5, r3
 800c460:	0553      	lsls	r3, r2, #21
 800c462:	d527      	bpl.n	800c4b4 <__ssputs_r+0x8e>
 800c464:	4629      	mov	r1, r5
 800c466:	f7ff fa93 	bl	800b990 <_malloc_r>
 800c46a:	4606      	mov	r6, r0
 800c46c:	b360      	cbz	r0, 800c4c8 <__ssputs_r+0xa2>
 800c46e:	464a      	mov	r2, r9
 800c470:	6921      	ldr	r1, [r4, #16]
 800c472:	f7fe f86e 	bl	800a552 <memcpy>
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c47c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c480:	81a3      	strh	r3, [r4, #12]
 800c482:	6126      	str	r6, [r4, #16]
 800c484:	444e      	add	r6, r9
 800c486:	6026      	str	r6, [r4, #0]
 800c488:	463e      	mov	r6, r7
 800c48a:	6165      	str	r5, [r4, #20]
 800c48c:	eba5 0509 	sub.w	r5, r5, r9
 800c490:	60a5      	str	r5, [r4, #8]
 800c492:	42be      	cmp	r6, r7
 800c494:	d900      	bls.n	800c498 <__ssputs_r+0x72>
 800c496:	463e      	mov	r6, r7
 800c498:	4632      	mov	r2, r6
 800c49a:	4641      	mov	r1, r8
 800c49c:	6820      	ldr	r0, [r4, #0]
 800c49e:	f000 f9c1 	bl	800c824 <memmove>
 800c4a2:	2000      	movs	r0, #0
 800c4a4:	68a3      	ldr	r3, [r4, #8]
 800c4a6:	1b9b      	subs	r3, r3, r6
 800c4a8:	60a3      	str	r3, [r4, #8]
 800c4aa:	6823      	ldr	r3, [r4, #0]
 800c4ac:	4433      	add	r3, r6
 800c4ae:	6023      	str	r3, [r4, #0]
 800c4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b4:	462a      	mov	r2, r5
 800c4b6:	f000 fa11 	bl	800c8dc <_realloc_r>
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d1e0      	bne.n	800c482 <__ssputs_r+0x5c>
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	6921      	ldr	r1, [r4, #16]
 800c4c4:	f7fe feb8 	bl	800b238 <_free_r>
 800c4c8:	230c      	movs	r3, #12
 800c4ca:	f8ca 3000 	str.w	r3, [sl]
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4d8:	81a3      	strh	r3, [r4, #12]
 800c4da:	e7e9      	b.n	800c4b0 <__ssputs_r+0x8a>

0800c4dc <_svfiprintf_r>:
 800c4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e0:	4698      	mov	r8, r3
 800c4e2:	898b      	ldrh	r3, [r1, #12]
 800c4e4:	4607      	mov	r7, r0
 800c4e6:	061b      	lsls	r3, r3, #24
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	4614      	mov	r4, r2
 800c4ec:	b09d      	sub	sp, #116	@ 0x74
 800c4ee:	d510      	bpl.n	800c512 <_svfiprintf_r+0x36>
 800c4f0:	690b      	ldr	r3, [r1, #16]
 800c4f2:	b973      	cbnz	r3, 800c512 <_svfiprintf_r+0x36>
 800c4f4:	2140      	movs	r1, #64	@ 0x40
 800c4f6:	f7ff fa4b 	bl	800b990 <_malloc_r>
 800c4fa:	6028      	str	r0, [r5, #0]
 800c4fc:	6128      	str	r0, [r5, #16]
 800c4fe:	b930      	cbnz	r0, 800c50e <_svfiprintf_r+0x32>
 800c500:	230c      	movs	r3, #12
 800c502:	603b      	str	r3, [r7, #0]
 800c504:	f04f 30ff 	mov.w	r0, #4294967295
 800c508:	b01d      	add	sp, #116	@ 0x74
 800c50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50e:	2340      	movs	r3, #64	@ 0x40
 800c510:	616b      	str	r3, [r5, #20]
 800c512:	2300      	movs	r3, #0
 800c514:	9309      	str	r3, [sp, #36]	@ 0x24
 800c516:	2320      	movs	r3, #32
 800c518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c51c:	2330      	movs	r3, #48	@ 0x30
 800c51e:	f04f 0901 	mov.w	r9, #1
 800c522:	f8cd 800c 	str.w	r8, [sp, #12]
 800c526:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c6c0 <_svfiprintf_r+0x1e4>
 800c52a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c52e:	4623      	mov	r3, r4
 800c530:	469a      	mov	sl, r3
 800c532:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c536:	b10a      	cbz	r2, 800c53c <_svfiprintf_r+0x60>
 800c538:	2a25      	cmp	r2, #37	@ 0x25
 800c53a:	d1f9      	bne.n	800c530 <_svfiprintf_r+0x54>
 800c53c:	ebba 0b04 	subs.w	fp, sl, r4
 800c540:	d00b      	beq.n	800c55a <_svfiprintf_r+0x7e>
 800c542:	465b      	mov	r3, fp
 800c544:	4622      	mov	r2, r4
 800c546:	4629      	mov	r1, r5
 800c548:	4638      	mov	r0, r7
 800c54a:	f7ff ff6c 	bl	800c426 <__ssputs_r>
 800c54e:	3001      	adds	r0, #1
 800c550:	f000 80a7 	beq.w	800c6a2 <_svfiprintf_r+0x1c6>
 800c554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c556:	445a      	add	r2, fp
 800c558:	9209      	str	r2, [sp, #36]	@ 0x24
 800c55a:	f89a 3000 	ldrb.w	r3, [sl]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f000 809f 	beq.w	800c6a2 <_svfiprintf_r+0x1c6>
 800c564:	2300      	movs	r3, #0
 800c566:	f04f 32ff 	mov.w	r2, #4294967295
 800c56a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c56e:	f10a 0a01 	add.w	sl, sl, #1
 800c572:	9304      	str	r3, [sp, #16]
 800c574:	9307      	str	r3, [sp, #28]
 800c576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c57a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c57c:	4654      	mov	r4, sl
 800c57e:	2205      	movs	r2, #5
 800c580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c584:	484e      	ldr	r0, [pc, #312]	@ (800c6c0 <_svfiprintf_r+0x1e4>)
 800c586:	f7fd ffd6 	bl	800a536 <memchr>
 800c58a:	9a04      	ldr	r2, [sp, #16]
 800c58c:	b9d8      	cbnz	r0, 800c5c6 <_svfiprintf_r+0xea>
 800c58e:	06d0      	lsls	r0, r2, #27
 800c590:	bf44      	itt	mi
 800c592:	2320      	movmi	r3, #32
 800c594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c598:	0711      	lsls	r1, r2, #28
 800c59a:	bf44      	itt	mi
 800c59c:	232b      	movmi	r3, #43	@ 0x2b
 800c59e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5a8:	d015      	beq.n	800c5d6 <_svfiprintf_r+0xfa>
 800c5aa:	4654      	mov	r4, sl
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	f04f 0c0a 	mov.w	ip, #10
 800c5b2:	9a07      	ldr	r2, [sp, #28]
 800c5b4:	4621      	mov	r1, r4
 800c5b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5ba:	3b30      	subs	r3, #48	@ 0x30
 800c5bc:	2b09      	cmp	r3, #9
 800c5be:	d94b      	bls.n	800c658 <_svfiprintf_r+0x17c>
 800c5c0:	b1b0      	cbz	r0, 800c5f0 <_svfiprintf_r+0x114>
 800c5c2:	9207      	str	r2, [sp, #28]
 800c5c4:	e014      	b.n	800c5f0 <_svfiprintf_r+0x114>
 800c5c6:	eba0 0308 	sub.w	r3, r0, r8
 800c5ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	46a2      	mov	sl, r4
 800c5d2:	9304      	str	r3, [sp, #16]
 800c5d4:	e7d2      	b.n	800c57c <_svfiprintf_r+0xa0>
 800c5d6:	9b03      	ldr	r3, [sp, #12]
 800c5d8:	1d19      	adds	r1, r3, #4
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	9103      	str	r1, [sp, #12]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	bfbb      	ittet	lt
 800c5e2:	425b      	neglt	r3, r3
 800c5e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c5e8:	9307      	strge	r3, [sp, #28]
 800c5ea:	9307      	strlt	r3, [sp, #28]
 800c5ec:	bfb8      	it	lt
 800c5ee:	9204      	strlt	r2, [sp, #16]
 800c5f0:	7823      	ldrb	r3, [r4, #0]
 800c5f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5f4:	d10a      	bne.n	800c60c <_svfiprintf_r+0x130>
 800c5f6:	7863      	ldrb	r3, [r4, #1]
 800c5f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5fa:	d132      	bne.n	800c662 <_svfiprintf_r+0x186>
 800c5fc:	9b03      	ldr	r3, [sp, #12]
 800c5fe:	3402      	adds	r4, #2
 800c600:	1d1a      	adds	r2, r3, #4
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	9203      	str	r2, [sp, #12]
 800c606:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c60a:	9305      	str	r3, [sp, #20]
 800c60c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c6c4 <_svfiprintf_r+0x1e8>
 800c610:	2203      	movs	r2, #3
 800c612:	4650      	mov	r0, sl
 800c614:	7821      	ldrb	r1, [r4, #0]
 800c616:	f7fd ff8e 	bl	800a536 <memchr>
 800c61a:	b138      	cbz	r0, 800c62c <_svfiprintf_r+0x150>
 800c61c:	2240      	movs	r2, #64	@ 0x40
 800c61e:	9b04      	ldr	r3, [sp, #16]
 800c620:	eba0 000a 	sub.w	r0, r0, sl
 800c624:	4082      	lsls	r2, r0
 800c626:	4313      	orrs	r3, r2
 800c628:	3401      	adds	r4, #1
 800c62a:	9304      	str	r3, [sp, #16]
 800c62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c630:	2206      	movs	r2, #6
 800c632:	4825      	ldr	r0, [pc, #148]	@ (800c6c8 <_svfiprintf_r+0x1ec>)
 800c634:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c638:	f7fd ff7d 	bl	800a536 <memchr>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d036      	beq.n	800c6ae <_svfiprintf_r+0x1d2>
 800c640:	4b22      	ldr	r3, [pc, #136]	@ (800c6cc <_svfiprintf_r+0x1f0>)
 800c642:	bb1b      	cbnz	r3, 800c68c <_svfiprintf_r+0x1b0>
 800c644:	9b03      	ldr	r3, [sp, #12]
 800c646:	3307      	adds	r3, #7
 800c648:	f023 0307 	bic.w	r3, r3, #7
 800c64c:	3308      	adds	r3, #8
 800c64e:	9303      	str	r3, [sp, #12]
 800c650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c652:	4433      	add	r3, r6
 800c654:	9309      	str	r3, [sp, #36]	@ 0x24
 800c656:	e76a      	b.n	800c52e <_svfiprintf_r+0x52>
 800c658:	460c      	mov	r4, r1
 800c65a:	2001      	movs	r0, #1
 800c65c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c660:	e7a8      	b.n	800c5b4 <_svfiprintf_r+0xd8>
 800c662:	2300      	movs	r3, #0
 800c664:	f04f 0c0a 	mov.w	ip, #10
 800c668:	4619      	mov	r1, r3
 800c66a:	3401      	adds	r4, #1
 800c66c:	9305      	str	r3, [sp, #20]
 800c66e:	4620      	mov	r0, r4
 800c670:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c674:	3a30      	subs	r2, #48	@ 0x30
 800c676:	2a09      	cmp	r2, #9
 800c678:	d903      	bls.n	800c682 <_svfiprintf_r+0x1a6>
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d0c6      	beq.n	800c60c <_svfiprintf_r+0x130>
 800c67e:	9105      	str	r1, [sp, #20]
 800c680:	e7c4      	b.n	800c60c <_svfiprintf_r+0x130>
 800c682:	4604      	mov	r4, r0
 800c684:	2301      	movs	r3, #1
 800c686:	fb0c 2101 	mla	r1, ip, r1, r2
 800c68a:	e7f0      	b.n	800c66e <_svfiprintf_r+0x192>
 800c68c:	ab03      	add	r3, sp, #12
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	462a      	mov	r2, r5
 800c692:	4638      	mov	r0, r7
 800c694:	4b0e      	ldr	r3, [pc, #56]	@ (800c6d0 <_svfiprintf_r+0x1f4>)
 800c696:	a904      	add	r1, sp, #16
 800c698:	f7fd f9c4 	bl	8009a24 <_printf_float>
 800c69c:	1c42      	adds	r2, r0, #1
 800c69e:	4606      	mov	r6, r0
 800c6a0:	d1d6      	bne.n	800c650 <_svfiprintf_r+0x174>
 800c6a2:	89ab      	ldrh	r3, [r5, #12]
 800c6a4:	065b      	lsls	r3, r3, #25
 800c6a6:	f53f af2d 	bmi.w	800c504 <_svfiprintf_r+0x28>
 800c6aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6ac:	e72c      	b.n	800c508 <_svfiprintf_r+0x2c>
 800c6ae:	ab03      	add	r3, sp, #12
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	462a      	mov	r2, r5
 800c6b4:	4638      	mov	r0, r7
 800c6b6:	4b06      	ldr	r3, [pc, #24]	@ (800c6d0 <_svfiprintf_r+0x1f4>)
 800c6b8:	a904      	add	r1, sp, #16
 800c6ba:	f7fd fc51 	bl	8009f60 <_printf_i>
 800c6be:	e7ed      	b.n	800c69c <_svfiprintf_r+0x1c0>
 800c6c0:	0800d0a4 	.word	0x0800d0a4
 800c6c4:	0800d0aa 	.word	0x0800d0aa
 800c6c8:	0800d0ae 	.word	0x0800d0ae
 800c6cc:	08009a25 	.word	0x08009a25
 800c6d0:	0800c427 	.word	0x0800c427

0800c6d4 <__sflush_r>:
 800c6d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6da:	0716      	lsls	r6, r2, #28
 800c6dc:	4605      	mov	r5, r0
 800c6de:	460c      	mov	r4, r1
 800c6e0:	d454      	bmi.n	800c78c <__sflush_r+0xb8>
 800c6e2:	684b      	ldr	r3, [r1, #4]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	dc02      	bgt.n	800c6ee <__sflush_r+0x1a>
 800c6e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	dd48      	ble.n	800c780 <__sflush_r+0xac>
 800c6ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6f0:	2e00      	cmp	r6, #0
 800c6f2:	d045      	beq.n	800c780 <__sflush_r+0xac>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6fa:	682f      	ldr	r7, [r5, #0]
 800c6fc:	6a21      	ldr	r1, [r4, #32]
 800c6fe:	602b      	str	r3, [r5, #0]
 800c700:	d030      	beq.n	800c764 <__sflush_r+0x90>
 800c702:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c704:	89a3      	ldrh	r3, [r4, #12]
 800c706:	0759      	lsls	r1, r3, #29
 800c708:	d505      	bpl.n	800c716 <__sflush_r+0x42>
 800c70a:	6863      	ldr	r3, [r4, #4]
 800c70c:	1ad2      	subs	r2, r2, r3
 800c70e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c710:	b10b      	cbz	r3, 800c716 <__sflush_r+0x42>
 800c712:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c714:	1ad2      	subs	r2, r2, r3
 800c716:	2300      	movs	r3, #0
 800c718:	4628      	mov	r0, r5
 800c71a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c71c:	6a21      	ldr	r1, [r4, #32]
 800c71e:	47b0      	blx	r6
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	d106      	bne.n	800c734 <__sflush_r+0x60>
 800c726:	6829      	ldr	r1, [r5, #0]
 800c728:	291d      	cmp	r1, #29
 800c72a:	d82b      	bhi.n	800c784 <__sflush_r+0xb0>
 800c72c:	4a28      	ldr	r2, [pc, #160]	@ (800c7d0 <__sflush_r+0xfc>)
 800c72e:	40ca      	lsrs	r2, r1
 800c730:	07d6      	lsls	r6, r2, #31
 800c732:	d527      	bpl.n	800c784 <__sflush_r+0xb0>
 800c734:	2200      	movs	r2, #0
 800c736:	6062      	str	r2, [r4, #4]
 800c738:	6922      	ldr	r2, [r4, #16]
 800c73a:	04d9      	lsls	r1, r3, #19
 800c73c:	6022      	str	r2, [r4, #0]
 800c73e:	d504      	bpl.n	800c74a <__sflush_r+0x76>
 800c740:	1c42      	adds	r2, r0, #1
 800c742:	d101      	bne.n	800c748 <__sflush_r+0x74>
 800c744:	682b      	ldr	r3, [r5, #0]
 800c746:	b903      	cbnz	r3, 800c74a <__sflush_r+0x76>
 800c748:	6560      	str	r0, [r4, #84]	@ 0x54
 800c74a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c74c:	602f      	str	r7, [r5, #0]
 800c74e:	b1b9      	cbz	r1, 800c780 <__sflush_r+0xac>
 800c750:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c754:	4299      	cmp	r1, r3
 800c756:	d002      	beq.n	800c75e <__sflush_r+0x8a>
 800c758:	4628      	mov	r0, r5
 800c75a:	f7fe fd6d 	bl	800b238 <_free_r>
 800c75e:	2300      	movs	r3, #0
 800c760:	6363      	str	r3, [r4, #52]	@ 0x34
 800c762:	e00d      	b.n	800c780 <__sflush_r+0xac>
 800c764:	2301      	movs	r3, #1
 800c766:	4628      	mov	r0, r5
 800c768:	47b0      	blx	r6
 800c76a:	4602      	mov	r2, r0
 800c76c:	1c50      	adds	r0, r2, #1
 800c76e:	d1c9      	bne.n	800c704 <__sflush_r+0x30>
 800c770:	682b      	ldr	r3, [r5, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d0c6      	beq.n	800c704 <__sflush_r+0x30>
 800c776:	2b1d      	cmp	r3, #29
 800c778:	d001      	beq.n	800c77e <__sflush_r+0xaa>
 800c77a:	2b16      	cmp	r3, #22
 800c77c:	d11d      	bne.n	800c7ba <__sflush_r+0xe6>
 800c77e:	602f      	str	r7, [r5, #0]
 800c780:	2000      	movs	r0, #0
 800c782:	e021      	b.n	800c7c8 <__sflush_r+0xf4>
 800c784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c788:	b21b      	sxth	r3, r3
 800c78a:	e01a      	b.n	800c7c2 <__sflush_r+0xee>
 800c78c:	690f      	ldr	r7, [r1, #16]
 800c78e:	2f00      	cmp	r7, #0
 800c790:	d0f6      	beq.n	800c780 <__sflush_r+0xac>
 800c792:	0793      	lsls	r3, r2, #30
 800c794:	bf18      	it	ne
 800c796:	2300      	movne	r3, #0
 800c798:	680e      	ldr	r6, [r1, #0]
 800c79a:	bf08      	it	eq
 800c79c:	694b      	ldreq	r3, [r1, #20]
 800c79e:	1bf6      	subs	r6, r6, r7
 800c7a0:	600f      	str	r7, [r1, #0]
 800c7a2:	608b      	str	r3, [r1, #8]
 800c7a4:	2e00      	cmp	r6, #0
 800c7a6:	ddeb      	ble.n	800c780 <__sflush_r+0xac>
 800c7a8:	4633      	mov	r3, r6
 800c7aa:	463a      	mov	r2, r7
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	6a21      	ldr	r1, [r4, #32]
 800c7b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c7b4:	47e0      	blx	ip
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	dc07      	bgt.n	800c7ca <__sflush_r+0xf6>
 800c7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c6:	81a3      	strh	r3, [r4, #12]
 800c7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ca:	4407      	add	r7, r0
 800c7cc:	1a36      	subs	r6, r6, r0
 800c7ce:	e7e9      	b.n	800c7a4 <__sflush_r+0xd0>
 800c7d0:	20400001 	.word	0x20400001

0800c7d4 <_fflush_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	690b      	ldr	r3, [r1, #16]
 800c7d8:	4605      	mov	r5, r0
 800c7da:	460c      	mov	r4, r1
 800c7dc:	b913      	cbnz	r3, 800c7e4 <_fflush_r+0x10>
 800c7de:	2500      	movs	r5, #0
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	bd38      	pop	{r3, r4, r5, pc}
 800c7e4:	b118      	cbz	r0, 800c7ee <_fflush_r+0x1a>
 800c7e6:	6a03      	ldr	r3, [r0, #32]
 800c7e8:	b90b      	cbnz	r3, 800c7ee <_fflush_r+0x1a>
 800c7ea:	f7fd fd63 	bl	800a2b4 <__sinit>
 800c7ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d0f3      	beq.n	800c7de <_fflush_r+0xa>
 800c7f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7f8:	07d0      	lsls	r0, r2, #31
 800c7fa:	d404      	bmi.n	800c806 <_fflush_r+0x32>
 800c7fc:	0599      	lsls	r1, r3, #22
 800c7fe:	d402      	bmi.n	800c806 <_fflush_r+0x32>
 800c800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c802:	f7fd fe96 	bl	800a532 <__retarget_lock_acquire_recursive>
 800c806:	4628      	mov	r0, r5
 800c808:	4621      	mov	r1, r4
 800c80a:	f7ff ff63 	bl	800c6d4 <__sflush_r>
 800c80e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c810:	4605      	mov	r5, r0
 800c812:	07da      	lsls	r2, r3, #31
 800c814:	d4e4      	bmi.n	800c7e0 <_fflush_r+0xc>
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	059b      	lsls	r3, r3, #22
 800c81a:	d4e1      	bmi.n	800c7e0 <_fflush_r+0xc>
 800c81c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c81e:	f7fd fe89 	bl	800a534 <__retarget_lock_release_recursive>
 800c822:	e7dd      	b.n	800c7e0 <_fflush_r+0xc>

0800c824 <memmove>:
 800c824:	4288      	cmp	r0, r1
 800c826:	b510      	push	{r4, lr}
 800c828:	eb01 0402 	add.w	r4, r1, r2
 800c82c:	d902      	bls.n	800c834 <memmove+0x10>
 800c82e:	4284      	cmp	r4, r0
 800c830:	4623      	mov	r3, r4
 800c832:	d807      	bhi.n	800c844 <memmove+0x20>
 800c834:	1e43      	subs	r3, r0, #1
 800c836:	42a1      	cmp	r1, r4
 800c838:	d008      	beq.n	800c84c <memmove+0x28>
 800c83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c83e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c842:	e7f8      	b.n	800c836 <memmove+0x12>
 800c844:	4601      	mov	r1, r0
 800c846:	4402      	add	r2, r0
 800c848:	428a      	cmp	r2, r1
 800c84a:	d100      	bne.n	800c84e <memmove+0x2a>
 800c84c:	bd10      	pop	{r4, pc}
 800c84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c856:	e7f7      	b.n	800c848 <memmove+0x24>

0800c858 <_sbrk_r>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	2300      	movs	r3, #0
 800c85c:	4d05      	ldr	r5, [pc, #20]	@ (800c874 <_sbrk_r+0x1c>)
 800c85e:	4604      	mov	r4, r0
 800c860:	4608      	mov	r0, r1
 800c862:	602b      	str	r3, [r5, #0]
 800c864:	f7f6 fd56 	bl	8003314 <_sbrk>
 800c868:	1c43      	adds	r3, r0, #1
 800c86a:	d102      	bne.n	800c872 <_sbrk_r+0x1a>
 800c86c:	682b      	ldr	r3, [r5, #0]
 800c86e:	b103      	cbz	r3, 800c872 <_sbrk_r+0x1a>
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	bd38      	pop	{r3, r4, r5, pc}
 800c874:	20000d90 	.word	0x20000d90

0800c878 <__assert_func>:
 800c878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c87a:	4614      	mov	r4, r2
 800c87c:	461a      	mov	r2, r3
 800c87e:	4b09      	ldr	r3, [pc, #36]	@ (800c8a4 <__assert_func+0x2c>)
 800c880:	4605      	mov	r5, r0
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68d8      	ldr	r0, [r3, #12]
 800c886:	b14c      	cbz	r4, 800c89c <__assert_func+0x24>
 800c888:	4b07      	ldr	r3, [pc, #28]	@ (800c8a8 <__assert_func+0x30>)
 800c88a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c88e:	9100      	str	r1, [sp, #0]
 800c890:	462b      	mov	r3, r5
 800c892:	4906      	ldr	r1, [pc, #24]	@ (800c8ac <__assert_func+0x34>)
 800c894:	f000 f850 	bl	800c938 <fiprintf>
 800c898:	f000 f860 	bl	800c95c <abort>
 800c89c:	4b04      	ldr	r3, [pc, #16]	@ (800c8b0 <__assert_func+0x38>)
 800c89e:	461c      	mov	r4, r3
 800c8a0:	e7f3      	b.n	800c88a <__assert_func+0x12>
 800c8a2:	bf00      	nop
 800c8a4:	2000018c 	.word	0x2000018c
 800c8a8:	0800d0b5 	.word	0x0800d0b5
 800c8ac:	0800d0c2 	.word	0x0800d0c2
 800c8b0:	0800d0f0 	.word	0x0800d0f0

0800c8b4 <_calloc_r>:
 800c8b4:	b570      	push	{r4, r5, r6, lr}
 800c8b6:	fba1 5402 	umull	r5, r4, r1, r2
 800c8ba:	b934      	cbnz	r4, 800c8ca <_calloc_r+0x16>
 800c8bc:	4629      	mov	r1, r5
 800c8be:	f7ff f867 	bl	800b990 <_malloc_r>
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	b928      	cbnz	r0, 800c8d2 <_calloc_r+0x1e>
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ca:	220c      	movs	r2, #12
 800c8cc:	2600      	movs	r6, #0
 800c8ce:	6002      	str	r2, [r0, #0]
 800c8d0:	e7f9      	b.n	800c8c6 <_calloc_r+0x12>
 800c8d2:	462a      	mov	r2, r5
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	f7fd fd9c 	bl	800a412 <memset>
 800c8da:	e7f4      	b.n	800c8c6 <_calloc_r+0x12>

0800c8dc <_realloc_r>:
 800c8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e0:	4607      	mov	r7, r0
 800c8e2:	4614      	mov	r4, r2
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	b921      	cbnz	r1, 800c8f2 <_realloc_r+0x16>
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ee:	f7ff b84f 	b.w	800b990 <_malloc_r>
 800c8f2:	b92a      	cbnz	r2, 800c900 <_realloc_r+0x24>
 800c8f4:	f7fe fca0 	bl	800b238 <_free_r>
 800c8f8:	4625      	mov	r5, r4
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c900:	f000 f833 	bl	800c96a <_malloc_usable_size_r>
 800c904:	4284      	cmp	r4, r0
 800c906:	4606      	mov	r6, r0
 800c908:	d802      	bhi.n	800c910 <_realloc_r+0x34>
 800c90a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c90e:	d8f4      	bhi.n	800c8fa <_realloc_r+0x1e>
 800c910:	4621      	mov	r1, r4
 800c912:	4638      	mov	r0, r7
 800c914:	f7ff f83c 	bl	800b990 <_malloc_r>
 800c918:	4680      	mov	r8, r0
 800c91a:	b908      	cbnz	r0, 800c920 <_realloc_r+0x44>
 800c91c:	4645      	mov	r5, r8
 800c91e:	e7ec      	b.n	800c8fa <_realloc_r+0x1e>
 800c920:	42b4      	cmp	r4, r6
 800c922:	4622      	mov	r2, r4
 800c924:	4629      	mov	r1, r5
 800c926:	bf28      	it	cs
 800c928:	4632      	movcs	r2, r6
 800c92a:	f7fd fe12 	bl	800a552 <memcpy>
 800c92e:	4629      	mov	r1, r5
 800c930:	4638      	mov	r0, r7
 800c932:	f7fe fc81 	bl	800b238 <_free_r>
 800c936:	e7f1      	b.n	800c91c <_realloc_r+0x40>

0800c938 <fiprintf>:
 800c938:	b40e      	push	{r1, r2, r3}
 800c93a:	b503      	push	{r0, r1, lr}
 800c93c:	4601      	mov	r1, r0
 800c93e:	ab03      	add	r3, sp, #12
 800c940:	4805      	ldr	r0, [pc, #20]	@ (800c958 <fiprintf+0x20>)
 800c942:	f853 2b04 	ldr.w	r2, [r3], #4
 800c946:	6800      	ldr	r0, [r0, #0]
 800c948:	9301      	str	r3, [sp, #4]
 800c94a:	f000 f83d 	bl	800c9c8 <_vfiprintf_r>
 800c94e:	b002      	add	sp, #8
 800c950:	f85d eb04 	ldr.w	lr, [sp], #4
 800c954:	b003      	add	sp, #12
 800c956:	4770      	bx	lr
 800c958:	2000018c 	.word	0x2000018c

0800c95c <abort>:
 800c95c:	2006      	movs	r0, #6
 800c95e:	b508      	push	{r3, lr}
 800c960:	f000 fa06 	bl	800cd70 <raise>
 800c964:	2001      	movs	r0, #1
 800c966:	f7f6 fc60 	bl	800322a <_exit>

0800c96a <_malloc_usable_size_r>:
 800c96a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c96e:	1f18      	subs	r0, r3, #4
 800c970:	2b00      	cmp	r3, #0
 800c972:	bfbc      	itt	lt
 800c974:	580b      	ldrlt	r3, [r1, r0]
 800c976:	18c0      	addlt	r0, r0, r3
 800c978:	4770      	bx	lr

0800c97a <__sfputc_r>:
 800c97a:	6893      	ldr	r3, [r2, #8]
 800c97c:	b410      	push	{r4}
 800c97e:	3b01      	subs	r3, #1
 800c980:	2b00      	cmp	r3, #0
 800c982:	6093      	str	r3, [r2, #8]
 800c984:	da07      	bge.n	800c996 <__sfputc_r+0x1c>
 800c986:	6994      	ldr	r4, [r2, #24]
 800c988:	42a3      	cmp	r3, r4
 800c98a:	db01      	blt.n	800c990 <__sfputc_r+0x16>
 800c98c:	290a      	cmp	r1, #10
 800c98e:	d102      	bne.n	800c996 <__sfputc_r+0x1c>
 800c990:	bc10      	pop	{r4}
 800c992:	f000 b931 	b.w	800cbf8 <__swbuf_r>
 800c996:	6813      	ldr	r3, [r2, #0]
 800c998:	1c58      	adds	r0, r3, #1
 800c99a:	6010      	str	r0, [r2, #0]
 800c99c:	7019      	strb	r1, [r3, #0]
 800c99e:	4608      	mov	r0, r1
 800c9a0:	bc10      	pop	{r4}
 800c9a2:	4770      	bx	lr

0800c9a4 <__sfputs_r>:
 800c9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460f      	mov	r7, r1
 800c9aa:	4614      	mov	r4, r2
 800c9ac:	18d5      	adds	r5, r2, r3
 800c9ae:	42ac      	cmp	r4, r5
 800c9b0:	d101      	bne.n	800c9b6 <__sfputs_r+0x12>
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	e007      	b.n	800c9c6 <__sfputs_r+0x22>
 800c9b6:	463a      	mov	r2, r7
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9be:	f7ff ffdc 	bl	800c97a <__sfputc_r>
 800c9c2:	1c43      	adds	r3, r0, #1
 800c9c4:	d1f3      	bne.n	800c9ae <__sfputs_r+0xa>
 800c9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9c8 <_vfiprintf_r>:
 800c9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	460d      	mov	r5, r1
 800c9ce:	4614      	mov	r4, r2
 800c9d0:	4698      	mov	r8, r3
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	b09d      	sub	sp, #116	@ 0x74
 800c9d6:	b118      	cbz	r0, 800c9e0 <_vfiprintf_r+0x18>
 800c9d8:	6a03      	ldr	r3, [r0, #32]
 800c9da:	b90b      	cbnz	r3, 800c9e0 <_vfiprintf_r+0x18>
 800c9dc:	f7fd fc6a 	bl	800a2b4 <__sinit>
 800c9e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9e2:	07d9      	lsls	r1, r3, #31
 800c9e4:	d405      	bmi.n	800c9f2 <_vfiprintf_r+0x2a>
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	059a      	lsls	r2, r3, #22
 800c9ea:	d402      	bmi.n	800c9f2 <_vfiprintf_r+0x2a>
 800c9ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9ee:	f7fd fda0 	bl	800a532 <__retarget_lock_acquire_recursive>
 800c9f2:	89ab      	ldrh	r3, [r5, #12]
 800c9f4:	071b      	lsls	r3, r3, #28
 800c9f6:	d501      	bpl.n	800c9fc <_vfiprintf_r+0x34>
 800c9f8:	692b      	ldr	r3, [r5, #16]
 800c9fa:	b99b      	cbnz	r3, 800ca24 <_vfiprintf_r+0x5c>
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f000 f938 	bl	800cc74 <__swsetup_r>
 800ca04:	b170      	cbz	r0, 800ca24 <_vfiprintf_r+0x5c>
 800ca06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca08:	07dc      	lsls	r4, r3, #31
 800ca0a:	d504      	bpl.n	800ca16 <_vfiprintf_r+0x4e>
 800ca0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca10:	b01d      	add	sp, #116	@ 0x74
 800ca12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca16:	89ab      	ldrh	r3, [r5, #12]
 800ca18:	0598      	lsls	r0, r3, #22
 800ca1a:	d4f7      	bmi.n	800ca0c <_vfiprintf_r+0x44>
 800ca1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca1e:	f7fd fd89 	bl	800a534 <__retarget_lock_release_recursive>
 800ca22:	e7f3      	b.n	800ca0c <_vfiprintf_r+0x44>
 800ca24:	2300      	movs	r3, #0
 800ca26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca28:	2320      	movs	r3, #32
 800ca2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca2e:	2330      	movs	r3, #48	@ 0x30
 800ca30:	f04f 0901 	mov.w	r9, #1
 800ca34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca38:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cbe4 <_vfiprintf_r+0x21c>
 800ca3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca40:	4623      	mov	r3, r4
 800ca42:	469a      	mov	sl, r3
 800ca44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca48:	b10a      	cbz	r2, 800ca4e <_vfiprintf_r+0x86>
 800ca4a:	2a25      	cmp	r2, #37	@ 0x25
 800ca4c:	d1f9      	bne.n	800ca42 <_vfiprintf_r+0x7a>
 800ca4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca52:	d00b      	beq.n	800ca6c <_vfiprintf_r+0xa4>
 800ca54:	465b      	mov	r3, fp
 800ca56:	4622      	mov	r2, r4
 800ca58:	4629      	mov	r1, r5
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f7ff ffa2 	bl	800c9a4 <__sfputs_r>
 800ca60:	3001      	adds	r0, #1
 800ca62:	f000 80a7 	beq.w	800cbb4 <_vfiprintf_r+0x1ec>
 800ca66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca68:	445a      	add	r2, fp
 800ca6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 809f 	beq.w	800cbb4 <_vfiprintf_r+0x1ec>
 800ca76:	2300      	movs	r3, #0
 800ca78:	f04f 32ff 	mov.w	r2, #4294967295
 800ca7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca80:	f10a 0a01 	add.w	sl, sl, #1
 800ca84:	9304      	str	r3, [sp, #16]
 800ca86:	9307      	str	r3, [sp, #28]
 800ca88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca8e:	4654      	mov	r4, sl
 800ca90:	2205      	movs	r2, #5
 800ca92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca96:	4853      	ldr	r0, [pc, #332]	@ (800cbe4 <_vfiprintf_r+0x21c>)
 800ca98:	f7fd fd4d 	bl	800a536 <memchr>
 800ca9c:	9a04      	ldr	r2, [sp, #16]
 800ca9e:	b9d8      	cbnz	r0, 800cad8 <_vfiprintf_r+0x110>
 800caa0:	06d1      	lsls	r1, r2, #27
 800caa2:	bf44      	itt	mi
 800caa4:	2320      	movmi	r3, #32
 800caa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800caaa:	0713      	lsls	r3, r2, #28
 800caac:	bf44      	itt	mi
 800caae:	232b      	movmi	r3, #43	@ 0x2b
 800cab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cab4:	f89a 3000 	ldrb.w	r3, [sl]
 800cab8:	2b2a      	cmp	r3, #42	@ 0x2a
 800caba:	d015      	beq.n	800cae8 <_vfiprintf_r+0x120>
 800cabc:	4654      	mov	r4, sl
 800cabe:	2000      	movs	r0, #0
 800cac0:	f04f 0c0a 	mov.w	ip, #10
 800cac4:	9a07      	ldr	r2, [sp, #28]
 800cac6:	4621      	mov	r1, r4
 800cac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cacc:	3b30      	subs	r3, #48	@ 0x30
 800cace:	2b09      	cmp	r3, #9
 800cad0:	d94b      	bls.n	800cb6a <_vfiprintf_r+0x1a2>
 800cad2:	b1b0      	cbz	r0, 800cb02 <_vfiprintf_r+0x13a>
 800cad4:	9207      	str	r2, [sp, #28]
 800cad6:	e014      	b.n	800cb02 <_vfiprintf_r+0x13a>
 800cad8:	eba0 0308 	sub.w	r3, r0, r8
 800cadc:	fa09 f303 	lsl.w	r3, r9, r3
 800cae0:	4313      	orrs	r3, r2
 800cae2:	46a2      	mov	sl, r4
 800cae4:	9304      	str	r3, [sp, #16]
 800cae6:	e7d2      	b.n	800ca8e <_vfiprintf_r+0xc6>
 800cae8:	9b03      	ldr	r3, [sp, #12]
 800caea:	1d19      	adds	r1, r3, #4
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	9103      	str	r1, [sp, #12]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	bfbb      	ittet	lt
 800caf4:	425b      	neglt	r3, r3
 800caf6:	f042 0202 	orrlt.w	r2, r2, #2
 800cafa:	9307      	strge	r3, [sp, #28]
 800cafc:	9307      	strlt	r3, [sp, #28]
 800cafe:	bfb8      	it	lt
 800cb00:	9204      	strlt	r2, [sp, #16]
 800cb02:	7823      	ldrb	r3, [r4, #0]
 800cb04:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb06:	d10a      	bne.n	800cb1e <_vfiprintf_r+0x156>
 800cb08:	7863      	ldrb	r3, [r4, #1]
 800cb0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb0c:	d132      	bne.n	800cb74 <_vfiprintf_r+0x1ac>
 800cb0e:	9b03      	ldr	r3, [sp, #12]
 800cb10:	3402      	adds	r4, #2
 800cb12:	1d1a      	adds	r2, r3, #4
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	9203      	str	r2, [sp, #12]
 800cb18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb1c:	9305      	str	r3, [sp, #20]
 800cb1e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cbe8 <_vfiprintf_r+0x220>
 800cb22:	2203      	movs	r2, #3
 800cb24:	4650      	mov	r0, sl
 800cb26:	7821      	ldrb	r1, [r4, #0]
 800cb28:	f7fd fd05 	bl	800a536 <memchr>
 800cb2c:	b138      	cbz	r0, 800cb3e <_vfiprintf_r+0x176>
 800cb2e:	2240      	movs	r2, #64	@ 0x40
 800cb30:	9b04      	ldr	r3, [sp, #16]
 800cb32:	eba0 000a 	sub.w	r0, r0, sl
 800cb36:	4082      	lsls	r2, r0
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	3401      	adds	r4, #1
 800cb3c:	9304      	str	r3, [sp, #16]
 800cb3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb42:	2206      	movs	r2, #6
 800cb44:	4829      	ldr	r0, [pc, #164]	@ (800cbec <_vfiprintf_r+0x224>)
 800cb46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb4a:	f7fd fcf4 	bl	800a536 <memchr>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d03f      	beq.n	800cbd2 <_vfiprintf_r+0x20a>
 800cb52:	4b27      	ldr	r3, [pc, #156]	@ (800cbf0 <_vfiprintf_r+0x228>)
 800cb54:	bb1b      	cbnz	r3, 800cb9e <_vfiprintf_r+0x1d6>
 800cb56:	9b03      	ldr	r3, [sp, #12]
 800cb58:	3307      	adds	r3, #7
 800cb5a:	f023 0307 	bic.w	r3, r3, #7
 800cb5e:	3308      	adds	r3, #8
 800cb60:	9303      	str	r3, [sp, #12]
 800cb62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb64:	443b      	add	r3, r7
 800cb66:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb68:	e76a      	b.n	800ca40 <_vfiprintf_r+0x78>
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	2001      	movs	r0, #1
 800cb6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb72:	e7a8      	b.n	800cac6 <_vfiprintf_r+0xfe>
 800cb74:	2300      	movs	r3, #0
 800cb76:	f04f 0c0a 	mov.w	ip, #10
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	3401      	adds	r4, #1
 800cb7e:	9305      	str	r3, [sp, #20]
 800cb80:	4620      	mov	r0, r4
 800cb82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb86:	3a30      	subs	r2, #48	@ 0x30
 800cb88:	2a09      	cmp	r2, #9
 800cb8a:	d903      	bls.n	800cb94 <_vfiprintf_r+0x1cc>
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d0c6      	beq.n	800cb1e <_vfiprintf_r+0x156>
 800cb90:	9105      	str	r1, [sp, #20]
 800cb92:	e7c4      	b.n	800cb1e <_vfiprintf_r+0x156>
 800cb94:	4604      	mov	r4, r0
 800cb96:	2301      	movs	r3, #1
 800cb98:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb9c:	e7f0      	b.n	800cb80 <_vfiprintf_r+0x1b8>
 800cb9e:	ab03      	add	r3, sp, #12
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	462a      	mov	r2, r5
 800cba4:	4630      	mov	r0, r6
 800cba6:	4b13      	ldr	r3, [pc, #76]	@ (800cbf4 <_vfiprintf_r+0x22c>)
 800cba8:	a904      	add	r1, sp, #16
 800cbaa:	f7fc ff3b 	bl	8009a24 <_printf_float>
 800cbae:	4607      	mov	r7, r0
 800cbb0:	1c78      	adds	r0, r7, #1
 800cbb2:	d1d6      	bne.n	800cb62 <_vfiprintf_r+0x19a>
 800cbb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbb6:	07d9      	lsls	r1, r3, #31
 800cbb8:	d405      	bmi.n	800cbc6 <_vfiprintf_r+0x1fe>
 800cbba:	89ab      	ldrh	r3, [r5, #12]
 800cbbc:	059a      	lsls	r2, r3, #22
 800cbbe:	d402      	bmi.n	800cbc6 <_vfiprintf_r+0x1fe>
 800cbc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbc2:	f7fd fcb7 	bl	800a534 <__retarget_lock_release_recursive>
 800cbc6:	89ab      	ldrh	r3, [r5, #12]
 800cbc8:	065b      	lsls	r3, r3, #25
 800cbca:	f53f af1f 	bmi.w	800ca0c <_vfiprintf_r+0x44>
 800cbce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbd0:	e71e      	b.n	800ca10 <_vfiprintf_r+0x48>
 800cbd2:	ab03      	add	r3, sp, #12
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	462a      	mov	r2, r5
 800cbd8:	4630      	mov	r0, r6
 800cbda:	4b06      	ldr	r3, [pc, #24]	@ (800cbf4 <_vfiprintf_r+0x22c>)
 800cbdc:	a904      	add	r1, sp, #16
 800cbde:	f7fd f9bf 	bl	8009f60 <_printf_i>
 800cbe2:	e7e4      	b.n	800cbae <_vfiprintf_r+0x1e6>
 800cbe4:	0800d0a4 	.word	0x0800d0a4
 800cbe8:	0800d0aa 	.word	0x0800d0aa
 800cbec:	0800d0ae 	.word	0x0800d0ae
 800cbf0:	08009a25 	.word	0x08009a25
 800cbf4:	0800c9a5 	.word	0x0800c9a5

0800cbf8 <__swbuf_r>:
 800cbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfa:	460e      	mov	r6, r1
 800cbfc:	4614      	mov	r4, r2
 800cbfe:	4605      	mov	r5, r0
 800cc00:	b118      	cbz	r0, 800cc0a <__swbuf_r+0x12>
 800cc02:	6a03      	ldr	r3, [r0, #32]
 800cc04:	b90b      	cbnz	r3, 800cc0a <__swbuf_r+0x12>
 800cc06:	f7fd fb55 	bl	800a2b4 <__sinit>
 800cc0a:	69a3      	ldr	r3, [r4, #24]
 800cc0c:	60a3      	str	r3, [r4, #8]
 800cc0e:	89a3      	ldrh	r3, [r4, #12]
 800cc10:	071a      	lsls	r2, r3, #28
 800cc12:	d501      	bpl.n	800cc18 <__swbuf_r+0x20>
 800cc14:	6923      	ldr	r3, [r4, #16]
 800cc16:	b943      	cbnz	r3, 800cc2a <__swbuf_r+0x32>
 800cc18:	4621      	mov	r1, r4
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f000 f82a 	bl	800cc74 <__swsetup_r>
 800cc20:	b118      	cbz	r0, 800cc2a <__swbuf_r+0x32>
 800cc22:	f04f 37ff 	mov.w	r7, #4294967295
 800cc26:	4638      	mov	r0, r7
 800cc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc2a:	6823      	ldr	r3, [r4, #0]
 800cc2c:	6922      	ldr	r2, [r4, #16]
 800cc2e:	b2f6      	uxtb	r6, r6
 800cc30:	1a98      	subs	r0, r3, r2
 800cc32:	6963      	ldr	r3, [r4, #20]
 800cc34:	4637      	mov	r7, r6
 800cc36:	4283      	cmp	r3, r0
 800cc38:	dc05      	bgt.n	800cc46 <__swbuf_r+0x4e>
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	f7ff fdc9 	bl	800c7d4 <_fflush_r>
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d1ed      	bne.n	800cc22 <__swbuf_r+0x2a>
 800cc46:	68a3      	ldr	r3, [r4, #8]
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	60a3      	str	r3, [r4, #8]
 800cc4c:	6823      	ldr	r3, [r4, #0]
 800cc4e:	1c5a      	adds	r2, r3, #1
 800cc50:	6022      	str	r2, [r4, #0]
 800cc52:	701e      	strb	r6, [r3, #0]
 800cc54:	6962      	ldr	r2, [r4, #20]
 800cc56:	1c43      	adds	r3, r0, #1
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d004      	beq.n	800cc66 <__swbuf_r+0x6e>
 800cc5c:	89a3      	ldrh	r3, [r4, #12]
 800cc5e:	07db      	lsls	r3, r3, #31
 800cc60:	d5e1      	bpl.n	800cc26 <__swbuf_r+0x2e>
 800cc62:	2e0a      	cmp	r6, #10
 800cc64:	d1df      	bne.n	800cc26 <__swbuf_r+0x2e>
 800cc66:	4621      	mov	r1, r4
 800cc68:	4628      	mov	r0, r5
 800cc6a:	f7ff fdb3 	bl	800c7d4 <_fflush_r>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d0d9      	beq.n	800cc26 <__swbuf_r+0x2e>
 800cc72:	e7d6      	b.n	800cc22 <__swbuf_r+0x2a>

0800cc74 <__swsetup_r>:
 800cc74:	b538      	push	{r3, r4, r5, lr}
 800cc76:	4b29      	ldr	r3, [pc, #164]	@ (800cd1c <__swsetup_r+0xa8>)
 800cc78:	4605      	mov	r5, r0
 800cc7a:	6818      	ldr	r0, [r3, #0]
 800cc7c:	460c      	mov	r4, r1
 800cc7e:	b118      	cbz	r0, 800cc88 <__swsetup_r+0x14>
 800cc80:	6a03      	ldr	r3, [r0, #32]
 800cc82:	b90b      	cbnz	r3, 800cc88 <__swsetup_r+0x14>
 800cc84:	f7fd fb16 	bl	800a2b4 <__sinit>
 800cc88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc8c:	0719      	lsls	r1, r3, #28
 800cc8e:	d422      	bmi.n	800ccd6 <__swsetup_r+0x62>
 800cc90:	06da      	lsls	r2, r3, #27
 800cc92:	d407      	bmi.n	800cca4 <__swsetup_r+0x30>
 800cc94:	2209      	movs	r2, #9
 800cc96:	602a      	str	r2, [r5, #0]
 800cc98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cca0:	81a3      	strh	r3, [r4, #12]
 800cca2:	e033      	b.n	800cd0c <__swsetup_r+0x98>
 800cca4:	0758      	lsls	r0, r3, #29
 800cca6:	d512      	bpl.n	800ccce <__swsetup_r+0x5a>
 800cca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccaa:	b141      	cbz	r1, 800ccbe <__swsetup_r+0x4a>
 800ccac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccb0:	4299      	cmp	r1, r3
 800ccb2:	d002      	beq.n	800ccba <__swsetup_r+0x46>
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	f7fe fabf 	bl	800b238 <_free_r>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccbe:	89a3      	ldrh	r3, [r4, #12]
 800ccc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ccc4:	81a3      	strh	r3, [r4, #12]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	6063      	str	r3, [r4, #4]
 800ccca:	6923      	ldr	r3, [r4, #16]
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	89a3      	ldrh	r3, [r4, #12]
 800ccd0:	f043 0308 	orr.w	r3, r3, #8
 800ccd4:	81a3      	strh	r3, [r4, #12]
 800ccd6:	6923      	ldr	r3, [r4, #16]
 800ccd8:	b94b      	cbnz	r3, 800ccee <__swsetup_r+0x7a>
 800ccda:	89a3      	ldrh	r3, [r4, #12]
 800ccdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cce4:	d003      	beq.n	800ccee <__swsetup_r+0x7a>
 800cce6:	4621      	mov	r1, r4
 800cce8:	4628      	mov	r0, r5
 800ccea:	f000 f882 	bl	800cdf2 <__smakebuf_r>
 800ccee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf2:	f013 0201 	ands.w	r2, r3, #1
 800ccf6:	d00a      	beq.n	800cd0e <__swsetup_r+0x9a>
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	60a2      	str	r2, [r4, #8]
 800ccfc:	6962      	ldr	r2, [r4, #20]
 800ccfe:	4252      	negs	r2, r2
 800cd00:	61a2      	str	r2, [r4, #24]
 800cd02:	6922      	ldr	r2, [r4, #16]
 800cd04:	b942      	cbnz	r2, 800cd18 <__swsetup_r+0xa4>
 800cd06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd0a:	d1c5      	bne.n	800cc98 <__swsetup_r+0x24>
 800cd0c:	bd38      	pop	{r3, r4, r5, pc}
 800cd0e:	0799      	lsls	r1, r3, #30
 800cd10:	bf58      	it	pl
 800cd12:	6962      	ldrpl	r2, [r4, #20]
 800cd14:	60a2      	str	r2, [r4, #8]
 800cd16:	e7f4      	b.n	800cd02 <__swsetup_r+0x8e>
 800cd18:	2000      	movs	r0, #0
 800cd1a:	e7f7      	b.n	800cd0c <__swsetup_r+0x98>
 800cd1c:	2000018c 	.word	0x2000018c

0800cd20 <_raise_r>:
 800cd20:	291f      	cmp	r1, #31
 800cd22:	b538      	push	{r3, r4, r5, lr}
 800cd24:	4605      	mov	r5, r0
 800cd26:	460c      	mov	r4, r1
 800cd28:	d904      	bls.n	800cd34 <_raise_r+0x14>
 800cd2a:	2316      	movs	r3, #22
 800cd2c:	6003      	str	r3, [r0, #0]
 800cd2e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd32:	bd38      	pop	{r3, r4, r5, pc}
 800cd34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cd36:	b112      	cbz	r2, 800cd3e <_raise_r+0x1e>
 800cd38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd3c:	b94b      	cbnz	r3, 800cd52 <_raise_r+0x32>
 800cd3e:	4628      	mov	r0, r5
 800cd40:	f000 f830 	bl	800cda4 <_getpid_r>
 800cd44:	4622      	mov	r2, r4
 800cd46:	4601      	mov	r1, r0
 800cd48:	4628      	mov	r0, r5
 800cd4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd4e:	f000 b817 	b.w	800cd80 <_kill_r>
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d00a      	beq.n	800cd6c <_raise_r+0x4c>
 800cd56:	1c59      	adds	r1, r3, #1
 800cd58:	d103      	bne.n	800cd62 <_raise_r+0x42>
 800cd5a:	2316      	movs	r3, #22
 800cd5c:	6003      	str	r3, [r0, #0]
 800cd5e:	2001      	movs	r0, #1
 800cd60:	e7e7      	b.n	800cd32 <_raise_r+0x12>
 800cd62:	2100      	movs	r1, #0
 800cd64:	4620      	mov	r0, r4
 800cd66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cd6a:	4798      	blx	r3
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	e7e0      	b.n	800cd32 <_raise_r+0x12>

0800cd70 <raise>:
 800cd70:	4b02      	ldr	r3, [pc, #8]	@ (800cd7c <raise+0xc>)
 800cd72:	4601      	mov	r1, r0
 800cd74:	6818      	ldr	r0, [r3, #0]
 800cd76:	f7ff bfd3 	b.w	800cd20 <_raise_r>
 800cd7a:	bf00      	nop
 800cd7c:	2000018c 	.word	0x2000018c

0800cd80 <_kill_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	2300      	movs	r3, #0
 800cd84:	4d06      	ldr	r5, [pc, #24]	@ (800cda0 <_kill_r+0x20>)
 800cd86:	4604      	mov	r4, r0
 800cd88:	4608      	mov	r0, r1
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	602b      	str	r3, [r5, #0]
 800cd8e:	f7f6 fa3c 	bl	800320a <_kill>
 800cd92:	1c43      	adds	r3, r0, #1
 800cd94:	d102      	bne.n	800cd9c <_kill_r+0x1c>
 800cd96:	682b      	ldr	r3, [r5, #0]
 800cd98:	b103      	cbz	r3, 800cd9c <_kill_r+0x1c>
 800cd9a:	6023      	str	r3, [r4, #0]
 800cd9c:	bd38      	pop	{r3, r4, r5, pc}
 800cd9e:	bf00      	nop
 800cda0:	20000d90 	.word	0x20000d90

0800cda4 <_getpid_r>:
 800cda4:	f7f6 ba2a 	b.w	80031fc <_getpid>

0800cda8 <__swhatbuf_r>:
 800cda8:	b570      	push	{r4, r5, r6, lr}
 800cdaa:	460c      	mov	r4, r1
 800cdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb0:	4615      	mov	r5, r2
 800cdb2:	2900      	cmp	r1, #0
 800cdb4:	461e      	mov	r6, r3
 800cdb6:	b096      	sub	sp, #88	@ 0x58
 800cdb8:	da0c      	bge.n	800cdd4 <__swhatbuf_r+0x2c>
 800cdba:	89a3      	ldrh	r3, [r4, #12]
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cdc2:	bf14      	ite	ne
 800cdc4:	2340      	movne	r3, #64	@ 0x40
 800cdc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cdca:	2000      	movs	r0, #0
 800cdcc:	6031      	str	r1, [r6, #0]
 800cdce:	602b      	str	r3, [r5, #0]
 800cdd0:	b016      	add	sp, #88	@ 0x58
 800cdd2:	bd70      	pop	{r4, r5, r6, pc}
 800cdd4:	466a      	mov	r2, sp
 800cdd6:	f000 f849 	bl	800ce6c <_fstat_r>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	dbed      	blt.n	800cdba <__swhatbuf_r+0x12>
 800cdde:	9901      	ldr	r1, [sp, #4]
 800cde0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cde4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cde8:	4259      	negs	r1, r3
 800cdea:	4159      	adcs	r1, r3
 800cdec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdf0:	e7eb      	b.n	800cdca <__swhatbuf_r+0x22>

0800cdf2 <__smakebuf_r>:
 800cdf2:	898b      	ldrh	r3, [r1, #12]
 800cdf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdf6:	079d      	lsls	r5, r3, #30
 800cdf8:	4606      	mov	r6, r0
 800cdfa:	460c      	mov	r4, r1
 800cdfc:	d507      	bpl.n	800ce0e <__smakebuf_r+0x1c>
 800cdfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce02:	6023      	str	r3, [r4, #0]
 800ce04:	6123      	str	r3, [r4, #16]
 800ce06:	2301      	movs	r3, #1
 800ce08:	6163      	str	r3, [r4, #20]
 800ce0a:	b003      	add	sp, #12
 800ce0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce0e:	466a      	mov	r2, sp
 800ce10:	ab01      	add	r3, sp, #4
 800ce12:	f7ff ffc9 	bl	800cda8 <__swhatbuf_r>
 800ce16:	9f00      	ldr	r7, [sp, #0]
 800ce18:	4605      	mov	r5, r0
 800ce1a:	4639      	mov	r1, r7
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f7fe fdb7 	bl	800b990 <_malloc_r>
 800ce22:	b948      	cbnz	r0, 800ce38 <__smakebuf_r+0x46>
 800ce24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce28:	059a      	lsls	r2, r3, #22
 800ce2a:	d4ee      	bmi.n	800ce0a <__smakebuf_r+0x18>
 800ce2c:	f023 0303 	bic.w	r3, r3, #3
 800ce30:	f043 0302 	orr.w	r3, r3, #2
 800ce34:	81a3      	strh	r3, [r4, #12]
 800ce36:	e7e2      	b.n	800cdfe <__smakebuf_r+0xc>
 800ce38:	89a3      	ldrh	r3, [r4, #12]
 800ce3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce42:	81a3      	strh	r3, [r4, #12]
 800ce44:	9b01      	ldr	r3, [sp, #4]
 800ce46:	6020      	str	r0, [r4, #0]
 800ce48:	b15b      	cbz	r3, 800ce62 <__smakebuf_r+0x70>
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce50:	f000 f81e 	bl	800ce90 <_isatty_r>
 800ce54:	b128      	cbz	r0, 800ce62 <__smakebuf_r+0x70>
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	f023 0303 	bic.w	r3, r3, #3
 800ce5c:	f043 0301 	orr.w	r3, r3, #1
 800ce60:	81a3      	strh	r3, [r4, #12]
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	431d      	orrs	r5, r3
 800ce66:	81a5      	strh	r5, [r4, #12]
 800ce68:	e7cf      	b.n	800ce0a <__smakebuf_r+0x18>
	...

0800ce6c <_fstat_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	2300      	movs	r3, #0
 800ce70:	4d06      	ldr	r5, [pc, #24]	@ (800ce8c <_fstat_r+0x20>)
 800ce72:	4604      	mov	r4, r0
 800ce74:	4608      	mov	r0, r1
 800ce76:	4611      	mov	r1, r2
 800ce78:	602b      	str	r3, [r5, #0]
 800ce7a:	f7f6 fa25 	bl	80032c8 <_fstat>
 800ce7e:	1c43      	adds	r3, r0, #1
 800ce80:	d102      	bne.n	800ce88 <_fstat_r+0x1c>
 800ce82:	682b      	ldr	r3, [r5, #0]
 800ce84:	b103      	cbz	r3, 800ce88 <_fstat_r+0x1c>
 800ce86:	6023      	str	r3, [r4, #0]
 800ce88:	bd38      	pop	{r3, r4, r5, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20000d90 	.word	0x20000d90

0800ce90 <_isatty_r>:
 800ce90:	b538      	push	{r3, r4, r5, lr}
 800ce92:	2300      	movs	r3, #0
 800ce94:	4d05      	ldr	r5, [pc, #20]	@ (800ceac <_isatty_r+0x1c>)
 800ce96:	4604      	mov	r4, r0
 800ce98:	4608      	mov	r0, r1
 800ce9a:	602b      	str	r3, [r5, #0]
 800ce9c:	f7f6 fa23 	bl	80032e6 <_isatty>
 800cea0:	1c43      	adds	r3, r0, #1
 800cea2:	d102      	bne.n	800ceaa <_isatty_r+0x1a>
 800cea4:	682b      	ldr	r3, [r5, #0]
 800cea6:	b103      	cbz	r3, 800ceaa <_isatty_r+0x1a>
 800cea8:	6023      	str	r3, [r4, #0]
 800ceaa:	bd38      	pop	{r3, r4, r5, pc}
 800ceac:	20000d90 	.word	0x20000d90

0800ceb0 <_init>:
 800ceb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb2:	bf00      	nop
 800ceb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceb6:	bc08      	pop	{r3}
 800ceb8:	469e      	mov	lr, r3
 800ceba:	4770      	bx	lr

0800cebc <_fini>:
 800cebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cebe:	bf00      	nop
 800cec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cec2:	bc08      	pop	{r3}
 800cec4:	469e      	mov	lr, r3
 800cec6:	4770      	bx	lr
