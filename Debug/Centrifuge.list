
Centrifuge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a8c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b98  08002b98  00003b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc4  08002bc4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002bc4  08002bc4  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002bc4  08002bc4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bc4  08002bc4  00003bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bc8  08002bc8  00003bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002bcc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002bd8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002bd8  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074e3  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ed  00000000  00000000  0000b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000cd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051f  00000000  00000000  0000d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162b5  00000000  00000000  0000d8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ba9  00000000  00000000  00023b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e5d6  00000000  00000000  0002c745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aad1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a94  00000000  00000000  000aad60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ac7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b80 	.word	0x08002b80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b80 	.word	0x08002b80

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	4b34      	ldr	r3, [pc, #208]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a33      	ldr	r2, [pc, #204]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 80009ba:	f043 0320 	orr.w	r3, r3, #32
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a27      	ldr	r2, [pc, #156]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 80009ea:	f043 0308 	orr.w	r3, r3, #8
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <MX_GPIO_Init+0xe8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a02:	481c      	ldr	r0, [pc, #112]	@ (8000a74 <MX_GPIO_Init+0xec>)
 8000a04:	f000 feac 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000a0e:	481a      	ldr	r0, [pc, #104]	@ (8000a78 <MX_GPIO_Init+0xf0>)
 8000a10:	f000 fea6 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4811      	ldr	r0, [pc, #68]	@ (8000a74 <MX_GPIO_Init+0xec>)
 8000a2e:	f000 fd13 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a32:	2301      	movs	r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4619      	mov	r1, r3
 8000a44:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 8000a46:	f000 fd07 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a4a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_GPIO_Init+0xf0>)
 8000a64:	f000 fcf8 	bl	8001458 <HAL_GPIO_Init>

}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40011000 	.word	0x40011000
 8000a78:	40010800 	.word	0x40010800
 8000a7c:	40010c00 	.word	0x40010c00

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a84:	f000 faa2 	bl	8000fcc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a88:	f000 f8a8 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f7ff ff7c 	bl	8000988 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a90:	f000 f97e 	bl	8000d90 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a94:	f000 f9a6 	bl	8000de4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_buff, 1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4947      	ldr	r1, [pc, #284]	@ (8000bb8 <main+0x138>)
 8000a9c:	4847      	ldr	r0, [pc, #284]	@ (8000bbc <main+0x13c>)
 8000a9e:	f001 fb0c 	bl	80020ba <HAL_UART_Receive_IT>
//		  HAL_Delay(300);
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
//		  HAL_Delay(300);
//	  }

	  if(rx_buff[0] != 0){
 8000aa2:	4b45      	ldr	r3, [pc, #276]	@ (8000bb8 <main+0x138>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d05a      	beq.n	8000b60 <main+0xe0>
		  if(rx_buff[0] <= '9' && rx_buff[0] >= '0'){
 8000aaa:	4b43      	ldr	r3, [pc, #268]	@ (8000bb8 <main+0x138>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b39      	cmp	r3, #57	@ 0x39
 8000ab0:	d821      	bhi.n	8000af6 <main+0x76>
 8000ab2:	4b41      	ldr	r3, [pc, #260]	@ (8000bb8 <main+0x138>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ab8:	d91d      	bls.n	8000af6 <main+0x76>
			  voltageSent = (int)(rx_buff[0] - '0') / 9.0 * 5;
 8000aba:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb8 <main+0x138>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	3b30      	subs	r3, #48	@ 0x30
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fc95 	bl	80003f0 <__aeabi_i2d>
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc0 <main+0x140>)
 8000acc:	f7ff fe24 	bl	8000718 <__aeabi_ddiv>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	4610      	mov	r0, r2
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 0200 	mov.w	r2, #0
 8000adc:	4b39      	ldr	r3, [pc, #228]	@ (8000bc4 <main+0x144>)
 8000ade:	f7ff fcf1 	bl	80004c4 <__aeabi_dmul>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f7ff fefd 	bl	80008e8 <__aeabi_d2f>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a35      	ldr	r2, [pc, #212]	@ (8000bc8 <main+0x148>)
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	e031      	b.n	8000b5a <main+0xda>

		  }else if(rx_buff[0] == 'M') { // Motor on Brake off
 8000af6:	4b30      	ldr	r3, [pc, #192]	@ (8000bb8 <main+0x138>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b4d      	cmp	r3, #77	@ 0x4d
 8000afc:	d10c      	bne.n	8000b18 <main+0x98>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Motor on
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b04:	4831      	ldr	r0, [pc, #196]	@ (8000bcc <main+0x14c>)
 8000b06:	f000 fe2b 	bl	8001760 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b10:	482e      	ldr	r0, [pc, #184]	@ (8000bcc <main+0x14c>)
 8000b12:	f000 fe25 	bl	8001760 <HAL_GPIO_WritePin>
 8000b16:	e020      	b.n	8000b5a <main+0xda>
		  }else if(rx_buff[0] == 'm') { // Motor off Brake off
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <main+0x138>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b6d      	cmp	r3, #109	@ 0x6d
 8000b1e:	d10c      	bne.n	8000b3a <main+0xba>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b26:	4829      	ldr	r0, [pc, #164]	@ (8000bcc <main+0x14c>)
 8000b28:	f000 fe1a 	bl	8001760 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b32:	4826      	ldr	r0, [pc, #152]	@ (8000bcc <main+0x14c>)
 8000b34:	f000 fe14 	bl	8001760 <HAL_GPIO_WritePin>
 8000b38:	e00f      	b.n	8000b5a <main+0xda>
		  }else if(rx_buff[0] == 'b') { // Motor off Brake on
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <main+0x138>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b62      	cmp	r3, #98	@ 0x62
 8000b40:	d10b      	bne.n	8000b5a <main+0xda>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b48:	4820      	ldr	r0, [pc, #128]	@ (8000bcc <main+0x14c>)
 8000b4a:	f000 fe09 	bl	8001760 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b54:	481d      	ldr	r0, [pc, #116]	@ (8000bcc <main+0x14c>)
 8000b56:	f000 fe03 	bl	8001760 <HAL_GPIO_WritePin>
		  }


		  rx_buff[0] = 0;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <main+0x138>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
	  }

	  ledTimer ++;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <main+0x150>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <main+0x150>)
 8000b6a:	801a      	strh	r2, [r3, #0]
	  if(ledTimer > 200){
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <main+0x150>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	2bc8      	cmp	r3, #200	@ 0xc8
 8000b72:	d91d      	bls.n	8000bb0 <main+0x130>
		  ledTimer = 0;
 8000b74:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <main+0x150>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
		  led = !led;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <main+0x154>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	bf0c      	ite	eq
 8000b82:	2301      	moveq	r3, #1
 8000b84:	2300      	movne	r3, #0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <main+0x154>)
 8000b8c:	701a      	strb	r2, [r3, #0]
		  if(led){
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <main+0x154>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d006      	beq.n	8000ba4 <main+0x124>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9c:	480e      	ldr	r0, [pc, #56]	@ (8000bd8 <main+0x158>)
 8000b9e:	f000 fddf 	bl	8001760 <HAL_GPIO_WritePin>
 8000ba2:	e005      	b.n	8000bb0 <main+0x130>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000baa:	480b      	ldr	r0, [pc, #44]	@ (8000bd8 <main+0x158>)
 8000bac:	f000 fdd8 	bl	8001760 <HAL_GPIO_WritePin>
		  }
	  }
	  HAL_Delay(1);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f000 fa6d 	bl	8001090 <HAL_Delay>
	  if(rx_buff[0] != 0){
 8000bb6:	e774      	b.n	8000aa2 <main+0x22>
 8000bb8:	20000028 	.word	0x20000028
 8000bbc:	20000078 	.word	0x20000078
 8000bc0:	40220000 	.word	0x40220000
 8000bc4:	40140000 	.word	0x40140000
 8000bc8:	2000002c 	.word	0x2000002c
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	2000002a 	.word	0x2000002a
 8000bd4:	20000029 	.word	0x20000029
 8000bd8:	40011000 	.word	0x40011000

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	@ 0x40
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	2228      	movs	r2, #40	@ 0x28
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 ff9c 	bl	8002b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	2302      	movs	r3, #2
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c1a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fdb3 	bl	8001790 <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c30:	f000 f830 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 f820 	bl	8001c94 <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c5a:	f000 f81b 	bl	8000c94 <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3740      	adds	r7, #64	@ 0x40
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
		  HAL_UART_Receive_IT(&huart2, rx_buff, 1);
 8000c70:	2201      	movs	r2, #1
 8000c72:	4906      	ldr	r1, [pc, #24]	@ (8000c8c <HAL_UART_RxCpltCallback+0x24>)
 8000c74:	4806      	ldr	r0, [pc, #24]	@ (8000c90 <HAL_UART_RxCpltCallback+0x28>)
 8000c76:	f001 fa20 	bl	80020ba <HAL_UART_Receive_IT>
		  HAL_UART_Transmit_IT(&huart2, rx_buff, 1);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4903      	ldr	r1, [pc, #12]	@ (8000c8c <HAL_UART_RxCpltCallback+0x24>)
 8000c7e:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <HAL_UART_RxCpltCallback+0x28>)
 8000c80:	f001 f9e6 	bl	8002050 <HAL_UART_Transmit_IT>
	}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000028 	.word	0x20000028
 8000c90:	20000078 	.word	0x20000078

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <Error_Handler+0x8>

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4a14      	ldr	r2, [pc, #80]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6193      	str	r3, [r2, #24]
 8000cb2:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	61d3      	str	r3, [r2, #28]
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_MspInit+0x60>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_MspInit+0x60>)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010000 	.word	0x40010000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <NMI_Handler+0x4>

08000d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f980 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <USART1_IRQHandler+0x10>)
 8000d62:	f001 f9cf 	bl	8002104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000030 	.word	0x20000030

08000d70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <USART2_IRQHandler+0x10>)
 8000d76:	f001 f9c5 	bl	8002104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000078 	.word	0x20000078

08000d84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <MX_USART1_UART_Init+0x50>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <MX_USART1_UART_Init+0x4c>)
 8000dc8:	f001 f8f2 	bl	8001fb0 <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dd2:	f7ff ff5f 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000030 	.word	0x20000030
 8000de0:	40013800 	.word	0x40013800

08000de4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <MX_USART2_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e1c:	f001 f8c8 	bl	8001fb0 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e26:	f7ff ff35 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000078 	.word	0x20000078
 8000e34:	40004400 	.word	0x40004400

08000e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	@ 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a45      	ldr	r2, [pc, #276]	@ (8000f68 <HAL_UART_MspInit+0x130>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d146      	bne.n	8000ee6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e58:	4b44      	ldr	r3, [pc, #272]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a43      	ldr	r2, [pc, #268]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b41      	ldr	r3, [pc, #260]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b3e      	ldr	r3, [pc, #248]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a3d      	ldr	r2, [pc, #244]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000e76:	f043 0308 	orr.w	r3, r3, #8
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e88:	2340      	movs	r3, #64	@ 0x40
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4835      	ldr	r0, [pc, #212]	@ (8000f70 <HAL_UART_MspInit+0x138>)
 8000e9c:	f000 fadc 	bl	8001458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	482f      	ldr	r0, [pc, #188]	@ (8000f70 <HAL_UART_MspInit+0x138>)
 8000eb4:	f000 fad0 	bl	8001458 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ece:	4a29      	ldr	r2, [pc, #164]	@ (8000f74 <HAL_UART_MspInit+0x13c>)
 8000ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ed2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2025      	movs	r0, #37	@ 0x25
 8000eda:	f000 f9d4 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ede:	2025      	movs	r0, #37	@ 0x25
 8000ee0:	f000 f9ed 	bl	80012be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ee4:	e03c      	b.n	8000f60 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a23      	ldr	r2, [pc, #140]	@ (8000f78 <HAL_UART_MspInit+0x140>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d137      	bne.n	8000f60 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000efa:	61d3      	str	r3, [r2, #28]
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a17      	ldr	r2, [pc, #92]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_UART_MspInit+0x134>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f20:	2304      	movs	r3, #4
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	4812      	ldr	r0, [pc, #72]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f34:	f000 fa90 	bl	8001458 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <HAL_UART_MspInit+0x144>)
 8000f4c:	f000 fa84 	bl	8001458 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2026      	movs	r0, #38	@ 0x26
 8000f56:	f000 f996 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f5a:	2026      	movs	r0, #38	@ 0x26
 8000f5c:	f000 f9af 	bl	80012be <HAL_NVIC_EnableIRQ>
}
 8000f60:	bf00      	nop
 8000f62:	3730      	adds	r7, #48	@ 0x30
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	40010000 	.word	0x40010000
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40010800 	.word	0x40010800

08000f80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f80:	f7ff ff00 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f84:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f86:	490c      	ldr	r1, [pc, #48]	@ (8000fb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f88:	4a0c      	ldr	r2, [pc, #48]	@ (8000fbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a09      	ldr	r2, [pc, #36]	@ (8000fc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f9c:	4c09      	ldr	r4, [pc, #36]	@ (8000fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000faa:	f001 fdc5 	bl	8002b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fae:	f7ff fd67 	bl	8000a80 <main>
  bx lr
 8000fb2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fbc:	08002bcc 	.word	0x08002bcc
  ldr r2, =_sbss
 8000fc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fc4:	200000c4 	.word	0x200000c4

08000fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC1_2_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <HAL_Init+0x28>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	@ (8000ff4 <HAL_Init+0x28>)
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f000 f947 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	f000 f808 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe8:	f7ff fe5a 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40022000 	.word	0x40022000

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_InitTick+0x54>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <HAL_InitTick+0x58>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f95f 	bl	80012da <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 f927 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	@ (8001054 <HAL_InitTick+0x5c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000000 	.word	0x20000000
 8001050:	20000008 	.word	0x20000008
 8001054:	20000004 	.word	0x20000004

08001058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_IncTick+0x1c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <HAL_IncTick+0x20>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a03      	ldr	r2, [pc, #12]	@ (8001078 <HAL_IncTick+0x20>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	20000008 	.word	0x20000008
 8001078:	200000c0 	.word	0x200000c0

0800107c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b02      	ldr	r3, [pc, #8]	@ (800108c <HAL_GetTick+0x10>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	200000c0 	.word	0x200000c0

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff fff0 	bl	800107c <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffe0 	bl	800107c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4906      	ldr	r1, [pc, #24]	@ (8001170 <__NVIC_EnableIRQ+0x34>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	@ (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	@ 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	@ 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff90 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff2d 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff42 	bl	8001120 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff90 	bl	80011c8 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5f 	bl	8001174 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff35 	bl	800113c <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b085      	sub	sp, #20
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d008      	beq.n	800131c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2204      	movs	r2, #4
 800130e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e020      	b.n	800135e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 020e 	bic.w	r2, r2, #14
 800132a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001344:	2101      	movs	r1, #1
 8001346:	fa01 f202 	lsl.w	r2, r1, r2
 800134a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800135c:	7bfb      	ldrb	r3, [r7, #15]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d005      	beq.n	800138c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2204      	movs	r2, #4
 8001384:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e051      	b.n	8001430 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 020e 	bic.w	r2, r2, #14
 800139a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a22      	ldr	r2, [pc, #136]	@ (800143c <HAL_DMA_Abort_IT+0xd4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d029      	beq.n	800140a <HAL_DMA_Abort_IT+0xa2>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a21      	ldr	r2, [pc, #132]	@ (8001440 <HAL_DMA_Abort_IT+0xd8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d022      	beq.n	8001406 <HAL_DMA_Abort_IT+0x9e>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001444 <HAL_DMA_Abort_IT+0xdc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01a      	beq.n	8001400 <HAL_DMA_Abort_IT+0x98>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001448 <HAL_DMA_Abort_IT+0xe0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d012      	beq.n	80013fa <HAL_DMA_Abort_IT+0x92>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1c      	ldr	r2, [pc, #112]	@ (800144c <HAL_DMA_Abort_IT+0xe4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00a      	beq.n	80013f4 <HAL_DMA_Abort_IT+0x8c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001450 <HAL_DMA_Abort_IT+0xe8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d102      	bne.n	80013ee <HAL_DMA_Abort_IT+0x86>
 80013e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013ec:	e00e      	b.n	800140c <HAL_DMA_Abort_IT+0xa4>
 80013ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013f2:	e00b      	b.n	800140c <HAL_DMA_Abort_IT+0xa4>
 80013f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013f8:	e008      	b.n	800140c <HAL_DMA_Abort_IT+0xa4>
 80013fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fe:	e005      	b.n	800140c <HAL_DMA_Abort_IT+0xa4>
 8001400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001404:	e002      	b.n	800140c <HAL_DMA_Abort_IT+0xa4>
 8001406:	2310      	movs	r3, #16
 8001408:	e000      	b.n	800140c <HAL_DMA_Abort_IT+0xa4>
 800140a:	2301      	movs	r3, #1
 800140c:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <HAL_DMA_Abort_IT+0xec>)
 800140e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	4798      	blx	r3
    } 
  }
  return status;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40020008 	.word	0x40020008
 8001440:	4002001c 	.word	0x4002001c
 8001444:	40020030 	.word	0x40020030
 8001448:	40020044 	.word	0x40020044
 800144c:	40020058 	.word	0x40020058
 8001450:	4002006c 	.word	0x4002006c
 8001454:	40020000 	.word	0x40020000

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b480      	push	{r7}
 800145a:	b08b      	sub	sp, #44	@ 0x2c
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146a:	e169      	b.n	8001740 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800146c:	2201      	movs	r2, #1
 800146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	429a      	cmp	r2, r3
 8001486:	f040 8158 	bne.w	800173a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4a9a      	ldr	r2, [pc, #616]	@ (80016f8 <HAL_GPIO_Init+0x2a0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d05e      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
 8001494:	4a98      	ldr	r2, [pc, #608]	@ (80016f8 <HAL_GPIO_Init+0x2a0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d875      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 800149a:	4a98      	ldr	r2, [pc, #608]	@ (80016fc <HAL_GPIO_Init+0x2a4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d058      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
 80014a0:	4a96      	ldr	r2, [pc, #600]	@ (80016fc <HAL_GPIO_Init+0x2a4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d86f      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 80014a6:	4a96      	ldr	r2, [pc, #600]	@ (8001700 <HAL_GPIO_Init+0x2a8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d052      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
 80014ac:	4a94      	ldr	r2, [pc, #592]	@ (8001700 <HAL_GPIO_Init+0x2a8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d869      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 80014b2:	4a94      	ldr	r2, [pc, #592]	@ (8001704 <HAL_GPIO_Init+0x2ac>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d04c      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
 80014b8:	4a92      	ldr	r2, [pc, #584]	@ (8001704 <HAL_GPIO_Init+0x2ac>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d863      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 80014be:	4a92      	ldr	r2, [pc, #584]	@ (8001708 <HAL_GPIO_Init+0x2b0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d046      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
 80014c4:	4a90      	ldr	r2, [pc, #576]	@ (8001708 <HAL_GPIO_Init+0x2b0>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d85d      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 80014ca:	2b12      	cmp	r3, #18
 80014cc:	d82a      	bhi.n	8001524 <HAL_GPIO_Init+0xcc>
 80014ce:	2b12      	cmp	r3, #18
 80014d0:	d859      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 80014d2:	a201      	add	r2, pc, #4	@ (adr r2, 80014d8 <HAL_GPIO_Init+0x80>)
 80014d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d8:	08001553 	.word	0x08001553
 80014dc:	0800152d 	.word	0x0800152d
 80014e0:	0800153f 	.word	0x0800153f
 80014e4:	08001581 	.word	0x08001581
 80014e8:	08001587 	.word	0x08001587
 80014ec:	08001587 	.word	0x08001587
 80014f0:	08001587 	.word	0x08001587
 80014f4:	08001587 	.word	0x08001587
 80014f8:	08001587 	.word	0x08001587
 80014fc:	08001587 	.word	0x08001587
 8001500:	08001587 	.word	0x08001587
 8001504:	08001587 	.word	0x08001587
 8001508:	08001587 	.word	0x08001587
 800150c:	08001587 	.word	0x08001587
 8001510:	08001587 	.word	0x08001587
 8001514:	08001587 	.word	0x08001587
 8001518:	08001587 	.word	0x08001587
 800151c:	08001535 	.word	0x08001535
 8001520:	08001549 	.word	0x08001549
 8001524:	4a79      	ldr	r2, [pc, #484]	@ (800170c <HAL_GPIO_Init+0x2b4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800152a:	e02c      	b.n	8001586 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e029      	b.n	8001588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	3304      	adds	r3, #4
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e024      	b.n	8001588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	3308      	adds	r3, #8
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e01f      	b.n	8001588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	330c      	adds	r3, #12
 800154e:	623b      	str	r3, [r7, #32]
          break;
 8001550:	e01a      	b.n	8001588 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800155a:	2304      	movs	r3, #4
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e013      	b.n	8001588 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001568:	2308      	movs	r3, #8
 800156a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	611a      	str	r2, [r3, #16]
          break;
 8001572:	e009      	b.n	8001588 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001574:	2308      	movs	r3, #8
 8001576:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	615a      	str	r2, [r3, #20]
          break;
 800157e:	e003      	b.n	8001588 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
          break;
 8001584:	e000      	b.n	8001588 <HAL_GPIO_Init+0x130>
          break;
 8001586:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d801      	bhi.n	8001592 <HAL_GPIO_Init+0x13a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	e001      	b.n	8001596 <HAL_GPIO_Init+0x13e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3304      	adds	r3, #4
 8001596:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2bff      	cmp	r3, #255	@ 0xff
 800159c:	d802      	bhi.n	80015a4 <HAL_GPIO_Init+0x14c>
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	e002      	b.n	80015aa <HAL_GPIO_Init+0x152>
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	3b08      	subs	r3, #8
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	210f      	movs	r1, #15
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	401a      	ands	r2, r3
 80015bc:	6a39      	ldr	r1, [r7, #32]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	431a      	orrs	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80b1 	beq.w	800173a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001710 <HAL_GPIO_Init+0x2b8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001710 <HAL_GPIO_Init+0x2b8>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001710 <HAL_GPIO_Init+0x2b8>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015f0:	4a48      	ldr	r2, [pc, #288]	@ (8001714 <HAL_GPIO_Init+0x2bc>)
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a40      	ldr	r2, [pc, #256]	@ (8001718 <HAL_GPIO_Init+0x2c0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d013      	beq.n	8001644 <HAL_GPIO_Init+0x1ec>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a3f      	ldr	r2, [pc, #252]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d00d      	beq.n	8001640 <HAL_GPIO_Init+0x1e8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a3e      	ldr	r2, [pc, #248]	@ (8001720 <HAL_GPIO_Init+0x2c8>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d007      	beq.n	800163c <HAL_GPIO_Init+0x1e4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a3d      	ldr	r2, [pc, #244]	@ (8001724 <HAL_GPIO_Init+0x2cc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_GPIO_Init+0x1e0>
 8001634:	2303      	movs	r3, #3
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x1ee>
 8001638:	2304      	movs	r3, #4
 800163a:	e004      	b.n	8001646 <HAL_GPIO_Init+0x1ee>
 800163c:	2302      	movs	r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0x1ee>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_GPIO_Init+0x1ee>
 8001644:	2300      	movs	r3, #0
 8001646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001648:	f002 0203 	and.w	r2, r2, #3
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4093      	lsls	r3, r2
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001656:	492f      	ldr	r1, [pc, #188]	@ (8001714 <HAL_GPIO_Init+0x2bc>)
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001670:	4b2d      	ldr	r3, [pc, #180]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	492c      	ldr	r1, [pc, #176]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800167e:	4b2a      	ldr	r3, [pc, #168]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	43db      	mvns	r3, r3
 8001686:	4928      	ldr	r1, [pc, #160]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 8001688:	4013      	ands	r3, r2
 800168a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001698:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	4922      	ldr	r1, [pc, #136]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	60cb      	str	r3, [r1, #12]
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	491e      	ldr	r1, [pc, #120]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4918      	ldr	r1, [pc, #96]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016ce:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4914      	ldr	r1, [pc, #80]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 80016d8:	4013      	ands	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d021      	beq.n	800172c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	490e      	ldr	r1, [pc, #56]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
 80016f4:	e021      	b.n	800173a <HAL_GPIO_Init+0x2e2>
 80016f6:	bf00      	nop
 80016f8:	10320000 	.word	0x10320000
 80016fc:	10310000 	.word	0x10310000
 8001700:	10220000 	.word	0x10220000
 8001704:	10210000 	.word	0x10210000
 8001708:	10120000 	.word	0x10120000
 800170c:	10110000 	.word	0x10110000
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000
 8001718:	40010800 	.word	0x40010800
 800171c:	40010c00 	.word	0x40010c00
 8001720:	40011000 	.word	0x40011000
 8001724:	40011400 	.word	0x40011400
 8001728:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_GPIO_Init+0x304>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	43db      	mvns	r3, r3
 8001734:	4909      	ldr	r1, [pc, #36]	@ (800175c <HAL_GPIO_Init+0x304>)
 8001736:	4013      	ands	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	3301      	adds	r3, #1
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	f47f ae8e 	bne.w	800146c <HAL_GPIO_Init+0x14>
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	372c      	adds	r7, #44	@ 0x2c
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800177c:	e003      	b.n	8001786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	611a      	str	r2, [r3, #16]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e272      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8087 	beq.w	80018be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b0:	4b92      	ldr	r3, [pc, #584]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d00c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017bc:	4b8f      	ldr	r3, [pc, #572]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d112      	bne.n	80017ee <HAL_RCC_OscConfig+0x5e>
 80017c8:	4b8c      	ldr	r3, [pc, #560]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017d4:	d10b      	bne.n	80017ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d6:	4b89      	ldr	r3, [pc, #548]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d06c      	beq.n	80018bc <HAL_RCC_OscConfig+0x12c>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d168      	bne.n	80018bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e24c      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x76>
 80017f8:	4b80      	ldr	r3, [pc, #512]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a7f      	ldr	r2, [pc, #508]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e02e      	b.n	8001864 <HAL_RCC_OscConfig+0xd4>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x98>
 800180e:	4b7b      	ldr	r3, [pc, #492]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a7a      	ldr	r2, [pc, #488]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b78      	ldr	r3, [pc, #480]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a77      	ldr	r2, [pc, #476]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001820:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e01d      	b.n	8001864 <HAL_RCC_OscConfig+0xd4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0xbc>
 8001832:	4b72      	ldr	r3, [pc, #456]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a71      	ldr	r2, [pc, #452]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b6f      	ldr	r3, [pc, #444]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6e      	ldr	r2, [pc, #440]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e00b      	b.n	8001864 <HAL_RCC_OscConfig+0xd4>
 800184c:	4b6b      	ldr	r3, [pc, #428]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a6a      	ldr	r2, [pc, #424]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b68      	ldr	r3, [pc, #416]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a67      	ldr	r2, [pc, #412]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 800185e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001862:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fc06 	bl	800107c <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fc02 	bl	800107c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	@ 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e200      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b5d      	ldr	r3, [pc, #372]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0xe4>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fbf2 	bl	800107c <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff fbee 	bl	800107c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	@ 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e1ec      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	4b53      	ldr	r3, [pc, #332]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x10c>
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d063      	beq.n	8001992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ca:	4b4c      	ldr	r3, [pc, #304]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00b      	beq.n	80018ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018d6:	4b49      	ldr	r3, [pc, #292]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d11c      	bne.n	800191c <HAL_RCC_OscConfig+0x18c>
 80018e2:	4b46      	ldr	r3, [pc, #280]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d116      	bne.n	800191c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	4b43      	ldr	r3, [pc, #268]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_OscConfig+0x176>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e1c0      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001906:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4939      	ldr	r1, [pc, #228]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	e03a      	b.n	8001992 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d020      	beq.n	8001966 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001924:	4b36      	ldr	r3, [pc, #216]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff fba7 	bl	800107c <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001932:	f7ff fba3 	bl	800107c <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1a1      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4927      	ldr	r1, [pc, #156]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
 8001964:	e015      	b.n	8001992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fb86 	bl	800107c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001974:	f7ff fb82 	bl	800107c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e180      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d03a      	beq.n	8001a14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d019      	beq.n	80019da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a6:	4b17      	ldr	r3, [pc, #92]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ac:	f7ff fb66 	bl	800107c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff fb62 	bl	800107c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e160      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <HAL_RCC_OscConfig+0x26c>)
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f000 face 	bl	8001f74 <RCC_Delay>
 80019d8:	e01c      	b.n	8001a14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e0:	f7ff fb4c 	bl	800107c <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e6:	e00f      	b.n	8001a08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e8:	f7ff fb48 	bl	800107c <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d908      	bls.n	8001a08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e146      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	42420000 	.word	0x42420000
 8001a04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	4b92      	ldr	r3, [pc, #584]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1e9      	bne.n	80019e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80a6 	beq.w	8001b6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a26:	4b8b      	ldr	r3, [pc, #556]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10d      	bne.n	8001a4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b88      	ldr	r3, [pc, #544]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a87      	ldr	r2, [pc, #540]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b85      	ldr	r3, [pc, #532]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4b82      	ldr	r3, [pc, #520]	@ (8001c58 <HAL_RCC_OscConfig+0x4c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d118      	bne.n	8001a8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c58 <HAL_RCC_OscConfig+0x4c8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c58 <HAL_RCC_OscConfig+0x4c8>)
 8001a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a66:	f7ff fb09 	bl	800107c <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6e:	f7ff fb05 	bl	800107c <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	@ 0x64
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e103      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	4b75      	ldr	r3, [pc, #468]	@ (8001c58 <HAL_RCC_OscConfig+0x4c8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x312>
 8001a94:	4b6f      	ldr	r3, [pc, #444]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4a6e      	ldr	r2, [pc, #440]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6213      	str	r3, [r2, #32]
 8001aa0:	e02d      	b.n	8001afe <HAL_RCC_OscConfig+0x36e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x334>
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a69      	ldr	r2, [pc, #420]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	4b67      	ldr	r3, [pc, #412]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a66      	ldr	r2, [pc, #408]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	f023 0304 	bic.w	r3, r3, #4
 8001ac0:	6213      	str	r3, [r2, #32]
 8001ac2:	e01c      	b.n	8001afe <HAL_RCC_OscConfig+0x36e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d10c      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x356>
 8001acc:	4b61      	ldr	r3, [pc, #388]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a60      	ldr	r2, [pc, #384]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6213      	str	r3, [r2, #32]
 8001ae4:	e00b      	b.n	8001afe <HAL_RCC_OscConfig+0x36e>
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a5a      	ldr	r2, [pc, #360]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	4b58      	ldr	r3, [pc, #352]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4a57      	ldr	r2, [pc, #348]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	f023 0304 	bic.w	r3, r3, #4
 8001afc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d015      	beq.n	8001b32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff fab9 	bl	800107c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff fab5 	bl	800107c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e0b1      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	4b4b      	ldr	r3, [pc, #300]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0ee      	beq.n	8001b0e <HAL_RCC_OscConfig+0x37e>
 8001b30:	e014      	b.n	8001b5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff faa3 	bl	800107c <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff fa9f 	bl	800107c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e09b      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	4b40      	ldr	r3, [pc, #256]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ee      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d105      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b62:	4b3c      	ldr	r3, [pc, #240]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a3b      	ldr	r2, [pc, #236]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8087 	beq.w	8001c86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b78:	4b36      	ldr	r3, [pc, #216]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d061      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d146      	bne.n	8001c1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8c:	4b33      	ldr	r3, [pc, #204]	@ (8001c5c <HAL_RCC_OscConfig+0x4cc>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff fa73 	bl	800107c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff fa6f 	bl	800107c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e06d      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bac:	4b29      	ldr	r3, [pc, #164]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc0:	d108      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bc2:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4921      	ldr	r1, [pc, #132]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a19      	ldr	r1, [r3, #32]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	430b      	orrs	r3, r1
 8001be6:	491b      	ldr	r1, [pc, #108]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bec:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_RCC_OscConfig+0x4cc>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fa43 	bl	800107c <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff fa3f 	bl	800107c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e03d      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x46a>
 8001c18:	e035      	b.n	8001c86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <HAL_RCC_OscConfig+0x4cc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fa2c 	bl	800107c <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff fa28 	bl	800107c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e026      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x498>
 8001c46:	e01e      	b.n	8001c86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e019      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <HAL_RCC_OscConfig+0x500>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0d0      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d910      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b67      	ldr	r3, [pc, #412]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 0207 	bic.w	r2, r3, #7
 8001cbe:	4965      	ldr	r1, [pc, #404]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b63      	ldr	r3, [pc, #396]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0b8      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf0:	4b59      	ldr	r3, [pc, #356]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a58      	ldr	r2, [pc, #352]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d08:	4b53      	ldr	r3, [pc, #332]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4a52      	ldr	r2, [pc, #328]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b50      	ldr	r3, [pc, #320]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	494d      	ldr	r1, [pc, #308]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d040      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b47      	ldr	r3, [pc, #284]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d115      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e07f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	4b41      	ldr	r3, [pc, #260]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e073      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	4b3d      	ldr	r3, [pc, #244]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e06b      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d72:	4b39      	ldr	r3, [pc, #228]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f023 0203 	bic.w	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4936      	ldr	r1, [pc, #216]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d84:	f7ff f97a 	bl	800107c <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8c:	f7ff f976 	bl	800107c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e053      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 020c 	and.w	r2, r3, #12
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d1eb      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db4:	4b27      	ldr	r3, [pc, #156]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d210      	bcs.n	8001de4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b24      	ldr	r3, [pc, #144]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 0207 	bic.w	r2, r3, #7
 8001dca:	4922      	ldr	r1, [pc, #136]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e032      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df0:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4916      	ldr	r1, [pc, #88]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e0e:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	490e      	ldr	r1, [pc, #56]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e22:	f000 f821 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	490a      	ldr	r1, [pc, #40]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e34:	5ccb      	ldrb	r3, [r1, r3]
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	4a09      	ldr	r2, [pc, #36]	@ (8001e60 <HAL_RCC_ClockConfig+0x1cc>)
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <HAL_RCC_ClockConfig+0x1d0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f8d8 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40022000 	.word	0x40022000
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08002b98 	.word	0x08002b98
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e82:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x94>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x30>
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x36>
 8001e96:	e027      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9a:	613b      	str	r3, [r7, #16]
      break;
 8001e9c:	e027      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	0c9b      	lsrs	r3, r3, #18
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d010      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x94>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	0c5b      	lsrs	r3, r3, #17
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	4a11      	ldr	r2, [pc, #68]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eca:	fb03 f202 	mul.w	r2, r3, r2
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e004      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a0c      	ldr	r2, [pc, #48]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	613b      	str	r3, [r7, #16]
      break;
 8001ee6:	e002      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eea:	613b      	str	r3, [r7, #16]
      break;
 8001eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eee:	693b      	ldr	r3, [r7, #16]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	007a1200 	.word	0x007a1200
 8001f04:	08002bb0 	.word	0x08002bb0
 8001f08:	08002bc0 	.word	0x08002bc0
 8001f0c:	003d0900 	.word	0x003d0900

08001f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f14:	4b02      	ldr	r3, [pc, #8]	@ (8001f20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	20000000 	.word	0x20000000

08001f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f28:	f7ff fff2 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4903      	ldr	r1, [pc, #12]	@ (8001f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08002ba8 	.word	0x08002ba8

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f50:	f7ff ffde 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0adb      	lsrs	r3, r3, #11
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	@ (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	08002ba8 	.word	0x08002ba8

08001f74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <RCC_Delay+0x34>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <RCC_Delay+0x38>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0a5b      	lsrs	r3, r3, #9
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f90:	bf00      	nop
  }
  while (Delay --);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1e5a      	subs	r2, r3, #1
 8001f96:	60fa      	str	r2, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f9      	bne.n	8001f90 <RCC_Delay+0x1c>
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	10624dd3 	.word	0x10624dd3

08001fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e042      	b.n	8002048 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe ff2e 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	@ 0x24
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fd09 	bl	8002a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	4613      	mov	r3, r2
 800205c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b20      	cmp	r3, #32
 8002068:	d121      	bne.n	80020ae <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_UART_Transmit_IT+0x26>
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e01a      	b.n	80020b0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	88fa      	ldrh	r2, [r7, #6]
 8002084:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2221      	movs	r2, #33	@ 0x21
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80020ae:	2302      	movs	r3, #2
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	4613      	mov	r3, r2
 80020c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d112      	bne.n	80020fa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <HAL_UART_Receive_IT+0x26>
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e00b      	b.n	80020fc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	461a      	mov	r2, r3
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fab6 	bl	8002662 <UART_Start_Receive_IT>
 80020f6:	4603      	mov	r3, r0
 80020f8:	e000      	b.n	80020fc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
  }
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0ba      	sub	sp, #232	@ 0xe8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10f      	bne.n	800216a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800214a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_UART_IRQHandler+0x66>
 8002156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fb93 	bl	800288e <UART_Receive_IT>
      return;
 8002168:	e25b      	b.n	8002622 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800216a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80de 	beq.w	8002330 <HAL_UART_IRQHandler+0x22c>
 8002174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002184:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80d1 	beq.w	8002330 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800218e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_UART_IRQHandler+0xae>
 800219a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800219e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_UART_IRQHandler+0xd2>
 80021be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f043 0202 	orr.w	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <HAL_UART_IRQHandler+0xf6>
 80021e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	f043 0204 	orr.w	r2, r3, #4
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80021fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d011      	beq.n	800222a <HAL_UART_IRQHandler+0x126>
 8002206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	f043 0208 	orr.w	r2, r3, #8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 81f2 	beq.w	8002618 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_UART_IRQHandler+0x14e>
 8002240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fb1e 	bl	800288e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d103      	bne.n	800227e <HAL_UART_IRQHandler+0x17a>
 8002276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d04f      	beq.n	800231e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fa28 	bl	80026d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d041      	beq.n	8002316 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3314      	adds	r3, #20
 8002298:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022a0:	e853 3f00 	ldrex	r3, [r3]
 80022a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80022a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3314      	adds	r3, #20
 80022ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80022be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80022c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80022ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80022ce:	e841 2300 	strex	r3, r2, [r1]
 80022d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80022d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1d9      	bne.n	8002292 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d013      	beq.n	800230e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ea:	4a7e      	ldr	r2, [pc, #504]	@ (80024e4 <HAL_UART_IRQHandler+0x3e0>)
 80022ec:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f838 	bl	8001368 <HAL_DMA_Abort_IT>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002308:	4610      	mov	r0, r2
 800230a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800230c:	e00e      	b.n	800232c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f993 	bl	800263a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002314:	e00a      	b.n	800232c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f98f 	bl	800263a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800231c:	e006      	b.n	800232c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f98b 	bl	800263a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800232a:	e175      	b.n	8002618 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800232c:	bf00      	nop
    return;
 800232e:	e173      	b.n	8002618 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	2b01      	cmp	r3, #1
 8002336:	f040 814f 	bne.w	80025d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800233a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8148 	beq.w	80025d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8141 	beq.w	80025d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80b6 	beq.w	80024e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002388:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8145 	beq.w	800261c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800239a:	429a      	cmp	r2, r3
 800239c:	f080 813e 	bcs.w	800261c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	f000 8088 	beq.w	80024c4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023c2:	e853 3f00 	ldrex	r3, [r3]
 80023c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80023ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	330c      	adds	r3, #12
 80023dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80023e0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80023ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80023f0:	e841 2300 	strex	r3, r2, [r1]
 80023f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80023f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1d9      	bne.n	80023b4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3314      	adds	r3, #20
 8002406:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002408:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800240a:	e853 3f00 	ldrex	r3, [r3]
 800240e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002410:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3314      	adds	r3, #20
 8002420:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002424:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002428:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800242c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002430:	e841 2300 	strex	r3, r2, [r1]
 8002434:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002436:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e1      	bne.n	8002400 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3314      	adds	r3, #20
 8002442:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002446:	e853 3f00 	ldrex	r3, [r3]
 800244a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800244c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800244e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002452:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3314      	adds	r3, #20
 800245c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002460:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002462:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002464:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002466:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002468:	e841 2300 	strex	r3, r2, [r1]
 800246c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800246e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e3      	bne.n	800243c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	330c      	adds	r3, #12
 8002488:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800248c:	e853 3f00 	ldrex	r3, [r3]
 8002490:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002494:	f023 0310 	bic.w	r3, r3, #16
 8002498:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80024a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024a8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80024b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e3      	bne.n	8002482 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe ff17 	bl	80012f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8b6 	bl	800264c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024e0:	e09c      	b.n	800261c <HAL_UART_IRQHandler+0x518>
 80024e2:	bf00      	nop
 80024e4:	08002799 	.word	0x08002799
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 808e 	beq.w	8002620 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8089 	beq.w	8002620 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	330c      	adds	r3, #12
 8002514:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002518:	e853 3f00 	ldrex	r3, [r3]
 800251c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800251e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002524:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	330c      	adds	r3, #12
 800252e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002532:	647a      	str	r2, [r7, #68]	@ 0x44
 8002534:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002536:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800253a:	e841 2300 	strex	r3, r2, [r1]
 800253e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1e3      	bne.n	800250e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3314      	adds	r3, #20
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	e853 3f00 	ldrex	r3, [r3]
 8002554:	623b      	str	r3, [r7, #32]
   return(result);
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3314      	adds	r3, #20
 8002566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800256a:	633a      	str	r2, [r7, #48]	@ 0x30
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002572:	e841 2300 	strex	r3, r2, [r1]
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1e3      	bne.n	8002546 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	330c      	adds	r3, #12
 8002592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	e853 3f00 	ldrex	r3, [r3]
 800259a:	60fb      	str	r3, [r7, #12]
   return(result);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0310 	bic.w	r3, r3, #16
 80025a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	330c      	adds	r3, #12
 80025ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80025b0:	61fa      	str	r2, [r7, #28]
 80025b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	e841 2300 	strex	r3, r2, [r1]
 80025bc:	617b      	str	r3, [r7, #20]
   return(result);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e3      	bne.n	800258c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025ce:	4619      	mov	r1, r3
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f83b 	bl	800264c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025d6:	e023      	b.n	8002620 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d009      	beq.n	80025f8 <HAL_UART_IRQHandler+0x4f4>
 80025e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f8e5 	bl	80027c0 <UART_Transmit_IT>
    return;
 80025f6:	e014      	b.n	8002622 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00e      	beq.n	8002622 <HAL_UART_IRQHandler+0x51e>
 8002604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f924 	bl	800285e <UART_EndTransmit_IT>
    return;
 8002616:	e004      	b.n	8002622 <HAL_UART_IRQHandler+0x51e>
    return;
 8002618:	bf00      	nop
 800261a:	e002      	b.n	8002622 <HAL_UART_IRQHandler+0x51e>
      return;
 800261c:	bf00      	nop
 800261e:	e000      	b.n	8002622 <HAL_UART_IRQHandler+0x51e>
      return;
 8002620:	bf00      	nop
  }
}
 8002622:	37e8      	adds	r7, #232	@ 0xe8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002662:	b480      	push	{r7}
 8002664:	b085      	sub	sp, #20
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	4613      	mov	r3, r2
 800266e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	88fa      	ldrh	r2, [r7, #6]
 800267a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	88fa      	ldrh	r2, [r7, #6]
 8002680:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2222      	movs	r2, #34	@ 0x22
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0220 	orr.w	r2, r2, #32
 80026c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b095      	sub	sp, #84	@ 0x54
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e6:	e853 3f00 	ldrex	r3, [r3]
 80026ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	330c      	adds	r3, #12
 80026fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80026fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002700:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002702:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002704:	e841 2300 	strex	r3, r2, [r1]
 8002708:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800270a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e5      	bne.n	80026dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3314      	adds	r3, #20
 8002716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	e853 3f00 	ldrex	r3, [r3]
 800271e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3314      	adds	r3, #20
 800272e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002730:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002732:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002734:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002738:	e841 2300 	strex	r3, r2, [r1]
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e5      	bne.n	8002710 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002748:	2b01      	cmp	r3, #1
 800274a:	d119      	bne.n	8002780 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	e853 3f00 	ldrex	r3, [r3]
 800275a:	60bb      	str	r3, [r7, #8]
   return(result);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f023 0310 	bic.w	r3, r3, #16
 8002762:	647b      	str	r3, [r7, #68]	@ 0x44
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	330c      	adds	r3, #12
 800276a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800276c:	61ba      	str	r2, [r7, #24]
 800276e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002770:	6979      	ldr	r1, [r7, #20]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	e841 2300 	strex	r3, r2, [r1]
 8002778:	613b      	str	r3, [r7, #16]
   return(result);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1e5      	bne.n	800274c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800278e:	bf00      	nop
 8002790:	3754      	adds	r7, #84	@ 0x54
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff ff41 	bl	800263a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b21      	cmp	r3, #33	@ 0x21
 80027d2:	d13e      	bne.n	8002852 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027dc:	d114      	bne.n	8002808 <UART_Transmit_IT+0x48>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d110      	bne.n	8002808 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	1c9a      	adds	r2, r3, #2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	621a      	str	r2, [r3, #32]
 8002806:	e008      	b.n	800281a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	1c59      	adds	r1, r3, #1
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6211      	str	r1, [r2, #32]
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29b      	uxth	r3, r3
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4619      	mov	r1, r3
 8002828:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800283c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800284c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	e000      	b.n	8002854 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002852:	2302      	movs	r3, #2
  }
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002874:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff fed2 	bl	8002628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b08c      	sub	sp, #48	@ 0x30
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b22      	cmp	r3, #34	@ 0x22
 80028a0:	f040 80ae 	bne.w	8002a00 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ac:	d117      	bne.n	80028de <UART_Receive_IT+0x50>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d113      	bne.n	80028de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028be:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d6:	1c9a      	adds	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	@ 0x28
 80028dc:	e026      	b.n	800292c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028f0:	d007      	beq.n	8002902 <UART_Receive_IT+0x74>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <UART_Receive_IT+0x82>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e008      	b.n	8002922 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800291c:	b2da      	uxtb	r2, r3
 800291e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002920:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29b      	uxth	r3, r3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4619      	mov	r1, r3
 800293a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800293c:	2b00      	cmp	r3, #0
 800293e:	d15d      	bne.n	80029fc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0220 	bic.w	r2, r2, #32
 800294e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800295e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	2b01      	cmp	r3, #1
 8002984:	d135      	bne.n	80029f2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	e853 3f00 	ldrex	r3, [r3]
 800299a:	613b      	str	r3, [r7, #16]
   return(result);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f023 0310 	bic.w	r3, r3, #16
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ac:	623a      	str	r2, [r7, #32]
 80029ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b0:	69f9      	ldr	r1, [r7, #28]
 80029b2:	6a3a      	ldr	r2, [r7, #32]
 80029b4:	e841 2300 	strex	r3, r2, [r1]
 80029b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e5      	bne.n	800298c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d10a      	bne.n	80029e4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fe2e 	bl	800264c <HAL_UARTEx_RxEventCallback>
 80029f0:	e002      	b.n	80029f8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe f938 	bl	8000c68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e002      	b.n	8002a02 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e000      	b.n	8002a02 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a00:	2302      	movs	r3, #2
  }
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3730      	adds	r7, #48	@ 0x30
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a46:	f023 030c 	bic.w	r3, r3, #12
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b20 <UART_SetConfig+0x114>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a74:	f7ff fa6a 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	e002      	b.n	8002a82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a7c:	f7ff fa52 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 8002a80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	009a      	lsls	r2, r3, #2
 8002a8c:	441a      	add	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	4a22      	ldr	r2, [pc, #136]	@ (8002b24 <UART_SetConfig+0x118>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	0119      	lsls	r1, r3, #4
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <UART_SetConfig+0x118>)
 8002aba:	fba3 0302 	umull	r0, r3, r3, r2
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2064      	movs	r0, #100	@ 0x64
 8002ac2:	fb00 f303 	mul.w	r3, r0, r3
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	3332      	adds	r3, #50	@ 0x32
 8002acc:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <UART_SetConfig+0x118>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ad8:	4419      	add	r1, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009a      	lsls	r2, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <UART_SetConfig+0x118>)
 8002af2:	fba3 0302 	umull	r0, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2064      	movs	r0, #100	@ 0x64
 8002afa:	fb00 f303 	mul.w	r3, r0, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	3332      	adds	r3, #50	@ 0x32
 8002b04:	4a07      	ldr	r2, [pc, #28]	@ (8002b24 <UART_SetConfig+0x118>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	440a      	add	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40013800 	.word	0x40013800
 8002b24:	51eb851f 	.word	0x51eb851f

08002b28 <memset>:
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4402      	add	r2, r0
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <memset+0xa>
 8002b30:	4770      	bx	lr
 8002b32:	f803 1b01 	strb.w	r1, [r3], #1
 8002b36:	e7f9      	b.n	8002b2c <memset+0x4>

08002b38 <__libc_init_array>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	2600      	movs	r6, #0
 8002b3c:	4d0c      	ldr	r5, [pc, #48]	@ (8002b70 <__libc_init_array+0x38>)
 8002b3e:	4c0d      	ldr	r4, [pc, #52]	@ (8002b74 <__libc_init_array+0x3c>)
 8002b40:	1b64      	subs	r4, r4, r5
 8002b42:	10a4      	asrs	r4, r4, #2
 8002b44:	42a6      	cmp	r6, r4
 8002b46:	d109      	bne.n	8002b5c <__libc_init_array+0x24>
 8002b48:	f000 f81a 	bl	8002b80 <_init>
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	4d0a      	ldr	r5, [pc, #40]	@ (8002b78 <__libc_init_array+0x40>)
 8002b50:	4c0a      	ldr	r4, [pc, #40]	@ (8002b7c <__libc_init_array+0x44>)
 8002b52:	1b64      	subs	r4, r4, r5
 8002b54:	10a4      	asrs	r4, r4, #2
 8002b56:	42a6      	cmp	r6, r4
 8002b58:	d105      	bne.n	8002b66 <__libc_init_array+0x2e>
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
 8002b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b60:	4798      	blx	r3
 8002b62:	3601      	adds	r6, #1
 8002b64:	e7ee      	b.n	8002b44 <__libc_init_array+0xc>
 8002b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6a:	4798      	blx	r3
 8002b6c:	3601      	adds	r6, #1
 8002b6e:	e7f2      	b.n	8002b56 <__libc_init_array+0x1e>
 8002b70:	08002bc4 	.word	0x08002bc4
 8002b74:	08002bc4 	.word	0x08002bc4
 8002b78:	08002bc4 	.word	0x08002bc4
 8002b7c:	08002bc8 	.word	0x08002bc8

08002b80 <_init>:
 8002b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b82:	bf00      	nop
 8002b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b86:	bc08      	pop	{r3}
 8002b88:	469e      	mov	lr, r3
 8002b8a:	4770      	bx	lr

08002b8c <_fini>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	bf00      	nop
 8002b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b92:	bc08      	pop	{r3}
 8002b94:	469e      	mov	lr, r3
 8002b96:	4770      	bx	lr
