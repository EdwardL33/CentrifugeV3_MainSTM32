
Centrifuge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072fc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800740c  0800740c  0000840c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007440  08007440  0000900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007440  08007440  0000900c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007440  08007440  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007440  08007440  00008440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007444  08007444  00008444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007448  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  08007454  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08007454  00009190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2c2  00000000  00000000  00009035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ff  00000000  00000000  000172f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000199f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a76  00000000  00000000  0001a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f9b  00000000  00000000  0001b1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d60  00000000  00000000  00033191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008701b  00000000  00000000  00043ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000caf0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000391c  00000000  00000000  000caf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ce86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080073f4 	.word	0x080073f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080073f4 	.word	0x080073f4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_fmul>:
 800092c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000930:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000934:	bf1e      	ittt	ne
 8000936:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800093a:	ea92 0f0c 	teqne	r2, ip
 800093e:	ea93 0f0c 	teqne	r3, ip
 8000942:	d06f      	beq.n	8000a24 <__aeabi_fmul+0xf8>
 8000944:	441a      	add	r2, r3
 8000946:	ea80 0c01 	eor.w	ip, r0, r1
 800094a:	0240      	lsls	r0, r0, #9
 800094c:	bf18      	it	ne
 800094e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000952:	d01e      	beq.n	8000992 <__aeabi_fmul+0x66>
 8000954:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000958:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800095c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000960:	fba0 3101 	umull	r3, r1, r0, r1
 8000964:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000968:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800096c:	bf3e      	ittt	cc
 800096e:	0049      	lslcc	r1, r1, #1
 8000970:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000974:	005b      	lslcc	r3, r3, #1
 8000976:	ea40 0001 	orr.w	r0, r0, r1
 800097a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800097e:	2afd      	cmp	r2, #253	@ 0xfd
 8000980:	d81d      	bhi.n	80009be <__aeabi_fmul+0x92>
 8000982:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000986:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800098a:	bf08      	it	eq
 800098c:	f020 0001 	biceq.w	r0, r0, #1
 8000990:	4770      	bx	lr
 8000992:	f090 0f00 	teq	r0, #0
 8000996:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800099a:	bf08      	it	eq
 800099c:	0249      	lsleq	r1, r1, #9
 800099e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009a2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009a6:	3a7f      	subs	r2, #127	@ 0x7f
 80009a8:	bfc2      	ittt	gt
 80009aa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009ae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009b2:	4770      	bxgt	lr
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	3a01      	subs	r2, #1
 80009be:	dc5d      	bgt.n	8000a7c <__aeabi_fmul+0x150>
 80009c0:	f112 0f19 	cmn.w	r2, #25
 80009c4:	bfdc      	itt	le
 80009c6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80009ca:	4770      	bxle	lr
 80009cc:	f1c2 0200 	rsb	r2, r2, #0
 80009d0:	0041      	lsls	r1, r0, #1
 80009d2:	fa21 f102 	lsr.w	r1, r1, r2
 80009d6:	f1c2 0220 	rsb	r2, r2, #32
 80009da:	fa00 fc02 	lsl.w	ip, r0, r2
 80009de:	ea5f 0031 	movs.w	r0, r1, rrx
 80009e2:	f140 0000 	adc.w	r0, r0, #0
 80009e6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009ea:	bf08      	it	eq
 80009ec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009f0:	4770      	bx	lr
 80009f2:	f092 0f00 	teq	r2, #0
 80009f6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009fa:	bf02      	ittt	eq
 80009fc:	0040      	lsleq	r0, r0, #1
 80009fe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a02:	3a01      	subeq	r2, #1
 8000a04:	d0f9      	beq.n	80009fa <__aeabi_fmul+0xce>
 8000a06:	ea40 000c 	orr.w	r0, r0, ip
 8000a0a:	f093 0f00 	teq	r3, #0
 8000a0e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a12:	bf02      	ittt	eq
 8000a14:	0049      	lsleq	r1, r1, #1
 8000a16:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a1a:	3b01      	subeq	r3, #1
 8000a1c:	d0f9      	beq.n	8000a12 <__aeabi_fmul+0xe6>
 8000a1e:	ea41 010c 	orr.w	r1, r1, ip
 8000a22:	e78f      	b.n	8000944 <__aeabi_fmul+0x18>
 8000a24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a28:	ea92 0f0c 	teq	r2, ip
 8000a2c:	bf18      	it	ne
 8000a2e:	ea93 0f0c 	teqne	r3, ip
 8000a32:	d00a      	beq.n	8000a4a <__aeabi_fmul+0x11e>
 8000a34:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a38:	bf18      	it	ne
 8000a3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a3e:	d1d8      	bne.n	80009f2 <__aeabi_fmul+0xc6>
 8000a40:	ea80 0001 	eor.w	r0, r0, r1
 8000a44:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a48:	4770      	bx	lr
 8000a4a:	f090 0f00 	teq	r0, #0
 8000a4e:	bf17      	itett	ne
 8000a50:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000a54:	4608      	moveq	r0, r1
 8000a56:	f091 0f00 	teqne	r1, #0
 8000a5a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000a5e:	d014      	beq.n	8000a8a <__aeabi_fmul+0x15e>
 8000a60:	ea92 0f0c 	teq	r2, ip
 8000a64:	d101      	bne.n	8000a6a <__aeabi_fmul+0x13e>
 8000a66:	0242      	lsls	r2, r0, #9
 8000a68:	d10f      	bne.n	8000a8a <__aeabi_fmul+0x15e>
 8000a6a:	ea93 0f0c 	teq	r3, ip
 8000a6e:	d103      	bne.n	8000a78 <__aeabi_fmul+0x14c>
 8000a70:	024b      	lsls	r3, r1, #9
 8000a72:	bf18      	it	ne
 8000a74:	4608      	movne	r0, r1
 8000a76:	d108      	bne.n	8000a8a <__aeabi_fmul+0x15e>
 8000a78:	ea80 0001 	eor.w	r0, r0, r1
 8000a7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_fdiv>:
 8000a94:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a9c:	bf1e      	ittt	ne
 8000a9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aa2:	ea92 0f0c 	teqne	r2, ip
 8000aa6:	ea93 0f0c 	teqne	r3, ip
 8000aaa:	d069      	beq.n	8000b80 <__aeabi_fdiv+0xec>
 8000aac:	eba2 0203 	sub.w	r2, r2, r3
 8000ab0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ab4:	0249      	lsls	r1, r1, #9
 8000ab6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000aba:	d037      	beq.n	8000b2c <__aeabi_fdiv+0x98>
 8000abc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ac0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ac4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ac8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000acc:	428b      	cmp	r3, r1
 8000ace:	bf38      	it	cc
 8000ad0:	005b      	lslcc	r3, r3, #1
 8000ad2:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ad6:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ada:	428b      	cmp	r3, r1
 8000adc:	bf24      	itt	cs
 8000ade:	1a5b      	subcs	r3, r3, r1
 8000ae0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ae4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ae8:	bf24      	itt	cs
 8000aea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000aee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000af2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000af6:	bf24      	itt	cs
 8000af8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000afc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b00:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b04:	bf24      	itt	cs
 8000b06:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b0a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	bf18      	it	ne
 8000b12:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b16:	d1e0      	bne.n	8000ada <__aeabi_fdiv+0x46>
 8000b18:	2afd      	cmp	r2, #253	@ 0xfd
 8000b1a:	f63f af50 	bhi.w	80009be <__aeabi_fmul+0x92>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b30:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b34:	327f      	adds	r2, #127	@ 0x7f
 8000b36:	bfc2      	ittt	gt
 8000b38:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b3c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b40:	4770      	bxgt	lr
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b46:	f04f 0300 	mov.w	r3, #0
 8000b4a:	3a01      	subs	r2, #1
 8000b4c:	e737      	b.n	80009be <__aeabi_fmul+0x92>
 8000b4e:	f092 0f00 	teq	r2, #0
 8000b52:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b56:	bf02      	ittt	eq
 8000b58:	0040      	lsleq	r0, r0, #1
 8000b5a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b5e:	3a01      	subeq	r2, #1
 8000b60:	d0f9      	beq.n	8000b56 <__aeabi_fdiv+0xc2>
 8000b62:	ea40 000c 	orr.w	r0, r0, ip
 8000b66:	f093 0f00 	teq	r3, #0
 8000b6a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6e:	bf02      	ittt	eq
 8000b70:	0049      	lsleq	r1, r1, #1
 8000b72:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b76:	3b01      	subeq	r3, #1
 8000b78:	d0f9      	beq.n	8000b6e <__aeabi_fdiv+0xda>
 8000b7a:	ea41 010c 	orr.w	r1, r1, ip
 8000b7e:	e795      	b.n	8000aac <__aeabi_fdiv+0x18>
 8000b80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b84:	ea92 0f0c 	teq	r2, ip
 8000b88:	d108      	bne.n	8000b9c <__aeabi_fdiv+0x108>
 8000b8a:	0242      	lsls	r2, r0, #9
 8000b8c:	f47f af7d 	bne.w	8000a8a <__aeabi_fmul+0x15e>
 8000b90:	ea93 0f0c 	teq	r3, ip
 8000b94:	f47f af70 	bne.w	8000a78 <__aeabi_fmul+0x14c>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	e776      	b.n	8000a8a <__aeabi_fmul+0x15e>
 8000b9c:	ea93 0f0c 	teq	r3, ip
 8000ba0:	d104      	bne.n	8000bac <__aeabi_fdiv+0x118>
 8000ba2:	024b      	lsls	r3, r1, #9
 8000ba4:	f43f af4c 	beq.w	8000a40 <__aeabi_fmul+0x114>
 8000ba8:	4608      	mov	r0, r1
 8000baa:	e76e      	b.n	8000a8a <__aeabi_fmul+0x15e>
 8000bac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000bb0:	bf18      	it	ne
 8000bb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bb6:	d1ca      	bne.n	8000b4e <__aeabi_fdiv+0xba>
 8000bb8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000bbc:	f47f af5c 	bne.w	8000a78 <__aeabi_fmul+0x14c>
 8000bc0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000bc4:	f47f af3c 	bne.w	8000a40 <__aeabi_fmul+0x114>
 8000bc8:	e75f      	b.n	8000a8a <__aeabi_fmul+0x15e>
 8000bca:	bf00      	nop

08000bcc <__gesf2>:
 8000bcc:	f04f 3cff 	mov.w	ip, #4294967295
 8000bd0:	e006      	b.n	8000be0 <__cmpsf2+0x4>
 8000bd2:	bf00      	nop

08000bd4 <__lesf2>:
 8000bd4:	f04f 0c01 	mov.w	ip, #1
 8000bd8:	e002      	b.n	8000be0 <__cmpsf2+0x4>
 8000bda:	bf00      	nop

08000bdc <__cmpsf2>:
 8000bdc:	f04f 0c01 	mov.w	ip, #1
 8000be0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000be4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf0:	bf18      	it	ne
 8000bf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf6:	d011      	beq.n	8000c1c <__cmpsf2+0x40>
 8000bf8:	b001      	add	sp, #4
 8000bfa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bfe:	bf18      	it	ne
 8000c00:	ea90 0f01 	teqne	r0, r1
 8000c04:	bf58      	it	pl
 8000c06:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c0a:	bf88      	it	hi
 8000c0c:	17c8      	asrhi	r0, r1, #31
 8000c0e:	bf38      	it	cc
 8000c10:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c14:	bf18      	it	ne
 8000c16:	f040 0001 	orrne.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	d102      	bne.n	8000c28 <__cmpsf2+0x4c>
 8000c22:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c26:	d105      	bne.n	8000c34 <__cmpsf2+0x58>
 8000c28:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c2c:	d1e4      	bne.n	8000bf8 <__cmpsf2+0x1c>
 8000c2e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c32:	d0e1      	beq.n	8000bf8 <__cmpsf2+0x1c>
 8000c34:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_cfrcmple>:
 8000c3c:	4684      	mov	ip, r0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	4661      	mov	r1, ip
 8000c42:	e7ff      	b.n	8000c44 <__aeabi_cfcmpeq>

08000c44 <__aeabi_cfcmpeq>:
 8000c44:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c46:	f7ff ffc9 	bl	8000bdc <__cmpsf2>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	bf48      	it	mi
 8000c4e:	f110 0f00 	cmnmi.w	r0, #0
 8000c52:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c54 <__aeabi_fcmpeq>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff fff4 	bl	8000c44 <__aeabi_cfcmpeq>
 8000c5c:	bf0c      	ite	eq
 8000c5e:	2001      	moveq	r0, #1
 8000c60:	2000      	movne	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_fcmplt>:
 8000c68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c6c:	f7ff ffea 	bl	8000c44 <__aeabi_cfcmpeq>
 8000c70:	bf34      	ite	cc
 8000c72:	2001      	movcc	r0, #1
 8000c74:	2000      	movcs	r0, #0
 8000c76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7a:	bf00      	nop

08000c7c <__aeabi_fcmple>:
 8000c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c80:	f7ff ffe0 	bl	8000c44 <__aeabi_cfcmpeq>
 8000c84:	bf94      	ite	ls
 8000c86:	2001      	movls	r0, #1
 8000c88:	2000      	movhi	r0, #0
 8000c8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fcmpge>:
 8000c90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c94:	f7ff ffd2 	bl	8000c3c <__aeabi_cfrcmple>
 8000c98:	bf94      	ite	ls
 8000c9a:	2001      	movls	r0, #1
 8000c9c:	2000      	movhi	r0, #0
 8000c9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_fcmpgt>:
 8000ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca8:	f7ff ffc8 	bl	8000c3c <__aeabi_cfrcmple>
 8000cac:	bf34      	ite	cc
 8000cae:	2001      	movcc	r0, #1
 8000cb0:	2000      	movcs	r0, #0
 8000cb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_f2uiz>:
 8000cb8:	0042      	lsls	r2, r0, #1
 8000cba:	d20e      	bcs.n	8000cda <__aeabi_f2uiz+0x22>
 8000cbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000cc0:	d30b      	bcc.n	8000cda <__aeabi_f2uiz+0x22>
 8000cc2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cca:	d409      	bmi.n	8000ce0 <__aeabi_f2uiz+0x28>
 8000ccc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cd4:	fa23 f002 	lsr.w	r0, r3, r2
 8000cd8:	4770      	bx	lr
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	4770      	bx	lr
 8000ce0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ce4:	d101      	bne.n	8000cea <__aeabi_f2uiz+0x32>
 8000ce6:	0242      	lsls	r2, r0, #9
 8000ce8:	d102      	bne.n	8000cf0 <__aeabi_f2uiz+0x38>
 8000cea:	f04f 30ff 	mov.w	r0, #4294967295
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b089      	sub	sp, #36	@ 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	6839      	ldr	r1, [r7, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f822 	bl	8000d64 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	461c      	mov	r4, r3
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	3724      	adds	r7, #36	@ 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}

08000d36 <MCP4725_isConnected>:

    Check the connection
*/
/**************************************************************************/
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	4619      	mov	r1, r3
 8000d48:	2364      	movs	r3, #100	@ 0x64
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	f002 fa16 	bl	800317c <HAL_I2C_IsDeviceReady>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf0c      	ite	eq
 8000d56:	2301      	moveq	r3, #1
 8000d58:	2300      	movne	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8000d6e:	f04f 0100 	mov.w	r1, #0
 8000d72:	6838      	ldr	r0, [r7, #0]
 8000d74:	f7ff ff6e 	bl	8000c54 <__aeabi_fcmpeq>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <MCP4725_setReferenceVoltage+0x22>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a0c      	ldr	r2, [pc, #48]	@ (8000db4 <MCP4725_setReferenceVoltage+0x50>)
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	e002      	b.n	8000d8c <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 408b 	mov.w	r0, #1166016512	@ 0x45800000
 8000d96:	f7ff fe7d 	bl	8000a94 <__aeabi_fdiv>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff8b 	bl	8000cb8 <__aeabi_f2uiz>
 8000da2:	4603      	mov	r3, r0
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	819a      	strh	r2, [r3, #12]
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40533333 	.word	0x40533333

08000db8 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	807b      	strh	r3, [r7, #2]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	707b      	strb	r3, [r7, #1]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8000dd2:	783b      	ldrb	r3, [r7, #0]
 8000dd4:	787a      	ldrb	r2, [r7, #1]
 8000dd6:	8879      	ldrh	r1, [r7, #2]
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f822 	bl	8000e22 <MCP4725_writeComand>
 8000dde:	4603      	mov	r3, r0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 8000df0:	2101      	movs	r1, #1
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f897 	bl	8000f26 <MCP4725_readRegister>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 8000dfc:	89fb      	ldrh	r3, [r7, #14]
 8000dfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d008      	beq.n	8000e18 <MCP4725_getEepromBusyFlag+0x30>
 8000e06:	89fb      	ldrh	r3, [r7, #14]
 8000e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf14      	ite	ne
 8000e10:	2301      	movne	r3, #1
 8000e12:	2300      	moveq	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	e000      	b.n	8000e1a <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af02      	add	r7, sp, #8
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4603      	mov	r3, r0
 8000e32:	807b      	strh	r3, [r7, #2]
 8000e34:	460b      	mov	r3, r1
 8000e36:	707b      	strb	r3, [r7, #1]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b60      	cmp	r3, #96	@ 0x60
 8000e40:	d029      	beq.n	8000e96 <MCP4725_writeComand+0x74>
 8000e42:	2b60      	cmp	r3, #96	@ 0x60
 8000e44:	dc4c      	bgt.n	8000ee0 <MCP4725_writeComand+0xbe>
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <MCP4725_writeComand+0x2e>
 8000e4a:	2b40      	cmp	r3, #64	@ 0x40
 8000e4c:	d023      	beq.n	8000e96 <MCP4725_writeComand+0x74>
 8000e4e:	e047      	b.n	8000ee0 <MCP4725_writeComand+0xbe>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18

      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8000e50:	f997 3000 	ldrsb.w	r3, [r7]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	b25a      	sxtb	r2, r3
 8000e58:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b25a      	sxtb	r2, r3
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	737b      	strb	r3, [r7, #13]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	791b      	ldrb	r3, [r3, #4]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f107 020c 	add.w	r2, r7, #12
 8000e84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f001 fe0c 	bl	8002aa8 <HAL_I2C_Master_Transmit>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73fb      	strb	r3, [r7, #15]

      break;
 8000e94:	e024      	b.n	8000ee0 <MCP4725_writeComand+0xbe>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode  | (powerType << 1);
 8000e9c:	f997 3000 	ldrsb.w	r3, [r7]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	b25a      	sxtb	r2, r3
 8000ea4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	73bb      	strb	r3, [r7, #14]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	791b      	ldrb	r3, [r3, #4]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f107 020c 	add.w	r2, r7, #12
 8000ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	f001 fde7 	bl	8002aa8 <HAL_I2C_Master_Transmit>
 8000eda:	4603      	mov	r3, r0
 8000edc:	73fb      	strb	r3, [r7, #15]

			break;
 8000ede:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MCP4725_writeComand+0xc8>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e019      	b.n	8000f1e <MCP4725_writeComand+0xfc>

  if (mode == MCP4725_EEPROM_MODE)
 8000eea:	787b      	ldrb	r3, [r7, #1]
 8000eec:	2b60      	cmp	r3, #96	@ 0x60
 8000eee:	d115      	bne.n	8000f1c <MCP4725_writeComand+0xfa>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff79 	bl	8000de8 <MCP4725_getEepromBusyFlag>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d101      	bne.n	8000f00 <MCP4725_writeComand+0xde>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e00e      	b.n	8000f1e <MCP4725_writeComand+0xfc>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 8000f00:	2019      	movs	r0, #25
 8000f02:	f001 f8b9 	bl	8002078 <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff6e 	bl	8000de8 <MCP4725_getEepromBusyFlag>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d101      	bne.n	8000f16 <MCP4725_writeComand+0xf4>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e003      	b.n	8000f1e <MCP4725_writeComand+0xfc>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 8000f16:	2019      	movs	r0, #25
 8000f18:	f001 f8ae 	bl	8002078 <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8000f1c:	2301      	movs	r3, #1
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 8000f26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70fb      	strb	r3, [r7, #3]
 8000f34:	466b      	mov	r3, sp
 8000f36:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8000f40:	78f9      	ldrb	r1, [r7, #3]
 8000f42:	460b      	mov	r3, r1
 8000f44:	3b01      	subs	r3, #1
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	b2cb      	uxtb	r3, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4698      	mov	r8, r3
 8000f4e:	4691      	mov	r9, r2
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f64:	b2cb      	uxtb	r3, r1
 8000f66:	2200      	movs	r2, #0
 8000f68:	461c      	mov	r4, r3
 8000f6a:	4615      	mov	r5, r2
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	00eb      	lsls	r3, r5, #3
 8000f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f7a:	00e2      	lsls	r2, r4, #3
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	3307      	adds	r3, #7
 8000f80:	08db      	lsrs	r3, r3, #3
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	ebad 0d03 	sub.w	sp, sp, r3
 8000f88:	ab02      	add	r3, sp, #8
 8000f8a:	3300      	adds	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;

	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	791b      	ldrb	r3, [r3, #4]
 8000f96:	4619      	mov	r1, r3
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fa0:	9200      	str	r2, [sp, #0]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	f001 fe7e 	bl	8002ca4 <HAL_I2C_Master_Receive>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8000fac:	7afb      	ldrb	r3, [r7, #11]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <MCP4725_readRegister+0x92>
 8000fb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fb6:	e020      	b.n	8000ffa <MCP4725_readRegister+0xd4>


  /* read data from buffer */
  switch (dataType)
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	d00a      	beq.n	8000fd4 <MCP4725_readRegister+0xae>
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	dc1a      	bgt.n	8000ff8 <MCP4725_readRegister+0xd2>
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d002      	beq.n	8000fcc <MCP4725_readRegister+0xa6>
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d004      	beq.n	8000fd4 <MCP4725_readRegister+0xae>
 8000fca:	e015      	b.n	8000ff8 <MCP4725_readRegister+0xd2>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	82fb      	strh	r3, [r7, #22]

      break;
 8000fd2:	e011      	b.n	8000ff8 <MCP4725_readRegister+0xd2>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 8000fd4:	8abb      	ldrh	r3, [r7, #20]
 8000fd6:	3b02      	subs	r3, #2
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
 8000fdc:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 8000fde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	8abb      	ldrh	r3, [r7, #20]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	68f9      	ldr	r1, [r7, #12]
 8000fec:	5ccb      	ldrb	r3, [r1, r3]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	82fb      	strh	r3, [r7, #22]
      break;
 8000ff6:	bf00      	nop
  }

  return ret_val;
 8000ff8:	8afb      	ldrh	r3, [r7, #22]
 8000ffa:	46b5      	mov	sp, r6
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	371c      	adds	r7, #28
 8001000:	46bd      	mov	sp, r7
 8001002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001008 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	4b4b      	ldr	r3, [pc, #300]	@ (800114c <MX_GPIO_Init+0x144>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a4a      	ldr	r2, [pc, #296]	@ (800114c <MX_GPIO_Init+0x144>)
 8001022:	f043 0310 	orr.w	r3, r3, #16
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b48      	ldr	r3, [pc, #288]	@ (800114c <MX_GPIO_Init+0x144>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001034:	4b45      	ldr	r3, [pc, #276]	@ (800114c <MX_GPIO_Init+0x144>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a44      	ldr	r2, [pc, #272]	@ (800114c <MX_GPIO_Init+0x144>)
 800103a:	f043 0320 	orr.w	r3, r3, #32
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b42      	ldr	r3, [pc, #264]	@ (800114c <MX_GPIO_Init+0x144>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0320 	and.w	r3, r3, #32
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b3f      	ldr	r3, [pc, #252]	@ (800114c <MX_GPIO_Init+0x144>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a3e      	ldr	r2, [pc, #248]	@ (800114c <MX_GPIO_Init+0x144>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b3c      	ldr	r3, [pc, #240]	@ (800114c <MX_GPIO_Init+0x144>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001064:	4b39      	ldr	r3, [pc, #228]	@ (800114c <MX_GPIO_Init+0x144>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a38      	ldr	r2, [pc, #224]	@ (800114c <MX_GPIO_Init+0x144>)
 800106a:	f043 0308 	orr.w	r3, r3, #8
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b36      	ldr	r3, [pc, #216]	@ (800114c <MX_GPIO_Init+0x144>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001082:	4833      	ldr	r0, [pc, #204]	@ (8001150 <MX_GPIO_Init+0x148>)
 8001084:	f001 fb6e 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2110      	movs	r1, #16
 800108c:	4831      	ldr	r0, [pc, #196]	@ (8001154 <MX_GPIO_Init+0x14c>)
 800108e:	f001 fb69 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CE_GPIO_Port, SPI1_CE_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2101      	movs	r1, #1
 8001096:	4830      	ldr	r0, [pc, #192]	@ (8001158 <MX_GPIO_Init+0x150>)
 8001098:	f001 fb64 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80010a2:	482c      	ldr	r0, [pc, #176]	@ (8001154 <MX_GPIO_Init+0x14c>)
 80010a4:	f001 fb5e 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4619      	mov	r1, r3
 80010c0:	4823      	ldr	r0, [pc, #140]	@ (8001150 <MX_GPIO_Init+0x148>)
 80010c2:	f001 f9cb 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin;
 80010c6:	2310      	movs	r3, #16
 80010c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CSN_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4619      	mov	r1, r3
 80010dc:	481d      	ldr	r0, [pc, #116]	@ (8001154 <MX_GPIO_Init+0x14c>)
 80010de:	f001 f9bd 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CE_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin;
 80010e2:	2301      	movs	r3, #1
 80010e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CE_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4619      	mov	r1, r3
 80010f8:	4817      	ldr	r0, [pc, #92]	@ (8001158 <MX_GPIO_Init+0x150>)
 80010fa:	f001 f9af 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80010fe:	2302      	movs	r3, #2
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001102:	4b16      	ldr	r3, [pc, #88]	@ (800115c <MX_GPIO_Init+0x154>)
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	4811      	ldr	r0, [pc, #68]	@ (8001158 <MX_GPIO_Init+0x150>)
 8001112:	f001 f9a3 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001116:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2302      	movs	r3, #2
 8001126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	4809      	ldr	r0, [pc, #36]	@ (8001154 <MX_GPIO_Init+0x14c>)
 8001130:	f001 f994 	bl	800245c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2007      	movs	r0, #7
 800113a:	f001 f898 	bl	800226e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800113e:	2007      	movs	r0, #7
 8001140:	f001 f8b1 	bl	80022a6 <HAL_NVIC_EnableIRQ>

}
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40021000 	.word	0x40021000
 8001150:	40011000 	.word	0x40011000
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00
 800115c:	10210000 	.word	0x10210000

08001160 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	@ (80011b4 <MX_I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_I2C1_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <MX_I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <MX_I2C1_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001182:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <MX_I2C1_Init+0x50>)
 800119e:	f001 fb2b 	bl	80027f8 <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a8:	f000 fa26 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000028 	.word	0x20000028
 80011b4:	40005400 	.word	0x40005400
 80011b8:	000186a0 	.word	0x000186a0

080011bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a25      	ldr	r2, [pc, #148]	@ (800126c <HAL_I2C_MspInit+0xb0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d142      	bne.n	8001262 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b24      	ldr	r3, [pc, #144]	@ (8001270 <HAL_I2C_MspInit+0xb4>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a23      	ldr	r2, [pc, #140]	@ (8001270 <HAL_I2C_MspInit+0xb4>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <HAL_I2C_MspInit+0xb4>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fa:	2312      	movs	r3, #18
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	481a      	ldr	r0, [pc, #104]	@ (8001274 <HAL_I2C_MspInit+0xb8>)
 800120a:	f001 f927 	bl	800245c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800120e:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <HAL_I2C_MspInit+0xbc>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
 8001214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001216:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
 800121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
 8001224:	4a14      	ldr	r2, [pc, #80]	@ (8001278 <HAL_I2C_MspInit+0xbc>)
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_I2C_MspInit+0xb4>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a10      	ldr	r2, [pc, #64]	@ (8001270 <HAL_I2C_MspInit+0xb4>)
 8001230:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <HAL_I2C_MspInit+0xb4>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	201f      	movs	r0, #31
 8001248:	f001 f811 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800124c:	201f      	movs	r0, #31
 800124e:	f001 f82a 	bl	80022a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2020      	movs	r0, #32
 8001258:	f001 f809 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800125c:	2020      	movs	r0, #32
 800125e:	f001 f822 	bl	80022a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	@ 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40005400 	.word	0x40005400
 8001270:	40021000 	.word	0x40021000
 8001274:	40010c00 	.word	0x40010c00
 8001278:	40010000 	.word	0x40010000
 800127c:	00000000 	.word	0x00000000

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001286:	f000 fe95 	bl	8001fb4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128a:	f000 f921 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128e:	f7ff febb 	bl	8001008 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001292:	f000 fd71 	bl	8001d78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001296:	f000 fd99 	bl	8001dcc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800129a:	f7ff ff61 	bl	8001160 <MX_I2C1_Init>
  MX_SPI1_Init();
 800129e:	f000 fc57 	bl	8001b50 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_buff, 1);
 80012a2:	2201      	movs	r2, #1
 80012a4:	497c      	ldr	r1, [pc, #496]	@ (8001498 <main+0x218>)
 80012a6:	487d      	ldr	r0, [pc, #500]	@ (800149c <main+0x21c>)
 80012a8:	f005 fb40 	bl	800692c <HAL_UART_Receive_IT>


  // initialize radio
  nrf24l01p_rx_init(2500, _1Mbps);
 80012ac:	2100      	movs	r1, #0
 80012ae:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80012b2:	f000 fa2b 	bl	800170c <nrf24l01p_rx_init>

  // Second, initialize the MCP4725 object:
  myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 3.30);
 80012b6:	4c7a      	ldr	r4, [pc, #488]	@ (80014a0 <main+0x220>)
 80012b8:	4638      	mov	r0, r7
 80012ba:	4b7a      	ldr	r3, [pc, #488]	@ (80014a4 <main+0x224>)
 80012bc:	2260      	movs	r2, #96	@ 0x60
 80012be:	497a      	ldr	r1, [pc, #488]	@ (80014a8 <main+0x228>)
 80012c0:	f7ff fd1a 	bl	8000cf8 <MCP4725_init>
 80012c4:	463b      	mov	r3, r7
 80012c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Check the connection:
  if(MCP4725_isConnected(&myMCP4725)){
 80012cc:	4874      	ldr	r0, [pc, #464]	@ (80014a0 <main+0x220>)
 80012ce:	f7ff fd32 	bl	8000d36 <MCP4725_isConnected>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d009      	beq.n	80012ec <main+0x6c>

	  /* Print that the DAC is connected */
	  uint8_t success_arr[] = {'g','o','o','d'};
 80012d8:	4b74      	ldr	r3, [pc, #464]	@ (80014ac <main+0x22c>)
 80012da:	617b      	str	r3, [r7, #20]
	  HAL_UART_Transmit_IT(&huart2, success_arr, 4);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2204      	movs	r2, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	486d      	ldr	r0, [pc, #436]	@ (800149c <main+0x21c>)
 80012e6:	f005 faec 	bl	80068c2 <HAL_UART_Transmit_IT>
 80012ea:	e00f      	b.n	800130c <main+0x8c>
  }
  else{

	 /* Print that the DAC is NOT connected */
		uint8_t fail_arr[] = {'b','a','d'};
 80012ec:	4a70      	ldr	r2, [pc, #448]	@ (80014b0 <main+0x230>)
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	4611      	mov	r1, r2
 80012f6:	8019      	strh	r1, [r3, #0]
 80012f8:	3302      	adds	r3, #2
 80012fa:	0c12      	lsrs	r2, r2, #16
 80012fc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, fail_arr, 3);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	2203      	movs	r2, #3
 8001304:	4619      	mov	r1, r3
 8001306:	4865      	ldr	r0, [pc, #404]	@ (800149c <main+0x21c>)
 8001308:	f005 fadb 	bl	80068c2 <HAL_UART_Transmit_IT>

}

	// default off
	setValue(0);
 800130c:	2000      	movs	r0, #0
 800130e:	f000 f93b 	bl	8001588 <setValue>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001318:	4866      	ldr	r0, [pc, #408]	@ (80014b4 <main+0x234>)
 800131a:	f001 fa23 	bl	8002764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001324:	4863      	ldr	r0, [pc, #396]	@ (80014b4 <main+0x234>)
 8001326:	f001 fa1d 	bl	8002764 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_UART_Transmit_IT(&huart2, rx_data, 1);
 800132a:	2201      	movs	r2, #1
 800132c:	4962      	ldr	r1, [pc, #392]	@ (80014b8 <main+0x238>)
 800132e:	485b      	ldr	r0, [pc, #364]	@ (800149c <main+0x21c>)
 8001330:	f005 fac7 	bl	80068c2 <HAL_UART_Transmit_IT>
//		  HAL_Delay(300);
//	  }



	  if(rx_buff[0] != 0){
 8001334:	4b58      	ldr	r3, [pc, #352]	@ (8001498 <main+0x218>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d07a      	beq.n	8001432 <main+0x1b2>
		  if(rx_buff[0] <= '9' && rx_buff[0] >= '0'){
 800133c:	4b56      	ldr	r3, [pc, #344]	@ (8001498 <main+0x218>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b39      	cmp	r3, #57	@ 0x39
 8001342:	d827      	bhi.n	8001394 <main+0x114>
 8001344:	4b54      	ldr	r3, [pc, #336]	@ (8001498 <main+0x218>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b2f      	cmp	r3, #47	@ 0x2f
 800134a:	d923      	bls.n	8001394 <main+0x114>
			  voltageSent = (uint16_t)((int)(rx_buff[0] - '0') / 9.0 * 4095);
 800134c:	4b52      	ldr	r3, [pc, #328]	@ (8001498 <main+0x218>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	3b30      	subs	r3, #48	@ 0x30
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f84e 	bl	80003f4 <__aeabi_i2d>
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b57      	ldr	r3, [pc, #348]	@ (80014bc <main+0x23c>)
 800135e:	f7ff f9dd 	bl	800071c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	a349      	add	r3, pc, #292	@ (adr r3, 8001490 <main+0x210>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff f8aa 	bl	80004c8 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fab6 	bl	80008ec <__aeabi_d2uiz>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b4e      	ldr	r3, [pc, #312]	@ (80014c0 <main+0x240>)
 8001386:	801a      	strh	r2, [r3, #0]
			  setValue(voltageSent);
 8001388:	4b4d      	ldr	r3, [pc, #308]	@ (80014c0 <main+0x240>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f8fb 	bl	8001588 <setValue>
 8001392:	e04b      	b.n	800142c <main+0x1ac>

		  }else if(rx_buff[0] == 'M') { // Motor on Brake off
 8001394:	4b40      	ldr	r3, [pc, #256]	@ (8001498 <main+0x218>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b4d      	cmp	r3, #77	@ 0x4d
 800139a:	d10c      	bne.n	80013b6 <main+0x136>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Motor on
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013a2:	4844      	ldr	r0, [pc, #272]	@ (80014b4 <main+0x234>)
 80013a4:	f001 f9de 	bl	8002764 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ae:	4841      	ldr	r0, [pc, #260]	@ (80014b4 <main+0x234>)
 80013b0:	f001 f9d8 	bl	8002764 <HAL_GPIO_WritePin>
 80013b4:	e03a      	b.n	800142c <main+0x1ac>
		  }else if(rx_buff[0] == 'm') { // Motor off Brake off
 80013b6:	4b38      	ldr	r3, [pc, #224]	@ (8001498 <main+0x218>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b6d      	cmp	r3, #109	@ 0x6d
 80013bc:	d10c      	bne.n	80013d8 <main+0x158>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013c4:	483b      	ldr	r0, [pc, #236]	@ (80014b4 <main+0x234>)
 80013c6:	f001 f9cd 	bl	8002764 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013d0:	4838      	ldr	r0, [pc, #224]	@ (80014b4 <main+0x234>)
 80013d2:	f001 f9c7 	bl	8002764 <HAL_GPIO_WritePin>
 80013d6:	e029      	b.n	800142c <main+0x1ac>
		  }else if(rx_buff[0] == 'b') { // Motor off Brake on
 80013d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <main+0x218>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b62      	cmp	r3, #98	@ 0x62
 80013de:	d10c      	bne.n	80013fa <main+0x17a>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013e6:	4833      	ldr	r0, [pc, #204]	@ (80014b4 <main+0x234>)
 80013e8:	f001 f9bc 	bl	8002764 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f2:	4830      	ldr	r0, [pc, #192]	@ (80014b4 <main+0x234>)
 80013f4:	f001 f9b6 	bl	8002764 <HAL_GPIO_WritePin>
 80013f8:	e018      	b.n	800142c <main+0x1ac>
		  }else if(rx_buff[0] == 'd') { // sending voltage
 80013fa:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <main+0x218>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b64      	cmp	r3, #100	@ 0x64
 8001400:	d104      	bne.n	800140c <main+0x18c>
			  setValue(2048); // half of 3.3v
 8001402:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001406:	f000 f8bf 	bl	8001588 <setValue>
 800140a:	e00f      	b.n	800142c <main+0x1ac>
		  }else if(rx_buff[0] == 'e') { // sending voltage
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <main+0x218>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b65      	cmp	r3, #101	@ 0x65
 8001412:	d103      	bne.n	800141c <main+0x19c>
			  setValue(0); // a fourth of 3.3v
 8001414:	2000      	movs	r0, #0
 8001416:	f000 f8b7 	bl	8001588 <setValue>
 800141a:	e007      	b.n	800142c <main+0x1ac>
		  }else if(rx_buff[0] == 'f') { // sending voltage
 800141c:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <main+0x218>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b66      	cmp	r3, #102	@ 0x66
 8001422:	d103      	bne.n	800142c <main+0x1ac>
			  setValue(4095); // a fourth of 3.3v
 8001424:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8001428:	f000 f8ae 	bl	8001588 <setValue>
		  }


		  rx_buff[0] = 0;
 800142c:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <main+0x218>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
	  }

	  ledTimer ++;
 8001432:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <main+0x244>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <main+0x244>)
 800143c:	801a      	strh	r2, [r3, #0]
	  if(ledTimer > 200){
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <main+0x244>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	2bc8      	cmp	r3, #200	@ 0xc8
 8001444:	d91d      	bls.n	8001482 <main+0x202>
		  ledTimer = 0;
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <main+0x244>)
 8001448:	2200      	movs	r2, #0
 800144a:	801a      	strh	r2, [r3, #0]
		  led = !led;
 800144c:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <main+0x248>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <main+0x248>)
 800145e:	701a      	strb	r2, [r3, #0]
		  if(led){
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <main+0x248>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <main+0x1f6>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800146e:	4817      	ldr	r0, [pc, #92]	@ (80014cc <main+0x24c>)
 8001470:	f001 f978 	bl	8002764 <HAL_GPIO_WritePin>
 8001474:	e005      	b.n	8001482 <main+0x202>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800147c:	4813      	ldr	r0, [pc, #76]	@ (80014cc <main+0x24c>)
 800147e:	f001 f971 	bl	8002764 <HAL_GPIO_WritePin>
		  }
	  }
	  HAL_Delay(1);
 8001482:	2001      	movs	r0, #1
 8001484:	f000 fdf8 	bl	8002078 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2, rx_data, 1);
 8001488:	e74f      	b.n	800132a <main+0xaa>
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w
 8001490:	00000000 	.word	0x00000000
 8001494:	40affe00 	.word	0x40affe00
 8001498:	2000007c 	.word	0x2000007c
 800149c:	20000144 	.word	0x20000144
 80014a0:	20000094 	.word	0x20000094
 80014a4:	40533333 	.word	0x40533333
 80014a8:	20000028 	.word	0x20000028
 80014ac:	646f6f67 	.word	0x646f6f67
 80014b0:	0800740c 	.word	0x0800740c
 80014b4:	40010800 	.word	0x40010800
 80014b8:	20000080 	.word	0x20000080
 80014bc:	40220000 	.word	0x40220000
 80014c0:	20000090 	.word	0x20000090
 80014c4:	2000008e 	.word	0x2000008e
 80014c8:	2000008c 	.word	0x2000008c
 80014cc:	40011000 	.word	0x40011000

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b090      	sub	sp, #64	@ 0x40
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	2228      	movs	r2, #40	@ 0x28
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f005 ff5c 	bl	800739c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001504:	2302      	movs	r3, #2
 8001506:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800150c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800150e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	4618      	mov	r0, r3
 800151a:	f003 ffdd 	bl	80054d8 <HAL_RCC_OscConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001524:	f000 f868 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001528:	230f      	movs	r3, #15
 800152a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152c:	2302      	movs	r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2102      	movs	r1, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f004 fa4a 	bl	80059dc <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800154e:	f000 f853 	bl	80015f8 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3740      	adds	r7, #64	@ 0x40
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
		  HAL_UART_Receive_IT(&huart2, rx_buff, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	4906      	ldr	r1, [pc, #24]	@ (8001580 <HAL_UART_RxCpltCallback+0x24>)
 8001568:	4806      	ldr	r0, [pc, #24]	@ (8001584 <HAL_UART_RxCpltCallback+0x28>)
 800156a:	f005 f9df 	bl	800692c <HAL_UART_Receive_IT>
		  HAL_UART_Transmit_IT(&huart2, rx_buff, 1);
 800156e:	2201      	movs	r2, #1
 8001570:	4903      	ldr	r1, [pc, #12]	@ (8001580 <HAL_UART_RxCpltCallback+0x24>)
 8001572:	4804      	ldr	r0, [pc, #16]	@ (8001584 <HAL_UART_RxCpltCallback+0x28>)
 8001574:	f005 f9a5 	bl	80068c2 <HAL_UART_Transmit_IT>
	}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000007c 	.word	0x2000007c
 8001584:	20000144 	.word	0x20000144

08001588 <setValue>:

	uint8_t setValue(uint16_t value){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
		return MCP4725_setValue(&myMCP4725, value, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001592:	88f9      	ldrh	r1, [r7, #6]
 8001594:	2300      	movs	r3, #0
 8001596:	2200      	movs	r2, #0
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <setValue+0x20>)
 800159a:	f7ff fc0d 	bl	8000db8 <MCP4725_setValue>
 800159e:	4603      	mov	r3, r0
	}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000094 	.word	0x20000094

080015ac <HAL_GPIO_EXTI_Callback>:

	// for radio recieve
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d112      	bne.n	80015e2 <HAL_GPIO_EXTI_Callback+0x36>
		    nrf24l01p_rx_receive(rx_data); // read data when data ready flag is set
 80015bc:	480b      	ldr	r0, [pc, #44]	@ (80015ec <HAL_GPIO_EXTI_Callback+0x40>)
 80015be:	f000 f8d3 	bl	8001768 <nrf24l01p_rx_receive>
		    uint8_t success_arr[] = {'y','e','s'};
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <HAL_GPIO_EXTI_Callback+0x44>)
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	4611      	mov	r1, r2
 80015cc:	8019      	strh	r1, [r3, #0]
 80015ce:	3302      	adds	r3, #2
 80015d0:	0c12      	lsrs	r2, r2, #16
 80015d2:	701a      	strb	r2, [r3, #0]
		    HAL_UART_Transmit_IT(&huart2, success_arr, 3);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2203      	movs	r2, #3
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <HAL_GPIO_EXTI_Callback+0x48>)
 80015de:	f005 f970 	bl	80068c2 <HAL_UART_Transmit_IT>
		}



	}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000080 	.word	0x20000080
 80015f0:	08007410 	.word	0x08007410
 80015f4:	20000144 	.word	0x20000144

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <Error_Handler+0x8>

08001604 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8001608:	2201      	movs	r2, #1
 800160a:	2110      	movs	r1, #16
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <cs_high+0x14>)
 800160e:	f001 f8a9 	bl	8002764 <HAL_GPIO_WritePin>
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40010800 	.word	0x40010800

0800161c <cs_low>:

static void cs_low()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2110      	movs	r1, #16
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <cs_low+0x14>)
 8001626:	f001 f89d 	bl	8002764 <HAL_GPIO_WritePin>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40010800 	.word	0x40010800

08001634 <ce_high>:

static void ce_high()
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2101      	movs	r1, #1
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <ce_high+0x14>)
 800163e:	f001 f891 	bl	8002764 <HAL_GPIO_WritePin>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40010c00 	.word	0x40010c00

0800164c <ce_low>:

static void ce_low()
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	2101      	movs	r1, #1
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <ce_low+0x14>)
 8001656:	f001 f885 	bl	8002764 <HAL_GPIO_WritePin>
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010c00 	.word	0x40010c00

08001664 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8001672:	f7ff ffd3 	bl	800161c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001676:	f107 020e 	add.w	r2, r7, #14
 800167a:	f107 010f 	add.w	r1, r7, #15
 800167e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2301      	movs	r3, #1
 8001686:	4809      	ldr	r0, [pc, #36]	@ (80016ac <read_register+0x48>)
 8001688:	f004 fe17 	bl	80062ba <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 800168c:	f107 010d 	add.w	r1, r7, #13
 8001690:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001694:	2201      	movs	r2, #1
 8001696:	4805      	ldr	r0, [pc, #20]	@ (80016ac <read_register+0x48>)
 8001698:	f004 fcf6 	bl	8006088 <HAL_SPI_Receive>
    cs_high();
 800169c:	f7ff ffb2 	bl	8001604 <cs_high>

    return read_val;
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200000a4 	.word	0x200000a4

080016b0 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	4603      	mov	r3, r0
 80016b8:	460a      	mov	r2, r1
 80016ba:	71fb      	strb	r3, [r7, #7]
 80016bc:	4613      	mov	r3, r2
 80016be:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f043 0320 	orr.w	r3, r3, #32
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	737b      	strb	r3, [r7, #13]

    cs_low();
 80016ce:	f7ff ffa5 	bl	800161c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80016d2:	f107 020e 	add.w	r2, r7, #14
 80016d6:	f107 010f 	add.w	r1, r7, #15
 80016da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	4809      	ldr	r0, [pc, #36]	@ (8001708 <write_register+0x58>)
 80016e4:	f004 fde9 	bl	80062ba <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 80016e8:	f107 010d 	add.w	r1, r7, #13
 80016ec:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016f0:	2201      	movs	r2, #1
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <write_register+0x58>)
 80016f4:	f004 fb84 	bl	8005e00 <HAL_SPI_Transmit>
    cs_high();
 80016f8:	f7ff ff84 	bl	8001604 <cs_high>

    return write_val;
 80016fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200000a4 	.word	0x200000a4

0800170c <nrf24l01p_rx_init>:
}


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	460a      	mov	r2, r1
 8001716:	80fb      	strh	r3, [r7, #6]
 8001718:	4613      	mov	r3, r2
 800171a:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 800171c:	f000 f838 	bl	8001790 <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 8001720:	f000 f88a 	bl	8001838 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8001724:	f000 f92e 	bl	8001984 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8001728:	200c      	movs	r0, #12
 800172a:	f000 f909 	bl	8001940 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f9b3 	bl	8001a9c <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8001736:	797b      	ldrb	r3, [r7, #5]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f9e0 	bl	8001afe <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 800173e:	2003      	movs	r0, #3
 8001740:	f000 f9bf 	bl	8001ac2 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f000 f932 	bl	80019ae <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 800174a:	2005      	movs	r0, #5
 800174c:	f000 f952 	bl	80019f4 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 f95f 	bl	8001a14 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8001756:	20fa      	movs	r0, #250	@ 0xfa
 8001758:	f000 f978 	bl	8001a4c <nrf24l01p_auto_retransmit_delay>

    ce_high();
 800175c:	f7ff ff6a 	bl	8001634 <ce_high>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f877 	bl	8001864 <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8001776:	f000 f8f1 	bl	800195c <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800177a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800177e:	4803      	ldr	r0, [pc, #12]	@ (800178c <nrf24l01p_rx_receive+0x24>)
 8001780:	f001 f808 	bl	8002794 <HAL_GPIO_TogglePin>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40011000 	.word	0x40011000

08001790 <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8001794:	f7ff ff36 	bl	8001604 <cs_high>
    ce_low();
 8001798:	f7ff ff58 	bl	800164c <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 800179c:	2108      	movs	r1, #8
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff ff86 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80017a4:	213f      	movs	r1, #63	@ 0x3f
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff ff82 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80017ac:	2103      	movs	r1, #3
 80017ae:	2002      	movs	r0, #2
 80017b0:	f7ff ff7e 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80017b4:	2103      	movs	r1, #3
 80017b6:	2003      	movs	r0, #3
 80017b8:	f7ff ff7a 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80017bc:	2103      	movs	r1, #3
 80017be:	2004      	movs	r0, #4
 80017c0:	f7ff ff76 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 80017c4:	2102      	movs	r1, #2
 80017c6:	2005      	movs	r0, #5
 80017c8:	f7ff ff72 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80017cc:	2107      	movs	r1, #7
 80017ce:	2006      	movs	r0, #6
 80017d0:	f7ff ff6e 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 80017d4:	217e      	movs	r1, #126	@ 0x7e
 80017d6:	2007      	movs	r0, #7
 80017d8:	f7ff ff6a 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80017dc:	2100      	movs	r1, #0
 80017de:	2011      	movs	r0, #17
 80017e0:	f7ff ff66 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80017e4:	2100      	movs	r1, #0
 80017e6:	2011      	movs	r0, #17
 80017e8:	f7ff ff62 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 80017ec:	2100      	movs	r1, #0
 80017ee:	2012      	movs	r0, #18
 80017f0:	f7ff ff5e 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 80017f4:	2100      	movs	r1, #0
 80017f6:	2013      	movs	r0, #19
 80017f8:	f7ff ff5a 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 80017fc:	2100      	movs	r1, #0
 80017fe:	2014      	movs	r0, #20
 8001800:	f7ff ff56 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8001804:	2100      	movs	r1, #0
 8001806:	2015      	movs	r0, #21
 8001808:	f7ff ff52 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 800180c:	2100      	movs	r1, #0
 800180e:	2016      	movs	r0, #22
 8001810:	f7ff ff4e 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8001814:	2111      	movs	r1, #17
 8001816:	2017      	movs	r0, #23
 8001818:	f7ff ff4a 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 800181c:	2100      	movs	r1, #0
 800181e:	201c      	movs	r0, #28
 8001820:	f7ff ff46 	bl	80016b0 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8001824:	2100      	movs	r1, #0
 8001826:	201d      	movs	r0, #29
 8001828:	f7ff ff42 	bl	80016b0 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 800182c:	f000 f83e 	bl	80018ac <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8001830:	f000 f854 	bl	80018dc <nrf24l01p_flush_tx_fifo>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800183e:	2000      	movs	r0, #0
 8001840:	f7ff ff10 	bl	8001664 <read_register>
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4619      	mov	r1, r3
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff ff2b 	bl	80016b0 <write_register>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af02      	add	r7, sp, #8
 800186a:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 800186c:	2361      	movs	r3, #97	@ 0x61
 800186e:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8001870:	f7ff fed4 	bl	800161c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001874:	f107 020e 	add.w	r2, r7, #14
 8001878:	f107 010f 	add.w	r1, r7, #15
 800187c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2301      	movs	r3, #1
 8001884:	4808      	ldr	r0, [pc, #32]	@ (80018a8 <nrf24l01p_read_rx_fifo+0x44>)
 8001886:	f004 fd18 	bl	80062ba <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 800188a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800188e:	220c      	movs	r2, #12
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <nrf24l01p_read_rx_fifo+0x44>)
 8001894:	f004 fbf8 	bl	8006088 <HAL_SPI_Receive>
    cs_high();
 8001898:	f7ff feb4 	bl	8001604 <cs_high>

    return status;
 800189c:	7bbb      	ldrb	r3, [r7, #14]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200000a4 	.word	0x200000a4

080018ac <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 80018b2:	23e2      	movs	r3, #226	@ 0xe2
 80018b4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80018b6:	f7ff feb1 	bl	800161c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80018ba:	1dba      	adds	r2, r7, #6
 80018bc:	1df9      	adds	r1, r7, #7
 80018be:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <nrf24l01p_flush_rx_fifo+0x2c>)
 80018c8:	f004 fcf7 	bl	80062ba <HAL_SPI_TransmitReceive>
    cs_high();
 80018cc:	f7ff fe9a 	bl	8001604 <cs_high>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200000a4 	.word	0x200000a4

080018dc <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 80018e2:	23e1      	movs	r3, #225	@ 0xe1
 80018e4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80018e6:	f7ff fe99 	bl	800161c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80018ea:	1dba      	adds	r2, r7, #6
 80018ec:	1df9      	adds	r1, r7, #7
 80018ee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2301      	movs	r3, #1
 80018f6:	4804      	ldr	r0, [pc, #16]	@ (8001908 <nrf24l01p_flush_tx_fifo+0x2c>)
 80018f8:	f004 fcdf 	bl	80062ba <HAL_SPI_TransmitReceive>
    cs_high();
 80018fc:	f7ff fe82 	bl	8001604 <cs_high>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200000a4 	.word	0x200000a4

0800190c <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8001912:	23ff      	movs	r3, #255	@ 0xff
 8001914:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001916:	f7ff fe81 	bl	800161c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800191a:	1dba      	adds	r2, r7, #6
 800191c:	1df9      	adds	r1, r7, #7
 800191e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2301      	movs	r3, #1
 8001926:	4805      	ldr	r0, [pc, #20]	@ (800193c <nrf24l01p_get_status+0x30>)
 8001928:	f004 fcc7 	bl	80062ba <HAL_SPI_TransmitReceive>
    cs_high();
 800192c:	f7ff fe6a 	bl	8001604 <cs_high>

    return status;
 8001930:	79bb      	ldrb	r3, [r7, #6]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200000a4 	.word	0x200000a4

08001940 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	4619      	mov	r1, r3
 800194e:	2011      	movs	r0, #17
 8001950:	f7ff feae 	bl	80016b0 <write_register>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8001962:	f7ff ffd3 	bl	800190c <nrf24l01p_get_status>
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001970:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4619      	mov	r1, r3
 8001976:	2007      	movs	r0, #7
 8001978:	f7ff fe9a 	bl	80016b0 <write_register>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_power_up()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fe6a 	bl	8001664 <read_register>
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	4619      	mov	r1, r3
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fe85 	bl	80016b0 <write_register>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff fe53 	bl	8001664 <read_register>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d002      	beq.n	80019ce <nrf24l01p_set_crc_length+0x20>
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d005      	beq.n	80019d8 <nrf24l01p_set_crc_length+0x2a>
 80019cc:	e009      	b.n	80019e2 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	f023 0304 	bic.w	r3, r3, #4
 80019d4:	73fb      	strb	r3, [r7, #15]
            break;
 80019d6:	e004      	b.n	80019e2 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	73fb      	strb	r3, [r7, #15]
            break;
 80019e0:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	4619      	mov	r1, r3
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fe62 	bl	80016b0 <write_register>
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	3b02      	subs	r3, #2
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	2003      	movs	r0, #3
 8001a08:	f7ff fe52 	bl	80016b0 <write_register>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8001a1e:	2004      	movs	r0, #4
 8001a20:	f7ff fe20 	bl	8001664 <read_register>
 8001a24:	4603      	mov	r3, r0
 8001a26:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	f063 030f 	orn	r3, r3, #15
 8001a2e:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	2004      	movs	r0, #4
 8001a3e:	f7ff fe37 	bl	80016b0 <write_register>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8001a56:	2004      	movs	r0, #4
 8001a58:	f7ff fe04 	bl	8001664 <read_register>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	f043 030f 	orr.w	r3, r3, #15
 8001a66:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	b25a      	sxtb	r2, r3
 8001a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	2004      	movs	r0, #4
 8001a8c:	f7ff fe10 	bl	80016b0 <write_register>
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	10624dd3 	.word	0x10624dd3

08001a9c <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8001aac:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	2005      	movs	r0, #5
 8001ab6:	f7ff fdfb 	bl	80016b0 <write_register>
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8001acc:	2006      	movs	r0, #6
 8001ace:	f7ff fdc9 	bl	8001664 <read_register>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f023 0306 	bic.w	r3, r3, #6
 8001ad8:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	b25a      	sxtb	r2, r3
 8001ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	4619      	mov	r1, r3
 8001af0:	2006      	movs	r0, #6
 8001af2:	f7ff fddd 	bl	80016b0 <write_register>
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8001b08:	2006      	movs	r0, #6
 8001b0a:	f7ff fdab 	bl	8001664 <read_register>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001b14:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d00a      	beq.n	8001b32 <nrf24l01p_set_rf_air_data_rate+0x34>
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	dc0e      	bgt.n	8001b3e <nrf24l01p_set_rf_air_data_rate+0x40>
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00b      	beq.n	8001b3c <nrf24l01p_set_rf_air_data_rate+0x3e>
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10a      	bne.n	8001b3e <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	f043 0308 	orr.w	r3, r3, #8
 8001b2e:	73fb      	strb	r3, [r7, #15]
            break;
 8001b30:	e005      	b.n	8001b3e <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	f043 0320 	orr.w	r3, r3, #32
 8001b38:	73fb      	strb	r3, [r7, #15]
            break;
 8001b3a:	e000      	b.n	8001b3e <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8001b3c:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	4619      	mov	r1, r3
 8001b42:	2006      	movs	r0, #6
 8001b44:	f7ff fdb4 	bl	80016b0 <write_register>
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b54:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b56:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <MX_SPI1_Init+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b5a:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b62:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b84:	2210      	movs	r2, #16
 8001b86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b94:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	@ (8001bb4 <MX_SPI1_Init+0x64>)
 8001ba2:	f004 f8a9 	bl	8005cf8 <HAL_SPI_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bac:	f7ff fd24 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200000a4 	.word	0x200000a4
 8001bb8:	40013000 	.word	0x40013000

08001bbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d12f      	bne.n	8001c3c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <HAL_SPI_MspInit+0x8c>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a19      	ldr	r2, [pc, #100]	@ (8001c48 <HAL_SPI_MspInit+0x8c>)
 8001be2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <HAL_SPI_MspInit+0x8c>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <HAL_SPI_MspInit+0x8c>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a13      	ldr	r2, [pc, #76]	@ (8001c48 <HAL_SPI_MspInit+0x8c>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_SPI_MspInit+0x8c>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c0c:	23a0      	movs	r3, #160	@ 0xa0
 8001c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480b      	ldr	r0, [pc, #44]	@ (8001c4c <HAL_SPI_MspInit+0x90>)
 8001c20:	f000 fc1c 	bl	800245c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c24:	2340      	movs	r3, #64	@ 0x40
 8001c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4619      	mov	r1, r3
 8001c36:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <HAL_SPI_MspInit+0x90>)
 8001c38:	f000 fc10 	bl	800245c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40013000 	.word	0x40013000
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010800 	.word	0x40010800

08001c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_MspInit+0x5c>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	4a14      	ldr	r2, [pc, #80]	@ (8001cac <HAL_MspInit+0x5c>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6193      	str	r3, [r2, #24]
 8001c62:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <HAL_MspInit+0x5c>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <HAL_MspInit+0x5c>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4a0e      	ldr	r2, [pc, #56]	@ (8001cac <HAL_MspInit+0x5c>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	61d3      	str	r3, [r2, #28]
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <HAL_MspInit+0x5c>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <HAL_MspInit+0x60>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <HAL_MspInit+0x60>)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010000 	.word	0x40010000

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <NMI_Handler+0x4>

08001cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <MemManage_Handler+0x4>

08001ccc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d04:	f000 f99c 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8001d10:	2002      	movs	r0, #2
 8001d12:	f000 fd59 	bl	80027c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <I2C1_EV_IRQHandler+0x10>)
 8001d22:	f001 fb59 	bl	80033d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000028 	.word	0x20000028

08001d30 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <I2C1_ER_IRQHandler+0x10>)
 8001d36:	f001 fcc0 	bl	80036ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000028 	.word	0x20000028

08001d44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <USART1_IRQHandler+0x10>)
 8001d4a:	f004 fe15 	bl	8006978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200000fc 	.word	0x200000fc

08001d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d5c:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <USART2_IRQHandler+0x10>)
 8001d5e:	f004 fe0b 	bl	8006978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000144 	.word	0x20000144

08001d6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <MX_USART1_UART_Init+0x4c>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	@ (8001dc8 <MX_USART1_UART_Init+0x50>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d82:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <MX_USART1_UART_Init+0x4c>)
 8001d84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <MX_USART1_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <MX_USART1_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <MX_USART1_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <MX_USART1_UART_Init+0x4c>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <MX_USART1_UART_Init+0x4c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <MX_USART1_UART_Init+0x4c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dae:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <MX_USART1_UART_Init+0x4c>)
 8001db0:	f004 fd37 	bl	8006822 <HAL_UART_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dba:	f7ff fc1d 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200000fc 	.word	0x200000fc
 8001dc8:	40013800 	.word	0x40013800

08001dcc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <MX_USART2_UART_Init+0x50>)
 8001dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001df0:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001df2:	220c      	movs	r2, #12
 8001df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df6:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001e04:	f004 fd0d 	bl	8006822 <HAL_UART_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e0e:	f7ff fbf3 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000144 	.word	0x20000144
 8001e1c:	40004400 	.word	0x40004400

08001e20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	@ 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a45      	ldr	r2, [pc, #276]	@ (8001f50 <HAL_UART_MspInit+0x130>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d146      	bne.n	8001ece <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e40:	4b44      	ldr	r3, [pc, #272]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a43      	ldr	r2, [pc, #268]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b41      	ldr	r3, [pc, #260]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e58:	4b3e      	ldr	r3, [pc, #248]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a3d      	ldr	r2, [pc, #244]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001e5e:	f043 0308 	orr.w	r3, r3, #8
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b3b      	ldr	r3, [pc, #236]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e70:	2340      	movs	r3, #64	@ 0x40
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	4835      	ldr	r0, [pc, #212]	@ (8001f58 <HAL_UART_MspInit+0x138>)
 8001e84:	f000 faea 	bl	800245c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e88:	2380      	movs	r3, #128	@ 0x80
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	482f      	ldr	r0, [pc, #188]	@ (8001f58 <HAL_UART_MspInit+0x138>)
 8001e9c:	f000 fade 	bl	800245c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f5c <HAL_UART_MspInit+0x13c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eb6:	4a29      	ldr	r2, [pc, #164]	@ (8001f5c <HAL_UART_MspInit+0x13c>)
 8001eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eba:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2025      	movs	r0, #37	@ 0x25
 8001ec2:	f000 f9d4 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ec6:	2025      	movs	r0, #37	@ 0x25
 8001ec8:	f000 f9ed 	bl	80022a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ecc:	e03c      	b.n	8001f48 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a23      	ldr	r2, [pc, #140]	@ (8001f60 <HAL_UART_MspInit+0x140>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d137      	bne.n	8001f48 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee2:	61d3      	str	r3, [r2, #28]
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a17      	ldr	r2, [pc, #92]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_UART_MspInit+0x134>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4812      	ldr	r0, [pc, #72]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001f1c:	f000 fa9e 	bl	800245c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f20:	2308      	movs	r3, #8
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	480c      	ldr	r0, [pc, #48]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001f34:	f000 fa92 	bl	800245c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2026      	movs	r0, #38	@ 0x26
 8001f3e:	f000 f996 	bl	800226e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f42:	2026      	movs	r0, #38	@ 0x26
 8001f44:	f000 f9af 	bl	80022a6 <HAL_NVIC_EnableIRQ>
}
 8001f48:	bf00      	nop
 8001f4a:	3730      	adds	r7, #48	@ 0x30
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010c00 	.word	0x40010c00
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	40004400 	.word	0x40004400
 8001f64:	40010800 	.word	0x40010800

08001f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f68:	f7ff ff00 	bl	8001d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f6c:	480b      	ldr	r0, [pc, #44]	@ (8001f9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f6e:	490c      	ldr	r1, [pc, #48]	@ (8001fa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f70:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a09      	ldr	r2, [pc, #36]	@ (8001fa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f84:	4c09      	ldr	r4, [pc, #36]	@ (8001fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f92:	f005 fa0b 	bl	80073ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f96:	f7ff f973 	bl	8001280 <main>
  bx lr
 8001f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fa4:	08007448 	.word	0x08007448
  ldr r2, =_sbss
 8001fa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fac:	20000190 	.word	0x20000190

08001fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_2_IRQHandler>
	...

08001fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_Init+0x28>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_Init+0x28>)
 8001fbe:	f043 0310 	orr.w	r3, r3, #16
 8001fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f947 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f000 f808 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f7ff fe3e 	bl	8001c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f95f 	bl	80022c2 <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 f927 	bl	800226e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	@ (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000000 	.word	0x20000000
 8002038:	20000008 	.word	0x20000008
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_IncTick+0x1c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_IncTick+0x20>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a03      	ldr	r2, [pc, #12]	@ (8002060 <HAL_IncTick+0x20>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	20000008 	.word	0x20000008
 8002060:	2000018c 	.word	0x2000018c

08002064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;
 8002068:	4b02      	ldr	r3, [pc, #8]	@ (8002074 <HAL_GetTick+0x10>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	2000018c 	.word	0x2000018c

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff fff0 	bl	8002064 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffe0 	bl	8002064 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000008 	.word	0x20000008

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4906      	ldr	r1, [pc, #24]	@ (8002158 <__NVIC_EnableIRQ+0x34>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	@ (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	@ (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	@ 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff90 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff2d 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff42 	bl	8002108 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff90 	bl	80021b0 <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5f 	bl	800215c <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff35 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ffa2 	bl	8002214 <SysTick_Config>
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d008      	beq.n	8002304 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2204      	movs	r2, #4
 80022f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e020      	b.n	8002346 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 020e 	bic.w	r2, r2, #14
 8002312:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f202 	lsl.w	r2, r1, r2
 8002332:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002344:	7bfb      	ldrb	r3, [r7, #15]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d005      	beq.n	8002374 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2204      	movs	r2, #4
 800236c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
 8002372:	e051      	b.n	8002418 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 020e 	bic.w	r2, r2, #14
 8002382:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a22      	ldr	r2, [pc, #136]	@ (8002424 <HAL_DMA_Abort_IT+0xd4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d029      	beq.n	80023f2 <HAL_DMA_Abort_IT+0xa2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a21      	ldr	r2, [pc, #132]	@ (8002428 <HAL_DMA_Abort_IT+0xd8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d022      	beq.n	80023ee <HAL_DMA_Abort_IT+0x9e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1f      	ldr	r2, [pc, #124]	@ (800242c <HAL_DMA_Abort_IT+0xdc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01a      	beq.n	80023e8 <HAL_DMA_Abort_IT+0x98>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002430 <HAL_DMA_Abort_IT+0xe0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d012      	beq.n	80023e2 <HAL_DMA_Abort_IT+0x92>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002434 <HAL_DMA_Abort_IT+0xe4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00a      	beq.n	80023dc <HAL_DMA_Abort_IT+0x8c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002438 <HAL_DMA_Abort_IT+0xe8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d102      	bne.n	80023d6 <HAL_DMA_Abort_IT+0x86>
 80023d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80023d4:	e00e      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023da:	e00b      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023e0:	e008      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023e6:	e005      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ec:	e002      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023ee:	2310      	movs	r3, #16
 80023f0:	e000      	b.n	80023f4 <HAL_DMA_Abort_IT+0xa4>
 80023f2:	2301      	movs	r3, #1
 80023f4:	4a11      	ldr	r2, [pc, #68]	@ (800243c <HAL_DMA_Abort_IT+0xec>)
 80023f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
    } 
  }
  return status;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40020008 	.word	0x40020008
 8002428:	4002001c 	.word	0x4002001c
 800242c:	40020030 	.word	0x40020030
 8002430:	40020044 	.word	0x40020044
 8002434:	40020058 	.word	0x40020058
 8002438:	4002006c 	.word	0x4002006c
 800243c:	40020000 	.word	0x40020000

08002440 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800244e:	b2db      	uxtb	r3, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
	...

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b08b      	sub	sp, #44	@ 0x2c
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246e:	e169      	b.n	8002744 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002470:	2201      	movs	r2, #1
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	429a      	cmp	r2, r3
 800248a:	f040 8158 	bne.w	800273e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a9a      	ldr	r2, [pc, #616]	@ (80026fc <HAL_GPIO_Init+0x2a0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d05e      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
 8002498:	4a98      	ldr	r2, [pc, #608]	@ (80026fc <HAL_GPIO_Init+0x2a0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d875      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 800249e:	4a98      	ldr	r2, [pc, #608]	@ (8002700 <HAL_GPIO_Init+0x2a4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d058      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
 80024a4:	4a96      	ldr	r2, [pc, #600]	@ (8002700 <HAL_GPIO_Init+0x2a4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d86f      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 80024aa:	4a96      	ldr	r2, [pc, #600]	@ (8002704 <HAL_GPIO_Init+0x2a8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d052      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
 80024b0:	4a94      	ldr	r2, [pc, #592]	@ (8002704 <HAL_GPIO_Init+0x2a8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d869      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 80024b6:	4a94      	ldr	r2, [pc, #592]	@ (8002708 <HAL_GPIO_Init+0x2ac>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d04c      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
 80024bc:	4a92      	ldr	r2, [pc, #584]	@ (8002708 <HAL_GPIO_Init+0x2ac>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d863      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 80024c2:	4a92      	ldr	r2, [pc, #584]	@ (800270c <HAL_GPIO_Init+0x2b0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d046      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
 80024c8:	4a90      	ldr	r2, [pc, #576]	@ (800270c <HAL_GPIO_Init+0x2b0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d85d      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 80024ce:	2b12      	cmp	r3, #18
 80024d0:	d82a      	bhi.n	8002528 <HAL_GPIO_Init+0xcc>
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d859      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 80024d6:	a201      	add	r2, pc, #4	@ (adr r2, 80024dc <HAL_GPIO_Init+0x80>)
 80024d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024dc:	08002557 	.word	0x08002557
 80024e0:	08002531 	.word	0x08002531
 80024e4:	08002543 	.word	0x08002543
 80024e8:	08002585 	.word	0x08002585
 80024ec:	0800258b 	.word	0x0800258b
 80024f0:	0800258b 	.word	0x0800258b
 80024f4:	0800258b 	.word	0x0800258b
 80024f8:	0800258b 	.word	0x0800258b
 80024fc:	0800258b 	.word	0x0800258b
 8002500:	0800258b 	.word	0x0800258b
 8002504:	0800258b 	.word	0x0800258b
 8002508:	0800258b 	.word	0x0800258b
 800250c:	0800258b 	.word	0x0800258b
 8002510:	0800258b 	.word	0x0800258b
 8002514:	0800258b 	.word	0x0800258b
 8002518:	0800258b 	.word	0x0800258b
 800251c:	0800258b 	.word	0x0800258b
 8002520:	08002539 	.word	0x08002539
 8002524:	0800254d 	.word	0x0800254d
 8002528:	4a79      	ldr	r2, [pc, #484]	@ (8002710 <HAL_GPIO_Init+0x2b4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800252e:	e02c      	b.n	800258a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	623b      	str	r3, [r7, #32]
          break;
 8002536:	e029      	b.n	800258c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	3304      	adds	r3, #4
 800253e:	623b      	str	r3, [r7, #32]
          break;
 8002540:	e024      	b.n	800258c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	3308      	adds	r3, #8
 8002548:	623b      	str	r3, [r7, #32]
          break;
 800254a:	e01f      	b.n	800258c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	330c      	adds	r3, #12
 8002552:	623b      	str	r3, [r7, #32]
          break;
 8002554:	e01a      	b.n	800258c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800255e:	2304      	movs	r3, #4
 8002560:	623b      	str	r3, [r7, #32]
          break;
 8002562:	e013      	b.n	800258c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d105      	bne.n	8002578 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800256c:	2308      	movs	r3, #8
 800256e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	611a      	str	r2, [r3, #16]
          break;
 8002576:	e009      	b.n	800258c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002578:	2308      	movs	r3, #8
 800257a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	615a      	str	r2, [r3, #20]
          break;
 8002582:	e003      	b.n	800258c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002584:	2300      	movs	r3, #0
 8002586:	623b      	str	r3, [r7, #32]
          break;
 8002588:	e000      	b.n	800258c <HAL_GPIO_Init+0x130>
          break;
 800258a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2bff      	cmp	r3, #255	@ 0xff
 8002590:	d801      	bhi.n	8002596 <HAL_GPIO_Init+0x13a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	e001      	b.n	800259a <HAL_GPIO_Init+0x13e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2bff      	cmp	r3, #255	@ 0xff
 80025a0:	d802      	bhi.n	80025a8 <HAL_GPIO_Init+0x14c>
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	e002      	b.n	80025ae <HAL_GPIO_Init+0x152>
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	3b08      	subs	r3, #8
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	210f      	movs	r1, #15
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	401a      	ands	r2, r3
 80025c0:	6a39      	ldr	r1, [r7, #32]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	431a      	orrs	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80b1 	beq.w	800273e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002714 <HAL_GPIO_Init+0x2b8>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002714 <HAL_GPIO_Init+0x2b8>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002714 <HAL_GPIO_Init+0x2b8>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025f4:	4a48      	ldr	r2, [pc, #288]	@ (8002718 <HAL_GPIO_Init+0x2bc>)
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	3302      	adds	r3, #2
 80025fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002600:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4013      	ands	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a40      	ldr	r2, [pc, #256]	@ (800271c <HAL_GPIO_Init+0x2c0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <HAL_GPIO_Init+0x1ec>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a3f      	ldr	r2, [pc, #252]	@ (8002720 <HAL_GPIO_Init+0x2c4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00d      	beq.n	8002644 <HAL_GPIO_Init+0x1e8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a3e      	ldr	r2, [pc, #248]	@ (8002724 <HAL_GPIO_Init+0x2c8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <HAL_GPIO_Init+0x1e4>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a3d      	ldr	r2, [pc, #244]	@ (8002728 <HAL_GPIO_Init+0x2cc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_GPIO_Init+0x1e0>
 8002638:	2303      	movs	r3, #3
 800263a:	e006      	b.n	800264a <HAL_GPIO_Init+0x1ee>
 800263c:	2304      	movs	r3, #4
 800263e:	e004      	b.n	800264a <HAL_GPIO_Init+0x1ee>
 8002640:	2302      	movs	r3, #2
 8002642:	e002      	b.n	800264a <HAL_GPIO_Init+0x1ee>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_GPIO_Init+0x1ee>
 8002648:	2300      	movs	r3, #0
 800264a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800264c:	f002 0203 	and.w	r2, r2, #3
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	4093      	lsls	r3, r2
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800265a:	492f      	ldr	r1, [pc, #188]	@ (8002718 <HAL_GPIO_Init+0x2bc>)
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002674:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	492c      	ldr	r1, [pc, #176]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	608b      	str	r3, [r1, #8]
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002682:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	43db      	mvns	r3, r3
 800268a:	4928      	ldr	r1, [pc, #160]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 800268c:	4013      	ands	r3, r2
 800268e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800269c:	4b23      	ldr	r3, [pc, #140]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	4922      	ldr	r1, [pc, #136]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60cb      	str	r3, [r1, #12]
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026aa:	4b20      	ldr	r3, [pc, #128]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	491e      	ldr	r1, [pc, #120]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d006      	beq.n	80026d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026c4:	4b19      	ldr	r3, [pc, #100]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	4918      	ldr	r1, [pc, #96]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026d2:	4b16      	ldr	r3, [pc, #88]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	43db      	mvns	r3, r3
 80026da:	4914      	ldr	r1, [pc, #80]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d021      	beq.n	8002730 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026ec:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	490e      	ldr	r1, [pc, #56]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
 80026f8:	e021      	b.n	800273e <HAL_GPIO_Init+0x2e2>
 80026fa:	bf00      	nop
 80026fc:	10320000 	.word	0x10320000
 8002700:	10310000 	.word	0x10310000
 8002704:	10220000 	.word	0x10220000
 8002708:	10210000 	.word	0x10210000
 800270c:	10120000 	.word	0x10120000
 8002710:	10110000 	.word	0x10110000
 8002714:	40021000 	.word	0x40021000
 8002718:	40010000 	.word	0x40010000
 800271c:	40010800 	.word	0x40010800
 8002720:	40010c00 	.word	0x40010c00
 8002724:	40011000 	.word	0x40011000
 8002728:	40011400 	.word	0x40011400
 800272c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_GPIO_Init+0x304>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	43db      	mvns	r3, r3
 8002738:	4909      	ldr	r1, [pc, #36]	@ (8002760 <HAL_GPIO_Init+0x304>)
 800273a:	4013      	ands	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	3301      	adds	r3, #1
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	f47f ae8e 	bne.w	8002470 <HAL_GPIO_Init+0x14>
  }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	372c      	adds	r7, #44	@ 0x2c
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	40010400 	.word	0x40010400

08002764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
 8002770:	4613      	mov	r3, r2
 8002772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002774:	787b      	ldrb	r3, [r7, #1]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002780:	e003      	b.n	800278a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002782:	887b      	ldrh	r3, [r7, #2]
 8002784:	041a      	lsls	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	611a      	str	r2, [r3, #16]
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43d9      	mvns	r1, r3
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	400b      	ands	r3, r1
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	611a      	str	r2, [r3, #16]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
	...

080027c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027d2:	4b08      	ldr	r3, [pc, #32]	@ (80027f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d006      	beq.n	80027ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027de:	4a05      	ldr	r2, [pc, #20]	@ (80027f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fee0 	bl	80015ac <HAL_GPIO_EXTI_Callback>
  }
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40010400 	.word	0x40010400

080027f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e12b      	b.n	8002a62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fe fccc 	bl	80011bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2224      	movs	r2, #36	@ 0x24
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800284a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800285a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800285c:	f003 fa06 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 8002860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a81      	ldr	r2, [pc, #516]	@ (8002a6c <HAL_I2C_Init+0x274>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d807      	bhi.n	800287c <HAL_I2C_Init+0x84>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a80      	ldr	r2, [pc, #512]	@ (8002a70 <HAL_I2C_Init+0x278>)
 8002870:	4293      	cmp	r3, r2
 8002872:	bf94      	ite	ls
 8002874:	2301      	movls	r3, #1
 8002876:	2300      	movhi	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e006      	b.n	800288a <HAL_I2C_Init+0x92>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a74 <HAL_I2C_Init+0x27c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	bf94      	ite	ls
 8002884:	2301      	movls	r3, #1
 8002886:	2300      	movhi	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0e7      	b.n	8002a62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a78      	ldr	r2, [pc, #480]	@ (8002a78 <HAL_I2C_Init+0x280>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0c9b      	lsrs	r3, r3, #18
 800289c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a6c <HAL_I2C_Init+0x274>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d802      	bhi.n	80028cc <HAL_I2C_Init+0xd4>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	3301      	adds	r3, #1
 80028ca:	e009      	b.n	80028e0 <HAL_I2C_Init+0xe8>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	4a69      	ldr	r2, [pc, #420]	@ (8002a7c <HAL_I2C_Init+0x284>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	3301      	adds	r3, #1
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	495c      	ldr	r1, [pc, #368]	@ (8002a6c <HAL_I2C_Init+0x274>)
 80028fc:	428b      	cmp	r3, r1
 80028fe:	d819      	bhi.n	8002934 <HAL_I2C_Init+0x13c>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1e59      	subs	r1, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fbb1 f3f3 	udiv	r3, r1, r3
 800290e:	1c59      	adds	r1, r3, #1
 8002910:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002914:	400b      	ands	r3, r1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_I2C_Init+0x138>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1e59      	subs	r1, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fbb1 f3f3 	udiv	r3, r1, r3
 8002928:	3301      	adds	r3, #1
 800292a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292e:	e051      	b.n	80029d4 <HAL_I2C_Init+0x1dc>
 8002930:	2304      	movs	r3, #4
 8002932:	e04f      	b.n	80029d4 <HAL_I2C_Init+0x1dc>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d111      	bne.n	8002960 <HAL_I2C_Init+0x168>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1e58      	subs	r0, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	440b      	add	r3, r1
 800294a:	fbb0 f3f3 	udiv	r3, r0, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	e012      	b.n	8002986 <HAL_I2C_Init+0x18e>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1e58      	subs	r0, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	0099      	lsls	r1, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	fbb0 f3f3 	udiv	r3, r0, r3
 8002976:	3301      	adds	r3, #1
 8002978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf0c      	ite	eq
 8002980:	2301      	moveq	r3, #1
 8002982:	2300      	movne	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Init+0x196>
 800298a:	2301      	movs	r3, #1
 800298c:	e022      	b.n	80029d4 <HAL_I2C_Init+0x1dc>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10e      	bne.n	80029b4 <HAL_I2C_Init+0x1bc>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1e58      	subs	r0, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	440b      	add	r3, r1
 80029a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029b2:	e00f      	b.n	80029d4 <HAL_I2C_Init+0x1dc>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1e58      	subs	r0, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	0099      	lsls	r1, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ca:	3301      	adds	r3, #1
 80029cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	6809      	ldr	r1, [r1, #0]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6911      	ldr	r1, [r2, #16]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68d2      	ldr	r2, [r2, #12]
 8002a0e:	4311      	orrs	r1, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	000186a0 	.word	0x000186a0
 8002a70:	001e847f 	.word	0x001e847f
 8002a74:	003d08ff 	.word	0x003d08ff
 8002a78:	431bde83 	.word	0x431bde83
 8002a7c:	10624dd3 	.word	0x10624dd3

08002a80 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	2b80      	cmp	r3, #128	@ 0x80
 8002a94:	d103      	bne.n	8002a9e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	817b      	strh	r3, [r7, #10]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff fad2 	bl	8002064 <HAL_GetTick>
 8002ac0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	f040 80e0 	bne.w	8002c90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2319      	movs	r3, #25
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4970      	ldr	r1, [pc, #448]	@ (8002c9c <HAL_I2C_Master_Transmit+0x1f4>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f002 fa7a 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e0d3      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_I2C_Master_Transmit+0x50>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0cc      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d007      	beq.n	8002b1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2221      	movs	r2, #33	@ 0x21
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2210      	movs	r2, #16
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	893a      	ldrh	r2, [r7, #8]
 8002b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4a50      	ldr	r2, [pc, #320]	@ (8002ca0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b60:	8979      	ldrh	r1, [r7, #10]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f002 f83c 	bl	8004be4 <I2C_MasterRequestWrite>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e08d      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b8c:	e066      	b.n	8002c5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	6a39      	ldr	r1, [r7, #32]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f002 fb38 	bl	8005208 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d107      	bne.n	8002bb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e06b      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d11b      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0x188>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d017      	beq.n	8002c30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	6a39      	ldr	r1, [r7, #32]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f002 fb2f 	bl	8005298 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00d      	beq.n	8002c5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d107      	bne.n	8002c58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e01a      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d194      	bne.n	8002b8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	00100002 	.word	0x00100002
 8002ca0:	ffff0000 	.word	0xffff0000

08002ca4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	@ 0x30
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	817b      	strh	r3, [r7, #10]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff f9d2 	bl	8002064 <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	f040 824b 	bne.w	8003166 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2319      	movs	r3, #25
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	497f      	ldr	r1, [pc, #508]	@ (8002ed8 <HAL_I2C_Master_Receive+0x234>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f002 f97a 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e23e      	b.n	8003168 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_I2C_Master_Receive+0x54>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e237      	b.n	8003168 <HAL_I2C_Master_Receive+0x4c4>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d007      	beq.n	8002d1e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0201 	orr.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2222      	movs	r2, #34	@ 0x22
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2210      	movs	r2, #16
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	893a      	ldrh	r2, [r7, #8]
 8002d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a5f      	ldr	r2, [pc, #380]	@ (8002edc <HAL_I2C_Master_Receive+0x238>)
 8002d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d60:	8979      	ldrh	r1, [r7, #10]
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f001 ffbe 	bl	8004ce8 <I2C_MasterRequestRead>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e1f8      	b.n	8003168 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d113      	bne.n	8002da6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e1cc      	b.n	8003140 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d11e      	bne.n	8002dec <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dbe:	b672      	cpsid	i
}
 8002dc0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002de8:	b662      	cpsie	i
}
 8002dea:	e035      	b.n	8002e58 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d11e      	bne.n	8002e32 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e04:	b672      	cpsid	i
}
 8002e06:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e2e:	b662      	cpsie	i
}
 8002e30:	e012      	b.n	8002e58 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e58:	e172      	b.n	8003140 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	f200 811f 	bhi.w	80030a2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d123      	bne.n	8002eb4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f002 fa8b 	bl	800538c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e173      	b.n	8003168 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002eb2:	e145      	b.n	8003140 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d152      	bne.n	8002f62 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	4906      	ldr	r1, [pc, #24]	@ (8002ee0 <HAL_I2C_Master_Receive+0x23c>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f002 f884 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e148      	b.n	8003168 <HAL_I2C_Master_Receive+0x4c4>
 8002ed6:	bf00      	nop
 8002ed8:	00100002 	.word	0x00100002
 8002edc:	ffff0000 	.word	0xffff0000
 8002ee0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee4:	b672      	cpsid	i
}
 8002ee6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f2a:	b662      	cpsie	i
}
 8002f2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f60:	e0ee      	b.n	8003140 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4981      	ldr	r1, [pc, #516]	@ (8003170 <HAL_I2C_Master_Receive+0x4cc>)
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f002 f831 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0f5      	b.n	8003168 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f8c:	b672      	cpsid	i
}
 8002f8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fc2:	4b6c      	ldr	r3, [pc, #432]	@ (8003174 <HAL_I2C_Master_Receive+0x4d0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	08db      	lsrs	r3, r3, #3
 8002fc8:	4a6b      	ldr	r2, [pc, #428]	@ (8003178 <HAL_I2C_Master_Receive+0x4d4>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0a1a      	lsrs	r2, r3, #8
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00da      	lsls	r2, r3, #3
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d118      	bne.n	800301a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f043 0220 	orr.w	r2, r3, #32
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800300a:	b662      	cpsie	i
}
 800300c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e0a6      	b.n	8003168 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b04      	cmp	r3, #4
 8003026:	d1d9      	bne.n	8002fdc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691a      	ldr	r2, [r3, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800306a:	b662      	cpsie	i
}
 800306c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030a0:	e04e      	b.n	8003140 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f002 f970 	bl	800538c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e058      	b.n	8003168 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d124      	bne.n	8003140 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d107      	bne.n	800310e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800310c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	f47f ae88 	bne.w	8002e5a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e000      	b.n	8003168 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003166:	2302      	movs	r3, #2
  }
}
 8003168:	4618      	mov	r0, r3
 800316a:	3728      	adds	r7, #40	@ 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	00010004 	.word	0x00010004
 8003174:	20000000 	.word	0x20000000
 8003178:	14f8b589 	.word	0x14f8b589

0800317c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	@ 0x28
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	460b      	mov	r3, r1
 800318a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7fe ff6a 	bl	8002064 <HAL_GetTick>
 8003190:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b20      	cmp	r3, #32
 80031a0:	f040 8111 	bne.w	80033c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	2319      	movs	r3, #25
 80031aa:	2201      	movs	r2, #1
 80031ac:	4988      	ldr	r1, [pc, #544]	@ (80033d0 <HAL_I2C_IsDeviceReady+0x254>)
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f001 ff10 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	e104      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_I2C_IsDeviceReady+0x50>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e0fd      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d007      	beq.n	80031f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003200:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2224      	movs	r2, #36	@ 0x24
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a70      	ldr	r2, [pc, #448]	@ (80033d4 <HAL_I2C_IsDeviceReady+0x258>)
 8003214:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003224:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2200      	movs	r2, #0
 800322e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f001 fece 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00d      	beq.n	800325a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800324c:	d103      	bne.n	8003256 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0b6      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003268:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800326a:	f7fe fefb 	bl	8002064 <HAL_GetTick>
 800326e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b02      	cmp	r3, #2
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800329e:	e025      	b.n	80032ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032a0:	f7fe fee0 	bl	8002064 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d302      	bcc.n	80032b6 <HAL_I2C_IsDeviceReady+0x13a>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	22a0      	movs	r2, #160	@ 0xa0
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2ba0      	cmp	r3, #160	@ 0xa0
 80032f6:	d005      	beq.n	8003304 <HAL_I2C_IsDeviceReady+0x188>
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <HAL_I2C_IsDeviceReady+0x188>
 80032fe:	7dbb      	ldrb	r3, [r7, #22]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0cd      	beq.n	80032a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d129      	bne.n	800336e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003328:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2319      	movs	r3, #25
 8003346:	2201      	movs	r2, #1
 8003348:	4921      	ldr	r1, [pc, #132]	@ (80033d0 <HAL_I2C_IsDeviceReady+0x254>)
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f001 fe42 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e036      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e02c      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800337c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003386:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2319      	movs	r3, #25
 800338e:	2201      	movs	r2, #1
 8003390:	490f      	ldr	r1, [pc, #60]	@ (80033d0 <HAL_I2C_IsDeviceReady+0x254>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f001 fe1e 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e012      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f4ff af32 	bcc.w	8003216 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
  }
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	00100002 	.word	0x00100002
 80033d4:	ffff0000 	.word	0xffff0000

080033d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033f8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003400:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	2b10      	cmp	r3, #16
 8003406:	d003      	beq.n	8003410 <HAL_I2C_EV_IRQHandler+0x38>
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b40      	cmp	r3, #64	@ 0x40
 800340c:	f040 80c1 	bne.w	8003592 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10d      	bne.n	8003446 <HAL_I2C_EV_IRQHandler+0x6e>
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003430:	d003      	beq.n	800343a <HAL_I2C_EV_IRQHandler+0x62>
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003438:	d101      	bne.n	800343e <HAL_I2C_EV_IRQHandler+0x66>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x68>
 800343e:	2300      	movs	r3, #0
 8003440:	2b01      	cmp	r3, #1
 8003442:	f000 8132 	beq.w	80036aa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0x92>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	0a5b      	lsrs	r3, r3, #9
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f002 f820 	bl	80054a2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fd99 	bl	8003f9a <I2C_Master_SB>
 8003468:	e092      	b.n	8003590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0xb2>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	0a5b      	lsrs	r3, r3, #9
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fe0e 	bl	80040a4 <I2C_Master_ADD10>
 8003488:	e082      	b.n	8003590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0xd2>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	0a5b      	lsrs	r3, r3, #9
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fe27 	bl	80040f6 <I2C_Master_ADDR>
 80034a8:	e072      	b.n	8003590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d03b      	beq.n	800352e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034c4:	f000 80f3 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	09db      	lsrs	r3, r3, #7
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00f      	beq.n	80034f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	0a9b      	lsrs	r3, r3, #10
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f9f1 	bl	80038d4 <I2C_MasterTransmit_TXE>
 80034f2:	e04d      	b.n	8003590 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80d6 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	0a5b      	lsrs	r3, r3, #9
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80cf 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003510:	7bbb      	ldrb	r3, [r7, #14]
 8003512:	2b21      	cmp	r3, #33	@ 0x21
 8003514:	d103      	bne.n	800351e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa78 	bl	8003a0c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800351c:	e0c7      	b.n	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	f040 80c4 	bne.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fae6 	bl	8003af8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800352c:	e0bf      	b.n	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800353c:	f000 80b7 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	099b      	lsrs	r3, r3, #6
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00f      	beq.n	800356c <HAL_I2C_EV_IRQHandler+0x194>
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	0a9b      	lsrs	r3, r3, #10
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d009      	beq.n	800356c <HAL_I2C_EV_IRQHandler+0x194>
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d103      	bne.n	800356c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fb5f 	bl	8003c28 <I2C_MasterReceive_RXNE>
 800356a:	e011      	b.n	8003590 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 809a 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	0a5b      	lsrs	r3, r3, #9
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8093 	beq.w	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fc15 	bl	8003db8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800358e:	e08e      	b.n	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8003590:	e08d      	b.n	80036ae <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d004      	beq.n	80035a4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e007      	b.n	80035b4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d012      	beq.n	80035e6 <HAL_I2C_EV_IRQHandler+0x20e>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	0a5b      	lsrs	r3, r3, #9
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00c      	beq.n	80035e6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80035dc:	69b9      	ldr	r1, [r7, #24]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 ffe0 	bl	80045a4 <I2C_Slave_ADDR>
 80035e4:	e066      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0x22e>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	0a5b      	lsrs	r3, r3, #9
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f001 f81a 	bl	8004638 <I2C_Slave_STOPF>
 8003604:	e056      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003606:	7bbb      	ldrb	r3, [r7, #14]
 8003608:	2b21      	cmp	r3, #33	@ 0x21
 800360a:	d002      	beq.n	8003612 <HAL_I2C_EV_IRQHandler+0x23a>
 800360c:	7bbb      	ldrb	r3, [r7, #14]
 800360e:	2b29      	cmp	r3, #41	@ 0x29
 8003610:	d125      	bne.n	800365e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	09db      	lsrs	r3, r3, #7
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00f      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0x266>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	0a9b      	lsrs	r3, r3, #10
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0x266>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fef8 	bl	800442c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800363c:	e039      	b.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d033      	beq.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2da>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	0a5b      	lsrs	r3, r3, #9
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d02d      	beq.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 ff25 	bl	80044a6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800365c:	e029      	b.n	80036b2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00f      	beq.n	800368a <HAL_I2C_EV_IRQHandler+0x2b2>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	0a9b      	lsrs	r3, r3, #10
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d103      	bne.n	800368a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 ff2f 	bl	80044e6 <I2C_SlaveReceive_RXNE>
 8003688:	e014      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	0a5b      	lsrs	r3, r3, #9
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 ff5d 	bl	8004562 <I2C_SlaveReceive_BTF>
 80036a8:	e004      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80036aa:	bf00      	nop
 80036ac:	e002      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b08a      	sub	sp, #40	@ 0x28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036dc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d016      	beq.n	8003718 <HAL_I2C_ER_IRQHandler+0x5e>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	0a1b      	lsrs	r3, r3, #8
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003706:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003716:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	0a5b      	lsrs	r3, r3, #9
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <HAL_I2C_ER_IRQHandler+0x88>
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	f043 0302 	orr.w	r3, r3, #2
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003740:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	0a9b      	lsrs	r3, r3, #10
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d03f      	beq.n	80037ce <HAL_I2C_ER_IRQHandler+0x114>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d039      	beq.n	80037ce <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800375a:	7efb      	ldrb	r3, [r7, #27]
 800375c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800376c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003774:	7ebb      	ldrb	r3, [r7, #26]
 8003776:	2b20      	cmp	r3, #32
 8003778:	d112      	bne.n	80037a0 <HAL_I2C_ER_IRQHandler+0xe6>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10f      	bne.n	80037a0 <HAL_I2C_ER_IRQHandler+0xe6>
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	2b21      	cmp	r3, #33	@ 0x21
 8003784:	d008      	beq.n	8003798 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003786:	7cfb      	ldrb	r3, [r7, #19]
 8003788:	2b29      	cmp	r3, #41	@ 0x29
 800378a:	d005      	beq.n	8003798 <HAL_I2C_ER_IRQHandler+0xde>
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	2b28      	cmp	r3, #40	@ 0x28
 8003790:	d106      	bne.n	80037a0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b21      	cmp	r3, #33	@ 0x21
 8003796:	d103      	bne.n	80037a0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f001 f87d 	bl	8004898 <I2C_Slave_AF>
 800379e:	e016      	b.n	80037ce <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037a8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	f043 0304 	orr.w	r3, r3, #4
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037b2:	7efb      	ldrb	r3, [r7, #27]
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d002      	beq.n	80037be <HAL_I2C_ER_IRQHandler+0x104>
 80037b8:	7efb      	ldrb	r3, [r7, #27]
 80037ba:	2b40      	cmp	r3, #64	@ 0x40
 80037bc:	d107      	bne.n	80037ce <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037cc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	0adb      	lsrs	r3, r3, #11
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00e      	beq.n	80037f8 <HAL_I2C_ER_IRQHandler+0x13e>
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	f043 0308 	orr.w	r3, r3, #8
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80037f6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f001 f8b8 	bl	8004980 <I2C_ITError>
  }
}
 8003810:	bf00      	nop
 8003812:	3728      	adds	r7, #40	@ 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]
 800386c:	4613      	mov	r3, r2
 800386e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d150      	bne.n	800399c <I2C_MasterTransmit_TXE+0xc8>
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b21      	cmp	r3, #33	@ 0x21
 80038fe:	d14d      	bne.n	800399c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b08      	cmp	r3, #8
 8003904:	d01d      	beq.n	8003942 <I2C_MasterTransmit_TXE+0x6e>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b20      	cmp	r3, #32
 800390a:	d01a      	beq.n	8003942 <I2C_MasterTransmit_TXE+0x6e>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003912:	d016      	beq.n	8003942 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003922:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2211      	movs	r2, #17
 8003928:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff ff6c 	bl	8003818 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003940:	e060      	b.n	8003a04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003950:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003960:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b40      	cmp	r3, #64	@ 0x40
 800397a:	d107      	bne.n	800398c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ff81 	bl	800388c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800398a:	e03b      	b.n	8003a04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ff3f 	bl	8003818 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800399a:	e033      	b.n	8003a04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b21      	cmp	r3, #33	@ 0x21
 80039a0:	d005      	beq.n	80039ae <I2C_MasterTransmit_TXE+0xda>
 80039a2:	7bbb      	ldrb	r3, [r7, #14]
 80039a4:	2b40      	cmp	r3, #64	@ 0x40
 80039a6:	d12d      	bne.n	8003a04 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b22      	cmp	r3, #34	@ 0x22
 80039ac:	d12a      	bne.n	8003a04 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d108      	bne.n	80039ca <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80039c8:	e01c      	b.n	8003a04 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b40      	cmp	r3, #64	@ 0x40
 80039d4:	d103      	bne.n	80039de <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f88e 	bl	8003af8 <I2C_MemoryTransmit_TXE_BTF>
}
 80039dc:	e012      	b.n	8003a04 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	781a      	ldrb	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a02:	e7ff      	b.n	8003a04 <I2C_MasterTransmit_TXE+0x130>
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b21      	cmp	r3, #33	@ 0x21
 8003a24:	d164      	bne.n	8003af0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d012      	beq.n	8003a56 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	781a      	ldrb	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a54:	e04c      	b.n	8003af0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d01d      	beq.n	8003a98 <I2C_MasterTransmit_BTF+0x8c>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d01a      	beq.n	8003a98 <I2C_MasterTransmit_BTF+0x8c>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a68:	d016      	beq.n	8003a98 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a78:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2211      	movs	r2, #17
 8003a7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff fec1 	bl	8003818 <HAL_I2C_MasterTxCpltCallback>
}
 8003a96:	e02b      	b.n	8003af0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003aa6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b40      	cmp	r3, #64	@ 0x40
 8003ad0:	d107      	bne.n	8003ae2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff fed6 	bl	800388c <HAL_I2C_MemTxCpltCallback>
}
 8003ae0:	e006      	b.n	8003af0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fe94 	bl	8003818 <HAL_I2C_MasterTxCpltCallback>
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11d      	bne.n	8003b4c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d10b      	bne.n	8003b30 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b28:	1c9a      	adds	r2, r3, #2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003b2e:	e077      	b.n	8003c20 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	121b      	asrs	r3, r3, #8
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b4a:	e069      	b.n	8003c20 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10b      	bne.n	8003b6c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b6a:	e059      	b.n	8003c20 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d152      	bne.n	8003c1a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b22      	cmp	r3, #34	@ 0x22
 8003b78:	d10d      	bne.n	8003b96 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b88:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b94:	e044      	b.n	8003c20 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	2b21      	cmp	r3, #33	@ 0x21
 8003ba4:	d112      	bne.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	781a      	ldrb	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bca:	e029      	b.n	8003c20 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d124      	bne.n	8003c20 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b21      	cmp	r3, #33	@ 0x21
 8003bda:	d121      	bne.n	8003c20 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff fe3a 	bl	800388c <HAL_I2C_MemTxCpltCallback>
}
 8003c18:	e002      	b.n	8003c20 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe ff30 	bl	8002a80 <I2C_Flush_DR>
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b22      	cmp	r3, #34	@ 0x22
 8003c3a:	f040 80b9 	bne.w	8003db0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c42:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d921      	bls.n	8003c96 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	f040 8096 	bne.w	8003db0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c92:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003c94:	e08c      	b.n	8003db0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d07f      	beq.n	8003d9e <I2C_MasterReceive_RXNE+0x176>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d002      	beq.n	8003caa <I2C_MasterReceive_RXNE+0x82>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d179      	bne.n	8003d9e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f001 fb3c 	bl	8005328 <I2C_WaitOnSTOPRequestThroughIT>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d14c      	bne.n	8003d50 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cd4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b40      	cmp	r3, #64	@ 0x40
 8003d0e:	d10a      	bne.n	8003d26 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff fdbd 	bl	800389e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d24:	e044      	b.n	8003db0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d002      	beq.n	8003d3a <I2C_MasterReceive_RXNE+0x112>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d103      	bne.n	8003d42 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d40:	e002      	b.n	8003d48 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2212      	movs	r2, #18
 8003d46:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff fd6e 	bl	800382a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d4e:	e02f      	b.n	8003db0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d5e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fd8a 	bl	80038b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d9c:	e008      	b.n	8003db0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dac:	605a      	str	r2, [r3, #4]
}
 8003dae:	e7ff      	b.n	8003db0 <I2C_MasterReceive_RXNE+0x188>
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d11b      	bne.n	8003e08 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dde:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e06:	e0c4      	b.n	8003f92 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d129      	bne.n	8003e66 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e20:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d00a      	beq.n	8003e3e <I2C_MasterReceive_BTF+0x86>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d007      	beq.n	8003e3e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e3c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e64:	e095      	b.n	8003f92 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d17d      	bne.n	8003f6c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d002      	beq.n	8003e7c <I2C_MasterReceive_BTF+0xc4>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d108      	bne.n	8003e8e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e016      	b.n	8003ebc <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d002      	beq.n	8003e9a <I2C_MasterReceive_BTF+0xe2>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d108      	bne.n	8003eac <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e007      	b.n	8003ebc <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b40      	cmp	r3, #64	@ 0x40
 8003f2a:	d10a      	bne.n	8003f42 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff fcaf 	bl	800389e <HAL_I2C_MemRxCpltCallback>
}
 8003f40:	e027      	b.n	8003f92 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d002      	beq.n	8003f56 <I2C_MasterReceive_BTF+0x19e>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d103      	bne.n	8003f5e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f5c:	e002      	b.n	8003f64 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2212      	movs	r2, #18
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff fc60 	bl	800382a <HAL_I2C_MasterRxCpltCallback>
}
 8003f6a:	e012      	b.n	8003f92 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b40      	cmp	r3, #64	@ 0x40
 8003fac:	d117      	bne.n	8003fde <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fc6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003fc8:	e067      	b.n	800409a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	611a      	str	r2, [r3, #16]
}
 8003fdc:	e05d      	b.n	800409a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe6:	d133      	bne.n	8004050 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b21      	cmp	r3, #33	@ 0x21
 8003ff2:	d109      	bne.n	8004008 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004004:	611a      	str	r2, [r3, #16]
 8004006:	e008      	b.n	800401a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	b2da      	uxtb	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	2b00      	cmp	r3, #0
 8004020:	d004      	beq.n	800402c <I2C_Master_SB+0x92>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	d108      	bne.n	800403e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d032      	beq.n	800409a <I2C_Master_SB+0x100>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02d      	beq.n	800409a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800404c:	605a      	str	r2, [r3, #4]
}
 800404e:	e024      	b.n	800409a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10e      	bne.n	8004076 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405c:	b29b      	uxth	r3, r3
 800405e:	11db      	asrs	r3, r3, #7
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0306 	and.w	r3, r3, #6
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f063 030f 	orn	r3, r3, #15
 800406c:	b2da      	uxtb	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	611a      	str	r2, [r3, #16]
}
 8004074:	e011      	b.n	800409a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10d      	bne.n	800409a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004082:	b29b      	uxth	r3, r3
 8004084:	11db      	asrs	r3, r3, #7
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f003 0306 	and.w	r3, r3, #6
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f063 030e 	orn	r3, r3, #14
 8004092:	b2da      	uxtb	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	611a      	str	r2, [r3, #16]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <I2C_Master_ADD10+0x26>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d108      	bne.n	80040dc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <I2C_Master_ADD10+0x48>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040ea:	605a      	str	r2, [r3, #4]
  }
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b091      	sub	sp, #68	@ 0x44
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004104:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b22      	cmp	r3, #34	@ 0x22
 800411e:	f040 8174 	bne.w	800440a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <I2C_Master_ADDR+0x54>
 800412a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800412e:	2b40      	cmp	r3, #64	@ 0x40
 8004130:	d10b      	bne.n	800414a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004132:	2300      	movs	r3, #0
 8004134:	633b      	str	r3, [r7, #48]	@ 0x30
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	633b      	str	r3, [r7, #48]	@ 0x30
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	633b      	str	r3, [r7, #48]	@ 0x30
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	e16b      	b.n	8004422 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800414e:	2b00      	cmp	r3, #0
 8004150:	d11d      	bne.n	800418e <I2C_Master_ADDR+0x98>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800415a:	d118      	bne.n	800418e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415c:	2300      	movs	r3, #0
 800415e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004180:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	651a      	str	r2, [r3, #80]	@ 0x50
 800418c:	e149      	b.n	8004422 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d113      	bne.n	80041c0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004198:	2300      	movs	r3, #0
 800419a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e120      	b.n	8004402 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	f040 808a 	bne.w	80042e0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80041cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041d2:	d137      	bne.n	8004244 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f2:	d113      	bne.n	800421c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004202:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004204:	2300      	movs	r3, #0
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	e0f2      	b.n	8004402 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421c:	2300      	movs	r3, #0
 800421e:	623b      	str	r3, [r7, #32]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	623b      	str	r3, [r7, #32]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	623b      	str	r3, [r7, #32]
 8004230:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e0de      	b.n	8004402 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004246:	2b08      	cmp	r3, #8
 8004248:	d02e      	beq.n	80042a8 <I2C_Master_ADDR+0x1b2>
 800424a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424c:	2b20      	cmp	r3, #32
 800424e:	d02b      	beq.n	80042a8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004252:	2b12      	cmp	r3, #18
 8004254:	d102      	bne.n	800425c <I2C_Master_ADDR+0x166>
 8004256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004258:	2b01      	cmp	r3, #1
 800425a:	d125      	bne.n	80042a8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	2b04      	cmp	r3, #4
 8004260:	d00e      	beq.n	8004280 <I2C_Master_ADDR+0x18a>
 8004262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004264:	2b02      	cmp	r3, #2
 8004266:	d00b      	beq.n	8004280 <I2C_Master_ADDR+0x18a>
 8004268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426a:	2b10      	cmp	r3, #16
 800426c:	d008      	beq.n	8004280 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e007      	b.n	8004290 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800428e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004290:	2300      	movs	r3, #0
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	e0ac      	b.n	8004402 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b8:	2300      	movs	r3, #0
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e090      	b.n	8004402 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d158      	bne.n	800439c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d021      	beq.n	8004334 <I2C_Master_ADDR+0x23e>
 80042f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d01e      	beq.n	8004334 <I2C_Master_ADDR+0x23e>
 80042f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d01b      	beq.n	8004334 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800430a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e012      	b.n	800435a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004342:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004368:	d14b      	bne.n	8004402 <I2C_Master_ADDR+0x30c>
 800436a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004370:	d00b      	beq.n	800438a <I2C_Master_ADDR+0x294>
 8004372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004374:	2b01      	cmp	r3, #1
 8004376:	d008      	beq.n	800438a <I2C_Master_ADDR+0x294>
 8004378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437a:	2b08      	cmp	r3, #8
 800437c:	d005      	beq.n	800438a <I2C_Master_ADDR+0x294>
 800437e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004380:	2b10      	cmp	r3, #16
 8004382:	d002      	beq.n	800438a <I2C_Master_ADDR+0x294>
 8004384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004386:	2b20      	cmp	r3, #32
 8004388:	d13b      	bne.n	8004402 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	e032      	b.n	8004402 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043aa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ba:	d117      	bne.n	80043ec <I2C_Master_ADDR+0x2f6>
 80043bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043c2:	d00b      	beq.n	80043dc <I2C_Master_ADDR+0x2e6>
 80043c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d008      	beq.n	80043dc <I2C_Master_ADDR+0x2e6>
 80043ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d005      	beq.n	80043dc <I2C_Master_ADDR+0x2e6>
 80043d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d002      	beq.n	80043dc <I2C_Master_ADDR+0x2e6>
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d107      	bne.n	80043ec <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043ea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004408:	e00b      	b.n	8004422 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	68bb      	ldr	r3, [r7, #8]
}
 8004420:	e7ff      	b.n	8004422 <I2C_Master_ADDR+0x32c>
 8004422:	bf00      	nop
 8004424:	3744      	adds	r7, #68	@ 0x44
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800443a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02b      	beq.n	800449e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	781a      	ldrb	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d114      	bne.n	800449e <I2C_SlaveTransmit_TXE+0x72>
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b29      	cmp	r3, #41	@ 0x29
 8004478:	d111      	bne.n	800449e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004488:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2221      	movs	r2, #33	@ 0x21
 800448e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2228      	movs	r2, #40	@ 0x28
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff f9cf 	bl	800383c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d011      	beq.n	80044dc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d02c      	beq.n	800455a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d114      	bne.n	800455a <I2C_SlaveReceive_RXNE+0x74>
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b2a      	cmp	r3, #42	@ 0x2a
 8004534:	d111      	bne.n	800455a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004544:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2222      	movs	r2, #34	@ 0x22
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2228      	movs	r2, #40	@ 0x28
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff f97a 	bl	800384e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d012      	beq.n	800459a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045be:	2b28      	cmp	r3, #40	@ 0x28
 80045c0:	d127      	bne.n	8004612 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	089b      	lsrs	r3, r3, #2
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	09db      	lsrs	r3, r3, #7
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	81bb      	strh	r3, [r7, #12]
 80045f4:	e002      	b.n	80045fc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004604:	89ba      	ldrh	r2, [r7, #12]
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff f928 	bl	8003860 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004610:	e00e      	b.n	8004630 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004646:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004656:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004658:	2300      	movs	r3, #0
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004684:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004694:	d172      	bne.n	800477c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	2b22      	cmp	r3, #34	@ 0x22
 800469a:	d002      	beq.n	80046a2 <I2C_Slave_STOPF+0x6a>
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b2a      	cmp	r3, #42	@ 0x2a
 80046a0:	d135      	bne.n	800470e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	f043 0204 	orr.w	r2, r3, #4
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fd feb0 	bl	8002440 <HAL_DMA_GetState>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d049      	beq.n	800477a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ea:	4a69      	ldr	r2, [pc, #420]	@ (8004890 <I2C_Slave_STOPF+0x258>)
 80046ec:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fd fe2c 	bl	8002350 <HAL_DMA_Abort_IT>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d03d      	beq.n	800477a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004708:	4610      	mov	r0, r2
 800470a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800470c:	e035      	b.n	800477a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	b29a      	uxth	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	f043 0204 	orr.w	r2, r3, #4
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004740:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004746:	4618      	mov	r0, r3
 8004748:	f7fd fe7a 	bl	8002440 <HAL_DMA_GetState>
 800474c:	4603      	mov	r3, r0
 800474e:	2b01      	cmp	r3, #1
 8004750:	d014      	beq.n	800477c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004756:	4a4e      	ldr	r2, [pc, #312]	@ (8004890 <I2C_Slave_STOPF+0x258>)
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475e:	4618      	mov	r0, r3
 8004760:	f7fd fdf6 	bl	8002350 <HAL_DMA_Abort_IT>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004774:	4610      	mov	r0, r2
 8004776:	4798      	blx	r3
 8004778:	e000      	b.n	800477c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800477a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d03e      	beq.n	8004804 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b04      	cmp	r3, #4
 8004792:	d112      	bne.n	80047ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c4:	2b40      	cmp	r3, #64	@ 0x40
 80047c6:	d112      	bne.n	80047ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	f043 0204 	orr.w	r2, r3, #4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f8b7 	bl	8004980 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004812:	e039      	b.n	8004888 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	2b2a      	cmp	r3, #42	@ 0x2a
 8004818:	d109      	bne.n	800482e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2228      	movs	r2, #40	@ 0x28
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff f810 	bl	800384e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b28      	cmp	r3, #40	@ 0x28
 8004838:	d111      	bne.n	800485e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <I2C_Slave_STOPF+0x25c>)
 800483e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff f80f 	bl	800387a <HAL_I2C_ListenCpltCallback>
}
 800485c:	e014      	b.n	8004888 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004862:	2b22      	cmp	r3, #34	@ 0x22
 8004864:	d002      	beq.n	800486c <I2C_Slave_STOPF+0x234>
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	2b22      	cmp	r3, #34	@ 0x22
 800486a:	d10d      	bne.n	8004888 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fe ffe3 	bl	800384e <HAL_I2C_SlaveRxCpltCallback>
}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	08004e85 	.word	0x08004e85
 8004894:	ffff0000 	.word	0xffff0000

08004898 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d002      	beq.n	80048ba <I2C_Slave_AF+0x22>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d129      	bne.n	800490e <I2C_Slave_AF+0x76>
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	2b28      	cmp	r3, #40	@ 0x28
 80048be:	d126      	bne.n	800490e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a2e      	ldr	r2, [pc, #184]	@ (800497c <I2C_Slave_AF+0xe4>)
 80048c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048d4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048de:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fe ffb7 	bl	800387a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800490c:	e031      	b.n	8004972 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	2b21      	cmp	r3, #33	@ 0x21
 8004912:	d129      	bne.n	8004968 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a19      	ldr	r2, [pc, #100]	@ (800497c <I2C_Slave_AF+0xe4>)
 8004918:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2221      	movs	r2, #33	@ 0x21
 800491e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800493e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004948:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004958:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fe f890 	bl	8002a80 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fe ff6b 	bl	800383c <HAL_I2C_SlaveTxCpltCallback>
}
 8004966:	e004      	b.n	8004972 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004970:	615a      	str	r2, [r3, #20]
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	ffff0000 	.word	0xffff0000

08004980 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004996:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004998:	7bbb      	ldrb	r3, [r7, #14]
 800499a:	2b10      	cmp	r3, #16
 800499c:	d002      	beq.n	80049a4 <I2C_ITError+0x24>
 800499e:	7bbb      	ldrb	r3, [r7, #14]
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d10a      	bne.n	80049ba <I2C_ITError+0x3a>
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b22      	cmp	r3, #34	@ 0x22
 80049a8:	d107      	bne.n	80049ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049c0:	2b28      	cmp	r3, #40	@ 0x28
 80049c2:	d107      	bne.n	80049d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2228      	movs	r2, #40	@ 0x28
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80049d2:	e015      	b.n	8004a00 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049e2:	d00a      	beq.n	80049fa <I2C_ITError+0x7a>
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b60      	cmp	r3, #96	@ 0x60
 80049e8:	d007      	beq.n	80049fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a0e:	d162      	bne.n	8004ad6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a1e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d020      	beq.n	8004a70 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a32:	4a6a      	ldr	r2, [pc, #424]	@ (8004bdc <I2C_ITError+0x25c>)
 8004a34:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fd fc88 	bl	8002350 <HAL_DMA_Abort_IT>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 8089 	beq.w	8004b5a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	4798      	blx	r3
 8004a6e:	e074      	b.n	8004b5a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a74:	4a59      	ldr	r2, [pc, #356]	@ (8004bdc <I2C_ITError+0x25c>)
 8004a76:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fd fc67 	bl	8002350 <HAL_DMA_Abort_IT>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d068      	beq.n	8004b5a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a92:	2b40      	cmp	r3, #64	@ 0x40
 8004a94:	d10b      	bne.n	8004aae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0201 	bic.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4798      	blx	r3
 8004ad4:	e041      	b.n	8004b5a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b60      	cmp	r3, #96	@ 0x60
 8004ae0:	d125      	bne.n	8004b2e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afa:	2b40      	cmp	r3, #64	@ 0x40
 8004afc:	d10b      	bne.n	8004b16 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fe fecb 	bl	80038c2 <HAL_I2C_AbortCpltCallback>
 8004b2c:	e015      	b.n	8004b5a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b38:	2b40      	cmp	r3, #64	@ 0x40
 8004b3a:	d10b      	bne.n	8004b54 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7fe feab 	bl	80038b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10e      	bne.n	8004b88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d104      	bne.n	8004b88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b96:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b9e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d113      	bne.n	8004bd4 <I2C_ITError+0x254>
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b28      	cmp	r3, #40	@ 0x28
 8004bb0:	d110      	bne.n	8004bd4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8004be0 <I2C_ITError+0x260>)
 8004bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fe fe53 	bl	800387a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	08004e85 	.word	0x08004e85
 8004be0:	ffff0000 	.word	0xffff0000

08004be4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d006      	beq.n	8004c0e <I2C_MasterRequestWrite+0x2a>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d003      	beq.n	8004c0e <I2C_MasterRequestWrite+0x2a>
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c0c:	d108      	bne.n	8004c20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e00b      	b.n	8004c38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c24:	2b12      	cmp	r3, #18
 8004c26:	d107      	bne.n	8004c38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f9c5 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00d      	beq.n	8004c6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c5e:	d103      	bne.n	8004c68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e035      	b.n	8004cd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c74:	d108      	bne.n	8004c88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c76:	897b      	ldrh	r3, [r7, #10]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c84:	611a      	str	r2, [r3, #16]
 8004c86:	e01b      	b.n	8004cc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c88:	897b      	ldrh	r3, [r7, #10]
 8004c8a:	11db      	asrs	r3, r3, #7
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 0306 	and.w	r3, r3, #6
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f063 030f 	orn	r3, r3, #15
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	490e      	ldr	r1, [pc, #56]	@ (8004ce0 <I2C_MasterRequestWrite+0xfc>)
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 fa0e 	bl	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e010      	b.n	8004cd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cb6:	897b      	ldrh	r3, [r7, #10]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4907      	ldr	r1, [pc, #28]	@ (8004ce4 <I2C_MasterRequestWrite+0x100>)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f9fe 	bl	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	00010008 	.word	0x00010008
 8004ce4:	00010002 	.word	0x00010002

08004ce8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d006      	beq.n	8004d22 <I2C_MasterRequestRead+0x3a>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d003      	beq.n	8004d22 <I2C_MasterRequestRead+0x3a>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d20:	d108      	bne.n	8004d34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e00b      	b.n	8004d4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d38:	2b11      	cmp	r3, #17
 8004d3a:	d107      	bne.n	8004d4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f93b 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d72:	d103      	bne.n	8004d7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e079      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d88:	d108      	bne.n	8004d9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d8a:	897b      	ldrh	r3, [r7, #10]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	611a      	str	r2, [r3, #16]
 8004d9a:	e05f      	b.n	8004e5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d9c:	897b      	ldrh	r3, [r7, #10]
 8004d9e:	11db      	asrs	r3, r3, #7
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 0306 	and.w	r3, r3, #6
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f063 030f 	orn	r3, r3, #15
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4930      	ldr	r1, [pc, #192]	@ (8004e7c <I2C_MasterRequestRead+0x194>)
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f984 	bl	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e054      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dca:	897b      	ldrh	r3, [r7, #10]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4929      	ldr	r1, [pc, #164]	@ (8004e80 <I2C_MasterRequestRead+0x198>)
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f974 	bl	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e044      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f8d9 	bl	8004fd4 <I2C_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00d      	beq.n	8004e44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e36:	d103      	bne.n	8004e40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e017      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e44:	897b      	ldrh	r3, [r7, #10]
 8004e46:	11db      	asrs	r3, r3, #7
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	f003 0306 	and.w	r3, r3, #6
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f063 030e 	orn	r3, r3, #14
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4907      	ldr	r1, [pc, #28]	@ (8004e80 <I2C_MasterRequestRead+0x198>)
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f930 	bl	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	00010008 	.word	0x00010008
 8004e80:	00010002 	.word	0x00010002

08004e84 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e9c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004fcc <I2C_DMAAbort+0x148>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	08db      	lsrs	r3, r3, #3
 8004ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8004fd0 <I2C_DMAAbort+0x14c>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	0a1a      	lsrs	r2, r3, #8
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00da      	lsls	r2, r3, #3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	f043 0220 	orr.w	r2, r3, #32
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004eca:	e00a      	b.n	8004ee2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee0:	d0ea      	beq.n	8004eb8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eee:	2200      	movs	r2, #0
 8004ef0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efe:	2200      	movs	r2, #0
 8004f00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2200      	movs	r2, #0
 8004f16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f24:	2200      	movs	r2, #0
 8004f26:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	2200      	movs	r2, #0
 8004f36:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b60      	cmp	r3, #96	@ 0x60
 8004f52:	d10e      	bne.n	8004f72 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2200      	movs	r2, #0
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f6a:	6978      	ldr	r0, [r7, #20]
 8004f6c:	f7fe fca9 	bl	80038c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f70:	e027      	b.n	8004fc2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f72:	7cfb      	ldrb	r3, [r7, #19]
 8004f74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f78:	2b28      	cmp	r3, #40	@ 0x28
 8004f7a:	d117      	bne.n	8004fac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2228      	movs	r2, #40	@ 0x28
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004faa:	e007      	b.n	8004fbc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004fbc:	6978      	ldr	r0, [r7, #20]
 8004fbe:	f7fe fc77 	bl	80038b0 <HAL_I2C_ErrorCallback>
}
 8004fc2:	bf00      	nop
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000000 	.word	0x20000000
 8004fd0:	14f8b589 	.word	0x14f8b589

08004fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fe4:	e048      	b.n	8005078 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d044      	beq.n	8005078 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fee:	f7fd f839 	bl	8002064 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d302      	bcc.n	8005004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d139      	bne.n	8005078 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	0c1b      	lsrs	r3, r3, #16
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	d10d      	bne.n	800502a <I2C_WaitOnFlagUntilTimeout+0x56>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	43da      	mvns	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	4013      	ands	r3, r2
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	e00c      	b.n	8005044 <I2C_WaitOnFlagUntilTimeout+0x70>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	43da      	mvns	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4013      	ands	r3, r2
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	429a      	cmp	r2, r3
 8005048:	d116      	bne.n	8005078 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005064:	f043 0220 	orr.w	r2, r3, #32
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e023      	b.n	80050c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	0c1b      	lsrs	r3, r3, #16
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	d10d      	bne.n	800509e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	43da      	mvns	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4013      	ands	r3, r2
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	e00c      	b.n	80050b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	43da      	mvns	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4013      	ands	r3, r2
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bf0c      	ite	eq
 80050b0:	2301      	moveq	r3, #1
 80050b2:	2300      	movne	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d093      	beq.n	8004fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050d6:	e071      	b.n	80051bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e6:	d123      	bne.n	8005130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005100:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	f043 0204 	orr.w	r2, r3, #4
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e067      	b.n	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	d041      	beq.n	80051bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005138:	f7fc ff94 	bl	8002064 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d302      	bcc.n	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d136      	bne.n	80051bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d10c      	bne.n	8005172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	43da      	mvns	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf14      	ite	ne
 800516a:	2301      	movne	r3, #1
 800516c:	2300      	moveq	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	e00b      	b.n	800518a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	43da      	mvns	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4013      	ands	r3, r2
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d016      	beq.n	80051bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a8:	f043 0220 	orr.w	r2, r3, #32
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e021      	b.n	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	0c1b      	lsrs	r3, r3, #16
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d10c      	bne.n	80051e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	43da      	mvns	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4013      	ands	r3, r2
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf14      	ite	ne
 80051d8:	2301      	movne	r3, #1
 80051da:	2300      	moveq	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	e00b      	b.n	80051f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	43da      	mvns	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4013      	ands	r3, r2
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bf14      	ite	ne
 80051f2:	2301      	movne	r3, #1
 80051f4:	2300      	moveq	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f47f af6d 	bne.w	80050d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005214:	e034      	b.n	8005280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f915 	bl	8005446 <I2C_IsAcknowledgeFailed>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e034      	b.n	8005290 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d028      	beq.n	8005280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522e:	f7fc ff19 	bl	8002064 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	d302      	bcc.n	8005244 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d11d      	bne.n	8005280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524e:	2b80      	cmp	r3, #128	@ 0x80
 8005250:	d016      	beq.n	8005280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e007      	b.n	8005290 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528a:	2b80      	cmp	r3, #128	@ 0x80
 800528c:	d1c3      	bne.n	8005216 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052a4:	e034      	b.n	8005310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f8cd 	bl	8005446 <I2C_IsAcknowledgeFailed>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e034      	b.n	8005320 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d028      	beq.n	8005310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fc fed1 	bl	8002064 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d11d      	bne.n	8005310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d016      	beq.n	8005310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e007      	b.n	8005320 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b04      	cmp	r3, #4
 800531c:	d1c3      	bne.n	80052a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005334:	4b13      	ldr	r3, [pc, #76]	@ (8005384 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	08db      	lsrs	r3, r3, #3
 800533a:	4a13      	ldr	r2, [pc, #76]	@ (8005388 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800533c:	fba2 2303 	umull	r2, r3, r2, r3
 8005340:	0a1a      	lsrs	r2, r3, #8
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3b01      	subs	r3, #1
 800534e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d107      	bne.n	8005366 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e008      	b.n	8005378 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005374:	d0e9      	beq.n	800534a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000000 	.word	0x20000000
 8005388:	14f8b589 	.word	0x14f8b589

0800538c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005398:	e049      	b.n	800542e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d119      	bne.n	80053dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0210 	mvn.w	r2, #16
 80053b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e030      	b.n	800543e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053dc:	f7fc fe42 	bl	8002064 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11d      	bne.n	800542e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fc:	2b40      	cmp	r3, #64	@ 0x40
 80053fe:	d016      	beq.n	800542e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	f043 0220 	orr.w	r2, r3, #32
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e007      	b.n	800543e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005438:	2b40      	cmp	r3, #64	@ 0x40
 800543a:	d1ae      	bne.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545c:	d11b      	bne.n	8005496 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005466:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	f043 0204 	orr.w	r2, r3, #4
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80054b2:	d103      	bne.n	80054bc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80054ba:	e007      	b.n	80054cc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80054c4:	d102      	bne.n	80054cc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2208      	movs	r2, #8
 80054ca:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e272      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8087 	beq.w	8005606 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054f8:	4b92      	ldr	r3, [pc, #584]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f003 030c 	and.w	r3, r3, #12
 8005500:	2b04      	cmp	r3, #4
 8005502:	d00c      	beq.n	800551e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005504:	4b8f      	ldr	r3, [pc, #572]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b08      	cmp	r3, #8
 800550e:	d112      	bne.n	8005536 <HAL_RCC_OscConfig+0x5e>
 8005510:	4b8c      	ldr	r3, [pc, #560]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800551c:	d10b      	bne.n	8005536 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800551e:	4b89      	ldr	r3, [pc, #548]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d06c      	beq.n	8005604 <HAL_RCC_OscConfig+0x12c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d168      	bne.n	8005604 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e24c      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800553e:	d106      	bne.n	800554e <HAL_RCC_OscConfig+0x76>
 8005540:	4b80      	ldr	r3, [pc, #512]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a7f      	ldr	r2, [pc, #508]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	e02e      	b.n	80055ac <HAL_RCC_OscConfig+0xd4>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0x98>
 8005556:	4b7b      	ldr	r3, [pc, #492]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a7a      	ldr	r2, [pc, #488]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 800555c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	4b78      	ldr	r3, [pc, #480]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a77      	ldr	r2, [pc, #476]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005568:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e01d      	b.n	80055ac <HAL_RCC_OscConfig+0xd4>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0xbc>
 800557a:	4b72      	ldr	r3, [pc, #456]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a71      	ldr	r2, [pc, #452]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b6f      	ldr	r3, [pc, #444]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a6e      	ldr	r2, [pc, #440]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 800558c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e00b      	b.n	80055ac <HAL_RCC_OscConfig+0xd4>
 8005594:	4b6b      	ldr	r3, [pc, #428]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a6a      	ldr	r2, [pc, #424]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 800559a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	4b68      	ldr	r3, [pc, #416]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a67      	ldr	r2, [pc, #412]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 80055a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d013      	beq.n	80055dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b4:	f7fc fd56 	bl	8002064 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055bc:	f7fc fd52 	bl	8002064 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b64      	cmp	r3, #100	@ 0x64
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e200      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0xe4>
 80055da:	e014      	b.n	8005606 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055dc:	f7fc fd42 	bl	8002064 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e4:	f7fc fd3e 	bl	8002064 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b64      	cmp	r3, #100	@ 0x64
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e1ec      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055f6:	4b53      	ldr	r3, [pc, #332]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x10c>
 8005602:	e000      	b.n	8005606 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d063      	beq.n	80056da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005612:	4b4c      	ldr	r3, [pc, #304]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f003 030c 	and.w	r3, r3, #12
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800561e:	4b49      	ldr	r3, [pc, #292]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b08      	cmp	r3, #8
 8005628:	d11c      	bne.n	8005664 <HAL_RCC_OscConfig+0x18c>
 800562a:	4b46      	ldr	r3, [pc, #280]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d116      	bne.n	8005664 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005636:	4b43      	ldr	r3, [pc, #268]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_RCC_OscConfig+0x176>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d001      	beq.n	800564e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e1c0      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564e:	4b3d      	ldr	r3, [pc, #244]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	4939      	ldr	r1, [pc, #228]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 800565e:	4313      	orrs	r3, r2
 8005660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005662:	e03a      	b.n	80056da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d020      	beq.n	80056ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800566c:	4b36      	ldr	r3, [pc, #216]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 800566e:	2201      	movs	r2, #1
 8005670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005672:	f7fc fcf7 	bl	8002064 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800567a:	f7fc fcf3 	bl	8002064 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e1a1      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568c:	4b2d      	ldr	r3, [pc, #180]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f0      	beq.n	800567a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005698:	4b2a      	ldr	r3, [pc, #168]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4927      	ldr	r1, [pc, #156]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	600b      	str	r3, [r1, #0]
 80056ac:	e015      	b.n	80056da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ae:	4b26      	ldr	r3, [pc, #152]	@ (8005748 <HAL_RCC_OscConfig+0x270>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b4:	f7fc fcd6 	bl	8002064 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056bc:	f7fc fcd2 	bl	8002064 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e180      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d03a      	beq.n	800575c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d019      	beq.n	8005722 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ee:	4b17      	ldr	r3, [pc, #92]	@ (800574c <HAL_RCC_OscConfig+0x274>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f4:	f7fc fcb6 	bl	8002064 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056fc:	f7fc fcb2 	bl	8002064 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e160      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570e:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <HAL_RCC_OscConfig+0x26c>)
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800571a:	2001      	movs	r0, #1
 800571c:	f000 face 	bl	8005cbc <RCC_Delay>
 8005720:	e01c      	b.n	800575c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005722:	4b0a      	ldr	r3, [pc, #40]	@ (800574c <HAL_RCC_OscConfig+0x274>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005728:	f7fc fc9c 	bl	8002064 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800572e:	e00f      	b.n	8005750 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005730:	f7fc fc98 	bl	8002064 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d908      	bls.n	8005750 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e146      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
 8005742:	bf00      	nop
 8005744:	40021000 	.word	0x40021000
 8005748:	42420000 	.word	0x42420000
 800574c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005750:	4b92      	ldr	r3, [pc, #584]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e9      	bne.n	8005730 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80a6 	beq.w	80058b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800576e:	4b8b      	ldr	r3, [pc, #556]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10d      	bne.n	8005796 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800577a:	4b88      	ldr	r3, [pc, #544]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	4a87      	ldr	r2, [pc, #540]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005784:	61d3      	str	r3, [r2, #28]
 8005786:	4b85      	ldr	r3, [pc, #532]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800578e:	60bb      	str	r3, [r7, #8]
 8005790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005792:	2301      	movs	r3, #1
 8005794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005796:	4b82      	ldr	r3, [pc, #520]	@ (80059a0 <HAL_RCC_OscConfig+0x4c8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d118      	bne.n	80057d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057a2:	4b7f      	ldr	r3, [pc, #508]	@ (80059a0 <HAL_RCC_OscConfig+0x4c8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a7e      	ldr	r2, [pc, #504]	@ (80059a0 <HAL_RCC_OscConfig+0x4c8>)
 80057a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ae:	f7fc fc59 	bl	8002064 <HAL_GetTick>
 80057b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b4:	e008      	b.n	80057c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b6:	f7fc fc55 	bl	8002064 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b64      	cmp	r3, #100	@ 0x64
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e103      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c8:	4b75      	ldr	r3, [pc, #468]	@ (80059a0 <HAL_RCC_OscConfig+0x4c8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0f0      	beq.n	80057b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d106      	bne.n	80057ea <HAL_RCC_OscConfig+0x312>
 80057dc:	4b6f      	ldr	r3, [pc, #444]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	4a6e      	ldr	r2, [pc, #440]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6213      	str	r3, [r2, #32]
 80057e8:	e02d      	b.n	8005846 <HAL_RCC_OscConfig+0x36e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10c      	bne.n	800580c <HAL_RCC_OscConfig+0x334>
 80057f2:	4b6a      	ldr	r3, [pc, #424]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	4a69      	ldr	r2, [pc, #420]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	6213      	str	r3, [r2, #32]
 80057fe:	4b67      	ldr	r3, [pc, #412]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	4a66      	ldr	r2, [pc, #408]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005804:	f023 0304 	bic.w	r3, r3, #4
 8005808:	6213      	str	r3, [r2, #32]
 800580a:	e01c      	b.n	8005846 <HAL_RCC_OscConfig+0x36e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b05      	cmp	r3, #5
 8005812:	d10c      	bne.n	800582e <HAL_RCC_OscConfig+0x356>
 8005814:	4b61      	ldr	r3, [pc, #388]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	4a60      	ldr	r2, [pc, #384]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 800581a:	f043 0304 	orr.w	r3, r3, #4
 800581e:	6213      	str	r3, [r2, #32]
 8005820:	4b5e      	ldr	r3, [pc, #376]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	4a5d      	ldr	r2, [pc, #372]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	6213      	str	r3, [r2, #32]
 800582c:	e00b      	b.n	8005846 <HAL_RCC_OscConfig+0x36e>
 800582e:	4b5b      	ldr	r3, [pc, #364]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	4a5a      	ldr	r2, [pc, #360]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	6213      	str	r3, [r2, #32]
 800583a:	4b58      	ldr	r3, [pc, #352]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	4a57      	ldr	r2, [pc, #348]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005840:	f023 0304 	bic.w	r3, r3, #4
 8005844:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d015      	beq.n	800587a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800584e:	f7fc fc09 	bl	8002064 <HAL_GetTick>
 8005852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005854:	e00a      	b.n	800586c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005856:	f7fc fc05 	bl	8002064 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005864:	4293      	cmp	r3, r2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e0b1      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800586c:	4b4b      	ldr	r3, [pc, #300]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0ee      	beq.n	8005856 <HAL_RCC_OscConfig+0x37e>
 8005878:	e014      	b.n	80058a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800587a:	f7fc fbf3 	bl	8002064 <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005880:	e00a      	b.n	8005898 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005882:	f7fc fbef 	bl	8002064 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005890:	4293      	cmp	r3, r2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e09b      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005898:	4b40      	ldr	r3, [pc, #256]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1ee      	bne.n	8005882 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d105      	bne.n	80058b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058aa:	4b3c      	ldr	r3, [pc, #240]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	4a3b      	ldr	r2, [pc, #236]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 80058b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8087 	beq.w	80059ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058c0:	4b36      	ldr	r3, [pc, #216]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 030c 	and.w	r3, r3, #12
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d061      	beq.n	8005990 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d146      	bne.n	8005962 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d4:	4b33      	ldr	r3, [pc, #204]	@ (80059a4 <HAL_RCC_OscConfig+0x4cc>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058da:	f7fc fbc3 	bl	8002064 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e2:	f7fc fbbf 	bl	8002064 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e06d      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058f4:	4b29      	ldr	r3, [pc, #164]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f0      	bne.n	80058e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005908:	d108      	bne.n	800591c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800590a:	4b24      	ldr	r3, [pc, #144]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	4921      	ldr	r1, [pc, #132]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005918:	4313      	orrs	r3, r2
 800591a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800591c:	4b1f      	ldr	r3, [pc, #124]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a19      	ldr	r1, [r3, #32]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592c:	430b      	orrs	r3, r1
 800592e:	491b      	ldr	r1, [pc, #108]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005930:	4313      	orrs	r3, r2
 8005932:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005934:	4b1b      	ldr	r3, [pc, #108]	@ (80059a4 <HAL_RCC_OscConfig+0x4cc>)
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593a:	f7fc fb93 	bl	8002064 <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005942:	f7fc fb8f 	bl	8002064 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e03d      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005954:	4b11      	ldr	r3, [pc, #68]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0f0      	beq.n	8005942 <HAL_RCC_OscConfig+0x46a>
 8005960:	e035      	b.n	80059ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005962:	4b10      	ldr	r3, [pc, #64]	@ (80059a4 <HAL_RCC_OscConfig+0x4cc>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005968:	f7fc fb7c 	bl	8002064 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005970:	f7fc fb78 	bl	8002064 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e026      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005982:	4b06      	ldr	r3, [pc, #24]	@ (800599c <HAL_RCC_OscConfig+0x4c4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f0      	bne.n	8005970 <HAL_RCC_OscConfig+0x498>
 800598e:	e01e      	b.n	80059ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d107      	bne.n	80059a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e019      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
 800599c:	40021000 	.word	0x40021000
 80059a0:	40007000 	.word	0x40007000
 80059a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059a8:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <HAL_RCC_OscConfig+0x500>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d106      	bne.n	80059ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d001      	beq.n	80059ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40021000 	.word	0x40021000

080059dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0d0      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059f0:	4b6a      	ldr	r3, [pc, #424]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d910      	bls.n	8005a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fe:	4b67      	ldr	r3, [pc, #412]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 0207 	bic.w	r2, r3, #7
 8005a06:	4965      	ldr	r1, [pc, #404]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c0>)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0e:	4b63      	ldr	r3, [pc, #396]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e0b8      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d020      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a38:	4b59      	ldr	r3, [pc, #356]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a58      	ldr	r2, [pc, #352]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a50:	4b53      	ldr	r3, [pc, #332]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	4a52      	ldr	r2, [pc, #328]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a56:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005a5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a5c:	4b50      	ldr	r3, [pc, #320]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	494d      	ldr	r1, [pc, #308]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d040      	beq.n	8005afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a82:	4b47      	ldr	r3, [pc, #284]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d115      	bne.n	8005aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e07f      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d107      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9a:	4b41      	ldr	r3, [pc, #260]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e073      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e06b      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aba:	4b39      	ldr	r3, [pc, #228]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f023 0203 	bic.w	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	4936      	ldr	r1, [pc, #216]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005acc:	f7fc faca 	bl	8002064 <HAL_GetTick>
 8005ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad2:	e00a      	b.n	8005aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad4:	f7fc fac6 	bl	8002064 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e053      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aea:	4b2d      	ldr	r3, [pc, #180]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f003 020c 	and.w	r2, r3, #12
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d1eb      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005afc:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d210      	bcs.n	8005b2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0a:	4b24      	ldr	r3, [pc, #144]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f023 0207 	bic.w	r2, r3, #7
 8005b12:	4922      	ldr	r1, [pc, #136]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c0>)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1a:	4b20      	ldr	r3, [pc, #128]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e032      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b38:	4b19      	ldr	r3, [pc, #100]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4916      	ldr	r1, [pc, #88]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b56:	4b12      	ldr	r3, [pc, #72]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	490e      	ldr	r1, [pc, #56]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b6a:	f000 f821 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	091b      	lsrs	r3, r3, #4
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	490a      	ldr	r1, [pc, #40]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b7c:	5ccb      	ldrb	r3, [r1, r3]
 8005b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b82:	4a09      	ldr	r2, [pc, #36]	@ (8005ba8 <HAL_RCC_ClockConfig+0x1cc>)
 8005b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b86:	4b09      	ldr	r3, [pc, #36]	@ (8005bac <HAL_RCC_ClockConfig+0x1d0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fc fa28 	bl	8001fe0 <HAL_InitTick>

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40022000 	.word	0x40022000
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	08007414 	.word	0x08007414
 8005ba8:	20000000 	.word	0x20000000
 8005bac:	20000004 	.word	0x20000004

08005bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005bca:	4b1e      	ldr	r3, [pc, #120]	@ (8005c44 <HAL_RCC_GetSysClockFreq+0x94>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d002      	beq.n	8005be0 <HAL_RCC_GetSysClockFreq+0x30>
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d003      	beq.n	8005be6 <HAL_RCC_GetSysClockFreq+0x36>
 8005bde:	e027      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005be0:	4b19      	ldr	r3, [pc, #100]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8005be2:	613b      	str	r3, [r7, #16]
      break;
 8005be4:	e027      	b.n	8005c36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	0c9b      	lsrs	r3, r3, #18
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	4a17      	ldr	r2, [pc, #92]	@ (8005c4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005bf0:	5cd3      	ldrb	r3, [r2, r3]
 8005bf2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d010      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bfe:	4b11      	ldr	r3, [pc, #68]	@ (8005c44 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	0c5b      	lsrs	r3, r3, #17
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	4a11      	ldr	r2, [pc, #68]	@ (8005c50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c0a:	5cd3      	ldrb	r3, [r2, r3]
 8005c0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a0d      	ldr	r2, [pc, #52]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c12:	fb03 f202 	mul.w	r2, r3, r2
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	e004      	b.n	8005c2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a0c      	ldr	r2, [pc, #48]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c24:	fb02 f303 	mul.w	r3, r2, r3
 8005c28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	613b      	str	r3, [r7, #16]
      break;
 8005c2e:	e002      	b.n	8005c36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c30:	4b05      	ldr	r3, [pc, #20]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c32:	613b      	str	r3, [r7, #16]
      break;
 8005c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c36:	693b      	ldr	r3, [r7, #16]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000
 8005c48:	007a1200 	.word	0x007a1200
 8005c4c:	0800742c 	.word	0x0800742c
 8005c50:	0800743c 	.word	0x0800743c
 8005c54:	003d0900 	.word	0x003d0900

08005c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c5c:	4b02      	ldr	r3, [pc, #8]	@ (8005c68 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr
 8005c68:	20000000 	.word	0x20000000

08005c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c70:	f7ff fff2 	bl	8005c58 <HAL_RCC_GetHCLKFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	0a1b      	lsrs	r3, r3, #8
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	4903      	ldr	r1, [pc, #12]	@ (8005c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	08007424 	.word	0x08007424

08005c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c98:	f7ff ffde 	bl	8005c58 <HAL_RCC_GetHCLKFreq>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	4b05      	ldr	r3, [pc, #20]	@ (8005cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	0adb      	lsrs	r3, r3, #11
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	4903      	ldr	r1, [pc, #12]	@ (8005cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005caa:	5ccb      	ldrb	r3, [r1, r3]
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	08007424 	.word	0x08007424

08005cbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf0 <RCC_Delay+0x34>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8005cf4 <RCC_Delay+0x38>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	0a5b      	lsrs	r3, r3, #9
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005cd8:	bf00      	nop
  }
  while (Delay --);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1e5a      	subs	r2, r3, #1
 8005cde:	60fa      	str	r2, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1f9      	bne.n	8005cd8 <RCC_Delay+0x1c>
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr
 8005cf0:	20000000 	.word	0x20000000
 8005cf4:	10624dd3 	.word	0x10624dd3

08005cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e076      	b.n	8005df8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d108      	bne.n	8005d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d1a:	d009      	beq.n	8005d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	61da      	str	r2, [r3, #28]
 8005d22:	e005      	b.n	8005d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fb ff36 	bl	8001bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db4:	ea42 0103 	orr.w	r1, r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	0c1a      	lsrs	r2, r3, #16
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f002 0204 	and.w	r2, r2, #4
 8005dd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69da      	ldr	r2, [r3, #28]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005de6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e10:	f7fc f928 	bl	8002064 <HAL_GetTick>
 8005e14:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005e16:	88fb      	ldrh	r3, [r7, #6]
 8005e18:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d001      	beq.n	8005e2a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005e26:	2302      	movs	r3, #2
 8005e28:	e12a      	b.n	8006080 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <HAL_SPI_Transmit+0x36>
 8005e30:	88fb      	ldrh	r3, [r7, #6]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e122      	b.n	8006080 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_SPI_Transmit+0x48>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e11b      	b.n	8006080 <HAL_SPI_Transmit+0x280>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2203      	movs	r2, #3
 8005e54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	88fa      	ldrh	r2, [r7, #6]
 8005e68:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	88fa      	ldrh	r2, [r7, #6]
 8005e6e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e96:	d10f      	bne.n	8005eb8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ea6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec2:	2b40      	cmp	r3, #64	@ 0x40
 8005ec4:	d007      	beq.n	8005ed6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ed4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ede:	d152      	bne.n	8005f86 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_SPI_Transmit+0xee>
 8005ee8:	8b7b      	ldrh	r3, [r7, #26]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d145      	bne.n	8005f7a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef2:	881a      	ldrh	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efe:	1c9a      	adds	r2, r3, #2
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f12:	e032      	b.n	8005f7a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d112      	bne.n	8005f48 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f26:	881a      	ldrh	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f32:	1c9a      	adds	r2, r3, #2
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f46:	e018      	b.n	8005f7a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f48:	f7fc f88c 	bl	8002064 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d803      	bhi.n	8005f60 <HAL_SPI_Transmit+0x160>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	d102      	bne.n	8005f66 <HAL_SPI_Transmit+0x166>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e082      	b.n	8006080 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1c7      	bne.n	8005f14 <HAL_SPI_Transmit+0x114>
 8005f84:	e053      	b.n	800602e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_SPI_Transmit+0x194>
 8005f8e:	8b7b      	ldrh	r3, [r7, #26]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d147      	bne.n	8006024 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	7812      	ldrb	r2, [r2, #0]
 8005fa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005fba:	e033      	b.n	8006024 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d113      	bne.n	8005ff2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ff0:	e018      	b.n	8006024 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ff2:	f7fc f837 	bl	8002064 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d803      	bhi.n	800600a <HAL_SPI_Transmit+0x20a>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d102      	bne.n	8006010 <HAL_SPI_Transmit+0x210>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e02d      	b.n	8006080 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1c6      	bne.n	8005fbc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fbc4 	bl	80067c0 <SPI_EndRxTxTransaction>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800607e:	2300      	movs	r3, #0
  }
}
 8006080:	4618      	mov	r0, r3
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af02      	add	r7, sp, #8
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d001      	beq.n	80060a8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80060a4:	2302      	movs	r3, #2
 80060a6:	e104      	b.n	80062b2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060b0:	d112      	bne.n	80060d8 <HAL_SPI_Receive+0x50>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10e      	bne.n	80060d8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2204      	movs	r2, #4
 80060be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	4613      	mov	r3, r2
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f8f3 	bl	80062ba <HAL_SPI_TransmitReceive>
 80060d4:	4603      	mov	r3, r0
 80060d6:	e0ec      	b.n	80062b2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060d8:	f7fb ffc4 	bl	8002064 <HAL_GetTick>
 80060dc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_SPI_Receive+0x62>
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e0e1      	b.n	80062b2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_SPI_Receive+0x74>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0da      	b.n	80062b2 <HAL_SPI_Receive+0x22a>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2204      	movs	r2, #4
 8006108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	88fa      	ldrh	r2, [r7, #6]
 800611c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	88fa      	ldrh	r2, [r7, #6]
 8006122:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800614a:	d10f      	bne.n	800616c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800615a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800616a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006176:	2b40      	cmp	r3, #64	@ 0x40
 8006178:	d007      	beq.n	800618a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006188:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d170      	bne.n	8006274 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006192:	e035      	b.n	8006200 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d115      	bne.n	80061ce <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f103 020c 	add.w	r2, r3, #12
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ae:	7812      	ldrb	r2, [r2, #0]
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061cc:	e018      	b.n	8006200 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ce:	f7fb ff49 	bl	8002064 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d803      	bhi.n	80061e6 <HAL_SPI_Receive+0x15e>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d102      	bne.n	80061ec <HAL_SPI_Receive+0x164>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d109      	bne.n	8006200 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e058      	b.n	80062b2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1c4      	bne.n	8006194 <HAL_SPI_Receive+0x10c>
 800620a:	e038      	b.n	800627e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b01      	cmp	r3, #1
 8006218:	d113      	bne.n	8006242 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006224:	b292      	uxth	r2, r2
 8006226:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622c:	1c9a      	adds	r2, r3, #2
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006240:	e018      	b.n	8006274 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006242:	f7fb ff0f 	bl	8002064 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d803      	bhi.n	800625a <HAL_SPI_Receive+0x1d2>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d102      	bne.n	8006260 <HAL_SPI_Receive+0x1d8>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e01e      	b.n	80062b2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1c6      	bne.n	800620c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fa4a 	bl	800671c <SPI_EndRxTransaction>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2220      	movs	r2, #32
 8006292:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
  }
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b08a      	sub	sp, #40	@ 0x28
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062c8:	2301      	movs	r3, #1
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062cc:	f7fb feca 	bl	8002064 <HAL_GetTick>
 80062d0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062d8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80062e0:	887b      	ldrh	r3, [r7, #2]
 80062e2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062e4:	7ffb      	ldrb	r3, [r7, #31]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d00c      	beq.n	8006304 <HAL_SPI_TransmitReceive+0x4a>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062f0:	d106      	bne.n	8006300 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d102      	bne.n	8006300 <HAL_SPI_TransmitReceive+0x46>
 80062fa:	7ffb      	ldrb	r3, [r7, #31]
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d001      	beq.n	8006304 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006300:	2302      	movs	r3, #2
 8006302:	e17f      	b.n	8006604 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_SPI_TransmitReceive+0x5c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <HAL_SPI_TransmitReceive+0x5c>
 8006310:	887b      	ldrh	r3, [r7, #2]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e174      	b.n	8006604 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_SPI_TransmitReceive+0x6e>
 8006324:	2302      	movs	r3, #2
 8006326:	e16d      	b.n	8006604 <HAL_SPI_TransmitReceive+0x34a>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b04      	cmp	r3, #4
 800633a:	d003      	beq.n	8006344 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2205      	movs	r2, #5
 8006340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	887a      	ldrh	r2, [r7, #2]
 8006354:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	887a      	ldrh	r2, [r7, #2]
 800635a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	887a      	ldrh	r2, [r7, #2]
 8006366:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	887a      	ldrh	r2, [r7, #2]
 800636c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006384:	2b40      	cmp	r3, #64	@ 0x40
 8006386:	d007      	beq.n	8006398 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006396:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063a0:	d17e      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_SPI_TransmitReceive+0xf6>
 80063aa:	8afb      	ldrh	r3, [r7, #22]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d16c      	bne.n	800648a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b4:	881a      	ldrh	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c0:	1c9a      	adds	r2, r3, #2
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063d4:	e059      	b.n	800648a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d11b      	bne.n	800641c <HAL_SPI_TransmitReceive+0x162>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d016      	beq.n	800641c <HAL_SPI_TransmitReceive+0x162>
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d113      	bne.n	800641c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f8:	881a      	ldrh	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006404:	1c9a      	adds	r2, r3, #2
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006418:	2300      	movs	r3, #0
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b01      	cmp	r3, #1
 8006428:	d119      	bne.n	800645e <HAL_SPI_TransmitReceive+0x1a4>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d014      	beq.n	800645e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643e:	b292      	uxth	r2, r2
 8006440:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	1c9a      	adds	r2, r3, #2
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800645a:	2301      	movs	r3, #1
 800645c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800645e:	f7fb fe01 	bl	8002064 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800646a:	429a      	cmp	r2, r3
 800646c:	d80d      	bhi.n	800648a <HAL_SPI_TransmitReceive+0x1d0>
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d009      	beq.n	800648a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e0bc      	b.n	8006604 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1a0      	bne.n	80063d6 <HAL_SPI_TransmitReceive+0x11c>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d19b      	bne.n	80063d6 <HAL_SPI_TransmitReceive+0x11c>
 800649e:	e082      	b.n	80065a6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x1f4>
 80064a8:	8afb      	ldrh	r3, [r7, #22]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d171      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	330c      	adds	r3, #12
 80064b8:	7812      	ldrb	r2, [r2, #0]
 80064ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064d4:	e05d      	b.n	8006592 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d11c      	bne.n	800651e <HAL_SPI_TransmitReceive+0x264>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d017      	beq.n	800651e <HAL_SPI_TransmitReceive+0x264>
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d114      	bne.n	800651e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	7812      	ldrb	r2, [r2, #0]
 8006500:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b01      	cmp	r3, #1
 800652a:	d119      	bne.n	8006560 <HAL_SPI_TransmitReceive+0x2a6>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d014      	beq.n	8006560 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800655c:	2301      	movs	r3, #1
 800655e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006560:	f7fb fd80 	bl	8002064 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800656c:	429a      	cmp	r2, r3
 800656e:	d803      	bhi.n	8006578 <HAL_SPI_TransmitReceive+0x2be>
 8006570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d102      	bne.n	800657e <HAL_SPI_TransmitReceive+0x2c4>
 8006578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e038      	b.n	8006604 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006596:	b29b      	uxth	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d19c      	bne.n	80064d6 <HAL_SPI_TransmitReceive+0x21c>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d197      	bne.n	80064d6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065a6:	6a3a      	ldr	r2, [r7, #32]
 80065a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f908 	bl	80067c0 <SPI_EndRxTxTransaction>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d008      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2220      	movs	r2, #32
 80065ba:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e01d      	b.n	8006604 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065d0:	2300      	movs	r3, #0
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	613b      	str	r3, [r7, #16]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006602:	2300      	movs	r3, #0
  }
}
 8006604:	4618      	mov	r0, r3
 8006606:	3728      	adds	r7, #40	@ 0x28
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800661c:	f7fb fd22 	bl	8002064 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	1a9b      	subs	r3, r3, r2
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	4413      	add	r3, r2
 800662a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800662c:	f7fb fd1a 	bl	8002064 <HAL_GetTick>
 8006630:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006632:	4b39      	ldr	r3, [pc, #228]	@ (8006718 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	015b      	lsls	r3, r3, #5
 8006638:	0d1b      	lsrs	r3, r3, #20
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	fb02 f303 	mul.w	r3, r2, r3
 8006640:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006642:	e054      	b.n	80066ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d050      	beq.n	80066ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800664c:	f7fb fd0a 	bl	8002064 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	429a      	cmp	r2, r3
 800665a:	d902      	bls.n	8006662 <SPI_WaitFlagStateUntilTimeout+0x56>
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d13d      	bne.n	80066de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800667a:	d111      	bne.n	80066a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006684:	d004      	beq.n	8006690 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800668e:	d107      	bne.n	80066a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800669e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066a8:	d10f      	bne.n	80066ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e017      	b.n	800670e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4013      	ands	r3, r2
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	bf0c      	ite	eq
 80066fe:	2301      	moveq	r3, #1
 8006700:	2300      	movne	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	461a      	mov	r2, r3
 8006706:	79fb      	ldrb	r3, [r7, #7]
 8006708:	429a      	cmp	r2, r3
 800670a:	d19b      	bne.n	8006644 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3720      	adds	r7, #32
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000000 	.word	0x20000000

0800671c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af02      	add	r7, sp, #8
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006730:	d111      	bne.n	8006756 <SPI_EndRxTransaction+0x3a>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800673a:	d004      	beq.n	8006746 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006744:	d107      	bne.n	8006756 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006754:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800675e:	d117      	bne.n	8006790 <SPI_EndRxTransaction+0x74>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006768:	d112      	bne.n	8006790 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2200      	movs	r2, #0
 8006772:	2101      	movs	r1, #1
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff ff49 	bl	800660c <SPI_WaitFlagStateUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01a      	beq.n	80067b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006784:	f043 0220 	orr.w	r2, r3, #32
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e013      	b.n	80067b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2200      	movs	r2, #0
 8006798:	2180      	movs	r1, #128	@ 0x80
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f7ff ff36 	bl	800660c <SPI_WaitFlagStateUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067aa:	f043 0220 	orr.w	r2, r3, #32
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e000      	b.n	80067b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2201      	movs	r2, #1
 80067d4:	2102      	movs	r1, #2
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff ff18 	bl	800660c <SPI_WaitFlagStateUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e013      	b.n	800681a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2200      	movs	r2, #0
 80067fa:	2180      	movs	r1, #128	@ 0x80
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff ff05 	bl	800660c <SPI_WaitFlagStateUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800680c:	f043 0220 	orr.w	r2, r3, #32
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e000      	b.n	800681a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e042      	b.n	80068ba <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7fb fae9 	bl	8001e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2224      	movs	r2, #36	@ 0x24
 8006852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006864:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fd0a 	bl	8007280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691a      	ldr	r2, [r3, #16]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800687a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800688a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800689a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	4613      	mov	r3, r2
 80068ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d121      	bne.n	8006920 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <HAL_UART_Transmit_IT+0x26>
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e01a      	b.n	8006922 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	88fa      	ldrh	r2, [r7, #6]
 80068f6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2221      	movs	r2, #33	@ 0x21
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800691a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e000      	b.n	8006922 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006920:	2302      	movs	r3, #2
  }
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr

0800692c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b20      	cmp	r3, #32
 8006944:	d112      	bne.n	800696c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <HAL_UART_Receive_IT+0x26>
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e00b      	b.n	800696e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	461a      	mov	r2, r3
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 fab7 	bl	8006ed6 <UART_Start_Receive_IT>
 8006968:	4603      	mov	r3, r0
 800696a:	e000      	b.n	800696e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800696c:	2302      	movs	r3, #2
  }
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b0ba      	sub	sp, #232	@ 0xe8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800699e:	2300      	movs	r3, #0
 80069a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80069b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10f      	bne.n	80069de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <HAL_UART_IRQHandler+0x66>
 80069ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fb93 	bl	8007102 <UART_Receive_IT>
      return;
 80069dc:	e25b      	b.n	8006e96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80de 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x22c>
 80069e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 80d1 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <HAL_UART_IRQHandler+0xae>
 8006a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1e:	f043 0201 	orr.w	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <HAL_UART_IRQHandler+0xd2>
 8006a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a42:	f043 0202 	orr.w	r2, r3, #2
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <HAL_UART_IRQHandler+0xf6>
 8006a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a66:	f043 0204 	orr.w	r2, r3, #4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d011      	beq.n	8006a9e <HAL_UART_IRQHandler+0x126>
 8006a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d105      	bne.n	8006a92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a96:	f043 0208 	orr.w	r2, r3, #8
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 81f2 	beq.w	8006e8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x14e>
 8006ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fb1e 	bl	8007102 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <HAL_UART_IRQHandler+0x17a>
 8006aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d04f      	beq.n	8006b92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fa28 	bl	8006f48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d041      	beq.n	8006b8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3314      	adds	r3, #20
 8006b2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1d9      	bne.n	8006b06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d013      	beq.n	8006b82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5e:	4a7e      	ldr	r2, [pc, #504]	@ (8006d58 <HAL_UART_IRQHandler+0x3e0>)
 8006b60:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fb fbf2 	bl	8002350 <HAL_DMA_Abort_IT>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b80:	e00e      	b.n	8006ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f993 	bl	8006eae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b88:	e00a      	b.n	8006ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f98f 	bl	8006eae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b90:	e006      	b.n	8006ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f98b 	bl	8006eae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006b9e:	e175      	b.n	8006e8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba0:	bf00      	nop
    return;
 8006ba2:	e173      	b.n	8006e8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	f040 814f 	bne.w	8006e4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb2:	f003 0310 	and.w	r3, r3, #16
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 8148 	beq.w	8006e4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 8141 	beq.w	8006e4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 80b6 	beq.w	8006d5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 8145 	beq.w	8006e90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	f080 813e 	bcs.w	8006e90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	f000 8088 	beq.w	8006d38 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	330c      	adds	r3, #12
 8006c50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006c54:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1d9      	bne.n	8006c28 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3314      	adds	r3, #20
 8006c7a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c86:	f023 0301 	bic.w	r3, r3, #1
 8006c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3314      	adds	r3, #20
 8006c94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c98:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ca0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006caa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e1      	bne.n	8006c74 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3314      	adds	r3, #20
 8006cb6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3314      	adds	r3, #20
 8006cd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006cd4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006cd6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cda:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ce2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e3      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	330c      	adds	r3, #12
 8006cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d08:	f023 0310 	bic.w	r3, r3, #16
 8006d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	330c      	adds	r3, #12
 8006d16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006d1a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d1c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e3      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fb fad1 	bl	80022da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f8b6 	bl	8006ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d54:	e09c      	b.n	8006e90 <HAL_UART_IRQHandler+0x518>
 8006d56:	bf00      	nop
 8006d58:	0800700d 	.word	0x0800700d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 808e 	beq.w	8006e94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8089 	beq.w	8006e94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	330c      	adds	r3, #12
 8006d88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	330c      	adds	r3, #12
 8006da2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006da6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006da8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e3      	bne.n	8006d82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3314      	adds	r3, #20
 8006dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	f023 0301 	bic.w	r3, r3, #1
 8006dd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3314      	adds	r3, #20
 8006dda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006dde:	633a      	str	r2, [r7, #48]	@ 0x30
 8006de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e3      	bne.n	8006dba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	330c      	adds	r3, #12
 8006e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0310 	bic.w	r3, r3, #16
 8006e16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	330c      	adds	r3, #12
 8006e20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006e24:	61fa      	str	r2, [r7, #28]
 8006e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	69b9      	ldr	r1, [r7, #24]
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	617b      	str	r3, [r7, #20]
   return(result);
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e3      	bne.n	8006e00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f83b 	bl	8006ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e4a:	e023      	b.n	8006e94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d009      	beq.n	8006e6c <HAL_UART_IRQHandler+0x4f4>
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f8e5 	bl	8007034 <UART_Transmit_IT>
    return;
 8006e6a:	e014      	b.n	8006e96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00e      	beq.n	8006e96 <HAL_UART_IRQHandler+0x51e>
 8006e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d008      	beq.n	8006e96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f924 	bl	80070d2 <UART_EndTransmit_IT>
    return;
 8006e8a:	e004      	b.n	8006e96 <HAL_UART_IRQHandler+0x51e>
    return;
 8006e8c:	bf00      	nop
 8006e8e:	e002      	b.n	8006e96 <HAL_UART_IRQHandler+0x51e>
      return;
 8006e90:	bf00      	nop
 8006e92:	e000      	b.n	8006e96 <HAL_UART_IRQHandler+0x51e>
      return;
 8006e94:	bf00      	nop
  }
}
 8006e96:	37e8      	adds	r7, #232	@ 0xe8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr

08006eae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr

08006ed6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	88fa      	ldrh	r2, [r7, #6]
 8006eee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2222      	movs	r2, #34	@ 0x22
 8006f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0220 	orr.w	r2, r2, #32
 8006f3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bc80      	pop	{r7}
 8006f46:	4770      	bx	lr

08006f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b095      	sub	sp, #84	@ 0x54
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	330c      	adds	r3, #12
 8006f56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	330c      	adds	r3, #12
 8006f6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f70:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e5      	bne.n	8006f50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3314      	adds	r3, #20
 8006f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3314      	adds	r3, #20
 8006fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e5      	bne.n	8006f84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d119      	bne.n	8006ff4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f023 0310 	bic.w	r3, r3, #16
 8006fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	330c      	adds	r3, #12
 8006fde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fe0:	61ba      	str	r2, [r7, #24]
 8006fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6979      	ldr	r1, [r7, #20]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	613b      	str	r3, [r7, #16]
   return(result);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e5      	bne.n	8006fc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007002:	bf00      	nop
 8007004:	3754      	adds	r7, #84	@ 0x54
 8007006:	46bd      	mov	sp, r7
 8007008:	bc80      	pop	{r7}
 800700a:	4770      	bx	lr

0800700c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007018:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7ff ff41 	bl	8006eae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b21      	cmp	r3, #33	@ 0x21
 8007046:	d13e      	bne.n	80070c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007050:	d114      	bne.n	800707c <UART_Transmit_IT+0x48>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d110      	bne.n	800707c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	461a      	mov	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800706e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	1c9a      	adds	r2, r3, #2
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	621a      	str	r2, [r3, #32]
 800707a:	e008      	b.n	800708e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	1c59      	adds	r1, r3, #1
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6211      	str	r1, [r2, #32]
 8007086:	781a      	ldrb	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29b      	uxth	r3, r3
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4619      	mov	r1, r3
 800709c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10f      	bne.n	80070c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e000      	b.n	80070c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070c6:	2302      	movs	r3, #2
  }
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr

080070d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff fed2 	bl	8006e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b08c      	sub	sp, #48	@ 0x30
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b22      	cmp	r3, #34	@ 0x22
 8007114:	f040 80ae 	bne.w	8007274 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007120:	d117      	bne.n	8007152 <UART_Receive_IT+0x50>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d113      	bne.n	8007152 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007132:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	b29b      	uxth	r3, r3
 800713c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007140:	b29a      	uxth	r2, r3
 8007142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007144:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714a:	1c9a      	adds	r2, r3, #2
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007150:	e026      	b.n	80071a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007156:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007158:	2300      	movs	r3, #0
 800715a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007164:	d007      	beq.n	8007176 <UART_Receive_IT+0x74>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <UART_Receive_IT+0x82>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	b2da      	uxtb	r2, r3
 800717e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	e008      	b.n	8007196 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007190:	b2da      	uxtb	r2, r3
 8007192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007194:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	4619      	mov	r1, r3
 80071ae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d15d      	bne.n	8007270 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0220 	bic.w	r2, r2, #32
 80071c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	695a      	ldr	r2, [r3, #20]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d135      	bne.n	8007266 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	330c      	adds	r3, #12
 8007206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	613b      	str	r3, [r7, #16]
   return(result);
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f023 0310 	bic.w	r3, r3, #16
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007220:	623a      	str	r2, [r7, #32]
 8007222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	69f9      	ldr	r1, [r7, #28]
 8007226:	6a3a      	ldr	r2, [r7, #32]
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	61bb      	str	r3, [r7, #24]
   return(result);
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e5      	bne.n	8007200 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0310 	and.w	r3, r3, #16
 800723e:	2b10      	cmp	r3, #16
 8007240:	d10a      	bne.n	8007258 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7ff fe2e 	bl	8006ec0 <HAL_UARTEx_RxEventCallback>
 8007264:	e002      	b.n	800726c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fa f978 	bl	800155c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	e002      	b.n	8007276 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	e000      	b.n	8007276 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007274:	2302      	movs	r3, #2
  }
}
 8007276:	4618      	mov	r0, r3
 8007278:	3730      	adds	r7, #48	@ 0x30
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80072ba:	f023 030c 	bic.w	r3, r3, #12
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	430b      	orrs	r3, r1
 80072c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699a      	ldr	r2, [r3, #24]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a2c      	ldr	r2, [pc, #176]	@ (8007394 <UART_SetConfig+0x114>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d103      	bne.n	80072f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80072e8:	f7fe fcd4 	bl	8005c94 <HAL_RCC_GetPCLK2Freq>
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	e002      	b.n	80072f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80072f0:	f7fe fcbc 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 80072f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009a      	lsls	r2, r3, #2
 8007300:	441a      	add	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	fbb2 f3f3 	udiv	r3, r2, r3
 800730c:	4a22      	ldr	r2, [pc, #136]	@ (8007398 <UART_SetConfig+0x118>)
 800730e:	fba2 2303 	umull	r2, r3, r2, r3
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	0119      	lsls	r1, r3, #4
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	4613      	mov	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	009a      	lsls	r2, r3, #2
 8007320:	441a      	add	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	fbb2 f2f3 	udiv	r2, r2, r3
 800732c:	4b1a      	ldr	r3, [pc, #104]	@ (8007398 <UART_SetConfig+0x118>)
 800732e:	fba3 0302 	umull	r0, r3, r3, r2
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	2064      	movs	r0, #100	@ 0x64
 8007336:	fb00 f303 	mul.w	r3, r0, r3
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	011b      	lsls	r3, r3, #4
 800733e:	3332      	adds	r3, #50	@ 0x32
 8007340:	4a15      	ldr	r2, [pc, #84]	@ (8007398 <UART_SetConfig+0x118>)
 8007342:	fba2 2303 	umull	r2, r3, r2, r3
 8007346:	095b      	lsrs	r3, r3, #5
 8007348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800734c:	4419      	add	r1, r3
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	009a      	lsls	r2, r3, #2
 8007358:	441a      	add	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	fbb2 f2f3 	udiv	r2, r2, r3
 8007364:	4b0c      	ldr	r3, [pc, #48]	@ (8007398 <UART_SetConfig+0x118>)
 8007366:	fba3 0302 	umull	r0, r3, r3, r2
 800736a:	095b      	lsrs	r3, r3, #5
 800736c:	2064      	movs	r0, #100	@ 0x64
 800736e:	fb00 f303 	mul.w	r3, r0, r3
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	011b      	lsls	r3, r3, #4
 8007376:	3332      	adds	r3, #50	@ 0x32
 8007378:	4a07      	ldr	r2, [pc, #28]	@ (8007398 <UART_SetConfig+0x118>)
 800737a:	fba2 2303 	umull	r2, r3, r2, r3
 800737e:	095b      	lsrs	r3, r3, #5
 8007380:	f003 020f 	and.w	r2, r3, #15
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	440a      	add	r2, r1
 800738a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	40013800 	.word	0x40013800
 8007398:	51eb851f 	.word	0x51eb851f

0800739c <memset>:
 800739c:	4603      	mov	r3, r0
 800739e:	4402      	add	r2, r0
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d100      	bne.n	80073a6 <memset+0xa>
 80073a4:	4770      	bx	lr
 80073a6:	f803 1b01 	strb.w	r1, [r3], #1
 80073aa:	e7f9      	b.n	80073a0 <memset+0x4>

080073ac <__libc_init_array>:
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	2600      	movs	r6, #0
 80073b0:	4d0c      	ldr	r5, [pc, #48]	@ (80073e4 <__libc_init_array+0x38>)
 80073b2:	4c0d      	ldr	r4, [pc, #52]	@ (80073e8 <__libc_init_array+0x3c>)
 80073b4:	1b64      	subs	r4, r4, r5
 80073b6:	10a4      	asrs	r4, r4, #2
 80073b8:	42a6      	cmp	r6, r4
 80073ba:	d109      	bne.n	80073d0 <__libc_init_array+0x24>
 80073bc:	f000 f81a 	bl	80073f4 <_init>
 80073c0:	2600      	movs	r6, #0
 80073c2:	4d0a      	ldr	r5, [pc, #40]	@ (80073ec <__libc_init_array+0x40>)
 80073c4:	4c0a      	ldr	r4, [pc, #40]	@ (80073f0 <__libc_init_array+0x44>)
 80073c6:	1b64      	subs	r4, r4, r5
 80073c8:	10a4      	asrs	r4, r4, #2
 80073ca:	42a6      	cmp	r6, r4
 80073cc:	d105      	bne.n	80073da <__libc_init_array+0x2e>
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d4:	4798      	blx	r3
 80073d6:	3601      	adds	r6, #1
 80073d8:	e7ee      	b.n	80073b8 <__libc_init_array+0xc>
 80073da:	f855 3b04 	ldr.w	r3, [r5], #4
 80073de:	4798      	blx	r3
 80073e0:	3601      	adds	r6, #1
 80073e2:	e7f2      	b.n	80073ca <__libc_init_array+0x1e>
 80073e4:	08007440 	.word	0x08007440
 80073e8:	08007440 	.word	0x08007440
 80073ec:	08007440 	.word	0x08007440
 80073f0:	08007444 	.word	0x08007444

080073f4 <_init>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr

08007400 <_fini>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	bf00      	nop
 8007404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007406:	bc08      	pop	{r3}
 8007408:	469e      	mov	lr, r3
 800740a:	4770      	bx	lr
