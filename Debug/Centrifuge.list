
Centrifuge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9a8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800cab8  0800cab8  0000dab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf48  0800cf48  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cf48  0800cf48  0000df48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf50  0800cf50  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf50  0800cf50  0000df50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cf54  0800cf54  0000df54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cf58  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b58  200001d8  0800d130  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d30  0800d130  0000ed30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef60  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a0  00000000  00000000  0001d161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b11  00000000  00000000  00020968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192cf  00000000  00000000  00021479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f7d  00000000  00000000  0003a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a8b  00000000  00000000  0004c6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6150  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  000d6194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000db294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800caa0 	.word	0x0800caa0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800caa0 	.word	0x0800caa0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	f7ff fc2f 	bl	80009bc <__aeabi_dcmplt>
 800115e:	b928      	cbnz	r0, 800116c <__aeabi_d2lz+0x1c>
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001168:	f000 b80a 	b.w	8001180 <__aeabi_d2ulz>
 800116c:	4620      	mov	r0, r4
 800116e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001172:	f000 f805 	bl	8001180 <__aeabi_d2ulz>
 8001176:	4240      	negs	r0, r0
 8001178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800117c:	bd38      	pop	{r3, r4, r5, pc}
 800117e:	bf00      	nop

08001180 <__aeabi_d2ulz>:
 8001180:	b5d0      	push	{r4, r6, r7, lr}
 8001182:	2200      	movs	r2, #0
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <__aeabi_d2ulz+0x34>)
 8001186:	4606      	mov	r6, r0
 8001188:	460f      	mov	r7, r1
 800118a:	f7ff f9a5 	bl	80004d8 <__aeabi_dmul>
 800118e:	f7ff fc7b 	bl	8000a88 <__aeabi_d2uiz>
 8001192:	4604      	mov	r4, r0
 8001194:	f7ff f926 	bl	80003e4 <__aeabi_ui2d>
 8001198:	2200      	movs	r2, #0
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <__aeabi_d2ulz+0x38>)
 800119c:	f7ff f99c 	bl	80004d8 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4630      	mov	r0, r6
 80011a6:	4639      	mov	r1, r7
 80011a8:	f7fe ffde 	bl	8000168 <__aeabi_dsub>
 80011ac:	f7ff fc6c 	bl	8000a88 <__aeabi_d2uiz>
 80011b0:	4621      	mov	r1, r4
 80011b2:	bdd0      	pop	{r4, r6, r7, pc}
 80011b4:	3df00000 	.word	0x3df00000
 80011b8:	41f00000 	.word	0x41f00000

080011bc <MCP4725_init>:

    Constructor
*/
/**************************************************************************/
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	6839      	ldr	r1, [r7, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f822 	bl	8001228 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	461c      	mov	r4, r3
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}

080011fa <MCP4725_isConnected>:

    Check the connection
*/
/**************************************************************************/
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	4619      	mov	r1, r3
 800120c:	2364      	movs	r3, #100	@ 0x64
 800120e:	2202      	movs	r2, #2
 8001210:	f003 f8ca 	bl	80043a8 <HAL_I2C_IsDeviceReady>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8001232:	f04f 0100 	mov.w	r1, #0
 8001236:	6838      	ldr	r0, [r7, #0]
 8001238:	f7ff ff38 	bl	80010ac <__aeabi_fcmpeq>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <MCP4725_setReferenceVoltage+0x22>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a0c      	ldr	r2, [pc, #48]	@ (8001278 <MCP4725_setReferenceVoltage+0x50>)
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	e002      	b.n	8001250 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 408b 	mov.w	r0, #1166016512	@ 0x45800000
 800125a:	f7ff fe47 	bl	8000eec <__aeabi_fdiv>
 800125e:	4603      	mov	r3, r0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff55 	bl	8001110 <__aeabi_f2uiz>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	819a      	strh	r2, [r3, #12]
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40533333 	.word	0x40533333

0800127c <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4603      	mov	r3, r0
 800128c:	807b      	strh	r3, [r7, #2]
 800128e:	460b      	mov	r3, r1
 8001290:	707b      	strb	r3, [r7, #1]
 8001292:	4613      	mov	r3, r2
 8001294:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8001296:	783b      	ldrb	r3, [r7, #0]
 8001298:	787a      	ldrb	r2, [r7, #1]
 800129a:	8879      	ldrh	r1, [r7, #2]
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f822 	bl	80012e6 <MCP4725_writeComand>
 80012a2:	4603      	mov	r3, r0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 80012b4:	2101      	movs	r1, #1
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f897 	bl	80013ea <MCP4725_readRegister>
 80012bc:	4603      	mov	r3, r0
 80012be:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 80012c0:	89fb      	ldrh	r3, [r7, #14]
 80012c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d008      	beq.n	80012dc <MCP4725_getEepromBusyFlag+0x30>
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf14      	ite	ne
 80012d4:	2301      	movne	r3, #1
 80012d6:	2300      	moveq	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	e000      	b.n	80012de <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af02      	add	r7, sp, #8
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	4608      	mov	r0, r1
 80012f0:	4611      	mov	r1, r2
 80012f2:	461a      	mov	r2, r3
 80012f4:	4603      	mov	r3, r0
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	460b      	mov	r3, r1
 80012fa:	707b      	strb	r3, [r7, #1]
 80012fc:	4613      	mov	r3, r2
 80012fe:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001300:	787b      	ldrb	r3, [r7, #1]
 8001302:	2b60      	cmp	r3, #96	@ 0x60
 8001304:	d029      	beq.n	800135a <MCP4725_writeComand+0x74>
 8001306:	2b60      	cmp	r3, #96	@ 0x60
 8001308:	dc4c      	bgt.n	80013a4 <MCP4725_writeComand+0xbe>
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <MCP4725_writeComand+0x2e>
 800130e:	2b40      	cmp	r3, #64	@ 0x40
 8001310:	d023      	beq.n	800135a <MCP4725_writeComand+0x74>
 8001312:	e047      	b.n	80013a4 <MCP4725_writeComand+0xbe>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18

      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8001314:	f997 3000 	ldrsb.w	r3, [r7]
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	b25a      	sxtb	r2, r3
 800131c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001320:	4313      	orrs	r3, r2
 8001322:	b25a      	sxtb	r2, r3
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b29b      	uxth	r3, r3
 800132a:	b25b      	sxtb	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b25b      	sxtb	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	737b      	strb	r3, [r7, #13]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	791b      	ldrb	r3, [r3, #4]
 8001342:	4619      	mov	r1, r3
 8001344:	f107 020c 	add.w	r2, r7, #12
 8001348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2302      	movs	r3, #2
 8001350:	f002 fcc0 	bl	8003cd4 <HAL_I2C_Master_Transmit>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]

      break;
 8001358:	e024      	b.n	80013a4 <MCP4725_writeComand+0xbe>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode  | (powerType << 1);
 8001360:	f997 3000 	ldrsb.w	r3, [r7]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	b25a      	sxtb	r2, r3
 8001368:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800136c:	4313      	orrs	r3, r2
 800136e:	b25b      	sxtb	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b29b      	uxth	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	73bb      	strb	r3, [r7, #14]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	791b      	ldrb	r3, [r3, #4]
 800138c:	4619      	mov	r1, r3
 800138e:	f107 020c 	add.w	r2, r7, #12
 8001392:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2303      	movs	r3, #3
 800139a:	f002 fc9b 	bl	8003cd4 <HAL_I2C_Master_Transmit>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]

			break;
 80013a2:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MCP4725_writeComand+0xc8>
 80013aa:	2300      	movs	r3, #0
 80013ac:	e019      	b.n	80013e2 <MCP4725_writeComand+0xfc>

  if (mode == MCP4725_EEPROM_MODE)
 80013ae:	787b      	ldrb	r3, [r7, #1]
 80013b0:	2b60      	cmp	r3, #96	@ 0x60
 80013b2:	d115      	bne.n	80013e0 <MCP4725_writeComand+0xfa>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff79 	bl	80012ac <MCP4725_getEepromBusyFlag>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <MCP4725_writeComand+0xde>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e00e      	b.n	80013e2 <MCP4725_writeComand+0xfc>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 80013c4:	2019      	movs	r0, #25
 80013c6:	f001 ff6d 	bl	80032a4 <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff6e 	bl	80012ac <MCP4725_getEepromBusyFlag>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d101      	bne.n	80013da <MCP4725_writeComand+0xf4>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e003      	b.n	80013e2 <MCP4725_writeComand+0xfc>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 80013da:	2019      	movs	r0, #25
 80013dc:	f001 ff62 	bl	80032a4 <HAL_Delay>
  }

  return 1;                                                         //success!!!
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 80013ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]
 80013f8:	466b      	mov	r3, sp
 80013fa:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8001400:	2300      	movs	r3, #0
 8001402:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8001404:	78f9      	ldrb	r1, [r7, #3]
 8001406:	460b      	mov	r3, r1
 8001408:	3b01      	subs	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	b2cb      	uxtb	r3, r1
 800140e:	2200      	movs	r2, #0
 8001410:	4698      	mov	r8, r3
 8001412:	4691      	mov	r9, r2
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001420:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001424:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001428:	b2cb      	uxtb	r3, r1
 800142a:	2200      	movs	r2, #0
 800142c:	461c      	mov	r4, r3
 800142e:	4615      	mov	r5, r2
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	00eb      	lsls	r3, r5, #3
 800143a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800143e:	00e2      	lsls	r2, r4, #3
 8001440:	460b      	mov	r3, r1
 8001442:	3307      	adds	r3, #7
 8001444:	08db      	lsrs	r3, r3, #3
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	ebad 0d03 	sub.w	sp, sp, r3
 800144c:	ab02      	add	r3, sp, #8
 800144e:	3300      	adds	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;

	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	4619      	mov	r1, r3
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	b29b      	uxth	r3, r3
 8001460:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001464:	9200      	str	r2, [sp, #0]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	f002 fd32 	bl	8003ed0 <HAL_I2C_Master_Receive>
 800146c:	4603      	mov	r3, r0
 800146e:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <MCP4725_readRegister+0x92>
 8001476:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800147a:	e020      	b.n	80014be <MCP4725_readRegister+0xd4>


  /* read data from buffer */
  switch (dataType)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d00a      	beq.n	8001498 <MCP4725_readRegister+0xae>
 8001482:	2b05      	cmp	r3, #5
 8001484:	dc1a      	bgt.n	80014bc <MCP4725_readRegister+0xd2>
 8001486:	2b01      	cmp	r3, #1
 8001488:	d002      	beq.n	8001490 <MCP4725_readRegister+0xa6>
 800148a:	2b03      	cmp	r3, #3
 800148c:	d004      	beq.n	8001498 <MCP4725_readRegister+0xae>
 800148e:	e015      	b.n	80014bc <MCP4725_readRegister+0xd2>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	82fb      	strh	r3, [r7, #22]

      break;
 8001496:	e011      	b.n	80014bc <MCP4725_readRegister+0xd2>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 8001498:	8abb      	ldrh	r3, [r7, #20]
 800149a:	3b02      	subs	r3, #2
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 80014a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	8abb      	ldrh	r3, [r7, #20]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	68f9      	ldr	r1, [r7, #12]
 80014b0:	5ccb      	ldrb	r3, [r1, r3]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	82fb      	strh	r3, [r7, #22]
      break;
 80014ba:	bf00      	nop
  }

  return ret_val;
 80014bc:	8afb      	ldrh	r3, [r7, #22]
 80014be:	46b5      	mov	sp, r6
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	371c      	adds	r7, #28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080014cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	4b56      	ldr	r3, [pc, #344]	@ (800163c <MX_GPIO_Init+0x170>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a55      	ldr	r2, [pc, #340]	@ (800163c <MX_GPIO_Init+0x170>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b53      	ldr	r3, [pc, #332]	@ (800163c <MX_GPIO_Init+0x170>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f8:	4b50      	ldr	r3, [pc, #320]	@ (800163c <MX_GPIO_Init+0x170>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a4f      	ldr	r2, [pc, #316]	@ (800163c <MX_GPIO_Init+0x170>)
 80014fe:	f043 0320 	orr.w	r3, r3, #32
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b4d      	ldr	r3, [pc, #308]	@ (800163c <MX_GPIO_Init+0x170>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b4a      	ldr	r3, [pc, #296]	@ (800163c <MX_GPIO_Init+0x170>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a49      	ldr	r2, [pc, #292]	@ (800163c <MX_GPIO_Init+0x170>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b47      	ldr	r3, [pc, #284]	@ (800163c <MX_GPIO_Init+0x170>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4b44      	ldr	r3, [pc, #272]	@ (800163c <MX_GPIO_Init+0x170>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a43      	ldr	r2, [pc, #268]	@ (800163c <MX_GPIO_Init+0x170>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b41      	ldr	r3, [pc, #260]	@ (800163c <MX_GPIO_Init+0x170>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001546:	483e      	ldr	r0, [pc, #248]	@ (8001640 <MX_GPIO_Init+0x174>)
 8001548:	f002 fa22 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2110      	movs	r1, #16
 8001550:	483c      	ldr	r0, [pc, #240]	@ (8001644 <MX_GPIO_Init+0x178>)
 8001552:	f002 fa1d 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CE_GPIO_Port, SPI1_CE_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2101      	movs	r1, #1
 800155a:	483b      	ldr	r0, [pc, #236]	@ (8001648 <MX_GPIO_Init+0x17c>)
 800155c:	f002 fa18 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001566:	4837      	ldr	r0, [pc, #220]	@ (8001644 <MX_GPIO_Init+0x178>)
 8001568:	f002 fa12 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800156c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2302      	movs	r3, #2
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	4619      	mov	r1, r3
 8001584:	482e      	ldr	r0, [pc, #184]	@ (8001640 <MX_GPIO_Init+0x174>)
 8001586:	f002 f87f 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin;
 800158a:	2310      	movs	r3, #16
 800158c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CSN_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	4619      	mov	r1, r3
 80015a0:	4828      	ldr	r0, [pc, #160]	@ (8001644 <MX_GPIO_Init+0x178>)
 80015a2:	f002 f871 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CE_Pin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin;
 80015a6:	2301      	movs	r3, #1
 80015a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CE_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	4619      	mov	r1, r3
 80015bc:	4822      	ldr	r0, [pc, #136]	@ (8001648 <MX_GPIO_Init+0x17c>)
 80015be:	f002 f863 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80015c2:	2302      	movs	r3, #2
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c6:	4b21      	ldr	r3, [pc, #132]	@ (800164c <MX_GPIO_Init+0x180>)
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4619      	mov	r1, r3
 80015d4:	481c      	ldr	r0, [pc, #112]	@ (8001648 <MX_GPIO_Init+0x17c>)
 80015d6:	f002 f857 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : Speed_Pin */
  GPIO_InitStruct.Pin = Speed_Pin;
 80015da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <MX_GPIO_Init+0x184>)
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Speed_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	4815      	ldr	r0, [pc, #84]	@ (8001644 <MX_GPIO_Init+0x178>)
 80015f0:	f002 f84a 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015f4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2302      	movs	r3, #2
 8001604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	4619      	mov	r1, r3
 800160c:	480d      	ldr	r0, [pc, #52]	@ (8001644 <MX_GPIO_Init+0x178>)
 800160e:	f002 f83b 	bl	8003688 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2007      	movs	r0, #7
 8001618:	f001 ff3f 	bl	800349a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800161c:	2007      	movs	r0, #7
 800161e:	f001 ff58 	bl	80034d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2017      	movs	r0, #23
 8001628:	f001 ff37 	bl	800349a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800162c:	2017      	movs	r0, #23
 800162e:	f001 ff50 	bl	80034d2 <HAL_NVIC_EnableIRQ>

}
 8001632:	bf00      	nop
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	40011000 	.word	0x40011000
 8001644:	40010800 	.word	0x40010800
 8001648:	40010c00 	.word	0x40010c00
 800164c:	10210000 	.word	0x10210000
 8001650:	10110000 	.word	0x10110000

08001654 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800165a:	4a13      	ldr	r2, [pc, #76]	@ (80016a8 <MX_I2C1_Init+0x54>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001660:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <MX_I2C1_Init+0x58>)
 8001662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001672:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001684:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	@ (80016a4 <MX_I2C1_Init+0x50>)
 8001692:	f002 f9c7 	bl	8003a24 <HAL_I2C_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800169c:	f000 fff8 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200001f4 	.word	0x200001f4
 80016a8:	40005400 	.word	0x40005400
 80016ac:	000186a0 	.word	0x000186a0

080016b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a25      	ldr	r2, [pc, #148]	@ (8001760 <HAL_I2C_MspInit+0xb0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d142      	bne.n	8001756 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <HAL_I2C_MspInit+0xb4>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a23      	ldr	r2, [pc, #140]	@ (8001764 <HAL_I2C_MspInit+0xb4>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <HAL_I2C_MspInit+0xb4>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = DAC_SCL_Pin|DAC_SDA_Pin;
 80016e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ee:	2312      	movs	r3, #18
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	481a      	ldr	r0, [pc, #104]	@ (8001768 <HAL_I2C_MspInit+0xb8>)
 80016fe:	f001 ffc3 	bl	8003688 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <HAL_I2C_MspInit+0xbc>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
 8001718:	4a14      	ldr	r2, [pc, #80]	@ (800176c <HAL_I2C_MspInit+0xbc>)
 800171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_I2C_MspInit+0xb4>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a10      	ldr	r2, [pc, #64]	@ (8001764 <HAL_I2C_MspInit+0xb4>)
 8001724:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <HAL_I2C_MspInit+0xb4>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	201f      	movs	r0, #31
 800173c:	f001 fead 	bl	800349a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001740:	201f      	movs	r0, #31
 8001742:	f001 fec6 	bl	80034d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2020      	movs	r0, #32
 800174c:	f001 fea5 	bl	800349a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001750:	2020      	movs	r0, #32
 8001752:	f001 febe 	bl	80034d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	@ 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40005400 	.word	0x40005400
 8001764:	40021000 	.word	0x40021000
 8001768:	40010c00 	.word	0x40010c00
 800176c:	40010000 	.word	0x40010000

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001774:	b0c9      	sub	sp, #292	@ 0x124
 8001776:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001778:	f001 fd32 	bl	80031e0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177c:	f000 fc0e 	bl	8001f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001780:	f7ff fea4 	bl	80014cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001784:	f001 fc0e 	bl	8002fa4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001788:	f001 fc36 	bl	8002ff8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800178c:	f7ff ff62 	bl	8001654 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001790:	f001 fa2a 	bl	8002be8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	// begins listening for a byte. When byte is recieved, it calls the callback function
	HAL_UART_Receive_IT(&huart2, rx_buff, 1);
 8001794:	2201      	movs	r2, #1
 8001796:	49a3      	ldr	r1, [pc, #652]	@ (8001a24 <main+0x2b4>)
 8001798:	48a3      	ldr	r0, [pc, #652]	@ (8001a28 <main+0x2b8>)
 800179a:	f006 f9dd 	bl	8007b58 <HAL_UART_Receive_IT>


	// initialize radio
	nrf24l01p_rx_init(2500, _250kbps);
 800179e:	2102      	movs	r1, #2
 80017a0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80017a4:	f000 fffe 	bl	80027a4 <nrf24l01p_rx_init>

	// Second, initialize the MCP4725 object:
	myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 3.30);
 80017a8:	4ca0      	ldr	r4, [pc, #640]	@ (8001a2c <main+0x2bc>)
 80017aa:	f107 0008 	add.w	r0, r7, #8
 80017ae:	4ba0      	ldr	r3, [pc, #640]	@ (8001a30 <main+0x2c0>)
 80017b0:	2260      	movs	r2, #96	@ 0x60
 80017b2:	49a0      	ldr	r1, [pc, #640]	@ (8001a34 <main+0x2c4>)
 80017b4:	f7ff fd02 	bl	80011bc <MCP4725_init>
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Check the connection:
	if(MCP4725_isConnected(&myMCP4725)){
 80017c2:	489a      	ldr	r0, [pc, #616]	@ (8001a2c <main+0x2bc>)
 80017c4:	f7ff fd19 	bl	80011fa <MCP4725_isConnected>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00d      	beq.n	80017ea <main+0x7a>

		/* Print that the DAC is connected */
		uint8_t success_arr[] = {'D','A','C',' ','g','o','o','d','\n'};
 80017ce:	4a9a      	ldr	r2, [pc, #616]	@ (8001a38 <main+0x2c8>)
 80017d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80017d6:	c303      	stmia	r3!, {r0, r1}
 80017d8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, success_arr, 9);
 80017da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017de:	2209      	movs	r2, #9
 80017e0:	4619      	mov	r1, r3
 80017e2:	4891      	ldr	r0, [pc, #580]	@ (8001a28 <main+0x2b8>)
 80017e4:	f006 f983 	bl	8007aee <HAL_UART_Transmit_IT>
 80017e8:	e009      	b.n	80017fe <main+0x8e>
	}
	else{

		/* Print that the DAC is NOT connected */
		uint8_t fail_arr[] = {'b','a','d','\n'};
 80017ea:	4b94      	ldr	r3, [pc, #592]	@ (8001a3c <main+0x2cc>)
 80017ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		HAL_UART_Transmit_IT(&huart2, fail_arr, 4);
 80017f0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80017f4:	2204      	movs	r2, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	488b      	ldr	r0, [pc, #556]	@ (8001a28 <main+0x2b8>)
 80017fa:	f006 f978 	bl	8007aee <HAL_UART_Transmit_IT>
	}

	// default centrifuge off
	setValue(0);
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 fd3c 	bl	800227c <setValue>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800180a:	488d      	ldr	r0, [pc, #564]	@ (8001a40 <main+0x2d0>)
 800180c:	f002 f8c0 	bl	8003990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001816:	488a      	ldr	r0, [pc, #552]	@ (8001a40 <main+0x2d0>)
 8001818:	f002 f8ba 	bl	8003990 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */


		// if imu data is coming in
		if(dataNew){
 800181c:	4b89      	ldr	r3, [pc, #548]	@ (8001a44 <main+0x2d4>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <main+0xba>
			dataNew = false;
 8001824:	4b87      	ldr	r3, [pc, #540]	@ (8001a44 <main+0x2d4>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
			//			// Send over UART using interrupt
			//			HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, len);
		}

		// evaluation mode (parsing the profile)
		if (state == 'e') {
 800182a:	4b87      	ldr	r3, [pc, #540]	@ (8001a48 <main+0x2d8>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b65      	cmp	r3, #101	@ 0x65
 8001830:	f040 80bb 	bne.w	80019aa <main+0x23a>
			int i = upload_pointer; // where the instruction starts in our rx_buffer
 8001834:	4b85      	ldr	r3, [pc, #532]	@ (8001a4c <main+0x2dc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
			char parseChar = *(rx_buff + i); // grab the first character our rx_buffer
 800183c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001840:	4a78      	ldr	r2, [pc, #480]	@ (8001a24 <main+0x2b4>)
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
			char numberBuffer[40] = {0}; // create a number buffer to atoi into our ms and g arrays
 800184a:	f107 0318 	add.w	r3, r7, #24
 800184e:	2228      	movs	r2, #40	@ 0x28
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f008 fbd5 	bl	800a002 <memset>
			int numberBufferArm = 0;     // keep track of the current index
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			char evaluateState = 'm'; //m or g
 800185e:	236d      	movs	r3, #109	@ 0x6d
 8001860:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			profile_arm = 0; // current step of the profile
 8001864:	4b7a      	ldr	r3, [pc, #488]	@ (8001a50 <main+0x2e0>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

			// our profile data is sandwiched between a start u and a stop u
			while(parseChar != 'u'){
 800186a:	e095      	b.n	8001998 <main+0x228>
				// parse the first column of the csv (ms)
				if(evaluateState == 'm'){
 800186c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8001870:	2b6d      	cmp	r3, #109	@ 0x6d
 8001872:	d133      	bne.n	80018dc <main+0x16c>
					// if its a number, store it into numberBuffer
					if((parseChar <= '9' && parseChar >= '0')){
 8001874:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8001878:	2b39      	cmp	r3, #57	@ 0x39
 800187a:	d811      	bhi.n	80018a0 <main+0x130>
 800187c:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8001880:	2b2f      	cmp	r3, #47	@ 0x2f
 8001882:	d90d      	bls.n	80018a0 <main+0x130>
						numberBuffer[numberBufferArm++] = parseChar;
 8001884:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800188e:	33f0      	adds	r3, #240	@ 0xf0
 8001890:	f107 0208 	add.w	r2, r7, #8
 8001894:	4413      	add	r3, r2
 8001896:	f897 20f3 	ldrb.w	r2, [r7, #243]	@ 0xf3
 800189a:	f803 2ce0 	strb.w	r2, [r3, #-224]
 800189e:	e060      	b.n	8001962 <main+0x1f2>

						// if its a comma, flush it all to the ms array and switch to evaluating g
					}else if(parseChar == ','){
 80018a0:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 80018a4:	2b2c      	cmp	r3, #44	@ 0x2c
 80018a6:	d15c      	bne.n	8001962 <main+0x1f2>
						profile_ms[profile_arm] = atoi(numberBuffer);
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	4618      	mov	r0, r3
 80018ae:	f006 ff84 	bl	80087ba <atoi>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b66      	ldr	r3, [pc, #408]	@ (8001a50 <main+0x2e0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4611      	mov	r1, r2
 80018ba:	4a66      	ldr	r2, [pc, #408]	@ (8001a54 <main+0x2e4>)
 80018bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						memset(numberBuffer, 0, 40);
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	2228      	movs	r2, #40	@ 0x28
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f008 fb9a 	bl	800a002 <memset>
						numberBufferArm = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
						evaluateState = 'g';
 80018d4:	2367      	movs	r3, #103	@ 0x67
 80018d6:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 80018da:	e042      	b.n	8001962 <main+0x1f2>
					}

					// parse the second column of the csv (g)
				}else if(evaluateState == 'g'){
 80018dc:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80018e0:	2b67      	cmp	r3, #103	@ 0x67
 80018e2:	d13e      	bne.n	8001962 <main+0x1f2>

					// if its a number, store it into numberBuffer
					if((parseChar <= '9' && parseChar >= '0') || parseChar == '.'){
 80018e4:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 80018e8:	2b39      	cmp	r3, #57	@ 0x39
 80018ea:	d803      	bhi.n	80018f4 <main+0x184>
 80018ec:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 80018f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80018f2:	d803      	bhi.n	80018fc <main+0x18c>
 80018f4:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 80018f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80018fa:	d10d      	bne.n	8001918 <main+0x1a8>
						numberBuffer[numberBufferArm++] = parseChar;
 80018fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001906:	33f0      	adds	r3, #240	@ 0xf0
 8001908:	f107 0208 	add.w	r2, r7, #8
 800190c:	4413      	add	r3, r2
 800190e:	f897 20f3 	ldrb.w	r2, [r7, #243]	@ 0xf3
 8001912:	f803 2ce0 	strb.w	r2, [r3, #-224]
 8001916:	e024      	b.n	8001962 <main+0x1f2>

						// upon reaching a new line, flush everything in numberBuffer to g array and go back to m
					}else if(parseChar == '\n'){
 8001918:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 800191c:	2b0a      	cmp	r3, #10
 800191e:	d120      	bne.n	8001962 <main+0x1f2>
						profile_g[profile_arm++] = atof(numberBuffer);
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	4618      	mov	r0, r3
 8001926:	f006 ff45 	bl	80087b4 <atof>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4948      	ldr	r1, [pc, #288]	@ (8001a50 <main+0x2e0>)
 8001930:	680c      	ldr	r4, [r1, #0]
 8001932:	1c61      	adds	r1, r4, #1
 8001934:	4846      	ldr	r0, [pc, #280]	@ (8001a50 <main+0x2e0>)
 8001936:	6001      	str	r1, [r0, #0]
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f8c4 	bl	8000ac8 <__aeabi_d2f>
 8001940:	4603      	mov	r3, r0
 8001942:	4a45      	ldr	r2, [pc, #276]	@ (8001a58 <main+0x2e8>)
 8001944:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
						memset(numberBuffer, 0, 40);
 8001948:	f107 0318 	add.w	r3, r7, #24
 800194c:	2228      	movs	r2, #40	@ 0x28
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f008 fb56 	bl	800a002 <memset>
						numberBufferArm = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
						evaluateState = 'm';
 800195c:	236d      	movs	r3, #109	@ 0x6d
 800195e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
					}
				}

				// increment our upload arm and make sure it wraps back to the start to grab the next char
				i++;
 8001962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001966:	3301      	adds	r3, #1
 8001968:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
				i %= RX_BUFF_SIZE;
 800196c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001970:	4a3a      	ldr	r2, [pc, #232]	@ (8001a5c <main+0x2ec>)
 8001972:	fb82 1203 	smull	r1, r2, r2, r3
 8001976:	1151      	asrs	r1, r2, #5
 8001978:	17da      	asrs	r2, r3, #31
 800197a:	1a8a      	subs	r2, r1, r2
 800197c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001980:	fb01 f202 	mul.w	r2, r1, r2
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
				parseChar = *(rx_buff + i);
 800198a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800198e:	4a25      	ldr	r2, [pc, #148]	@ (8001a24 <main+0x2b4>)
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
			while(parseChar != 'u'){
 8001998:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 800199c:	2b75      	cmp	r3, #117	@ 0x75
 800199e:	f47f af65 	bne.w	800186c <main+0xfc>
			}

			// reached stop "u" so switch to ready mode
			state = 'p';
 80019a2:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <main+0x2d8>)
 80019a4:	2270      	movs	r2, #112	@ 0x70
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	e29e      	b.n	8001ee8 <main+0x778>
		}

		// ON state (centrifuge will start spinning)
		else if(state == 'o') {
 80019aa:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <main+0x2d8>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b6f      	cmp	r3, #111	@ 0x6f
 80019b0:	f040 829a 	bne.w	8001ee8 <main+0x778>
			time_elapsed = HAL_GetTick() - time_start;
 80019b4:	f001 fc6c 	bl	8003290 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <main+0x2f0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4a28      	ldr	r2, [pc, #160]	@ (8001a64 <main+0x2f4>)
 80019c2:	6013      	str	r3, [r2, #0]
			int index = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

			// increment the index of our profile if the elapsed time is greater than the desired runtime
			while(index < profile_arm) {
 80019ca:	e00d      	b.n	80019e8 <main+0x278>
				if (profile_ms[index] <= time_elapsed) {
 80019cc:	4a21      	ldr	r2, [pc, #132]	@ (8001a54 <main+0x2e4>)
 80019ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019d6:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <main+0x2f4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d80b      	bhi.n	80019f6 <main+0x286>
					index++;
 80019de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019e2:	3301      	adds	r3, #1
 80019e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			while(index < profile_arm) {
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <main+0x2e0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbeb      	blt.n	80019cc <main+0x25c>
 80019f4:	e000      	b.n	80019f8 <main+0x288>
				}
				else {
					break;
 80019f6:	bf00      	nop
				}
			}

			// we've reached the end of our instructions, so turn everything off and go to idl mode
			if(index == profile_arm){
 80019f8:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <main+0x2e0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d131      	bne.n	8001a68 <main+0x2f8>
				state = 'i';
 8001a04:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <main+0x2d8>)
 8001a06:	2269      	movs	r2, #105	@ 0x69
 8001a08:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a10:	480b      	ldr	r0, [pc, #44]	@ (8001a40 <main+0x2d0>)
 8001a12:	f001 ffbd 	bl	8003990 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 8001a16:	2201      	movs	r2, #1
 8001a18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a1c:	4808      	ldr	r0, [pc, #32]	@ (8001a40 <main+0x2d0>)
 8001a1e:	f001 ffb7 	bl	8003990 <HAL_GPIO_WritePin>
 8001a22:	e261      	b.n	8001ee8 <main+0x778>
 8001a24:	20000248 	.word	0x20000248
 8001a28:	20000b98 	.word	0x20000b98
 8001a2c:	20000ae4 	.word	0x20000ae4
 8001a30:	40533333 	.word	0x40533333
 8001a34:	200001f4 	.word	0x200001f4
 8001a38:	0800cad8 	.word	0x0800cad8
 8001a3c:	0a646162 	.word	0x0a646162
 8001a40:	40010800 	.word	0x40010800
 8001a44:	2000048d 	.word	0x2000048d
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000ae0 	.word	0x20000ae0
 8001a50:	20000adc 	.word	0x20000adc
 8001a54:	2000049c 	.word	0x2000049c
 8001a58:	200007bc 	.word	0x200007bc
 8001a5c:	10624dd3 	.word	0x10624dd3
 8001a60:	20000494 	.word	0x20000494
 8001a64:	20000498 	.word	0x20000498

				// run the current profile instruction step
			}else{
				float prev_desired_g = profile_g[index-1];
 8001a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	4a74      	ldr	r2, [pc, #464]	@ (8001c40 <main+0x4d0>)
 8001a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				float prev_desired_ms = profile_ms[index-1];
 8001a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	4a71      	ldr	r2, [pc, #452]	@ (8001c44 <main+0x4d4>)
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f925 	bl	8000cd4 <__aeabi_ui2f>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				float next_desired_g = profile_g[index];
 8001a90:	4a6b      	ldr	r2, [pc, #428]	@ (8001c40 <main+0x4d0>)
 8001a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				float next_desired_ms = profile_ms[index];
 8001a9e:	4a69      	ldr	r2, [pc, #420]	@ (8001c44 <main+0x4d4>)
 8001aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f913 	bl	8000cd4 <__aeabi_ui2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

				// end case/error detection (next time should never be lower than prev)
				if (next_desired_ms < prev_desired_ms) {
 8001ab4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8001ab8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001abc:	f7ff fb00 	bl	80010c0 <__aeabi_fcmplt>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00e      	beq.n	8001ae4 <main+0x374>
					state = 'i';
 8001ac6:	4b60      	ldr	r3, [pc, #384]	@ (8001c48 <main+0x4d8>)
 8001ac8:	2269      	movs	r2, #105	@ 0x69
 8001aca:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ad2:	485e      	ldr	r0, [pc, #376]	@ (8001c4c <main+0x4dc>)
 8001ad4:	f001 ff5c 	bl	8003990 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ade:	485b      	ldr	r0, [pc, #364]	@ (8001c4c <main+0x4dc>)
 8001ae0:	f001 ff56 	bl	8003990 <HAL_GPIO_WritePin>
				}

				// calculate descent slope for braking on sharp changes
				float slope_gps = (next_desired_g - prev_desired_g) / ((next_desired_ms - prev_desired_ms) / 1000);
 8001ae4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8001ae8:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001aec:	f7ff f840 	bl	8000b70 <__aeabi_fsub>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461c      	mov	r4, r3
 8001af4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8001af8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001afc:	f7ff f838 	bl	8000b70 <__aeabi_fsub>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4953      	ldr	r1, [pc, #332]	@ (8001c50 <main+0x4e0>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f9f1 	bl	8000eec <__aeabi_fdiv>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff f9ec 	bl	8000eec <__aeabi_fdiv>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				float desired_g = ((next_desired_g - prev_desired_g) * (time_elapsed - prev_desired_ms) / (next_desired_ms - prev_desired_ms)) + prev_desired_g;
 8001b1a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8001b1e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001b22:	f7ff f825 	bl	8000b70 <__aeabi_fsub>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461c      	mov	r4, r3
 8001b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c54 <main+0x4e4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f8d0 	bl	8000cd4 <__aeabi_ui2f>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f818 	bl	8000b70 <__aeabi_fsub>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4619      	mov	r1, r3
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff f91d 	bl	8000d84 <__aeabi_fmul>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461c      	mov	r4, r3
 8001b4e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8001b52:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001b56:	f7ff f80b 	bl	8000b70 <__aeabi_fsub>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff f9c4 	bl	8000eec <__aeabi_fdiv>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4619      	mov	r1, r3
 8001b68:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8001b6c:	f7ff f802 	bl	8000b74 <__addsf3>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				float descent_no_brake = -0.368*desired_g + 0.311;
 8001b76:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001b7a:	f7fe fc55 	bl	8000428 <__aeabi_f2d>
 8001b7e:	a32c      	add	r3, pc, #176	@ (adr r3, 8001c30 <main+0x4c0>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fca8 	bl	80004d8 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	a329      	add	r3, pc, #164	@ (adr r3, 8001c38 <main+0x4c8>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fae9 	bl	800016c <__adddf3>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7fe ff91 	bl	8000ac8 <__aeabi_d2f>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

				// brake when motor coasting isnt enough
				if(slope_gps < descent_no_brake) {
 8001bac:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8001bb0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001bb4:	f7ff fa84 	bl	80010c0 <__aeabi_fcmplt>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <main+0x456>
					braking = true;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <main+0x4e8>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	e002      	b.n	8001bcc <main+0x45c>
				} else {
					braking = false;
 8001bc6:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <main+0x4e8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
				}

				// when brake mode on, brake if our desired_g is greater than our current_g
				if (braking) {
 8001bcc:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <main+0x4e8>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d045      	beq.n	8001c60 <main+0x4f0>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off when in brake mode
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bda:	481c      	ldr	r0, [pc, #112]	@ (8001c4c <main+0x4dc>)
 8001bdc:	f001 fed8 	bl	8003990 <HAL_GPIO_WritePin>
					if (desired_g > current_g) {
 8001be0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <main+0x4ec>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001bea:	f7ff fa87 	bl	80010fc <__aeabi_fcmpgt>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <main+0x492>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bfa:	4814      	ldr	r0, [pc, #80]	@ (8001c4c <main+0x4dc>)
 8001bfc:	f001 fec8 	bl	8003990 <HAL_GPIO_WritePin>
 8001c00:	e00f      	b.n	8001c22 <main+0x4b2>
					}

					// let the motor coast to reduce speed instead
					else if(desired_g <= current_g) {
 8001c02:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <main+0x4ec>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4619      	mov	r1, r3
 8001c08:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001c0c:	f7ff fa62 	bl	80010d4 <__aeabi_fcmple>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <main+0x4b2>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 8001c16:	2201      	movs	r2, #1
 8001c18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c1c:	480b      	ldr	r0, [pc, #44]	@ (8001c4c <main+0x4dc>)
 8001c1e:	f001 feb7 	bl	8003990 <HAL_GPIO_WritePin>
					}
					setValue(0);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 fb2a 	bl	800227c <setValue>
 8001c28:	e0fa      	b.n	8001e20 <main+0x6b0>
 8001c2a:	bf00      	nop
 8001c2c:	f3af 8000 	nop.w
 8001c30:	df3b645a 	.word	0xdf3b645a
 8001c34:	bfd78d4f 	.word	0xbfd78d4f
 8001c38:	8b439581 	.word	0x8b439581
 8001c3c:	3fd3e76c 	.word	0x3fd3e76c
 8001c40:	200007bc 	.word	0x200007bc
 8001c44:	2000049c 	.word	0x2000049c
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	40010800 	.word	0x40010800
 8001c50:	447a0000 	.word	0x447a0000
 8001c54:	20000498 	.word	0x20000498
 8001c58:	2000048c 	.word	0x2000048c
 8001c5c:	2000046c 	.word	0x2000046c
				}

				// brake mode is off so use voltage to rpm equation to set speed of the centrifuge
				else {
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Motor on
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c66:	48bc      	ldr	r0, [pc, #752]	@ (8001f58 <main+0x7e8>)
 8001c68:	f001 fe92 	bl	8003990 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c72:	48b9      	ldr	r0, [pc, #740]	@ (8001f58 <main+0x7e8>)
 8001c74:	f001 fe8c 	bl	8003990 <HAL_GPIO_WritePin>
					float desired_mps = desired_g * 9.81; // meters per second for the equation
 8001c78:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001c7c:	f7fe fbd4 	bl	8000428 <__aeabi_f2d>
 8001c80:	a3af      	add	r3, pc, #700	@ (adr r3, 8001f40 <main+0x7d0>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fc27 	bl	80004d8 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ff19 	bl	8000ac8 <__aeabi_d2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
					float c = (9.81/desired_mps);
 8001c9c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8001ca0:	f7fe fbc2 	bl	8000428 <__aeabi_f2d>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	a1a5      	add	r1, pc, #660	@ (adr r1, 8001f40 <main+0x7d0>)
 8001caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cae:	f7fe fd3d 	bl	800072c <__aeabi_ddiv>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7fe ff05 	bl	8000ac8 <__aeabi_d2f>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
					float a = 1.4; // centrifuge arm radius meters
 8001cc4:	4ba5      	ldr	r3, [pc, #660]	@ (8001f5c <main+0x7ec>)
 8001cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
					float b = 0; // gondola radius meters (0.25 if gondola exists)
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
					float omega = sqrt((desired_mps - 9.81) / (a + (b *sqrt(1-(c*c))))); // equation to get desired omega from desired mps
 8001cd2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8001cd6:	f7fe fba7 	bl	8000428 <__aeabi_f2d>
 8001cda:	a399      	add	r3, pc, #612	@ (adr r3, 8001f40 <main+0x7d0>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f7fe fa42 	bl	8000168 <__aeabi_dsub>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4692      	mov	sl, r2
 8001cea:	469b      	mov	fp, r3
 8001cec:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001cf0:	f7fe fb9a 	bl	8000428 <__aeabi_f2d>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	460d      	mov	r5, r1
 8001cf8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001cfc:	f7fe fb94 	bl	8000428 <__aeabi_f2d>
 8001d00:	4680      	mov	r8, r0
 8001d02:	4689      	mov	r9, r1
 8001d04:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8001d08:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001d0c:	f7ff f83a 	bl	8000d84 <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001d18:	f7fe ff2a 	bl	8000b70 <__aeabi_fsub>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fb82 	bl	8000428 <__aeabi_f2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f006 fc4c 	bl	80085c8 <sqrt>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4640      	mov	r0, r8
 8001d36:	4649      	mov	r1, r9
 8001d38:	f7fe fbce 	bl	80004d8 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4620      	mov	r0, r4
 8001d42:	4629      	mov	r1, r5
 8001d44:	f7fe fa12 	bl	800016c <__adddf3>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4650      	mov	r0, sl
 8001d4e:	4659      	mov	r1, fp
 8001d50:	f7fe fcec 	bl	800072c <__aeabi_ddiv>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f006 fc34 	bl	80085c8 <sqrt>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe feae 	bl	8000ac8 <__aeabi_d2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
					float rpm = (omega /3.1415) * 30;
 8001d72:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8001d76:	f7fe fb57 	bl	8000428 <__aeabi_f2d>
 8001d7a:	a373      	add	r3, pc, #460	@ (adr r3, 8001f48 <main+0x7d8>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fcd4 	bl	800072c <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	4b73      	ldr	r3, [pc, #460]	@ (8001f60 <main+0x7f0>)
 8001d92:	f7fe fba1 	bl	80004d8 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7fe fe93 	bl	8000ac8 <__aeabi_d2f>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
					voltage_to_be_sent = rpm * 25 * ((5-0.2)/(4000-160)); // equation for the motor that translates rpm to voltage to be sent
 8001da8:	496e      	ldr	r1, [pc, #440]	@ (8001f64 <main+0x7f4>)
 8001daa:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001dae:	f7fe ffe9 	bl	8000d84 <__aeabi_fmul>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fb37 	bl	8000428 <__aeabi_f2d>
 8001dba:	a365      	add	r3, pc, #404	@ (adr r3, 8001f50 <main+0x7e0>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fb8a 	bl	80004d8 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe fe7c 	bl	8000ac8 <__aeabi_d2f>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a65      	ldr	r2, [pc, #404]	@ (8001f68 <main+0x7f8>)
 8001dd4:	6013      	str	r3, [r2, #0]
					if (voltage_to_be_sent > 5) {
 8001dd6:	4b64      	ldr	r3, [pc, #400]	@ (8001f68 <main+0x7f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4964      	ldr	r1, [pc, #400]	@ (8001f6c <main+0x7fc>)
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f98d 	bl	80010fc <__aeabi_fcmpgt>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <main+0x67e>
						voltage_to_be_sent = 5;
 8001de8:	4b5f      	ldr	r3, [pc, #380]	@ (8001f68 <main+0x7f8>)
 8001dea:	4a60      	ldr	r2, [pc, #384]	@ (8001f6c <main+0x7fc>)
 8001dec:	601a      	str	r2, [r3, #0]
					}
					int scaled_voltage = (uint16_t)((voltage_to_be_sent / 5) * 4095); // scale the voltage from 0-3.3 to 0-4095 to be sent though the DAC
 8001dee:	4b5e      	ldr	r3, [pc, #376]	@ (8001f68 <main+0x7f8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	495e      	ldr	r1, [pc, #376]	@ (8001f6c <main+0x7fc>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f879 	bl	8000eec <__aeabi_fdiv>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	495c      	ldr	r1, [pc, #368]	@ (8001f70 <main+0x800>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe ffc0 	bl	8000d84 <__aeabi_fmul>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f982 	bl	8001110 <__aeabi_f2uiz>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
					setValue(scaled_voltage);
 8001e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fa2e 	bl	800227c <setValue>
				//
				//					// Send over UART using interrupt
				//					HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, len);
				//				}

				if ((HAL_GetTick() - previousCountMillis) >= countMillis) {
 8001e20:	f001 fa36 	bl	8003290 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b53      	ldr	r3, [pc, #332]	@ (8001f74 <main+0x804>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d359      	bcc.n	8001ee8 <main+0x778>
					previousCountMillis += countMillis;
 8001e34:	4b4f      	ldr	r3, [pc, #316]	@ (8001f74 <main+0x804>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e3c:	4413      	add	r3, r2
 8001e3e:	4a4d      	ldr	r2, [pc, #308]	@ (8001f74 <main+0x804>)
 8001e40:	6013      	str	r3, [r2, #0]

					if (HAL_GetTick() - previousCountMillis >= countMillis) {
 8001e42:	f001 fa25 	bl	8003290 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b4a      	ldr	r3, [pc, #296]	@ (8001f74 <main+0x804>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d304      	bcc.n	8001e60 <main+0x6f0>
					        previousCountMillis = HAL_GetTick();  // catch-up fix
 8001e56:	f001 fa1b 	bl	8003290 <HAL_GetTick>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a45      	ldr	r2, [pc, #276]	@ (8001f74 <main+0x804>)
 8001e5e:	6013      	str	r3, [r2, #0]
					}

					collect_data();
 8001e60:	f000 fbbc 	bl	80025dc <collect_data>
					char msg[128];
					int len = snprintf(msg, sizeof(msg),
 8001e64:	4b44      	ldr	r3, [pc, #272]	@ (8001f78 <main+0x808>)
 8001e66:	681e      	ldr	r6, [r3, #0]
 8001e68:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001e6c:	f7fe fadc 	bl	8000428 <__aeabi_f2d>
 8001e70:	4604      	mov	r4, r0
 8001e72:	460d      	mov	r5, r1
 8001e74:	4b41      	ldr	r3, [pc, #260]	@ (8001f7c <main+0x80c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fad5 	bl	8000428 <__aeabi_f2d>
 8001e7e:	4680      	mov	r8, r0
 8001e80:	4689      	mov	r9, r1
 8001e82:	4b39      	ldr	r3, [pc, #228]	@ (8001f68 <main+0x7f8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe face 	bl	8000428 <__aeabi_f2d>
 8001e8c:	4682      	mov	sl, r0
 8001e8e:	468b      	mov	fp, r1
 8001e90:	4b3b      	ldr	r3, [pc, #236]	@ (8001f80 <main+0x810>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fac7 	bl	8000428 <__aeabi_f2d>
 8001e9a:	e9c7 0100 	strd	r0, r1, [r7]
 8001e9e:	4b39      	ldr	r3, [pc, #228]	@ (8001f84 <main+0x814>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fac0 	bl	8000428 <__aeabi_f2d>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	f107 0018 	add.w	r0, r7, #24
 8001eb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001ebc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001ec0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ec4:	e9cd 4500 	strd	r4, r5, [sp]
 8001ec8:	4633      	mov	r3, r6
 8001eca:	4a2f      	ldr	r2, [pc, #188]	@ (8001f88 <main+0x818>)
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	f008 f81f 	bl	8009f10 <sniprintf>
 8001ed2:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
							"%lu %.2f %.2f %.2f %.2f %.2f\n",
							time_elapsed, desired_g, current_g, voltage_to_be_sent, rpm, avgRPM);

					// Send over UART using interrupt
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, len);
 8001ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f107 0318 	add.w	r3, r7, #24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	482a      	ldr	r0, [pc, #168]	@ (8001f8c <main+0x81c>)
 8001ee4:	f005 fe03 	bl	8007aee <HAL_UART_Transmit_IT>
				}
			}
		}

		// LED loop to check board status
		ledTimer ++;
 8001ee8:	4b29      	ldr	r3, [pc, #164]	@ (8001f90 <main+0x820>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <main+0x820>)
 8001ef2:	801a      	strh	r2, [r3, #0]
		if(ledTimer > 200){
 8001ef4:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <main+0x820>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	2bc8      	cmp	r3, #200	@ 0xc8
 8001efa:	d91d      	bls.n	8001f38 <main+0x7c8>
			ledTimer = 0;
 8001efc:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <main+0x820>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	801a      	strh	r2, [r3, #0]
			led = !led;
 8001f02:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <main+0x824>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <main+0x824>)
 8001f14:	701a      	strb	r2, [r3, #0]
			if(led){
 8001f16:	4b1f      	ldr	r3, [pc, #124]	@ (8001f94 <main+0x824>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <main+0x7bc>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f24:	481c      	ldr	r0, [pc, #112]	@ (8001f98 <main+0x828>)
 8001f26:	f001 fd33 	bl	8003990 <HAL_GPIO_WritePin>
 8001f2a:	e005      	b.n	8001f38 <main+0x7c8>
			}else{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f32:	4819      	ldr	r0, [pc, #100]	@ (8001f98 <main+0x828>)
 8001f34:	f001 fd2c 	bl	8003990 <HAL_GPIO_WritePin>
			}
		}
		HAL_Delay(1);
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f001 f9b3 	bl	80032a4 <HAL_Delay>
		if(dataNew){
 8001f3e:	e46d      	b.n	800181c <main+0xac>
 8001f40:	51eb851f 	.word	0x51eb851f
 8001f44:	40239eb8 	.word	0x40239eb8
 8001f48:	c083126f 	.word	0xc083126f
 8001f4c:	400921ca 	.word	0x400921ca
 8001f50:	47ae147b 	.word	0x47ae147b
 8001f54:	3f547ae1 	.word	0x3f547ae1
 8001f58:	40010800 	.word	0x40010800
 8001f5c:	3fb33333 	.word	0x3fb33333
 8001f60:	403e0000 	.word	0x403e0000
 8001f64:	41c80000 	.word	0x41c80000
 8001f68:	20000470 	.word	0x20000470
 8001f6c:	40a00000 	.word	0x40a00000
 8001f70:	457ff000 	.word	0x457ff000
 8001f74:	20000480 	.word	0x20000480
 8001f78:	20000498 	.word	0x20000498
 8001f7c:	2000046c 	.word	0x2000046c
 8001f80:	20000484 	.word	0x20000484
 8001f84:	20000474 	.word	0x20000474
 8001f88:	0800cab8 	.word	0x0800cab8
 8001f8c:	20000b98 	.word	0x20000b98
 8001f90:	20000490 	.word	0x20000490
 8001f94:	2000048e 	.word	0x2000048e
 8001f98:	40011000 	.word	0x40011000

08001f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b090      	sub	sp, #64	@ 0x40
 8001fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fa2:	f107 0318 	add.w	r3, r7, #24
 8001fa6:	2228      	movs	r2, #40	@ 0x28
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f008 f829 	bl	800a002 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fda:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fe0:	f107 0318 	add.w	r3, r7, #24
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 fb8d 	bl	8006704 <HAL_RCC_OscConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ff0:	f000 fb4e 	bl	8002690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff4:	230f      	movs	r3, #15
 8001ff6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	2102      	movs	r1, #2
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fdfa 	bl	8006c08 <HAL_RCC_ClockConfig>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800201a:	f000 fb39 	bl	8002690 <Error_Handler>
  }
}
 800201e:	bf00      	nop
 8002020:	3740      	adds	r7, #64	@ 0x40
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// For serial monitor
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	char recentChar = *(rx_buff + rx_buff_arm); // the most recent character that has not been read yet
 8002030:	4b89      	ldr	r3, [pc, #548]	@ (8002258 <HAL_UART_RxCpltCallback+0x230>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b89      	ldr	r3, [pc, #548]	@ (800225c <HAL_UART_RxCpltCallback+0x234>)
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	73fb      	strb	r3, [r7, #15]
	 m | manual
	 u | uploading mode (reading)
	 o | on mode (running)
	 e | evaluate (aka parsing) **/

	switch (state){
 800203e:	4b88      	ldr	r3, [pc, #544]	@ (8002260 <HAL_UART_RxCpltCallback+0x238>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	3b69      	subs	r3, #105	@ 0x69
 8002044:	2b0c      	cmp	r3, #12
 8002046:	f200 80d6 	bhi.w	80021f6 <HAL_UART_RxCpltCallback+0x1ce>
 800204a:	a201      	add	r2, pc, #4	@ (adr r2, 8002050 <HAL_UART_RxCpltCallback+0x28>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	08002085 	.word	0x08002085
 8002054:	080021f7 	.word	0x080021f7
 8002058:	080021f7 	.word	0x080021f7
 800205c:	080021f7 	.word	0x080021f7
 8002060:	080020c5 	.word	0x080020c5
 8002064:	080021f7 	.word	0x080021f7
 8002068:	080021e9 	.word	0x080021e9
 800206c:	08002185 	.word	0x08002185
 8002070:	080021f7 	.word	0x080021f7
 8002074:	080021f7 	.word	0x080021f7
 8002078:	080021f7 	.word	0x080021f7
 800207c:	080021f7 	.word	0x080021f7
 8002080:	080021db 	.word	0x080021db
	case 'i':
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800208a:	4876      	ldr	r0, [pc, #472]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 800208c:	f001 fc80 	bl	8003990 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002096:	4873      	ldr	r0, [pc, #460]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 8002098:	f001 fc7a 	bl	8003990 <HAL_GPIO_WritePin>
		// go to upload mode
		if(recentChar == 'u'){
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b75      	cmp	r3, #117	@ 0x75
 80020a0:	d108      	bne.n	80020b4 <HAL_UART_RxCpltCallback+0x8c>
			upload_pointer = rx_buff_arm + 1;
 80020a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002258 <HAL_UART_RxCpltCallback+0x230>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	4a6f      	ldr	r2, [pc, #444]	@ (8002268 <HAL_UART_RxCpltCallback+0x240>)
 80020aa:	6013      	str	r3, [r2, #0]
			state = 'u';
 80020ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002260 <HAL_UART_RxCpltCallback+0x238>)
 80020ae:	2275      	movs	r2, #117	@ 0x75
 80020b0:	701a      	strb	r2, [r3, #0]
		}
		// go to manual mode
		else if(recentChar == 'm') {
			state = 'm';
		}
		break;
 80020b2:	e0b0      	b.n	8002216 <HAL_UART_RxCpltCallback+0x1ee>
		else if(recentChar == 'm') {
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b6d      	cmp	r3, #109	@ 0x6d
 80020b8:	f040 80ad 	bne.w	8002216 <HAL_UART_RxCpltCallback+0x1ee>
			state = 'm';
 80020bc:	4b68      	ldr	r3, [pc, #416]	@ (8002260 <HAL_UART_RxCpltCallback+0x238>)
 80020be:	226d      	movs	r2, #109	@ 0x6d
 80020c0:	701a      	strb	r2, [r3, #0]
		break;
 80020c2:	e0a8      	b.n	8002216 <HAL_UART_RxCpltCallback+0x1ee>



	case 'm':
		//accept commands from a serial monitor to control the centrifuge
		if(recentChar <= '9' && recentChar >= '0'){
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	2b39      	cmp	r3, #57	@ 0x39
 80020c8:	d825      	bhi.n	8002116 <HAL_UART_RxCpltCallback+0xee>
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80020ce:	d922      	bls.n	8002116 <HAL_UART_RxCpltCallback+0xee>
			voltageSent = (uint16_t)((int)(recentChar - '0') / 9.0 * 4095);
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	3b30      	subs	r3, #48	@ 0x30
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe f995 	bl	8000404 <__aeabi_i2d>
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	4b63      	ldr	r3, [pc, #396]	@ (800226c <HAL_UART_RxCpltCallback+0x244>)
 80020e0:	f7fe fb24 	bl	800072c <__aeabi_ddiv>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	a358      	add	r3, pc, #352	@ (adr r3, 8002250 <HAL_UART_RxCpltCallback+0x228>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	f7fe f9f1 	bl	80004d8 <__aeabi_dmul>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fcc3 	bl	8000a88 <__aeabi_d2uiz>
 8002102:	4603      	mov	r3, r0
 8002104:	b29a      	uxth	r2, r3
 8002106:	4b5a      	ldr	r3, [pc, #360]	@ (8002270 <HAL_UART_RxCpltCallback+0x248>)
 8002108:	801a      	strh	r2, [r3, #0]
			setValue(voltageSent);
 800210a:	4b59      	ldr	r3, [pc, #356]	@ (8002270 <HAL_UART_RxCpltCallback+0x248>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f8b4 	bl	800227c <setValue>

		// go to idle mode
		else if(recentChar == 'm') {
			state = 'i';
		}
		break;
 8002114:	e081      	b.n	800221a <HAL_UART_RxCpltCallback+0x1f2>
		}else if(recentChar == 'C') { // Motor on Brake off
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b43      	cmp	r3, #67	@ 0x43
 800211a:	d10c      	bne.n	8002136 <HAL_UART_RxCpltCallback+0x10e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Motor on
 800211c:	2201      	movs	r2, #1
 800211e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002122:	4850      	ldr	r0, [pc, #320]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 8002124:	f001 fc34 	bl	8003990 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 8002128:	2201      	movs	r2, #1
 800212a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800212e:	484d      	ldr	r0, [pc, #308]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 8002130:	f001 fc2e 	bl	8003990 <HAL_GPIO_WritePin>
		break;
 8002134:	e071      	b.n	800221a <HAL_UART_RxCpltCallback+0x1f2>
		}else if(recentChar == 'c') { // Motor off Brake off
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b63      	cmp	r3, #99	@ 0x63
 800213a:	d10c      	bne.n	8002156 <HAL_UART_RxCpltCallback+0x12e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 800213c:	2200      	movs	r2, #0
 800213e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002142:	4848      	ldr	r0, [pc, #288]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 8002144:	f001 fc24 	bl	8003990 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 8002148:	2201      	movs	r2, #1
 800214a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800214e:	4845      	ldr	r0, [pc, #276]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 8002150:	f001 fc1e 	bl	8003990 <HAL_GPIO_WritePin>
		break;
 8002154:	e061      	b.n	800221a <HAL_UART_RxCpltCallback+0x1f2>
		}else if(recentChar == 'b') { // Motor off Brake on
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	2b62      	cmp	r3, #98	@ 0x62
 800215a:	d10c      	bne.n	8002176 <HAL_UART_RxCpltCallback+0x14e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 800215c:	2200      	movs	r2, #0
 800215e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002162:	4840      	ldr	r0, [pc, #256]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 8002164:	f001 fc14 	bl	8003990 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 8002168:	2200      	movs	r2, #0
 800216a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800216e:	483d      	ldr	r0, [pc, #244]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 8002170:	f001 fc0e 	bl	8003990 <HAL_GPIO_WritePin>
		break;
 8002174:	e051      	b.n	800221a <HAL_UART_RxCpltCallback+0x1f2>
		else if(recentChar == 'm') {
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	2b6d      	cmp	r3, #109	@ 0x6d
 800217a:	d14e      	bne.n	800221a <HAL_UART_RxCpltCallback+0x1f2>
			state = 'i';
 800217c:	4b38      	ldr	r3, [pc, #224]	@ (8002260 <HAL_UART_RxCpltCallback+0x238>)
 800217e:	2269      	movs	r2, #105	@ 0x69
 8002180:	701a      	strb	r2, [r3, #0]
		break;
 8002182:	e04a      	b.n	800221a <HAL_UART_RxCpltCallback+0x1f2>



	case 'p':
		// go to ON mode
		if (recentChar == 'o'){
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b6f      	cmp	r3, #111	@ 0x6f
 8002188:	d114      	bne.n	80021b4 <HAL_UART_RxCpltCallback+0x18c>
			time_start = HAL_GetTick();
 800218a:	f001 f881 	bl	8003290 <HAL_GetTick>
 800218e:	4603      	mov	r3, r0
 8002190:	4a38      	ldr	r2, [pc, #224]	@ (8002274 <HAL_UART_RxCpltCallback+0x24c>)
 8002192:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Motor on
 8002194:	2201      	movs	r2, #1
 8002196:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800219a:	4832      	ldr	r0, [pc, #200]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 800219c:	f001 fbf8 	bl	8003990 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Brake off
 80021a0:	2201      	movs	r2, #1
 80021a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021a6:	482f      	ldr	r0, [pc, #188]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 80021a8:	f001 fbf2 	bl	8003990 <HAL_GPIO_WritePin>
			state = 'o';
 80021ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002260 <HAL_UART_RxCpltCallback+0x238>)
 80021ae:	226f      	movs	r2, #111	@ 0x6f
 80021b0:	701a      	strb	r2, [r3, #0]
		}
		// go to manual mode
		else if(recentChar == 'm') {
			state = 'm';
		}
		break;
 80021b2:	e034      	b.n	800221e <HAL_UART_RxCpltCallback+0x1f6>
		else if(recentChar == 'u') {
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	2b75      	cmp	r3, #117	@ 0x75
 80021b8:	d108      	bne.n	80021cc <HAL_UART_RxCpltCallback+0x1a4>
			upload_pointer = rx_buff_arm + 1;
 80021ba:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <HAL_UART_RxCpltCallback+0x230>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	3301      	adds	r3, #1
 80021c0:	4a29      	ldr	r2, [pc, #164]	@ (8002268 <HAL_UART_RxCpltCallback+0x240>)
 80021c2:	6013      	str	r3, [r2, #0]
			state = 'u';
 80021c4:	4b26      	ldr	r3, [pc, #152]	@ (8002260 <HAL_UART_RxCpltCallback+0x238>)
 80021c6:	2275      	movs	r2, #117	@ 0x75
 80021c8:	701a      	strb	r2, [r3, #0]
		break;
 80021ca:	e028      	b.n	800221e <HAL_UART_RxCpltCallback+0x1f6>
		else if(recentChar == 'm') {
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	2b6d      	cmp	r3, #109	@ 0x6d
 80021d0:	d125      	bne.n	800221e <HAL_UART_RxCpltCallback+0x1f6>
			state = 'm';
 80021d2:	4b23      	ldr	r3, [pc, #140]	@ (8002260 <HAL_UART_RxCpltCallback+0x238>)
 80021d4:	226d      	movs	r2, #109	@ 0x6d
 80021d6:	701a      	strb	r2, [r3, #0]
		break;
 80021d8:	e021      	b.n	800221e <HAL_UART_RxCpltCallback+0x1f6>



	case 'u':
		// go to evaluation mode
		if(recentChar == 'u'){
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b75      	cmp	r3, #117	@ 0x75
 80021de:	d120      	bne.n	8002222 <HAL_UART_RxCpltCallback+0x1fa>
			state = 'e';
 80021e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <HAL_UART_RxCpltCallback+0x238>)
 80021e2:	2265      	movs	r2, #101	@ 0x65
 80021e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80021e6:	e01c      	b.n	8002222 <HAL_UART_RxCpltCallback+0x1fa>



	case 'o':
		// go to idle mode
		if(recentChar == 'q') {
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b71      	cmp	r3, #113	@ 0x71
 80021ec:	d11b      	bne.n	8002226 <HAL_UART_RxCpltCallback+0x1fe>
			state = 'i';
 80021ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002260 <HAL_UART_RxCpltCallback+0x238>)
 80021f0:	2269      	movs	r2, #105	@ 0x69
 80021f2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80021f4:	e017      	b.n	8002226 <HAL_UART_RxCpltCallback+0x1fe>

	default:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor off
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021fc:	4819      	ldr	r0, [pc, #100]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 80021fe:	f001 fbc7 	bl	8003990 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Brake on
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002208:	4816      	ldr	r0, [pc, #88]	@ (8002264 <HAL_UART_RxCpltCallback+0x23c>)
 800220a:	f001 fbc1 	bl	8003990 <HAL_GPIO_WritePin>
		state = 'i';
 800220e:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <HAL_UART_RxCpltCallback+0x238>)
 8002210:	2269      	movs	r2, #105	@ 0x69
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e008      	b.n	8002228 <HAL_UART_RxCpltCallback+0x200>
		break;
 8002216:	bf00      	nop
 8002218:	e006      	b.n	8002228 <HAL_UART_RxCpltCallback+0x200>
		break;
 800221a:	bf00      	nop
 800221c:	e004      	b.n	8002228 <HAL_UART_RxCpltCallback+0x200>
		break;
 800221e:	bf00      	nop
 8002220:	e002      	b.n	8002228 <HAL_UART_RxCpltCallback+0x200>
		break;
 8002222:	bf00      	nop
 8002224:	e000      	b.n	8002228 <HAL_UART_RxCpltCallback+0x200>
		break;
 8002226:	bf00      	nop
	}

	// move to next index in the circular buffer to be read
	rx_buff_arm ++;
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_UART_RxCpltCallback+0x230>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <HAL_UART_RxCpltCallback+0x230>)
 8002232:	701a      	strb	r2, [r3, #0]

	//	uint8_t char_arr[1] = {recentChar};
	//	HAL_UART_Transmit_IT(&huart2, char_arr, 1);

	// necessary to prime the next callback
	HAL_UART_Receive_IT(&huart2, rx_buff + rx_buff_arm, 1); // the next character will be stored in the next index
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <HAL_UART_RxCpltCallback+0x230>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <HAL_UART_RxCpltCallback+0x234>)
 800223c:	4413      	add	r3, r2
 800223e:	2201      	movs	r2, #1
 8002240:	4619      	mov	r1, r3
 8002242:	480d      	ldr	r0, [pc, #52]	@ (8002278 <HAL_UART_RxCpltCallback+0x250>)
 8002244:	f005 fc88 	bl	8007b58 <HAL_UART_Receive_IT>
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	00000000 	.word	0x00000000
 8002254:	40affe00 	.word	0x40affe00
 8002258:	2000043c 	.word	0x2000043c
 800225c:	20000248 	.word	0x20000248
 8002260:	20000000 	.word	0x20000000
 8002264:	40010800 	.word	0x40010800
 8002268:	20000ae0 	.word	0x20000ae0
 800226c:	40220000 	.word	0x40220000
 8002270:	20000492 	.word	0x20000492
 8002274:	20000494 	.word	0x20000494
 8002278:	20000b98 	.word	0x20000b98

0800227c <setValue>:

// for DAC
uint8_t setValue(uint16_t value){
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
	return MCP4725_setValue(&myMCP4725, value, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8002286:	88f9      	ldrh	r1, [r7, #6]
 8002288:	2300      	movs	r3, #0
 800228a:	2200      	movs	r2, #0
 800228c:	4803      	ldr	r0, [pc, #12]	@ (800229c <setValue+0x20>)
 800228e:	f7fe fff5 	bl	800127c <MCP4725_setValue>
 8002292:	4603      	mov	r3, r0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000ae4 	.word	0x20000ae4

080022a0 <HAL_GPIO_EXTI_Callback>:

// for radio recieve
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	f040 8181 	bne.w	80025b4 <HAL_GPIO_EXTI_Callback+0x314>
		nrf24l01p_rx_receive(rx_data); // read data when data ready flag is set
 80022b2:	48a7      	ldr	r0, [pc, #668]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80022b4:	f000 faa4 	bl	8002800 <nrf24l01p_rx_receive>
		//		    uint8_t success_arr[] = {'y','e','s'};
		//		    HAL_UART_Transmit_IT(&huart2, success_arr, 3);
		accel_x = (int16_t)(rx_data[0] | (rx_data[1] << 8)) / 2048.f;
 80022b8:	4ba5      	ldr	r3, [pc, #660]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b21a      	sxth	r2, r3
 80022be:	4ba4      	ldr	r3, [pc, #656]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fd05 	bl	8000cdc <__aeabi_i2f>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fe07 	bl	8000eec <__aeabi_fdiv>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b9c      	ldr	r3, [pc, #624]	@ (8002554 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80022e4:	601a      	str	r2, [r3, #0]
		accel_y = (int16_t)(rx_data[2] | (rx_data[3] << 8)) / 2048.f;
 80022e6:	4b9a      	ldr	r3, [pc, #616]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80022e8:	789b      	ldrb	r3, [r3, #2]
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	4b98      	ldr	r3, [pc, #608]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80022ee:	78db      	ldrb	r3, [r3, #3]
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fcee 	bl	8000cdc <__aeabi_i2f>
 8002300:	4603      	mov	r3, r0
 8002302:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fdf0 	bl	8000eec <__aeabi_fdiv>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b91      	ldr	r3, [pc, #580]	@ (8002558 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002312:	601a      	str	r2, [r3, #0]
		accel_z = (int16_t)(rx_data[4] | (rx_data[5] << 8)) / 2048.f;
 8002314:	4b8e      	ldr	r3, [pc, #568]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002316:	791b      	ldrb	r3, [r3, #4]
 8002318:	b21a      	sxth	r2, r3
 800231a:	4b8d      	ldr	r3, [pc, #564]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800231c:	795b      	ldrb	r3, [r3, #5]
 800231e:	b21b      	sxth	r3, r3
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	b21b      	sxth	r3, r3
 8002324:	4313      	orrs	r3, r2
 8002326:	b21b      	sxth	r3, r3
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fcd7 	bl	8000cdc <__aeabi_i2f>
 800232e:	4603      	mov	r3, r0
 8002330:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fdd9 	bl	8000eec <__aeabi_fdiv>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	4b87      	ldr	r3, [pc, #540]	@ (800255c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002340:	601a      	str	r2, [r3, #0]
		temperature = (float)((int16_t)(rx_data[6] | (rx_data[7] << 8))) / 340 + 36.53;
 8002342:	4b83      	ldr	r3, [pc, #524]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002344:	799b      	ldrb	r3, [r3, #6]
 8002346:	b21a      	sxth	r2, r3
 8002348:	4b81      	ldr	r3, [pc, #516]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800234a:	79db      	ldrb	r3, [r3, #7]
 800234c:	b21b      	sxth	r3, r3
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	b21b      	sxth	r3, r3
 8002352:	4313      	orrs	r3, r2
 8002354:	b21b      	sxth	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fcc0 	bl	8000cdc <__aeabi_i2f>
 800235c:	4603      	mov	r3, r0
 800235e:	4980      	ldr	r1, [pc, #512]	@ (8002560 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fdc3 	bl	8000eec <__aeabi_fdiv>
 8002366:	4603      	mov	r3, r0
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f85d 	bl	8000428 <__aeabi_f2d>
 800236e:	a36c      	add	r3, pc, #432	@ (adr r3, 8002520 <HAL_GPIO_EXTI_Callback+0x280>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fd fefa 	bl	800016c <__adddf3>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f7fe fba2 	bl	8000ac8 <__aeabi_d2f>
 8002384:	4603      	mov	r3, r0
 8002386:	4a77      	ldr	r2, [pc, #476]	@ (8002564 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002388:	6013      	str	r3, [r2, #0]
		gyro_x = (int16_t)(rx_data[8] | (rx_data[9] << 8)) / 65.5f;
 800238a:	4b71      	ldr	r3, [pc, #452]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800238c:	7a1b      	ldrb	r3, [r3, #8]
 800238e:	b21a      	sxth	r2, r3
 8002390:	4b6f      	ldr	r3, [pc, #444]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002392:	7a5b      	ldrb	r3, [r3, #9]
 8002394:	b21b      	sxth	r3, r3
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	b21b      	sxth	r3, r3
 800239a:	4313      	orrs	r3, r2
 800239c:	b21b      	sxth	r3, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fc9c 	bl	8000cdc <__aeabi_i2f>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4970      	ldr	r1, [pc, #448]	@ (8002568 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fd9f 	bl	8000eec <__aeabi_fdiv>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b6e      	ldr	r3, [pc, #440]	@ (800256c <HAL_GPIO_EXTI_Callback+0x2cc>)
 80023b4:	601a      	str	r2, [r3, #0]
		gyro_y = (int16_t)(rx_data[10] | (rx_data[11] << 8)) / 65.5f;
 80023b6:	4b66      	ldr	r3, [pc, #408]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80023b8:	7a9b      	ldrb	r3, [r3, #10]
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	4b64      	ldr	r3, [pc, #400]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80023be:	7adb      	ldrb	r3, [r3, #11]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fc86 	bl	8000cdc <__aeabi_i2f>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4965      	ldr	r1, [pc, #404]	@ (8002568 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fd89 	bl	8000eec <__aeabi_fdiv>
 80023da:	4603      	mov	r3, r0
 80023dc:	461a      	mov	r2, r3
 80023de:	4b64      	ldr	r3, [pc, #400]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80023e0:	601a      	str	r2, [r3, #0]
		gyro_z = (int16_t)(rx_data[12] | (rx_data[13] << 8)) / 65.5f;
 80023e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80023e4:	7b1b      	ldrb	r3, [r3, #12]
 80023e6:	b21a      	sxth	r2, r3
 80023e8:	4b59      	ldr	r3, [pc, #356]	@ (8002550 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80023ea:	7b5b      	ldrb	r3, [r3, #13]
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	4313      	orrs	r3, r2
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fc70 	bl	8000cdc <__aeabi_i2f>
 80023fc:	4603      	mov	r3, r0
 80023fe:	495a      	ldr	r1, [pc, #360]	@ (8002568 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fd73 	bl	8000eec <__aeabi_fdiv>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	4b5a      	ldr	r3, [pc, #360]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800240c:	601a      	str	r2, [r3, #0]

		accel_x -= 0.04;
 800240e:	4b51      	ldr	r3, [pc, #324]	@ (8002554 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f808 	bl	8000428 <__aeabi_f2d>
 8002418:	a343      	add	r3, pc, #268	@ (adr r3, 8002528 <HAL_GPIO_EXTI_Callback+0x288>)
 800241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241e:	f7fd fea3 	bl	8000168 <__aeabi_dsub>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	f7fe fb4d 	bl	8000ac8 <__aeabi_d2f>
 800242e:	4603      	mov	r3, r0
 8002430:	4a48      	ldr	r2, [pc, #288]	@ (8002554 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002432:	6013      	str	r3, [r2, #0]
		accel_y += 0.01;
 8002434:	4b48      	ldr	r3, [pc, #288]	@ (8002558 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fd fff5 	bl	8000428 <__aeabi_f2d>
 800243e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002530 <HAL_GPIO_EXTI_Callback+0x290>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fd fe92 	bl	800016c <__adddf3>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	f7fe fb3a 	bl	8000ac8 <__aeabi_d2f>
 8002454:	4603      	mov	r3, r0
 8002456:	4a40      	ldr	r2, [pc, #256]	@ (8002558 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002458:	6013      	str	r3, [r2, #0]
		accel_z -= 0.05;
 800245a:	4b40      	ldr	r3, [pc, #256]	@ (800255c <HAL_GPIO_EXTI_Callback+0x2bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fd ffe2 	bl	8000428 <__aeabi_f2d>
 8002464:	a334      	add	r3, pc, #208	@ (adr r3, 8002538 <HAL_GPIO_EXTI_Callback+0x298>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fd fe7d 	bl	8000168 <__aeabi_dsub>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fb27 	bl	8000ac8 <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	4a37      	ldr	r2, [pc, #220]	@ (800255c <HAL_GPIO_EXTI_Callback+0x2bc>)
 800247e:	6013      	str	r3, [r2, #0]
		gyro_x += 4.7;
 8002480:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fd ffcf 	bl	8000428 <__aeabi_f2d>
 800248a:	a32d      	add	r3, pc, #180	@ (adr r3, 8002540 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fd fe6c 	bl	800016c <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fb14 	bl	8000ac8 <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a32      	ldr	r2, [pc, #200]	@ (800256c <HAL_GPIO_EXTI_Callback+0x2cc>)
 80024a4:	6013      	str	r3, [r2, #0]
		gyro_y -= 1.9;
 80024a6:	4b32      	ldr	r3, [pc, #200]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd ffbc 	bl	8000428 <__aeabi_f2d>
 80024b0:	a325      	add	r3, pc, #148	@ (adr r3, 8002548 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	f7fd fe57 	bl	8000168 <__aeabi_dsub>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4610      	mov	r0, r2
 80024c0:	4619      	mov	r1, r3
 80024c2:	f7fe fb01 	bl	8000ac8 <__aeabi_d2f>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4a29      	ldr	r2, [pc, #164]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80024ca:	6013      	str	r3, [r2, #0]
		gyro_z += 0.5;
 80024cc:	4b29      	ldr	r3, [pc, #164]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fb4d 	bl	8000b74 <__addsf3>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	4b25      	ldr	r3, [pc, #148]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80024e0:	601a      	str	r2, [r3, #0]

		current_g = sqrt((accel_x*accel_x) + (accel_y*accel_y) + (accel_z*accel_z));
 80024e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002554 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002554 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fc49 	bl	8000d84 <__aeabi_fmul>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461c      	mov	r4, r3
 80024f6:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a17      	ldr	r2, [pc, #92]	@ (8002558 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fc3f 	bl	8000d84 <__aeabi_fmul>
 8002506:	4603      	mov	r3, r0
 8002508:	4619      	mov	r1, r3
 800250a:	4620      	mov	r0, r4
 800250c:	f7fe fb32 	bl	8000b74 <__addsf3>
 8002510:	4603      	mov	r3, r0
 8002512:	461c      	mov	r4, r3
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a10      	ldr	r2, [pc, #64]	@ (800255c <HAL_GPIO_EXTI_Callback+0x2bc>)
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	4611      	mov	r1, r2
 800251e:	e02b      	b.n	8002578 <HAL_GPIO_EXTI_Callback+0x2d8>
 8002520:	0a3d70a4 	.word	0x0a3d70a4
 8002524:	404243d7 	.word	0x404243d7
 8002528:	47ae147b 	.word	0x47ae147b
 800252c:	3fa47ae1 	.word	0x3fa47ae1
 8002530:	47ae147b 	.word	0x47ae147b
 8002534:	3f847ae1 	.word	0x3f847ae1
 8002538:	9999999a 	.word	0x9999999a
 800253c:	3fa99999 	.word	0x3fa99999
 8002540:	cccccccd 	.word	0xcccccccd
 8002544:	4012cccc 	.word	0x4012cccc
 8002548:	66666666 	.word	0x66666666
 800254c:	3ffe6666 	.word	0x3ffe6666
 8002550:	20000440 	.word	0x20000440
 8002554:	20000450 	.word	0x20000450
 8002558:	20000454 	.word	0x20000454
 800255c:	20000458 	.word	0x20000458
 8002560:	43aa0000 	.word	0x43aa0000
 8002564:	2000045c 	.word	0x2000045c
 8002568:	42830000 	.word	0x42830000
 800256c:	20000460 	.word	0x20000460
 8002570:	20000464 	.word	0x20000464
 8002574:	20000468 	.word	0x20000468
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fc03 	bl	8000d84 <__aeabi_fmul>
 800257e:	4603      	mov	r3, r0
 8002580:	4619      	mov	r1, r3
 8002582:	4620      	mov	r0, r4
 8002584:	f7fe faf6 	bl	8000b74 <__addsf3>
 8002588:	4603      	mov	r3, r0
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd ff4c 	bl	8000428 <__aeabi_f2d>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f006 f816 	bl	80085c8 <sqrt>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7fe fa90 	bl	8000ac8 <__aeabi_d2f>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4a09      	ldr	r2, [pc, #36]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x330>)
 80025ac:	6013      	str	r3, [r2, #0]
		dataNew = true;
 80025ae:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x334>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_8) { // PA8
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025ba:	d104      	bne.n	80025c6 <HAL_GPIO_EXTI_Callback+0x326>
		counter++;
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x338>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x338>)
 80025c4:	6013      	str	r3, [r2, #0]
	}
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd90      	pop	{r4, r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2000046c 	.word	0x2000046c
 80025d4:	2000048d 	.word	0x2000048d
 80025d8:	2000047c 	.word	0x2000047c

080025dc <collect_data>:

// grabs data from the motor and averages it
void collect_data() {
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	rpm = (counter * 20) / 4.0;
 80025e0:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <collect_data+0x9c>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd fef9 	bl	80003e4 <__aeabi_ui2d>
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	4b21      	ldr	r3, [pc, #132]	@ (800267c <collect_data+0xa0>)
 80025f8:	f7fe f898 	bl	800072c <__aeabi_ddiv>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	f7fe fa60 	bl	8000ac8 <__aeabi_d2f>
 8002608:	4603      	mov	r3, r0
 800260a:	4a1d      	ldr	r2, [pc, #116]	@ (8002680 <collect_data+0xa4>)
 800260c:	6013      	str	r3, [r2, #0]
	sum = avgRPM * numPoints;
 800260e:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <collect_data+0xa8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1d      	ldr	r2, [pc, #116]	@ (8002688 <collect_data+0xac>)
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fbb3 	bl	8000d84 <__aeabi_fmul>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <collect_data+0xb0>)
 8002624:	601a      	str	r2, [r3, #0]
	sum += rpm;
 8002626:	4b19      	ldr	r3, [pc, #100]	@ (800268c <collect_data+0xb0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <collect_data+0xa4>)
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fa9f 	bl	8000b74 <__addsf3>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	4b14      	ldr	r3, [pc, #80]	@ (800268c <collect_data+0xb0>)
 800263c:	601a      	str	r2, [r3, #0]
	numPoints++;
 800263e:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <collect_data+0xac>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fa94 	bl	8000b74 <__addsf3>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <collect_data+0xac>)
 8002652:	601a      	str	r2, [r3, #0]
	avgRPM = sum/numPoints;
 8002654:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <collect_data+0xb0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0b      	ldr	r2, [pc, #44]	@ (8002688 <collect_data+0xac>)
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fc44 	bl	8000eec <__aeabi_fdiv>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <collect_data+0xa8>)
 800266a:	601a      	str	r2, [r3, #0]

	// reset count for next sample
	counter = 0;
 800266c:	4b02      	ldr	r3, [pc, #8]	@ (8002678 <collect_data+0x9c>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000047c 	.word	0x2000047c
 800267c:	40100000 	.word	0x40100000
 8002680:	20000484 	.word	0x20000484
 8002684:	20000474 	.word	0x20000474
 8002688:	20000478 	.word	0x20000478
 800268c:	20000488 	.word	0x20000488

08002690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <Error_Handler+0x8>

0800269c <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	2110      	movs	r1, #16
 80026a4:	4802      	ldr	r0, [pc, #8]	@ (80026b0 <cs_high+0x14>)
 80026a6:	f001 f973 	bl	8003990 <HAL_GPIO_WritePin>
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40010800 	.word	0x40010800

080026b4 <cs_low>:

static void cs_low()
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2110      	movs	r1, #16
 80026bc:	4802      	ldr	r0, [pc, #8]	@ (80026c8 <cs_low+0x14>)
 80026be:	f001 f967 	bl	8003990 <HAL_GPIO_WritePin>
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40010800 	.word	0x40010800

080026cc <ce_high>:

static void ce_high()
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 80026d0:	2201      	movs	r2, #1
 80026d2:	2101      	movs	r1, #1
 80026d4:	4802      	ldr	r0, [pc, #8]	@ (80026e0 <ce_high+0x14>)
 80026d6:	f001 f95b 	bl	8003990 <HAL_GPIO_WritePin>
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40010c00 	.word	0x40010c00

080026e4 <ce_low>:

static void ce_low()
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2101      	movs	r1, #1
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <ce_low+0x14>)
 80026ee:	f001 f94f 	bl	8003990 <HAL_GPIO_WritePin>
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40010c00 	.word	0x40010c00

080026fc <read_register>:

static uint8_t read_register(uint8_t reg)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 800270a:	f7ff ffd3 	bl	80026b4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800270e:	f107 020e 	add.w	r2, r7, #14
 8002712:	f107 010f 	add.w	r1, r7, #15
 8002716:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2301      	movs	r3, #1
 800271e:	4809      	ldr	r0, [pc, #36]	@ (8002744 <read_register+0x48>)
 8002720:	f004 fee1 	bl	80074e6 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8002724:	f107 010d 	add.w	r1, r7, #13
 8002728:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800272c:	2201      	movs	r2, #1
 800272e:	4805      	ldr	r0, [pc, #20]	@ (8002744 <read_register+0x48>)
 8002730:	f004 fdc0 	bl	80072b4 <HAL_SPI_Receive>
    cs_high();
 8002734:	f7ff ffb2 	bl	800269c <cs_high>

    return read_val;
 8002738:	7b7b      	ldrb	r3, [r7, #13]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000af4 	.word	0x20000af4

08002748 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af02      	add	r7, sp, #8
 800274e:	4603      	mov	r3, r0
 8002750:	460a      	mov	r2, r1
 8002752:	71fb      	strb	r3, [r7, #7]
 8002754:	4613      	mov	r3, r2
 8002756:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f043 0320 	orr.w	r3, r3, #32
 800275e:	b2db      	uxtb	r3, r3
 8002760:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8002762:	79bb      	ldrb	r3, [r7, #6]
 8002764:	737b      	strb	r3, [r7, #13]

    cs_low();
 8002766:	f7ff ffa5 	bl	80026b4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800276a:	f107 020e 	add.w	r2, r7, #14
 800276e:	f107 010f 	add.w	r1, r7, #15
 8002772:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2301      	movs	r3, #1
 800277a:	4809      	ldr	r0, [pc, #36]	@ (80027a0 <write_register+0x58>)
 800277c:	f004 feb3 	bl	80074e6 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8002780:	f107 010d 	add.w	r1, r7, #13
 8002784:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002788:	2201      	movs	r2, #1
 800278a:	4805      	ldr	r0, [pc, #20]	@ (80027a0 <write_register+0x58>)
 800278c:	f004 fc4e 	bl	800702c <HAL_SPI_Transmit>
    cs_high();
 8002790:	f7ff ff84 	bl	800269c <cs_high>

    return write_val;
 8002794:	7b7b      	ldrb	r3, [r7, #13]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000af4 	.word	0x20000af4

080027a4 <nrf24l01p_rx_init>:
}


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	460a      	mov	r2, r1
 80027ae:	80fb      	strh	r3, [r7, #6]
 80027b0:	4613      	mov	r3, r2
 80027b2:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 80027b4:	f000 f838 	bl	8002828 <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 80027b8:	f000 f88a 	bl	80028d0 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 80027bc:	f000 f92e 	bl	8002a1c <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 80027c0:	200e      	movs	r0, #14
 80027c2:	f000 f909 	bl	80029d8 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f9b3 	bl	8002b34 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 80027ce:	797b      	ldrb	r3, [r7, #5]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f9e0 	bl	8002b96 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 80027d6:	2003      	movs	r0, #3
 80027d8:	f000 f9bf 	bl	8002b5a <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 80027dc:	2001      	movs	r0, #1
 80027de:	f000 f932 	bl	8002a46 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 80027e2:	2005      	movs	r0, #5
 80027e4:	f000 f952 	bl	8002a8c <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 80027e8:	2003      	movs	r0, #3
 80027ea:	f000 f95f 	bl	8002aac <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 80027ee:	20fa      	movs	r0, #250	@ 0xfa
 80027f0:	f000 f978 	bl	8002ae4 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 80027f4:	f7ff ff6a 	bl	80026cc <ce_high>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f877 	bl	80028fc <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 800280e:	f000 f8f1 	bl	80029f4 <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002812:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002816:	4803      	ldr	r0, [pc, #12]	@ (8002824 <nrf24l01p_rx_receive+0x24>)
 8002818:	f001 f8d2 	bl	80039c0 <HAL_GPIO_TogglePin>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40011000 	.word	0x40011000

08002828 <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 800282c:	f7ff ff36 	bl	800269c <cs_high>
    ce_low();
 8002830:	f7ff ff58 	bl	80026e4 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8002834:	2108      	movs	r1, #8
 8002836:	2000      	movs	r0, #0
 8002838:	f7ff ff86 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 800283c:	213f      	movs	r1, #63	@ 0x3f
 800283e:	2001      	movs	r0, #1
 8002840:	f7ff ff82 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8002844:	2103      	movs	r1, #3
 8002846:	2002      	movs	r0, #2
 8002848:	f7ff ff7e 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 800284c:	2103      	movs	r1, #3
 800284e:	2003      	movs	r0, #3
 8002850:	f7ff ff7a 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8002854:	2103      	movs	r1, #3
 8002856:	2004      	movs	r0, #4
 8002858:	f7ff ff76 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 800285c:	2102      	movs	r1, #2
 800285e:	2005      	movs	r0, #5
 8002860:	f7ff ff72 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8002864:	2107      	movs	r1, #7
 8002866:	2006      	movs	r0, #6
 8002868:	f7ff ff6e 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 800286c:	217e      	movs	r1, #126	@ 0x7e
 800286e:	2007      	movs	r0, #7
 8002870:	f7ff ff6a 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8002874:	2100      	movs	r1, #0
 8002876:	2011      	movs	r0, #17
 8002878:	f7ff ff66 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800287c:	2100      	movs	r1, #0
 800287e:	2011      	movs	r0, #17
 8002880:	f7ff ff62 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8002884:	2100      	movs	r1, #0
 8002886:	2012      	movs	r0, #18
 8002888:	f7ff ff5e 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800288c:	2100      	movs	r1, #0
 800288e:	2013      	movs	r0, #19
 8002890:	f7ff ff5a 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8002894:	2100      	movs	r1, #0
 8002896:	2014      	movs	r0, #20
 8002898:	f7ff ff56 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800289c:	2100      	movs	r1, #0
 800289e:	2015      	movs	r0, #21
 80028a0:	f7ff ff52 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 80028a4:	2100      	movs	r1, #0
 80028a6:	2016      	movs	r0, #22
 80028a8:	f7ff ff4e 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 80028ac:	2111      	movs	r1, #17
 80028ae:	2017      	movs	r0, #23
 80028b0:	f7ff ff4a 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 80028b4:	2100      	movs	r1, #0
 80028b6:	201c      	movs	r0, #28
 80028b8:	f7ff ff46 	bl	8002748 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 80028bc:	2100      	movs	r1, #0
 80028be:	201d      	movs	r0, #29
 80028c0:	f7ff ff42 	bl	8002748 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 80028c4:	f000 f83e 	bl	8002944 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 80028c8:	f000 f854 	bl	8002974 <nrf24l01p_flush_tx_fifo>
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7ff ff10 	bl	80026fc <read_register>
 80028dc:	4603      	mov	r3, r0
 80028de:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4619      	mov	r1, r3
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7ff ff2b 	bl	8002748 <write_register>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af02      	add	r7, sp, #8
 8002902:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8002904:	2361      	movs	r3, #97	@ 0x61
 8002906:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8002908:	f7ff fed4 	bl	80026b4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800290c:	f107 020e 	add.w	r2, r7, #14
 8002910:	f107 010f 	add.w	r1, r7, #15
 8002914:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2301      	movs	r3, #1
 800291c:	4808      	ldr	r0, [pc, #32]	@ (8002940 <nrf24l01p_read_rx_fifo+0x44>)
 800291e:	f004 fde2 	bl	80074e6 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8002922:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002926:	220e      	movs	r2, #14
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4805      	ldr	r0, [pc, #20]	@ (8002940 <nrf24l01p_read_rx_fifo+0x44>)
 800292c:	f004 fcc2 	bl	80072b4 <HAL_SPI_Receive>
    cs_high();
 8002930:	f7ff feb4 	bl	800269c <cs_high>

    return status;
 8002934:	7bbb      	ldrb	r3, [r7, #14]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000af4 	.word	0x20000af4

08002944 <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800294a:	23e2      	movs	r3, #226	@ 0xe2
 800294c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800294e:	f7ff feb1 	bl	80026b4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002952:	1dba      	adds	r2, r7, #6
 8002954:	1df9      	adds	r1, r7, #7
 8002956:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	4804      	ldr	r0, [pc, #16]	@ (8002970 <nrf24l01p_flush_rx_fifo+0x2c>)
 8002960:	f004 fdc1 	bl	80074e6 <HAL_SPI_TransmitReceive>
    cs_high();
 8002964:	f7ff fe9a 	bl	800269c <cs_high>
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000af4 	.word	0x20000af4

08002974 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800297a:	23e1      	movs	r3, #225	@ 0xe1
 800297c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800297e:	f7ff fe99 	bl	80026b4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002982:	1dba      	adds	r2, r7, #6
 8002984:	1df9      	adds	r1, r7, #7
 8002986:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2301      	movs	r3, #1
 800298e:	4804      	ldr	r0, [pc, #16]	@ (80029a0 <nrf24l01p_flush_tx_fifo+0x2c>)
 8002990:	f004 fda9 	bl	80074e6 <HAL_SPI_TransmitReceive>
    cs_high();
 8002994:	f7ff fe82 	bl	800269c <cs_high>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000af4 	.word	0x20000af4

080029a4 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 80029aa:	23ff      	movs	r3, #255	@ 0xff
 80029ac:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80029ae:	f7ff fe81 	bl	80026b4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80029b2:	1dba      	adds	r2, r7, #6
 80029b4:	1df9      	adds	r1, r7, #7
 80029b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2301      	movs	r3, #1
 80029be:	4805      	ldr	r0, [pc, #20]	@ (80029d4 <nrf24l01p_get_status+0x30>)
 80029c0:	f004 fd91 	bl	80074e6 <HAL_SPI_TransmitReceive>
    cs_high();
 80029c4:	f7ff fe6a 	bl	800269c <cs_high>

    return status;
 80029c8:	79bb      	ldrb	r3, [r7, #6]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000af4 	.word	0x20000af4

080029d8 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	4619      	mov	r1, r3
 80029e6:	2011      	movs	r0, #17
 80029e8:	f7ff feae 	bl	8002748 <write_register>
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80029fa:	f7ff ffd3 	bl	80029a4 <nrf24l01p_get_status>
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a08:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	2007      	movs	r0, #7
 8002a10:	f7ff fe9a 	bl	8002748 <write_register>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_power_up()
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7ff fe6a 	bl	80026fc <read_register>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	4619      	mov	r1, r3
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7ff fe85 	bl	8002748 <write_register>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7ff fe53 	bl	80026fc <read_register>
 8002a56:	4603      	mov	r3, r0
 8002a58:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d002      	beq.n	8002a66 <nrf24l01p_set_crc_length+0x20>
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d005      	beq.n	8002a70 <nrf24l01p_set_crc_length+0x2a>
 8002a64:	e009      	b.n	8002a7a <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	73fb      	strb	r3, [r7, #15]
            break;
 8002a6e:	e004      	b.n	8002a7a <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	73fb      	strb	r3, [r7, #15]
            break;
 8002a78:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7ff fe62 	bl	8002748 <write_register>
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	3b02      	subs	r3, #2
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	2003      	movs	r0, #3
 8002aa0:	f7ff fe52 	bl	8002748 <write_register>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8002ab6:	2004      	movs	r0, #4
 8002ab8:	f7ff fe20 	bl	80026fc <read_register>
 8002abc:	4603      	mov	r3, r0
 8002abe:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	f063 030f 	orn	r3, r3, #15
 8002ac6:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	2004      	movs	r0, #4
 8002ad6:	f7ff fe37 	bl	8002748 <write_register>
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8002aee:	2004      	movs	r0, #4
 8002af0:	f7ff fe04 	bl	80026fc <read_register>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	f043 030f 	orr.w	r3, r3, #15
 8002afe:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	4a0b      	ldr	r2, [pc, #44]	@ (8002b30 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	b25a      	sxtb	r2, r3
 8002b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	4619      	mov	r1, r3
 8002b22:	2004      	movs	r0, #4
 8002b24:	f7ff fe10 	bl	8002748 <write_register>
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	10624dd3 	.word	0x10624dd3

08002b34 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8002b44:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8002b46:	89fb      	ldrh	r3, [r7, #14]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	2005      	movs	r0, #5
 8002b4e:	f7ff fdfb 	bl	8002748 <write_register>
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8002b64:	2006      	movs	r0, #6
 8002b66:	f7ff fdc9 	bl	80026fc <read_register>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f023 0306 	bic.w	r3, r3, #6
 8002b70:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	b25a      	sxtb	r2, r3
 8002b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	4619      	mov	r1, r3
 8002b88:	2006      	movs	r0, #6
 8002b8a:	f7ff fddd 	bl	8002748 <write_register>
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8002ba0:	2006      	movs	r0, #6
 8002ba2:	f7ff fdab 	bl	80026fc <read_register>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002bac:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d00a      	beq.n	8002bca <nrf24l01p_set_rf_air_data_rate+0x34>
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	dc0e      	bgt.n	8002bd6 <nrf24l01p_set_rf_air_data_rate+0x40>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <nrf24l01p_set_rf_air_data_rate+0x3e>
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10a      	bne.n	8002bd6 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	f043 0308 	orr.w	r3, r3, #8
 8002bc6:	73fb      	strb	r3, [r7, #15]
            break;
 8002bc8:	e005      	b.n	8002bd6 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	f043 0320 	orr.w	r3, r3, #32
 8002bd0:	73fb      	strb	r3, [r7, #15]
            break;
 8002bd2:	e000      	b.n	8002bd6 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8002bd4:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	2006      	movs	r0, #6
 8002bdc:	f7ff fdb4 	bl	8002748 <write_register>
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002bec:	4b17      	ldr	r3, [pc, #92]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002bee:	4a18      	ldr	r2, [pc, #96]	@ (8002c50 <MX_SPI1_Init+0x68>)
 8002bf0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bf2:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002bf4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002bf8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bfa:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c00:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002c14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c20:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c26:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2c:	4b07      	ldr	r3, [pc, #28]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c32:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002c34:	220a      	movs	r2, #10
 8002c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c38:	4804      	ldr	r0, [pc, #16]	@ (8002c4c <MX_SPI1_Init+0x64>)
 8002c3a:	f004 f973 	bl	8006f24 <HAL_SPI_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c44:	f7ff fd24 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000af4 	.word	0x20000af4
 8002c50:	40013000 	.word	0x40013000

08002c54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cdc <HAL_SPI_MspInit+0x88>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d12f      	bne.n	8002cd4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce0 <HAL_SPI_MspInit+0x8c>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	4a19      	ldr	r2, [pc, #100]	@ (8002ce0 <HAL_SPI_MspInit+0x8c>)
 8002c7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c7e:	6193      	str	r3, [r2, #24]
 8002c80:	4b17      	ldr	r3, [pc, #92]	@ (8002ce0 <HAL_SPI_MspInit+0x8c>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8c:	4b14      	ldr	r3, [pc, #80]	@ (8002ce0 <HAL_SPI_MspInit+0x8c>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4a13      	ldr	r2, [pc, #76]	@ (8002ce0 <HAL_SPI_MspInit+0x8c>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	6193      	str	r3, [r2, #24]
 8002c98:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <HAL_SPI_MspInit+0x8c>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ca4:	23a0      	movs	r3, #160	@ 0xa0
 8002ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480b      	ldr	r0, [pc, #44]	@ (8002ce4 <HAL_SPI_MspInit+0x90>)
 8002cb8:	f000 fce6 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cbc:	2340      	movs	r3, #64	@ 0x40
 8002cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc8:	f107 0310 	add.w	r3, r7, #16
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4805      	ldr	r0, [pc, #20]	@ (8002ce4 <HAL_SPI_MspInit+0x90>)
 8002cd0:	f000 fcda 	bl	8003688 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	3720      	adds	r7, #32
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40013000 	.word	0x40013000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010800 	.word	0x40010800

08002ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cee:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <HAL_MspInit+0x5c>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	4a14      	ldr	r2, [pc, #80]	@ (8002d44 <HAL_MspInit+0x5c>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6193      	str	r3, [r2, #24]
 8002cfa:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <HAL_MspInit+0x5c>)
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <HAL_MspInit+0x5c>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d44 <HAL_MspInit+0x5c>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	61d3      	str	r3, [r2, #28]
 8002d12:	4b0c      	ldr	r3, [pc, #48]	@ (8002d44 <HAL_MspInit+0x5c>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <HAL_MspInit+0x60>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	4a04      	ldr	r2, [pc, #16]	@ (8002d48 <HAL_MspInit+0x60>)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40010000 	.word	0x40010000

08002d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <NMI_Handler+0x4>

08002d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <HardFault_Handler+0x4>

08002d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <MemManage_Handler+0x4>

08002d64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <BusFault_Handler+0x4>

08002d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <UsageFault_Handler+0x4>

08002d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d9c:	f000 fa66 	bl	800326c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8002da8:	2002      	movs	r0, #2
 8002daa:	f000 fe23 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Speed_Pin);
 8002db6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002dba:	f000 fe1b 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <I2C1_EV_IRQHandler+0x10>)
 8002dca:	f001 fc1b 	bl	8004604 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200001f4 	.word	0x200001f4

08002dd8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ddc:	4802      	ldr	r0, [pc, #8]	@ (8002de8 <I2C1_ER_IRQHandler+0x10>)
 8002dde:	f001 fd82 	bl	80048e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200001f4 	.word	0x200001f4

08002dec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002df0:	4802      	ldr	r0, [pc, #8]	@ (8002dfc <USART1_IRQHandler+0x10>)
 8002df2:	f004 fed7 	bl	8007ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000b50 	.word	0x20000b50

08002e00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e04:	4802      	ldr	r0, [pc, #8]	@ (8002e10 <USART2_IRQHandler+0x10>)
 8002e06:	f004 fecd 	bl	8007ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000b98 	.word	0x20000b98

08002e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return 1;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <_kill>:

int _kill(int pid, int sig)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e2c:	f007 f94e 	bl	800a0cc <__errno>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2216      	movs	r2, #22
 8002e34:	601a      	str	r2, [r3, #0]
  return -1;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_exit>:

void _exit (int status)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ffe7 	bl	8002e22 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <_exit+0x12>

08002e58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	e00a      	b.n	8002e80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e6a:	f3af 8000 	nop.w
 8002e6e:	4601      	mov	r1, r0
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	60ba      	str	r2, [r7, #8]
 8002e76:	b2ca      	uxtb	r2, r1
 8002e78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	dbf0      	blt.n	8002e6a <_read+0x12>
  }

  return len;
 8002e88:	687b      	ldr	r3, [r7, #4]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e009      	b.n	8002eb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	60ba      	str	r2, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	dbf1      	blt.n	8002ea4 <_write+0x12>
  }
  return len;
 8002ec0:	687b      	ldr	r3, [r7, #4]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_close>:

int _close(int file)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ef0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <_isatty>:

int _isatty(int file)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f06:	2301      	movs	r3, #1
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b085      	sub	sp, #20
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
	...

08002f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f34:	4a14      	ldr	r2, [pc, #80]	@ (8002f88 <_sbrk+0x5c>)
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <_sbrk+0x60>)
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f40:	4b13      	ldr	r3, [pc, #76]	@ (8002f90 <_sbrk+0x64>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f48:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <_sbrk+0x64>)
 8002f4a:	4a12      	ldr	r2, [pc, #72]	@ (8002f94 <_sbrk+0x68>)
 8002f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f4e:	4b10      	ldr	r3, [pc, #64]	@ (8002f90 <_sbrk+0x64>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d207      	bcs.n	8002f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f5c:	f007 f8b6 	bl	800a0cc <__errno>
 8002f60:	4603      	mov	r3, r0
 8002f62:	220c      	movs	r2, #12
 8002f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	e009      	b.n	8002f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f6c:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <_sbrk+0x64>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f72:	4b07      	ldr	r3, [pc, #28]	@ (8002f90 <_sbrk+0x64>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	4a05      	ldr	r2, [pc, #20]	@ (8002f90 <_sbrk+0x64>)
 8002f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20005000 	.word	0x20005000
 8002f8c:	00000400 	.word	0x00000400
 8002f90:	20000b4c 	.word	0x20000b4c
 8002f94:	20000d30 	.word	0x20000d30

08002f98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fa8:	4b11      	ldr	r3, [pc, #68]	@ (8002ff0 <MX_USART1_UART_Init+0x4c>)
 8002faa:	4a12      	ldr	r2, [pc, #72]	@ (8002ff4 <MX_USART1_UART_Init+0x50>)
 8002fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fae:	4b10      	ldr	r3, [pc, #64]	@ (8002ff0 <MX_USART1_UART_Init+0x4c>)
 8002fb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff0 <MX_USART1_UART_Init+0x4c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff0 <MX_USART1_UART_Init+0x4c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff0 <MX_USART1_UART_Init+0x4c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fc8:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <MX_USART1_UART_Init+0x4c>)
 8002fca:	220c      	movs	r2, #12
 8002fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fce:	4b08      	ldr	r3, [pc, #32]	@ (8002ff0 <MX_USART1_UART_Init+0x4c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <MX_USART1_UART_Init+0x4c>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fda:	4805      	ldr	r0, [pc, #20]	@ (8002ff0 <MX_USART1_UART_Init+0x4c>)
 8002fdc:	f004 fd37 	bl	8007a4e <HAL_UART_Init>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fe6:	f7ff fb53 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000b50 	.word	0x20000b50
 8002ff4:	40013800 	.word	0x40013800

08002ff8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <MX_USART2_UART_Init+0x4c>)
 8002ffe:	4a12      	ldr	r2, [pc, #72]	@ (8003048 <MX_USART2_UART_Init+0x50>)
 8003000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003002:	4b10      	ldr	r3, [pc, #64]	@ (8003044 <MX_USART2_UART_Init+0x4c>)
 8003004:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800300a:	4b0e      	ldr	r3, [pc, #56]	@ (8003044 <MX_USART2_UART_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003010:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <MX_USART2_UART_Init+0x4c>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003016:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <MX_USART2_UART_Init+0x4c>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800301c:	4b09      	ldr	r3, [pc, #36]	@ (8003044 <MX_USART2_UART_Init+0x4c>)
 800301e:	220c      	movs	r2, #12
 8003020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003022:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <MX_USART2_UART_Init+0x4c>)
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <MX_USART2_UART_Init+0x4c>)
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800302e:	4805      	ldr	r0, [pc, #20]	@ (8003044 <MX_USART2_UART_Init+0x4c>)
 8003030:	f004 fd0d 	bl	8007a4e <HAL_UART_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800303a:	f7ff fb29 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000b98 	.word	0x20000b98
 8003048:	40004400 	.word	0x40004400

0800304c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	@ 0x30
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	f107 031c 	add.w	r3, r7, #28
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a45      	ldr	r2, [pc, #276]	@ (800317c <HAL_UART_MspInit+0x130>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d146      	bne.n	80030fa <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800306c:	4b44      	ldr	r3, [pc, #272]	@ (8003180 <HAL_UART_MspInit+0x134>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4a43      	ldr	r2, [pc, #268]	@ (8003180 <HAL_UART_MspInit+0x134>)
 8003072:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003076:	6193      	str	r3, [r2, #24]
 8003078:	4b41      	ldr	r3, [pc, #260]	@ (8003180 <HAL_UART_MspInit+0x134>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003084:	4b3e      	ldr	r3, [pc, #248]	@ (8003180 <HAL_UART_MspInit+0x134>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	4a3d      	ldr	r2, [pc, #244]	@ (8003180 <HAL_UART_MspInit+0x134>)
 800308a:	f043 0308 	orr.w	r3, r3, #8
 800308e:	6193      	str	r3, [r2, #24]
 8003090:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_UART_MspInit+0x134>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800309c:	2340      	movs	r3, #64	@ 0x40
 800309e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a0:	2302      	movs	r3, #2
 80030a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a8:	f107 031c 	add.w	r3, r7, #28
 80030ac:	4619      	mov	r1, r3
 80030ae:	4835      	ldr	r0, [pc, #212]	@ (8003184 <HAL_UART_MspInit+0x138>)
 80030b0:	f000 faea 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b8:	2300      	movs	r3, #0
 80030ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c0:	f107 031c 	add.w	r3, r7, #28
 80030c4:	4619      	mov	r1, r3
 80030c6:	482f      	ldr	r0, [pc, #188]	@ (8003184 <HAL_UART_MspInit+0x138>)
 80030c8:	f000 fade 	bl	8003688 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80030cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003188 <HAL_UART_MspInit+0x13c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80030d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030e2:	4a29      	ldr	r2, [pc, #164]	@ (8003188 <HAL_UART_MspInit+0x13c>)
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2100      	movs	r1, #0
 80030ec:	2025      	movs	r0, #37	@ 0x25
 80030ee:	f000 f9d4 	bl	800349a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030f2:	2025      	movs	r0, #37	@ 0x25
 80030f4:	f000 f9ed 	bl	80034d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80030f8:	e03c      	b.n	8003174 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a23      	ldr	r2, [pc, #140]	@ (800318c <HAL_UART_MspInit+0x140>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d137      	bne.n	8003174 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003104:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <HAL_UART_MspInit+0x134>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	4a1d      	ldr	r2, [pc, #116]	@ (8003180 <HAL_UART_MspInit+0x134>)
 800310a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310e:	61d3      	str	r3, [r2, #28]
 8003110:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <HAL_UART_MspInit+0x134>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311c:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <HAL_UART_MspInit+0x134>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4a17      	ldr	r2, [pc, #92]	@ (8003180 <HAL_UART_MspInit+0x134>)
 8003122:	f043 0304 	orr.w	r3, r3, #4
 8003126:	6193      	str	r3, [r2, #24]
 8003128:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <HAL_UART_MspInit+0x134>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003134:	2304      	movs	r3, #4
 8003136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800313c:	2303      	movs	r3, #3
 800313e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	4619      	mov	r1, r3
 8003146:	4812      	ldr	r0, [pc, #72]	@ (8003190 <HAL_UART_MspInit+0x144>)
 8003148:	f000 fa9e 	bl	8003688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800314c:	2308      	movs	r3, #8
 800314e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003150:	2300      	movs	r3, #0
 8003152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003158:	f107 031c 	add.w	r3, r7, #28
 800315c:	4619      	mov	r1, r3
 800315e:	480c      	ldr	r0, [pc, #48]	@ (8003190 <HAL_UART_MspInit+0x144>)
 8003160:	f000 fa92 	bl	8003688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	2100      	movs	r1, #0
 8003168:	2026      	movs	r0, #38	@ 0x26
 800316a:	f000 f996 	bl	800349a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800316e:	2026      	movs	r0, #38	@ 0x26
 8003170:	f000 f9af 	bl	80034d2 <HAL_NVIC_EnableIRQ>
}
 8003174:	bf00      	nop
 8003176:	3730      	adds	r7, #48	@ 0x30
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40013800 	.word	0x40013800
 8003180:	40021000 	.word	0x40021000
 8003184:	40010c00 	.word	0x40010c00
 8003188:	40010000 	.word	0x40010000
 800318c:	40004400 	.word	0x40004400
 8003190:	40010800 	.word	0x40010800

08003194 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003194:	f7ff ff00 	bl	8002f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003198:	480b      	ldr	r0, [pc, #44]	@ (80031c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800319a:	490c      	ldr	r1, [pc, #48]	@ (80031cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800319c:	4a0c      	ldr	r2, [pc, #48]	@ (80031d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800319e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a0:	e002      	b.n	80031a8 <LoopCopyDataInit>

080031a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031a6:	3304      	adds	r3, #4

080031a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031ac:	d3f9      	bcc.n	80031a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ae:	4a09      	ldr	r2, [pc, #36]	@ (80031d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80031b0:	4c09      	ldr	r4, [pc, #36]	@ (80031d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b4:	e001      	b.n	80031ba <LoopFillZerobss>

080031b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031b8:	3204      	adds	r2, #4

080031ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031bc:	d3fb      	bcc.n	80031b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031be:	f006 ff8b 	bl	800a0d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031c2:	f7fe fad5 	bl	8001770 <main>
  bx lr
 80031c6:	4770      	bx	lr
  ldr r0, =_sdata
 80031c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031cc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80031d0:	0800cf58 	.word	0x0800cf58
  ldr r2, =_sbss
 80031d4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80031d8:	20000d30 	.word	0x20000d30

080031dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031dc:	e7fe      	b.n	80031dc <ADC1_2_IRQHandler>
	...

080031e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e4:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <HAL_Init+0x28>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a07      	ldr	r2, [pc, #28]	@ (8003208 <HAL_Init+0x28>)
 80031ea:	f043 0310 	orr.w	r3, r3, #16
 80031ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f0:	2003      	movs	r0, #3
 80031f2:	f000 f947 	bl	8003484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031f6:	200f      	movs	r0, #15
 80031f8:	f000 f808 	bl	800320c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031fc:	f7ff fd74 	bl	8002ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40022000 	.word	0x40022000

0800320c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003214:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <HAL_InitTick+0x54>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b12      	ldr	r3, [pc, #72]	@ (8003264 <HAL_InitTick+0x58>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003222:	fbb3 f3f1 	udiv	r3, r3, r1
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f95f 	bl	80034ee <HAL_SYSTICK_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e00e      	b.n	8003258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b0f      	cmp	r3, #15
 800323e:	d80a      	bhi.n	8003256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003240:	2200      	movs	r2, #0
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	f000 f927 	bl	800349a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800324c:	4a06      	ldr	r2, [pc, #24]	@ (8003268 <HAL_InitTick+0x5c>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000004 	.word	0x20000004
 8003264:	2000000c 	.word	0x2000000c
 8003268:	20000008 	.word	0x20000008

0800326c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003270:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <HAL_IncTick+0x1c>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b05      	ldr	r3, [pc, #20]	@ (800328c <HAL_IncTick+0x20>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4413      	add	r3, r2
 800327c:	4a03      	ldr	r2, [pc, #12]	@ (800328c <HAL_IncTick+0x20>)
 800327e:	6013      	str	r3, [r2, #0]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	2000000c 	.word	0x2000000c
 800328c:	20000be0 	.word	0x20000be0

08003290 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return uwTick;
 8003294:	4b02      	ldr	r3, [pc, #8]	@ (80032a0 <HAL_GetTick+0x10>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	20000be0 	.word	0x20000be0

080032a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032ac:	f7ff fff0 	bl	8003290 <HAL_GetTick>
 80032b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d005      	beq.n	80032ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032be:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <HAL_Delay+0x44>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032ca:	bf00      	nop
 80032cc:	f7ff ffe0 	bl	8003290 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d8f7      	bhi.n	80032cc <HAL_Delay+0x28>
  {
  }
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	2000000c 	.word	0x2000000c

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800331c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331e:	4a04      	ldr	r2, [pc, #16]	@ (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	60d3      	str	r3, [r2, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	@ (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4906      	ldr	r1, [pc, #24]	@ (8003384 <__NVIC_EnableIRQ+0x34>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	e000e100 	.word	0xe000e100

08003388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	6039      	str	r1, [r7, #0]
 8003392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	2b00      	cmp	r3, #0
 800339a:	db0a      	blt.n	80033b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	490c      	ldr	r1, [pc, #48]	@ (80033d4 <__NVIC_SetPriority+0x4c>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	440b      	add	r3, r1
 80033ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b0:	e00a      	b.n	80033c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4908      	ldr	r1, [pc, #32]	@ (80033d8 <__NVIC_SetPriority+0x50>)
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	3b04      	subs	r3, #4
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	440b      	add	r3, r1
 80033c6:	761a      	strb	r2, [r3, #24]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	e000e100 	.word	0xe000e100
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	@ 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f1c3 0307 	rsb	r3, r3, #7
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	bf28      	it	cs
 80033fa:	2304      	movcs	r3, #4
 80033fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3304      	adds	r3, #4
 8003402:	2b06      	cmp	r3, #6
 8003404:	d902      	bls.n	800340c <NVIC_EncodePriority+0x30>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3b03      	subs	r3, #3
 800340a:	e000      	b.n	800340e <NVIC_EncodePriority+0x32>
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	f04f 32ff 	mov.w	r2, #4294967295
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	401a      	ands	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	43d9      	mvns	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	4313      	orrs	r3, r2
         );
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	@ 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3b01      	subs	r3, #1
 800344c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003450:	d301      	bcc.n	8003456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003452:	2301      	movs	r3, #1
 8003454:	e00f      	b.n	8003476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003456:	4a0a      	ldr	r2, [pc, #40]	@ (8003480 <SysTick_Config+0x40>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800345e:	210f      	movs	r1, #15
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	f7ff ff90 	bl	8003388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003468:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <SysTick_Config+0x40>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346e:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <SysTick_Config+0x40>)
 8003470:	2207      	movs	r2, #7
 8003472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	e000e010 	.word	0xe000e010

08003484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ff2d 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800349a:	b580      	push	{r7, lr}
 800349c:	b086      	sub	sp, #24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4603      	mov	r3, r0
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ac:	f7ff ff42 	bl	8003334 <__NVIC_GetPriorityGrouping>
 80034b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f7ff ff90 	bl	80033dc <NVIC_EncodePriority>
 80034bc:	4602      	mov	r2, r0
 80034be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff5f 	bl	8003388 <__NVIC_SetPriority>
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4603      	mov	r3, r0
 80034da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff35 	bl	8003350 <__NVIC_EnableIRQ>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffa2 	bl	8003440 <SysTick_Config>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d008      	beq.n	8003530 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2204      	movs	r2, #4
 8003522:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e020      	b.n	8003572 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 020e 	bic.w	r2, r2, #14
 800353e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f202 	lsl.w	r2, r1, r2
 800355e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d005      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2204      	movs	r2, #4
 8003598:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	e051      	b.n	8003644 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 020e 	bic.w	r2, r2, #14
 80035ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a22      	ldr	r2, [pc, #136]	@ (8003650 <HAL_DMA_Abort_IT+0xd4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d029      	beq.n	800361e <HAL_DMA_Abort_IT+0xa2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a21      	ldr	r2, [pc, #132]	@ (8003654 <HAL_DMA_Abort_IT+0xd8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <HAL_DMA_Abort_IT+0x9e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003658 <HAL_DMA_Abort_IT+0xdc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01a      	beq.n	8003614 <HAL_DMA_Abort_IT+0x98>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1e      	ldr	r2, [pc, #120]	@ (800365c <HAL_DMA_Abort_IT+0xe0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d012      	beq.n	800360e <HAL_DMA_Abort_IT+0x92>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003660 <HAL_DMA_Abort_IT+0xe4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00a      	beq.n	8003608 <HAL_DMA_Abort_IT+0x8c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003664 <HAL_DMA_Abort_IT+0xe8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d102      	bne.n	8003602 <HAL_DMA_Abort_IT+0x86>
 80035fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003600:	e00e      	b.n	8003620 <HAL_DMA_Abort_IT+0xa4>
 8003602:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003606:	e00b      	b.n	8003620 <HAL_DMA_Abort_IT+0xa4>
 8003608:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800360c:	e008      	b.n	8003620 <HAL_DMA_Abort_IT+0xa4>
 800360e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003612:	e005      	b.n	8003620 <HAL_DMA_Abort_IT+0xa4>
 8003614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003618:	e002      	b.n	8003620 <HAL_DMA_Abort_IT+0xa4>
 800361a:	2310      	movs	r3, #16
 800361c:	e000      	b.n	8003620 <HAL_DMA_Abort_IT+0xa4>
 800361e:	2301      	movs	r3, #1
 8003620:	4a11      	ldr	r2, [pc, #68]	@ (8003668 <HAL_DMA_Abort_IT+0xec>)
 8003622:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
    } 
  }
  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40020008 	.word	0x40020008
 8003654:	4002001c 	.word	0x4002001c
 8003658:	40020030 	.word	0x40020030
 800365c:	40020044 	.word	0x40020044
 8003660:	40020058 	.word	0x40020058
 8003664:	4002006c 	.word	0x4002006c
 8003668:	40020000 	.word	0x40020000

0800366c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800367a:	b2db      	uxtb	r3, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
	...

08003688 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003688:	b480      	push	{r7}
 800368a:	b08b      	sub	sp, #44	@ 0x2c
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003692:	2300      	movs	r3, #0
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003696:	2300      	movs	r3, #0
 8003698:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800369a:	e169      	b.n	8003970 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800369c:	2201      	movs	r2, #1
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	f040 8158 	bne.w	800396a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4a9a      	ldr	r2, [pc, #616]	@ (8003928 <HAL_GPIO_Init+0x2a0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d05e      	beq.n	8003782 <HAL_GPIO_Init+0xfa>
 80036c4:	4a98      	ldr	r2, [pc, #608]	@ (8003928 <HAL_GPIO_Init+0x2a0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d875      	bhi.n	80037b6 <HAL_GPIO_Init+0x12e>
 80036ca:	4a98      	ldr	r2, [pc, #608]	@ (800392c <HAL_GPIO_Init+0x2a4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d058      	beq.n	8003782 <HAL_GPIO_Init+0xfa>
 80036d0:	4a96      	ldr	r2, [pc, #600]	@ (800392c <HAL_GPIO_Init+0x2a4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d86f      	bhi.n	80037b6 <HAL_GPIO_Init+0x12e>
 80036d6:	4a96      	ldr	r2, [pc, #600]	@ (8003930 <HAL_GPIO_Init+0x2a8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d052      	beq.n	8003782 <HAL_GPIO_Init+0xfa>
 80036dc:	4a94      	ldr	r2, [pc, #592]	@ (8003930 <HAL_GPIO_Init+0x2a8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d869      	bhi.n	80037b6 <HAL_GPIO_Init+0x12e>
 80036e2:	4a94      	ldr	r2, [pc, #592]	@ (8003934 <HAL_GPIO_Init+0x2ac>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d04c      	beq.n	8003782 <HAL_GPIO_Init+0xfa>
 80036e8:	4a92      	ldr	r2, [pc, #584]	@ (8003934 <HAL_GPIO_Init+0x2ac>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d863      	bhi.n	80037b6 <HAL_GPIO_Init+0x12e>
 80036ee:	4a92      	ldr	r2, [pc, #584]	@ (8003938 <HAL_GPIO_Init+0x2b0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d046      	beq.n	8003782 <HAL_GPIO_Init+0xfa>
 80036f4:	4a90      	ldr	r2, [pc, #576]	@ (8003938 <HAL_GPIO_Init+0x2b0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d85d      	bhi.n	80037b6 <HAL_GPIO_Init+0x12e>
 80036fa:	2b12      	cmp	r3, #18
 80036fc:	d82a      	bhi.n	8003754 <HAL_GPIO_Init+0xcc>
 80036fe:	2b12      	cmp	r3, #18
 8003700:	d859      	bhi.n	80037b6 <HAL_GPIO_Init+0x12e>
 8003702:	a201      	add	r2, pc, #4	@ (adr r2, 8003708 <HAL_GPIO_Init+0x80>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	08003783 	.word	0x08003783
 800370c:	0800375d 	.word	0x0800375d
 8003710:	0800376f 	.word	0x0800376f
 8003714:	080037b1 	.word	0x080037b1
 8003718:	080037b7 	.word	0x080037b7
 800371c:	080037b7 	.word	0x080037b7
 8003720:	080037b7 	.word	0x080037b7
 8003724:	080037b7 	.word	0x080037b7
 8003728:	080037b7 	.word	0x080037b7
 800372c:	080037b7 	.word	0x080037b7
 8003730:	080037b7 	.word	0x080037b7
 8003734:	080037b7 	.word	0x080037b7
 8003738:	080037b7 	.word	0x080037b7
 800373c:	080037b7 	.word	0x080037b7
 8003740:	080037b7 	.word	0x080037b7
 8003744:	080037b7 	.word	0x080037b7
 8003748:	080037b7 	.word	0x080037b7
 800374c:	08003765 	.word	0x08003765
 8003750:	08003779 	.word	0x08003779
 8003754:	4a79      	ldr	r2, [pc, #484]	@ (800393c <HAL_GPIO_Init+0x2b4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800375a:	e02c      	b.n	80037b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	623b      	str	r3, [r7, #32]
          break;
 8003762:	e029      	b.n	80037b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	3304      	adds	r3, #4
 800376a:	623b      	str	r3, [r7, #32]
          break;
 800376c:	e024      	b.n	80037b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	3308      	adds	r3, #8
 8003774:	623b      	str	r3, [r7, #32]
          break;
 8003776:	e01f      	b.n	80037b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	330c      	adds	r3, #12
 800377e:	623b      	str	r3, [r7, #32]
          break;
 8003780:	e01a      	b.n	80037b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800378a:	2304      	movs	r3, #4
 800378c:	623b      	str	r3, [r7, #32]
          break;
 800378e:	e013      	b.n	80037b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d105      	bne.n	80037a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003798:	2308      	movs	r3, #8
 800379a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	611a      	str	r2, [r3, #16]
          break;
 80037a2:	e009      	b.n	80037b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037a4:	2308      	movs	r3, #8
 80037a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	615a      	str	r2, [r3, #20]
          break;
 80037ae:	e003      	b.n	80037b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]
          break;
 80037b4:	e000      	b.n	80037b8 <HAL_GPIO_Init+0x130>
          break;
 80037b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2bff      	cmp	r3, #255	@ 0xff
 80037bc:	d801      	bhi.n	80037c2 <HAL_GPIO_Init+0x13a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	e001      	b.n	80037c6 <HAL_GPIO_Init+0x13e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3304      	adds	r3, #4
 80037c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2bff      	cmp	r3, #255	@ 0xff
 80037cc:	d802      	bhi.n	80037d4 <HAL_GPIO_Init+0x14c>
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	e002      	b.n	80037da <HAL_GPIO_Init+0x152>
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	3b08      	subs	r3, #8
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	210f      	movs	r1, #15
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	fa01 f303 	lsl.w	r3, r1, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	401a      	ands	r2, r3
 80037ec:	6a39      	ldr	r1, [r7, #32]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	431a      	orrs	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80b1 	beq.w	800396a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003808:	4b4d      	ldr	r3, [pc, #308]	@ (8003940 <HAL_GPIO_Init+0x2b8>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	4a4c      	ldr	r2, [pc, #304]	@ (8003940 <HAL_GPIO_Init+0x2b8>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6193      	str	r3, [r2, #24]
 8003814:	4b4a      	ldr	r3, [pc, #296]	@ (8003940 <HAL_GPIO_Init+0x2b8>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003820:	4a48      	ldr	r2, [pc, #288]	@ (8003944 <HAL_GPIO_Init+0x2bc>)
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	089b      	lsrs	r3, r3, #2
 8003826:	3302      	adds	r3, #2
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	220f      	movs	r2, #15
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4013      	ands	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a40      	ldr	r2, [pc, #256]	@ (8003948 <HAL_GPIO_Init+0x2c0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_GPIO_Init+0x1ec>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a3f      	ldr	r2, [pc, #252]	@ (800394c <HAL_GPIO_Init+0x2c4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00d      	beq.n	8003870 <HAL_GPIO_Init+0x1e8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3e      	ldr	r2, [pc, #248]	@ (8003950 <HAL_GPIO_Init+0x2c8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d007      	beq.n	800386c <HAL_GPIO_Init+0x1e4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a3d      	ldr	r2, [pc, #244]	@ (8003954 <HAL_GPIO_Init+0x2cc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d101      	bne.n	8003868 <HAL_GPIO_Init+0x1e0>
 8003864:	2303      	movs	r3, #3
 8003866:	e006      	b.n	8003876 <HAL_GPIO_Init+0x1ee>
 8003868:	2304      	movs	r3, #4
 800386a:	e004      	b.n	8003876 <HAL_GPIO_Init+0x1ee>
 800386c:	2302      	movs	r3, #2
 800386e:	e002      	b.n	8003876 <HAL_GPIO_Init+0x1ee>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <HAL_GPIO_Init+0x1ee>
 8003874:	2300      	movs	r3, #0
 8003876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003878:	f002 0203 	and.w	r2, r2, #3
 800387c:	0092      	lsls	r2, r2, #2
 800387e:	4093      	lsls	r3, r2
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003886:	492f      	ldr	r1, [pc, #188]	@ (8003944 <HAL_GPIO_Init+0x2bc>)
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d006      	beq.n	80038ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	492c      	ldr	r1, [pc, #176]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]
 80038ac:	e006      	b.n	80038bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	4928      	ldr	r1, [pc, #160]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d006      	beq.n	80038d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038c8:	4b23      	ldr	r3, [pc, #140]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	4922      	ldr	r1, [pc, #136]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60cb      	str	r3, [r1, #12]
 80038d4:	e006      	b.n	80038e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038d6:	4b20      	ldr	r3, [pc, #128]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	43db      	mvns	r3, r3
 80038de:	491e      	ldr	r1, [pc, #120]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038f0:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	4918      	ldr	r1, [pc, #96]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
 80038fc:	e006      	b.n	800390c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038fe:	4b16      	ldr	r3, [pc, #88]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	43db      	mvns	r3, r3
 8003906:	4914      	ldr	r1, [pc, #80]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 8003908:	4013      	ands	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d021      	beq.n	800395c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003918:	4b0f      	ldr	r3, [pc, #60]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	490e      	ldr	r1, [pc, #56]	@ (8003958 <HAL_GPIO_Init+0x2d0>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]
 8003924:	e021      	b.n	800396a <HAL_GPIO_Init+0x2e2>
 8003926:	bf00      	nop
 8003928:	10320000 	.word	0x10320000
 800392c:	10310000 	.word	0x10310000
 8003930:	10220000 	.word	0x10220000
 8003934:	10210000 	.word	0x10210000
 8003938:	10120000 	.word	0x10120000
 800393c:	10110000 	.word	0x10110000
 8003940:	40021000 	.word	0x40021000
 8003944:	40010000 	.word	0x40010000
 8003948:	40010800 	.word	0x40010800
 800394c:	40010c00 	.word	0x40010c00
 8003950:	40011000 	.word	0x40011000
 8003954:	40011400 	.word	0x40011400
 8003958:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800395c:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <HAL_GPIO_Init+0x304>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	43db      	mvns	r3, r3
 8003964:	4909      	ldr	r1, [pc, #36]	@ (800398c <HAL_GPIO_Init+0x304>)
 8003966:	4013      	ands	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	3301      	adds	r3, #1
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	fa22 f303 	lsr.w	r3, r2, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	f47f ae8e 	bne.w	800369c <HAL_GPIO_Init+0x14>
  }
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	372c      	adds	r7, #44	@ 0x2c
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr
 800398c:	40010400 	.word	0x40010400

08003990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
 800399c:	4613      	mov	r3, r2
 800399e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039a0:	787b      	ldrb	r3, [r7, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039ac:	e003      	b.n	80039b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	041a      	lsls	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	611a      	str	r2, [r3, #16]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d2:	887a      	ldrh	r2, [r7, #2]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4013      	ands	r3, r2
 80039d8:	041a      	lsls	r2, r3, #16
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	43d9      	mvns	r1, r3
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	400b      	ands	r3, r1
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	611a      	str	r2, [r3, #16]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039fe:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a0a:	4a05      	ldr	r2, [pc, #20]	@ (8003a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fc44 	bl	80022a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40010400 	.word	0x40010400

08003a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e12b      	b.n	8003c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd fe30 	bl	80016b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	@ 0x24
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a88:	f003 fa06 	bl	8006e98 <HAL_RCC_GetPCLK1Freq>
 8003a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4a81      	ldr	r2, [pc, #516]	@ (8003c98 <HAL_I2C_Init+0x274>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d807      	bhi.n	8003aa8 <HAL_I2C_Init+0x84>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a80      	ldr	r2, [pc, #512]	@ (8003c9c <HAL_I2C_Init+0x278>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	bf94      	ite	ls
 8003aa0:	2301      	movls	r3, #1
 8003aa2:	2300      	movhi	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	e006      	b.n	8003ab6 <HAL_I2C_Init+0x92>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a7d      	ldr	r2, [pc, #500]	@ (8003ca0 <HAL_I2C_Init+0x27c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	bf94      	ite	ls
 8003ab0:	2301      	movls	r3, #1
 8003ab2:	2300      	movhi	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0e7      	b.n	8003c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a78      	ldr	r2, [pc, #480]	@ (8003ca4 <HAL_I2C_Init+0x280>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	0c9b      	lsrs	r3, r3, #18
 8003ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a6a      	ldr	r2, [pc, #424]	@ (8003c98 <HAL_I2C_Init+0x274>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d802      	bhi.n	8003af8 <HAL_I2C_Init+0xd4>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	3301      	adds	r3, #1
 8003af6:	e009      	b.n	8003b0c <HAL_I2C_Init+0xe8>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	4a69      	ldr	r2, [pc, #420]	@ (8003ca8 <HAL_I2C_Init+0x284>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	495c      	ldr	r1, [pc, #368]	@ (8003c98 <HAL_I2C_Init+0x274>)
 8003b28:	428b      	cmp	r3, r1
 8003b2a:	d819      	bhi.n	8003b60 <HAL_I2C_Init+0x13c>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1e59      	subs	r1, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3a:	1c59      	adds	r1, r3, #1
 8003b3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b40:	400b      	ands	r3, r1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_I2C_Init+0x138>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1e59      	subs	r1, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b54:	3301      	adds	r3, #1
 8003b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5a:	e051      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	e04f      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d111      	bne.n	8003b8c <HAL_I2C_Init+0x168>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1e58      	subs	r0, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6859      	ldr	r1, [r3, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	440b      	add	r3, r1
 8003b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e012      	b.n	8003bb2 <HAL_I2C_Init+0x18e>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e58      	subs	r0, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	0099      	lsls	r1, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Init+0x196>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e022      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10e      	bne.n	8003be0 <HAL_I2C_Init+0x1bc>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1e58      	subs	r0, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	440b      	add	r3, r1
 8003bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bde:	e00f      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e58      	subs	r0, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	0099      	lsls	r1, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	6809      	ldr	r1, [r1, #0]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6911      	ldr	r1, [r2, #16]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68d2      	ldr	r2, [r2, #12]
 8003c3a:	4311      	orrs	r1, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	000186a0 	.word	0x000186a0
 8003c9c:	001e847f 	.word	0x001e847f
 8003ca0:	003d08ff 	.word	0x003d08ff
 8003ca4:	431bde83 	.word	0x431bde83
 8003ca8:	10624dd3 	.word	0x10624dd3

08003cac <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cbe:	2b80      	cmp	r3, #128	@ 0x80
 8003cc0:	d103      	bne.n	8003cca <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	611a      	str	r2, [r3, #16]
  }
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	817b      	strh	r3, [r7, #10]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ce8:	f7ff fad2 	bl	8003290 <HAL_GetTick>
 8003cec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	f040 80e0 	bne.w	8003ebc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	2319      	movs	r3, #25
 8003d02:	2201      	movs	r2, #1
 8003d04:	4970      	ldr	r1, [pc, #448]	@ (8003ec8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f002 fa7a 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
 8003d14:	e0d3      	b.n	8003ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_I2C_Master_Transmit+0x50>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e0cc      	b.n	8003ebe <HAL_I2C_Master_Transmit+0x1ea>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d007      	beq.n	8003d4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2221      	movs	r2, #33	@ 0x21
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2210      	movs	r2, #16
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	893a      	ldrh	r2, [r7, #8]
 8003d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a50      	ldr	r2, [pc, #320]	@ (8003ecc <HAL_I2C_Master_Transmit+0x1f8>)
 8003d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d8c:	8979      	ldrh	r1, [r7, #10]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	6a3a      	ldr	r2, [r7, #32]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f002 f83c 	bl	8005e10 <I2C_MasterRequestWrite>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e08d      	b.n	8003ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da2:	2300      	movs	r3, #0
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003db8:	e066      	b.n	8003e88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	6a39      	ldr	r1, [r7, #32]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f002 fb38 	bl	8006434 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d107      	bne.n	8003de2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e06b      	b.n	8003ebe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d11b      	bne.n	8003e5c <HAL_I2C_Master_Transmit+0x188>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d017      	beq.n	8003e5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	6a39      	ldr	r1, [r7, #32]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f002 fb2f 	bl	80064c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00d      	beq.n	8003e88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d107      	bne.n	8003e84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e01a      	b.n	8003ebe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d194      	bne.n	8003dba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	00100002 	.word	0x00100002
 8003ecc:	ffff0000 	.word	0xffff0000

08003ed0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08c      	sub	sp, #48	@ 0x30
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	461a      	mov	r2, r3
 8003edc:	460b      	mov	r3, r1
 8003ede:	817b      	strh	r3, [r7, #10]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ee8:	f7ff f9d2 	bl	8003290 <HAL_GetTick>
 8003eec:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	f040 824b 	bne.w	8004392 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	2319      	movs	r3, #25
 8003f02:	2201      	movs	r2, #1
 8003f04:	497f      	ldr	r1, [pc, #508]	@ (8004104 <HAL_I2C_Master_Receive+0x234>)
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f002 f97a 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
 8003f14:	e23e      	b.n	8004394 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_I2C_Master_Receive+0x54>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e237      	b.n	8004394 <HAL_I2C_Master_Receive+0x4c4>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d007      	beq.n	8003f4a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0201 	orr.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2222      	movs	r2, #34	@ 0x22
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2210      	movs	r2, #16
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	893a      	ldrh	r2, [r7, #8]
 8003f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a5f      	ldr	r2, [pc, #380]	@ (8004108 <HAL_I2C_Master_Receive+0x238>)
 8003f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f8c:	8979      	ldrh	r1, [r7, #10]
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f001 ffbe 	bl	8005f14 <I2C_MasterRequestRead>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1f8      	b.n	8004394 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d113      	bne.n	8003fd2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e1cc      	b.n	800436c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d11e      	bne.n	8004018 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fea:	b672      	cpsid	i
}
 8003fec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004012:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004014:	b662      	cpsie	i
}
 8004016:	e035      	b.n	8004084 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401c:	2b02      	cmp	r3, #2
 800401e:	d11e      	bne.n	800405e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800402e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004030:	b672      	cpsid	i
}
 8004032:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004058:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800405a:	b662      	cpsie	i
}
 800405c:	e012      	b.n	8004084 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800406c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004084:	e172      	b.n	800436c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408a:	2b03      	cmp	r3, #3
 800408c:	f200 811f 	bhi.w	80042ce <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004094:	2b01      	cmp	r3, #1
 8004096:	d123      	bne.n	80040e0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f002 fa8b 	bl	80065b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e173      	b.n	8004394 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040de:	e145      	b.n	800436c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d152      	bne.n	800418e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ee:	2200      	movs	r2, #0
 80040f0:	4906      	ldr	r1, [pc, #24]	@ (800410c <HAL_I2C_Master_Receive+0x23c>)
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f002 f884 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e148      	b.n	8004394 <HAL_I2C_Master_Receive+0x4c4>
 8004102:	bf00      	nop
 8004104:	00100002 	.word	0x00100002
 8004108:	ffff0000 	.word	0xffff0000
 800410c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004110:	b672      	cpsid	i
}
 8004112:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004156:	b662      	cpsie	i
}
 8004158:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800418c:	e0ee      	b.n	800436c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004194:	2200      	movs	r2, #0
 8004196:	4981      	ldr	r1, [pc, #516]	@ (800439c <HAL_I2C_Master_Receive+0x4cc>)
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f002 f831 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0f5      	b.n	8004394 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041b8:	b672      	cpsid	i
}
 80041ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041ee:	4b6c      	ldr	r3, [pc, #432]	@ (80043a0 <HAL_I2C_Master_Receive+0x4d0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	08db      	lsrs	r3, r3, #3
 80041f4:	4a6b      	ldr	r2, [pc, #428]	@ (80043a4 <HAL_I2C_Master_Receive+0x4d4>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	0a1a      	lsrs	r2, r3, #8
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	00da      	lsls	r2, r3, #3
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	3b01      	subs	r3, #1
 800420c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d118      	bne.n	8004246 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	f043 0220 	orr.w	r2, r3, #32
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004236:	b662      	cpsie	i
}
 8004238:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e0a6      	b.n	8004394 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b04      	cmp	r3, #4
 8004252:	d1d9      	bne.n	8004208 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004296:	b662      	cpsie	i
}
 8004298:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042cc:	e04e      	b.n	800436c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f002 f970 	bl	80065b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e058      	b.n	8004394 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d124      	bne.n	800436c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004326:	2b03      	cmp	r3, #3
 8004328:	d107      	bne.n	800433a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004338:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	f47f ae88 	bne.w	8004086 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e000      	b.n	8004394 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3728      	adds	r7, #40	@ 0x28
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	00010004 	.word	0x00010004
 80043a0:	20000004 	.word	0x20000004
 80043a4:	14f8b589 	.word	0x14f8b589

080043a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	@ 0x28
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	460b      	mov	r3, r1
 80043b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80043b8:	f7fe ff6a 	bl	8003290 <HAL_GetTick>
 80043bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	f040 8111 	bne.w	80045f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2319      	movs	r3, #25
 80043d6:	2201      	movs	r2, #1
 80043d8:	4988      	ldr	r1, [pc, #544]	@ (80045fc <HAL_I2C_IsDeviceReady+0x254>)
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f001 ff10 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80043e6:	2302      	movs	r3, #2
 80043e8:	e104      	b.n	80045f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_I2C_IsDeviceReady+0x50>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e0fd      	b.n	80045f4 <HAL_I2C_IsDeviceReady+0x24c>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b01      	cmp	r3, #1
 800440c:	d007      	beq.n	800441e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800442c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2224      	movs	r2, #36	@ 0x24
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4a70      	ldr	r2, [pc, #448]	@ (8004600 <HAL_I2C_IsDeviceReady+0x258>)
 8004440:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004450:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2200      	movs	r2, #0
 800445a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f001 fece 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004478:	d103      	bne.n	8004482 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004480:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e0b6      	b.n	80045f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004486:	897b      	ldrh	r3, [r7, #10]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004494:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004496:	f7fe fefb 	bl	8003290 <HAL_GetTick>
 800449a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	bf0c      	ite	eq
 80044aa:	2301      	moveq	r3, #1
 80044ac:	2300      	movne	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044ca:	e025      	b.n	8004518 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044cc:	f7fe fee0 	bl	8003290 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <HAL_I2C_IsDeviceReady+0x13a>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	22a0      	movs	r2, #160	@ 0xa0
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800450e:	bf0c      	ite	eq
 8004510:	2301      	moveq	r3, #1
 8004512:	2300      	movne	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2ba0      	cmp	r3, #160	@ 0xa0
 8004522:	d005      	beq.n	8004530 <HAL_I2C_IsDeviceReady+0x188>
 8004524:	7dfb      	ldrb	r3, [r7, #23]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <HAL_I2C_IsDeviceReady+0x188>
 800452a:	7dbb      	ldrb	r3, [r7, #22]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0cd      	beq.n	80044cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d129      	bne.n	800459a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004554:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	2319      	movs	r3, #25
 8004572:	2201      	movs	r2, #1
 8004574:	4921      	ldr	r1, [pc, #132]	@ (80045fc <HAL_I2C_IsDeviceReady+0x254>)
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f001 fe42 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e036      	b.n	80045f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e02c      	b.n	80045f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2319      	movs	r3, #25
 80045ba:	2201      	movs	r2, #1
 80045bc:	490f      	ldr	r1, [pc, #60]	@ (80045fc <HAL_I2C_IsDeviceReady+0x254>)
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f001 fe1e 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e012      	b.n	80045f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	3301      	adds	r3, #1
 80045d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	429a      	cmp	r2, r3
 80045da:	f4ff af32 	bcc.w	8004442 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80045f2:	2302      	movs	r3, #2
  }
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3720      	adds	r7, #32
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	00100002 	.word	0x00100002
 8004600:	ffff0000 	.word	0xffff0000

08004604 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004624:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800462c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b10      	cmp	r3, #16
 8004632:	d003      	beq.n	800463c <HAL_I2C_EV_IRQHandler+0x38>
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b40      	cmp	r3, #64	@ 0x40
 8004638:	f040 80c1 	bne.w	80047be <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10d      	bne.n	8004672 <HAL_I2C_EV_IRQHandler+0x6e>
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800465c:	d003      	beq.n	8004666 <HAL_I2C_EV_IRQHandler+0x62>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004664:	d101      	bne.n	800466a <HAL_I2C_EV_IRQHandler+0x66>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <HAL_I2C_EV_IRQHandler+0x68>
 800466a:	2300      	movs	r3, #0
 800466c:	2b01      	cmp	r3, #1
 800466e:	f000 8132 	beq.w	80048d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00c      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x92>
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	0a5b      	lsrs	r3, r3, #9
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d006      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f002 f820 	bl	80066ce <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fd99 	bl	80051c6 <I2C_Master_SB>
 8004694:	e092      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	08db      	lsrs	r3, r3, #3
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0xb2>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	0a5b      	lsrs	r3, r3, #9
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fe0e 	bl	80052d0 <I2C_Master_ADD10>
 80046b4:	e082      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0xd2>
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	0a5b      	lsrs	r3, r3, #9
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fe27 	bl	8005322 <I2C_Master_ADDR>
 80046d4:	e072      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d03b      	beq.n	800475a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f0:	f000 80f3 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	09db      	lsrs	r3, r3, #7
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <HAL_I2C_EV_IRQHandler+0x11c>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	0a9b      	lsrs	r3, r3, #10
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <HAL_I2C_EV_IRQHandler+0x11c>
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f9f1 	bl	8004b00 <I2C_MasterTransmit_TXE>
 800471e:	e04d      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80d6 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	0a5b      	lsrs	r3, r3, #9
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80cf 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800473c:	7bbb      	ldrb	r3, [r7, #14]
 800473e:	2b21      	cmp	r3, #33	@ 0x21
 8004740:	d103      	bne.n	800474a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fa78 	bl	8004c38 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004748:	e0c7      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	2b40      	cmp	r3, #64	@ 0x40
 800474e:	f040 80c4 	bne.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fae6 	bl	8004d24 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004758:	e0bf      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004768:	f000 80b7 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	099b      	lsrs	r3, r3, #6
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00f      	beq.n	8004798 <HAL_I2C_EV_IRQHandler+0x194>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	0a9b      	lsrs	r3, r3, #10
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <HAL_I2C_EV_IRQHandler+0x194>
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fb5f 	bl	8004e54 <I2C_MasterReceive_RXNE>
 8004796:	e011      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 809a 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	0a5b      	lsrs	r3, r3, #9
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8093 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fc15 	bl	8004fe4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ba:	e08e      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
 80047bc:	e08d      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e007      	b.n	80047e0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d012      	beq.n	8004812 <HAL_I2C_EV_IRQHandler+0x20e>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	0a5b      	lsrs	r3, r3, #9
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00c      	beq.n	8004812 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 ffe0 	bl	80057d0 <I2C_Slave_ADDR>
 8004810:	e066      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_I2C_EV_IRQHandler+0x22e>
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	0a5b      	lsrs	r3, r3, #9
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 f81a 	bl	8005864 <I2C_Slave_STOPF>
 8004830:	e056      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004832:	7bbb      	ldrb	r3, [r7, #14]
 8004834:	2b21      	cmp	r3, #33	@ 0x21
 8004836:	d002      	beq.n	800483e <HAL_I2C_EV_IRQHandler+0x23a>
 8004838:	7bbb      	ldrb	r3, [r7, #14]
 800483a:	2b29      	cmp	r3, #41	@ 0x29
 800483c:	d125      	bne.n	800488a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	09db      	lsrs	r3, r3, #7
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00f      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0x266>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	0a9b      	lsrs	r3, r3, #10
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0x266>
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fef8 	bl	8005658 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004868:	e039      	b.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d033      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	0a5b      	lsrs	r3, r3, #9
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d02d      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 ff25 	bl	80056d2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004888:	e029      	b.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	099b      	lsrs	r3, r3, #6
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00f      	beq.n	80048b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	0a9b      	lsrs	r3, r3, #10
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 ff2f 	bl	8005712 <I2C_SlaveReceive_RXNE>
 80048b4:	e014      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00e      	beq.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	0a5b      	lsrs	r3, r3, #9
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 ff5d 	bl	800578e <I2C_SlaveReceive_BTF>
 80048d4:	e004      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b08a      	sub	sp, #40	@ 0x28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004908:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d016      	beq.n	8004944 <HAL_I2C_ER_IRQHandler+0x5e>
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d010      	beq.n	8004944 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004932:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004942:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	0a5b      	lsrs	r3, r3, #9
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00e      	beq.n	800496e <HAL_I2C_ER_IRQHandler+0x88>
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	f043 0302 	orr.w	r3, r3, #2
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800496c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	0a9b      	lsrs	r3, r3, #10
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d03f      	beq.n	80049fa <HAL_I2C_ER_IRQHandler+0x114>
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	0a1b      	lsrs	r3, r3, #8
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d039      	beq.n	80049fa <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004986:	7efb      	ldrb	r3, [r7, #27]
 8004988:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004998:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80049a0:	7ebb      	ldrb	r3, [r7, #26]
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d112      	bne.n	80049cc <HAL_I2C_ER_IRQHandler+0xe6>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10f      	bne.n	80049cc <HAL_I2C_ER_IRQHandler+0xe6>
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	2b21      	cmp	r3, #33	@ 0x21
 80049b0:	d008      	beq.n	80049c4 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	2b29      	cmp	r3, #41	@ 0x29
 80049b6:	d005      	beq.n	80049c4 <HAL_I2C_ER_IRQHandler+0xde>
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	2b28      	cmp	r3, #40	@ 0x28
 80049bc:	d106      	bne.n	80049cc <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b21      	cmp	r3, #33	@ 0x21
 80049c2:	d103      	bne.n	80049cc <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 f87d 	bl	8005ac4 <I2C_Slave_AF>
 80049ca:	e016      	b.n	80049fa <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049d4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	f043 0304 	orr.w	r3, r3, #4
 80049dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80049de:	7efb      	ldrb	r3, [r7, #27]
 80049e0:	2b10      	cmp	r3, #16
 80049e2:	d002      	beq.n	80049ea <HAL_I2C_ER_IRQHandler+0x104>
 80049e4:	7efb      	ldrb	r3, [r7, #27]
 80049e6:	2b40      	cmp	r3, #64	@ 0x40
 80049e8:	d107      	bne.n	80049fa <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	0adb      	lsrs	r3, r3, #11
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00e      	beq.n	8004a24 <HAL_I2C_ER_IRQHandler+0x13e>
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	f043 0308 	orr.w	r3, r3, #8
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004a22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f001 f8b8 	bl	8005bac <I2C_ITError>
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	3728      	adds	r7, #40	@ 0x28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr

08004a7a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr

08004a8c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70fb      	strb	r3, [r7, #3]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr

08004aee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d150      	bne.n	8004bc8 <I2C_MasterTransmit_TXE+0xc8>
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	2b21      	cmp	r3, #33	@ 0x21
 8004b2a:	d14d      	bne.n	8004bc8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d01d      	beq.n	8004b6e <I2C_MasterTransmit_TXE+0x6e>
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d01a      	beq.n	8004b6e <I2C_MasterTransmit_TXE+0x6e>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b3e:	d016      	beq.n	8004b6e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b4e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2211      	movs	r2, #17
 8004b54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff ff6c 	bl	8004a44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b6c:	e060      	b.n	8004c30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b7c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b8c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b40      	cmp	r3, #64	@ 0x40
 8004ba6:	d107      	bne.n	8004bb8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ff81 	bl	8004ab8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bb6:	e03b      	b.n	8004c30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff ff3f 	bl	8004a44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bc6:	e033      	b.n	8004c30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	2b21      	cmp	r3, #33	@ 0x21
 8004bcc:	d005      	beq.n	8004bda <I2C_MasterTransmit_TXE+0xda>
 8004bce:	7bbb      	ldrb	r3, [r7, #14]
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	d12d      	bne.n	8004c30 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b22      	cmp	r3, #34	@ 0x22
 8004bd8:	d12a      	bne.n	8004c30 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d108      	bne.n	8004bf6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004bf4:	e01c      	b.n	8004c30 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b40      	cmp	r3, #64	@ 0x40
 8004c00:	d103      	bne.n	8004c0a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f88e 	bl	8004d24 <I2C_MemoryTransmit_TXE_BTF>
}
 8004c08:	e012      	b.n	8004c30 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	781a      	ldrb	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c2e:	e7ff      	b.n	8004c30 <I2C_MasterTransmit_TXE+0x130>
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b21      	cmp	r3, #33	@ 0x21
 8004c50:	d164      	bne.n	8004d1c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d012      	beq.n	8004c82 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c60:	781a      	ldrb	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c80:	e04c      	b.n	8004d1c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d01d      	beq.n	8004cc4 <I2C_MasterTransmit_BTF+0x8c>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d01a      	beq.n	8004cc4 <I2C_MasterTransmit_BTF+0x8c>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c94:	d016      	beq.n	8004cc4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ca4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2211      	movs	r2, #17
 8004caa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fec1 	bl	8004a44 <HAL_I2C_MasterTxCpltCallback>
}
 8004cc2:	e02b      	b.n	8004d1c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cd2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b40      	cmp	r3, #64	@ 0x40
 8004cfc:	d107      	bne.n	8004d0e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fed6 	bl	8004ab8 <HAL_I2C_MemTxCpltCallback>
}
 8004d0c:	e006      	b.n	8004d1c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff fe94 	bl	8004a44 <HAL_I2C_MasterTxCpltCallback>
}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11d      	bne.n	8004d78 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d10b      	bne.n	8004d5c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d54:	1c9a      	adds	r2, r3, #2
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004d5a:	e077      	b.n	8004e4c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	121b      	asrs	r3, r3, #8
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d76:	e069      	b.n	8004e4c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d10b      	bne.n	8004d98 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d96:	e059      	b.n	8004e4c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d152      	bne.n	8004e46 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b22      	cmp	r3, #34	@ 0x22
 8004da4:	d10d      	bne.n	8004dc2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004db4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004dc0:	e044      	b.n	8004e4c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d015      	beq.n	8004df8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b21      	cmp	r3, #33	@ 0x21
 8004dd0:	d112      	bne.n	8004df8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	781a      	ldrb	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004df6:	e029      	b.n	8004e4c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d124      	bne.n	8004e4c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b21      	cmp	r3, #33	@ 0x21
 8004e06:	d121      	bne.n	8004e4c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e16:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff fe3a 	bl	8004ab8 <HAL_I2C_MemTxCpltCallback>
}
 8004e44:	e002      	b.n	8004e4c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fe ff30 	bl	8003cac <I2C_Flush_DR>
}
 8004e4c:	bf00      	nop
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b22      	cmp	r3, #34	@ 0x22
 8004e66:	f040 80b9 	bne.w	8004fdc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d921      	bls.n	8004ec2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	f040 8096 	bne.w	8004fdc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ebe:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004ec0:	e08c      	b.n	8004fdc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d07f      	beq.n	8004fca <I2C_MasterReceive_RXNE+0x176>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d002      	beq.n	8004ed6 <I2C_MasterReceive_RXNE+0x82>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d179      	bne.n	8004fca <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f001 fb3c 	bl	8006554 <I2C_WaitOnSTOPRequestThroughIT>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d14c      	bne.n	8004f7c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ef0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f00:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b40      	cmp	r3, #64	@ 0x40
 8004f3a:	d10a      	bne.n	8004f52 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fdbd 	bl	8004aca <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f50:	e044      	b.n	8004fdc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d002      	beq.n	8004f66 <I2C_MasterReceive_RXNE+0x112>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d103      	bne.n	8004f6e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f6c:	e002      	b.n	8004f74 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2212      	movs	r2, #18
 8004f72:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fd6e 	bl	8004a56 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f7a:	e02f      	b.n	8004fdc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f8a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fd8a 	bl	8004adc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fc8:	e008      	b.n	8004fdc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd8:	605a      	str	r2, [r3, #4]
}
 8004fda:	e7ff      	b.n	8004fdc <I2C_MasterReceive_RXNE+0x188>
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d11b      	bne.n	8005034 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800500a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005032:	e0c4      	b.n	80051be <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b03      	cmp	r3, #3
 800503c:	d129      	bne.n	8005092 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800504c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b04      	cmp	r3, #4
 8005052:	d00a      	beq.n	800506a <I2C_MasterReceive_BTF+0x86>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d007      	beq.n	800506a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005068:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005090:	e095      	b.n	80051be <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d17d      	bne.n	8005198 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d002      	beq.n	80050a8 <I2C_MasterReceive_BTF+0xc4>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b10      	cmp	r3, #16
 80050a6:	d108      	bne.n	80050ba <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	e016      	b.n	80050e8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d002      	beq.n	80050c6 <I2C_MasterReceive_BTF+0xe2>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d108      	bne.n	80050d8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e007      	b.n	80050e8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005142:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b40      	cmp	r3, #64	@ 0x40
 8005156:	d10a      	bne.n	800516e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff fcaf 	bl	8004aca <HAL_I2C_MemRxCpltCallback>
}
 800516c:	e027      	b.n	80051be <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b08      	cmp	r3, #8
 800517a:	d002      	beq.n	8005182 <I2C_MasterReceive_BTF+0x19e>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b20      	cmp	r3, #32
 8005180:	d103      	bne.n	800518a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	@ 0x30
 8005188:	e002      	b.n	8005190 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2212      	movs	r2, #18
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fc60 	bl	8004a56 <HAL_I2C_MasterRxCpltCallback>
}
 8005196:	e012      	b.n	80051be <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b40      	cmp	r3, #64	@ 0x40
 80051d8:	d117      	bne.n	800520a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051f2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80051f4:	e067      	b.n	80052c6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	b2da      	uxtb	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	611a      	str	r2, [r3, #16]
}
 8005208:	e05d      	b.n	80052c6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005212:	d133      	bne.n	800527c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b21      	cmp	r3, #33	@ 0x21
 800521e:	d109      	bne.n	8005234 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005230:	611a      	str	r2, [r3, #16]
 8005232:	e008      	b.n	8005246 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005238:	b2db      	uxtb	r3, r3
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524a:	2b00      	cmp	r3, #0
 800524c:	d004      	beq.n	8005258 <I2C_Master_SB+0x92>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005254:	2b00      	cmp	r3, #0
 8005256:	d108      	bne.n	800526a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	d032      	beq.n	80052c6 <I2C_Master_SB+0x100>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005266:	2b00      	cmp	r3, #0
 8005268:	d02d      	beq.n	80052c6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005278:	605a      	str	r2, [r3, #4]
}
 800527a:	e024      	b.n	80052c6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10e      	bne.n	80052a2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005288:	b29b      	uxth	r3, r3
 800528a:	11db      	asrs	r3, r3, #7
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 0306 	and.w	r3, r3, #6
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f063 030f 	orn	r3, r3, #15
 8005298:	b2da      	uxtb	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	611a      	str	r2, [r3, #16]
}
 80052a0:	e011      	b.n	80052c6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d10d      	bne.n	80052c6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	11db      	asrs	r3, r3, #7
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f003 0306 	and.w	r3, r3, #6
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f063 030e 	orn	r3, r3, #14
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	611a      	str	r2, [r3, #16]
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr

080052d0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d004      	beq.n	80052f6 <I2C_Master_ADD10+0x26>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d108      	bne.n	8005308 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00c      	beq.n	8005318 <I2C_Master_ADD10+0x48>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005316:	605a      	str	r2, [r3, #4]
  }
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005322:	b480      	push	{r7}
 8005324:	b091      	sub	sp, #68	@ 0x44
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005330:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b22      	cmp	r3, #34	@ 0x22
 800534a:	f040 8174 	bne.w	8005636 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10f      	bne.n	8005376 <I2C_Master_ADDR+0x54>
 8005356:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800535a:	2b40      	cmp	r3, #64	@ 0x40
 800535c:	d10b      	bne.n	8005376 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800535e:	2300      	movs	r3, #0
 8005360:	633b      	str	r3, [r7, #48]	@ 0x30
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	633b      	str	r3, [r7, #48]	@ 0x30
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	633b      	str	r3, [r7, #48]	@ 0x30
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	e16b      	b.n	800564e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800537a:	2b00      	cmp	r3, #0
 800537c:	d11d      	bne.n	80053ba <I2C_Master_ADDR+0x98>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005386:	d118      	bne.n	80053ba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005388:	2300      	movs	r3, #0
 800538a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800539c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053ac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80053b8:	e149      	b.n	800564e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d113      	bne.n	80053ec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c4:	2300      	movs	r3, #0
 80053c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e120      	b.n	800562e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	f040 808a 	bne.w	800550c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80053f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053fe:	d137      	bne.n	8005470 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800540e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800541a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800541e:	d113      	bne.n	8005448 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800542e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005430:	2300      	movs	r3, #0
 8005432:	627b      	str	r3, [r7, #36]	@ 0x24
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	627b      	str	r3, [r7, #36]	@ 0x24
 8005444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005446:	e0f2      	b.n	800562e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005448:	2300      	movs	r3, #0
 800544a:	623b      	str	r3, [r7, #32]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	623b      	str	r3, [r7, #32]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	623b      	str	r3, [r7, #32]
 800545c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e0de      	b.n	800562e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005472:	2b08      	cmp	r3, #8
 8005474:	d02e      	beq.n	80054d4 <I2C_Master_ADDR+0x1b2>
 8005476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005478:	2b20      	cmp	r3, #32
 800547a:	d02b      	beq.n	80054d4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800547c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547e:	2b12      	cmp	r3, #18
 8005480:	d102      	bne.n	8005488 <I2C_Master_ADDR+0x166>
 8005482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005484:	2b01      	cmp	r3, #1
 8005486:	d125      	bne.n	80054d4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548a:	2b04      	cmp	r3, #4
 800548c:	d00e      	beq.n	80054ac <I2C_Master_ADDR+0x18a>
 800548e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005490:	2b02      	cmp	r3, #2
 8005492:	d00b      	beq.n	80054ac <I2C_Master_ADDR+0x18a>
 8005494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005496:	2b10      	cmp	r3, #16
 8005498:	d008      	beq.n	80054ac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e007      	b.n	80054bc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054ba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054bc:	2300      	movs	r3, #0
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	e0ac      	b.n	800562e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e090      	b.n	800562e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d158      	bne.n	80055c8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005518:	2b04      	cmp	r3, #4
 800551a:	d021      	beq.n	8005560 <I2C_Master_ADDR+0x23e>
 800551c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551e:	2b02      	cmp	r3, #2
 8005520:	d01e      	beq.n	8005560 <I2C_Master_ADDR+0x23e>
 8005522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005524:	2b10      	cmp	r3, #16
 8005526:	d01b      	beq.n	8005560 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005536:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e012      	b.n	8005586 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800556e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005594:	d14b      	bne.n	800562e <I2C_Master_ADDR+0x30c>
 8005596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005598:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800559c:	d00b      	beq.n	80055b6 <I2C_Master_ADDR+0x294>
 800559e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d008      	beq.n	80055b6 <I2C_Master_ADDR+0x294>
 80055a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d005      	beq.n	80055b6 <I2C_Master_ADDR+0x294>
 80055aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d002      	beq.n	80055b6 <I2C_Master_ADDR+0x294>
 80055b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d13b      	bne.n	800562e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055c4:	605a      	str	r2, [r3, #4]
 80055c6:	e032      	b.n	800562e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055d6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055e6:	d117      	bne.n	8005618 <I2C_Master_ADDR+0x2f6>
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055ee:	d00b      	beq.n	8005608 <I2C_Master_ADDR+0x2e6>
 80055f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d008      	beq.n	8005608 <I2C_Master_ADDR+0x2e6>
 80055f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d005      	beq.n	8005608 <I2C_Master_ADDR+0x2e6>
 80055fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fe:	2b10      	cmp	r3, #16
 8005600:	d002      	beq.n	8005608 <I2C_Master_ADDR+0x2e6>
 8005602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005604:	2b20      	cmp	r3, #32
 8005606:	d107      	bne.n	8005618 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005616:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005618:	2300      	movs	r3, #0
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005634:	e00b      	b.n	800564e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	60bb      	str	r3, [r7, #8]
 800564a:	68bb      	ldr	r3, [r7, #8]
}
 800564c:	e7ff      	b.n	800564e <I2C_Master_ADDR+0x32c>
 800564e:	bf00      	nop
 8005650:	3744      	adds	r7, #68	@ 0x44
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005666:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d02b      	beq.n	80056ca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005676:	781a      	ldrb	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d114      	bne.n	80056ca <I2C_SlaveTransmit_TXE+0x72>
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	2b29      	cmp	r3, #41	@ 0x29
 80056a4:	d111      	bne.n	80056ca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2221      	movs	r2, #33	@ 0x21
 80056ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2228      	movs	r2, #40	@ 0x28
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff f9cf 	bl	8004a68 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d011      	beq.n	8005708 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr

08005712 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005720:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d02c      	beq.n	8005786 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d114      	bne.n	8005786 <I2C_SlaveReceive_RXNE+0x74>
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005760:	d111      	bne.n	8005786 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005770:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2222      	movs	r2, #34	@ 0x22
 8005776:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2228      	movs	r2, #40	@ 0x28
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff f97a 	bl	8004a7a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d012      	beq.n	80057c6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057ea:	2b28      	cmp	r3, #40	@ 0x28
 80057ec:	d127      	bne.n	800583e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057fc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	089b      	lsrs	r3, r3, #2
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800580a:	2301      	movs	r3, #1
 800580c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	09db      	lsrs	r3, r3, #7
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	81bb      	strh	r3, [r7, #12]
 8005820:	e002      	b.n	8005828 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005830:	89ba      	ldrh	r2, [r7, #12]
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff f928 	bl	8004a8c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800583c:	e00e      	b.n	800585c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005872:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005882:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005884:	2300      	movs	r3, #0
 8005886:	60bb      	str	r3, [r7, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	60bb      	str	r3, [r7, #8]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058c0:	d172      	bne.n	80059a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b22      	cmp	r3, #34	@ 0x22
 80058c6:	d002      	beq.n	80058ce <I2C_Slave_STOPF+0x6a>
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80058cc:	d135      	bne.n	800593a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ea:	f043 0204 	orr.w	r2, r3, #4
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005900:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005906:	4618      	mov	r0, r3
 8005908:	f7fd feb0 	bl	800366c <HAL_DMA_GetState>
 800590c:	4603      	mov	r3, r0
 800590e:	2b01      	cmp	r3, #1
 8005910:	d049      	beq.n	80059a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005916:	4a69      	ldr	r2, [pc, #420]	@ (8005abc <I2C_Slave_STOPF+0x258>)
 8005918:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591e:	4618      	mov	r0, r3
 8005920:	f7fd fe2c 	bl	800357c <HAL_DMA_Abort_IT>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d03d      	beq.n	80059a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005934:	4610      	mov	r0, r2
 8005936:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005938:	e035      	b.n	80059a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	b29a      	uxth	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	f043 0204 	orr.w	r2, r3, #4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800596c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd fe7a 	bl	800366c <HAL_DMA_GetState>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d014      	beq.n	80059a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005982:	4a4e      	ldr	r2, [pc, #312]	@ (8005abc <I2C_Slave_STOPF+0x258>)
 8005984:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598a:	4618      	mov	r0, r3
 800598c:	f7fd fdf6 	bl	800357c <HAL_DMA_Abort_IT>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d008      	beq.n	80059a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800599a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059a0:	4610      	mov	r0, r2
 80059a2:	4798      	blx	r3
 80059a4:	e000      	b.n	80059a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d03e      	beq.n	8005a30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d112      	bne.n	80059e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	d112      	bne.n	8005a1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a28:	f043 0204 	orr.w	r2, r3, #4
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f8b7 	bl	8005bac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a3e:	e039      	b.n	8005ab4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a44:	d109      	bne.n	8005a5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2228      	movs	r2, #40	@ 0x28
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff f810 	bl	8004a7a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b28      	cmp	r3, #40	@ 0x28
 8005a64:	d111      	bne.n	8005a8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <I2C_Slave_STOPF+0x25c>)
 8005a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff f80f 	bl	8004aa6 <HAL_I2C_ListenCpltCallback>
}
 8005a88:	e014      	b.n	8005ab4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	2b22      	cmp	r3, #34	@ 0x22
 8005a90:	d002      	beq.n	8005a98 <I2C_Slave_STOPF+0x234>
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	2b22      	cmp	r3, #34	@ 0x22
 8005a96:	d10d      	bne.n	8005ab4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fe ffe3 	bl	8004a7a <HAL_I2C_SlaveRxCpltCallback>
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	080060b1 	.word	0x080060b1
 8005ac0:	ffff0000 	.word	0xffff0000

08005ac4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d002      	beq.n	8005ae6 <I2C_Slave_AF+0x22>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d129      	bne.n	8005b3a <I2C_Slave_AF+0x76>
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	2b28      	cmp	r3, #40	@ 0x28
 8005aea:	d126      	bne.n	8005b3a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba8 <I2C_Slave_AF+0xe4>)
 8005af0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b00:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b0a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b1a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fe ffb7 	bl	8004aa6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005b38:	e031      	b.n	8005b9e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	2b21      	cmp	r3, #33	@ 0x21
 8005b3e:	d129      	bne.n	8005b94 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a19      	ldr	r2, [pc, #100]	@ (8005ba8 <I2C_Slave_AF+0xe4>)
 8005b44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2221      	movs	r2, #33	@ 0x21
 8005b4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b6a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b74:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b84:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fe f890 	bl	8003cac <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fe ff6b 	bl	8004a68 <HAL_I2C_SlaveTxCpltCallback>
}
 8005b92:	e004      	b.n	8005b9e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b9c:	615a      	str	r2, [r3, #20]
}
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	ffff0000 	.word	0xffff0000

08005bac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	2b10      	cmp	r3, #16
 8005bc8:	d002      	beq.n	8005bd0 <I2C_ITError+0x24>
 8005bca:	7bbb      	ldrb	r3, [r7, #14]
 8005bcc:	2b40      	cmp	r3, #64	@ 0x40
 8005bce:	d10a      	bne.n	8005be6 <I2C_ITError+0x3a>
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	2b22      	cmp	r3, #34	@ 0x22
 8005bd4:	d107      	bne.n	8005be6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005be4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005bec:	2b28      	cmp	r3, #40	@ 0x28
 8005bee:	d107      	bne.n	8005c00 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2228      	movs	r2, #40	@ 0x28
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005bfe:	e015      	b.n	8005c2c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c0e:	d00a      	beq.n	8005c26 <I2C_ITError+0x7a>
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b60      	cmp	r3, #96	@ 0x60
 8005c14:	d007      	beq.n	8005c26 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c3a:	d162      	bne.n	8005d02 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c4a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d020      	beq.n	8005c9c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c5e:	4a6a      	ldr	r2, [pc, #424]	@ (8005e08 <I2C_ITError+0x25c>)
 8005c60:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fd fc88 	bl	800357c <HAL_DMA_Abort_IT>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8089 	beq.w	8005d86 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c96:	4610      	mov	r0, r2
 8005c98:	4798      	blx	r3
 8005c9a:	e074      	b.n	8005d86 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca0:	4a59      	ldr	r2, [pc, #356]	@ (8005e08 <I2C_ITError+0x25c>)
 8005ca2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fd fc67 	bl	800357c <HAL_DMA_Abort_IT>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d068      	beq.n	8005d86 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbe:	2b40      	cmp	r3, #64	@ 0x40
 8005cc0:	d10b      	bne.n	8005cda <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
 8005d00:	e041      	b.n	8005d86 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b60      	cmp	r3, #96	@ 0x60
 8005d0c:	d125      	bne.n	8005d5a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d26:	2b40      	cmp	r3, #64	@ 0x40
 8005d28:	d10b      	bne.n	8005d42 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fe fecb 	bl	8004aee <HAL_I2C_AbortCpltCallback>
 8005d58:	e015      	b.n	8005d86 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d64:	2b40      	cmp	r3, #64	@ 0x40
 8005d66:	d10b      	bne.n	8005d80 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fe feab 	bl	8004adc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10e      	bne.n	8005db4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d109      	bne.n	8005db4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d007      	beq.n	8005dc4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005dc2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d113      	bne.n	8005e00 <I2C_ITError+0x254>
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	2b28      	cmp	r3, #40	@ 0x28
 8005ddc:	d110      	bne.n	8005e00 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	@ (8005e0c <I2C_ITError+0x260>)
 8005de2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fe fe53 	bl	8004aa6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	080060b1 	.word	0x080060b1
 8005e0c:	ffff0000 	.word	0xffff0000

08005e10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	607a      	str	r2, [r7, #4]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d006      	beq.n	8005e3a <I2C_MasterRequestWrite+0x2a>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d003      	beq.n	8005e3a <I2C_MasterRequestWrite+0x2a>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e38:	d108      	bne.n	8005e4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e00b      	b.n	8005e64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e50:	2b12      	cmp	r3, #18
 8005e52:	d107      	bne.n	8005e64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f9c5 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00d      	beq.n	8005e98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e8a:	d103      	bne.n	8005e94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e035      	b.n	8005f04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ea0:	d108      	bne.n	8005eb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ea2:	897b      	ldrh	r3, [r7, #10]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005eb0:	611a      	str	r2, [r3, #16]
 8005eb2:	e01b      	b.n	8005eec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005eb4:	897b      	ldrh	r3, [r7, #10]
 8005eb6:	11db      	asrs	r3, r3, #7
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 0306 	and.w	r3, r3, #6
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f063 030f 	orn	r3, r3, #15
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	490e      	ldr	r1, [pc, #56]	@ (8005f0c <I2C_MasterRequestWrite+0xfc>)
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 fa0e 	bl	80062f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e010      	b.n	8005f04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ee2:	897b      	ldrh	r3, [r7, #10]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	4907      	ldr	r1, [pc, #28]	@ (8005f10 <I2C_MasterRequestWrite+0x100>)
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f9fe 	bl	80062f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	00010008 	.word	0x00010008
 8005f10:	00010002 	.word	0x00010002

08005f14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	460b      	mov	r3, r1
 8005f22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d006      	beq.n	8005f4e <I2C_MasterRequestRead+0x3a>
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d003      	beq.n	8005f4e <I2C_MasterRequestRead+0x3a>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f4c:	d108      	bne.n	8005f60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	e00b      	b.n	8005f78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f64:	2b11      	cmp	r3, #17
 8005f66:	d107      	bne.n	8005f78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f93b 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00d      	beq.n	8005fac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f9e:	d103      	bne.n	8005fa8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fa6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e079      	b.n	80060a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fb4:	d108      	bne.n	8005fc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fb6:	897b      	ldrh	r3, [r7, #10]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	611a      	str	r2, [r3, #16]
 8005fc6:	e05f      	b.n	8006088 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005fc8:	897b      	ldrh	r3, [r7, #10]
 8005fca:	11db      	asrs	r3, r3, #7
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 0306 	and.w	r3, r3, #6
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f063 030f 	orn	r3, r3, #15
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4930      	ldr	r1, [pc, #192]	@ (80060a8 <I2C_MasterRequestRead+0x194>)
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f984 	bl	80062f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e054      	b.n	80060a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ff6:	897b      	ldrh	r3, [r7, #10]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	4929      	ldr	r1, [pc, #164]	@ (80060ac <I2C_MasterRequestRead+0x198>)
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f974 	bl	80062f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e044      	b.n	80060a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800603a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f8d9 	bl	8006200 <I2C_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00d      	beq.n	8006070 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006062:	d103      	bne.n	800606c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800606a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e017      	b.n	80060a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006070:	897b      	ldrh	r3, [r7, #10]
 8006072:	11db      	asrs	r3, r3, #7
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f003 0306 	and.w	r3, r3, #6
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f063 030e 	orn	r3, r3, #14
 8006080:	b2da      	uxtb	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	4907      	ldr	r1, [pc, #28]	@ (80060ac <I2C_MasterRequestRead+0x198>)
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f930 	bl	80062f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	00010008 	.word	0x00010008
 80060ac:	00010002 	.word	0x00010002

080060b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80060ca:	4b4b      	ldr	r3, [pc, #300]	@ (80061f8 <I2C_DMAAbort+0x148>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	4a4a      	ldr	r2, [pc, #296]	@ (80061fc <I2C_DMAAbort+0x14c>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	0a1a      	lsrs	r2, r3, #8
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	00da      	lsls	r2, r3, #3
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ee:	f043 0220 	orr.w	r2, r3, #32
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80060f6:	e00a      	b.n	800610e <I2C_DMAAbort+0x5e>
    }
    count--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800610c:	d0ea      	beq.n	80060e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800611a:	2200      	movs	r2, #0
 800611c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612a:	2200      	movs	r2, #0
 800612c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800613c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2200      	movs	r2, #0
 8006142:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006150:	2200      	movs	r2, #0
 8006152:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006160:	2200      	movs	r2, #0
 8006162:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b60      	cmp	r3, #96	@ 0x60
 800617e:	d10e      	bne.n	800619e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2200      	movs	r2, #0
 8006194:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006196:	6978      	ldr	r0, [r7, #20]
 8006198:	f7fe fca9 	bl	8004aee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800619c:	e027      	b.n	80061ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800619e:	7cfb      	ldrb	r3, [r7, #19]
 80061a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80061a4:	2b28      	cmp	r3, #40	@ 0x28
 80061a6:	d117      	bne.n	80061d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2200      	movs	r2, #0
 80061cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2228      	movs	r2, #40	@ 0x28
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80061d6:	e007      	b.n	80061e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80061e8:	6978      	ldr	r0, [r7, #20]
 80061ea:	f7fe fc77 	bl	8004adc <HAL_I2C_ErrorCallback>
}
 80061ee:	bf00      	nop
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000004 	.word	0x20000004
 80061fc:	14f8b589 	.word	0x14f8b589

08006200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006210:	e048      	b.n	80062a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d044      	beq.n	80062a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800621a:	f7fd f839 	bl	8003290 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d302      	bcc.n	8006230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d139      	bne.n	80062a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	0c1b      	lsrs	r3, r3, #16
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b01      	cmp	r3, #1
 8006238:	d10d      	bne.n	8006256 <I2C_WaitOnFlagUntilTimeout+0x56>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	43da      	mvns	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4013      	ands	r3, r2
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	bf0c      	ite	eq
 800624c:	2301      	moveq	r3, #1
 800624e:	2300      	movne	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	e00c      	b.n	8006270 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	43da      	mvns	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4013      	ands	r3, r2
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	bf0c      	ite	eq
 8006268:	2301      	moveq	r3, #1
 800626a:	2300      	movne	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	429a      	cmp	r2, r3
 8006274:	d116      	bne.n	80062a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e023      	b.n	80062ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	0c1b      	lsrs	r3, r3, #16
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d10d      	bne.n	80062ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	43da      	mvns	r2, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4013      	ands	r3, r2
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	461a      	mov	r2, r3
 80062c8:	e00c      	b.n	80062e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	43da      	mvns	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4013      	ands	r3, r2
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bf0c      	ite	eq
 80062dc:	2301      	moveq	r3, #1
 80062de:	2300      	movne	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d093      	beq.n	8006212 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006302:	e071      	b.n	80063e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800630e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006312:	d123      	bne.n	800635c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006322:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800632c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006348:	f043 0204 	orr.w	r2, r3, #4
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e067      	b.n	800642c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	d041      	beq.n	80063e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006364:	f7fc ff94 	bl	8003290 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	d302      	bcc.n	800637a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d136      	bne.n	80063e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b01      	cmp	r3, #1
 8006382:	d10c      	bne.n	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	43da      	mvns	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4013      	ands	r3, r2
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	bf14      	ite	ne
 8006396:	2301      	movne	r3, #1
 8006398:	2300      	moveq	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	e00b      	b.n	80063b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	43da      	mvns	r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	4013      	ands	r3, r2
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bf14      	ite	ne
 80063b0:	2301      	movne	r3, #1
 80063b2:	2300      	moveq	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d016      	beq.n	80063e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d4:	f043 0220 	orr.w	r2, r3, #32
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e021      	b.n	800642c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	0c1b      	lsrs	r3, r3, #16
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d10c      	bne.n	800640c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	43da      	mvns	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	4013      	ands	r3, r2
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	bf14      	ite	ne
 8006404:	2301      	movne	r3, #1
 8006406:	2300      	moveq	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	e00b      	b.n	8006424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	43da      	mvns	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4013      	ands	r3, r2
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	bf14      	ite	ne
 800641e:	2301      	movne	r3, #1
 8006420:	2300      	moveq	r3, #0
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	f47f af6d 	bne.w	8006304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006440:	e034      	b.n	80064ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f915 	bl	8006672 <I2C_IsAcknowledgeFailed>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e034      	b.n	80064bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d028      	beq.n	80064ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645a:	f7fc ff19 	bl	8003290 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	429a      	cmp	r2, r3
 8006468:	d302      	bcc.n	8006470 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d11d      	bne.n	80064ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647a:	2b80      	cmp	r3, #128	@ 0x80
 800647c:	d016      	beq.n	80064ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006498:	f043 0220 	orr.w	r2, r3, #32
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e007      	b.n	80064bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b6:	2b80      	cmp	r3, #128	@ 0x80
 80064b8:	d1c3      	bne.n	8006442 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064d0:	e034      	b.n	800653c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 f8cd 	bl	8006672 <I2C_IsAcknowledgeFailed>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e034      	b.n	800654c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d028      	beq.n	800653c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ea:	f7fc fed1 	bl	8003290 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d302      	bcc.n	8006500 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11d      	bne.n	800653c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b04      	cmp	r3, #4
 800650c:	d016      	beq.n	800653c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	f043 0220 	orr.w	r2, r3, #32
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e007      	b.n	800654c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b04      	cmp	r3, #4
 8006548:	d1c3      	bne.n	80064d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006560:	4b13      	ldr	r3, [pc, #76]	@ (80065b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	08db      	lsrs	r3, r3, #3
 8006566:	4a13      	ldr	r2, [pc, #76]	@ (80065b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006568:	fba2 2303 	umull	r2, r3, r2, r3
 800656c:	0a1a      	lsrs	r2, r3, #8
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3b01      	subs	r3, #1
 800657a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d107      	bne.n	8006592 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006586:	f043 0220 	orr.w	r2, r3, #32
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e008      	b.n	80065a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800659c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a0:	d0e9      	beq.n	8006576 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000004 	.word	0x20000004
 80065b4:	14f8b589 	.word	0x14f8b589

080065b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065c4:	e049      	b.n	800665a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d119      	bne.n	8006608 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0210 	mvn.w	r2, #16
 80065dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e030      	b.n	800666a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006608:	f7fc fe42 	bl	8003290 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	429a      	cmp	r2, r3
 8006616:	d302      	bcc.n	800661e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d11d      	bne.n	800665a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006628:	2b40      	cmp	r3, #64	@ 0x40
 800662a:	d016      	beq.n	800665a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	f043 0220 	orr.w	r2, r3, #32
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e007      	b.n	800666a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006664:	2b40      	cmp	r3, #64	@ 0x40
 8006666:	d1ae      	bne.n	80065c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006684:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006688:	d11b      	bne.n	80066c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006692:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ae:	f043 0204 	orr.w	r2, r3, #4
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e000      	b.n	80066c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr

080066ce <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80066de:	d103      	bne.n	80066e8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80066e6:	e007      	b.n	80066f8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80066f0:	d102      	bne.n	80066f8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2208      	movs	r2, #8
 80066f6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr
	...

08006704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e272      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 8087 	beq.w	8006832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006724:	4b92      	ldr	r3, [pc, #584]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f003 030c 	and.w	r3, r3, #12
 800672c:	2b04      	cmp	r3, #4
 800672e:	d00c      	beq.n	800674a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006730:	4b8f      	ldr	r3, [pc, #572]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f003 030c 	and.w	r3, r3, #12
 8006738:	2b08      	cmp	r3, #8
 800673a:	d112      	bne.n	8006762 <HAL_RCC_OscConfig+0x5e>
 800673c:	4b8c      	ldr	r3, [pc, #560]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006748:	d10b      	bne.n	8006762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800674a:	4b89      	ldr	r3, [pc, #548]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d06c      	beq.n	8006830 <HAL_RCC_OscConfig+0x12c>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d168      	bne.n	8006830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e24c      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800676a:	d106      	bne.n	800677a <HAL_RCC_OscConfig+0x76>
 800676c:	4b80      	ldr	r3, [pc, #512]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a7f      	ldr	r2, [pc, #508]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 8006772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	e02e      	b.n	80067d8 <HAL_RCC_OscConfig+0xd4>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10c      	bne.n	800679c <HAL_RCC_OscConfig+0x98>
 8006782:	4b7b      	ldr	r3, [pc, #492]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a7a      	ldr	r2, [pc, #488]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 8006788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	4b78      	ldr	r3, [pc, #480]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a77      	ldr	r2, [pc, #476]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 8006794:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e01d      	b.n	80067d8 <HAL_RCC_OscConfig+0xd4>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067a4:	d10c      	bne.n	80067c0 <HAL_RCC_OscConfig+0xbc>
 80067a6:	4b72      	ldr	r3, [pc, #456]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a71      	ldr	r2, [pc, #452]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80067ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	4b6f      	ldr	r3, [pc, #444]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a6e      	ldr	r2, [pc, #440]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80067b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	e00b      	b.n	80067d8 <HAL_RCC_OscConfig+0xd4>
 80067c0:	4b6b      	ldr	r3, [pc, #428]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a6a      	ldr	r2, [pc, #424]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80067c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	4b68      	ldr	r3, [pc, #416]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a67      	ldr	r2, [pc, #412]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80067d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d013      	beq.n	8006808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e0:	f7fc fd56 	bl	8003290 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067e8:	f7fc fd52 	bl	8003290 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b64      	cmp	r3, #100	@ 0x64
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e200      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fa:	4b5d      	ldr	r3, [pc, #372]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0f0      	beq.n	80067e8 <HAL_RCC_OscConfig+0xe4>
 8006806:	e014      	b.n	8006832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006808:	f7fc fd42 	bl	8003290 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006810:	f7fc fd3e 	bl	8003290 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b64      	cmp	r3, #100	@ 0x64
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e1ec      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006822:	4b53      	ldr	r3, [pc, #332]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1f0      	bne.n	8006810 <HAL_RCC_OscConfig+0x10c>
 800682e:	e000      	b.n	8006832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d063      	beq.n	8006906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800683e:	4b4c      	ldr	r3, [pc, #304]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f003 030c 	and.w	r3, r3, #12
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800684a:	4b49      	ldr	r3, [pc, #292]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f003 030c 	and.w	r3, r3, #12
 8006852:	2b08      	cmp	r3, #8
 8006854:	d11c      	bne.n	8006890 <HAL_RCC_OscConfig+0x18c>
 8006856:	4b46      	ldr	r3, [pc, #280]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d116      	bne.n	8006890 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006862:	4b43      	ldr	r3, [pc, #268]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_RCC_OscConfig+0x176>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d001      	beq.n	800687a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e1c0      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687a:	4b3d      	ldr	r3, [pc, #244]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	4939      	ldr	r1, [pc, #228]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 800688a:	4313      	orrs	r3, r2
 800688c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800688e:	e03a      	b.n	8006906 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d020      	beq.n	80068da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006898:	4b36      	ldr	r3, [pc, #216]	@ (8006974 <HAL_RCC_OscConfig+0x270>)
 800689a:	2201      	movs	r2, #1
 800689c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800689e:	f7fc fcf7 	bl	8003290 <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068a6:	f7fc fcf3 	bl	8003290 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e1a1      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0f0      	beq.n	80068a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	4927      	ldr	r1, [pc, #156]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	600b      	str	r3, [r1, #0]
 80068d8:	e015      	b.n	8006906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068da:	4b26      	ldr	r3, [pc, #152]	@ (8006974 <HAL_RCC_OscConfig+0x270>)
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e0:	f7fc fcd6 	bl	8003290 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068e8:	f7fc fcd2 	bl	8003290 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e180      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f0      	bne.n	80068e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b00      	cmp	r3, #0
 8006910:	d03a      	beq.n	8006988 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d019      	beq.n	800694e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800691a:	4b17      	ldr	r3, [pc, #92]	@ (8006978 <HAL_RCC_OscConfig+0x274>)
 800691c:	2201      	movs	r2, #1
 800691e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006920:	f7fc fcb6 	bl	8003290 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006928:	f7fc fcb2 	bl	8003290 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e160      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800693a:	4b0d      	ldr	r3, [pc, #52]	@ (8006970 <HAL_RCC_OscConfig+0x26c>)
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006946:	2001      	movs	r0, #1
 8006948:	f000 face 	bl	8006ee8 <RCC_Delay>
 800694c:	e01c      	b.n	8006988 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800694e:	4b0a      	ldr	r3, [pc, #40]	@ (8006978 <HAL_RCC_OscConfig+0x274>)
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006954:	f7fc fc9c 	bl	8003290 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800695a:	e00f      	b.n	800697c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800695c:	f7fc fc98 	bl	8003290 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d908      	bls.n	800697c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e146      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
 800696e:	bf00      	nop
 8006970:	40021000 	.word	0x40021000
 8006974:	42420000 	.word	0x42420000
 8006978:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800697c:	4b92      	ldr	r3, [pc, #584]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e9      	bne.n	800695c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 80a6 	beq.w	8006ae2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006996:	2300      	movs	r3, #0
 8006998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800699a:	4b8b      	ldr	r3, [pc, #556]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10d      	bne.n	80069c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069a6:	4b88      	ldr	r3, [pc, #544]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	4a87      	ldr	r2, [pc, #540]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 80069ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069b0:	61d3      	str	r3, [r2, #28]
 80069b2:	4b85      	ldr	r3, [pc, #532]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ba:	60bb      	str	r3, [r7, #8]
 80069bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c2:	4b82      	ldr	r3, [pc, #520]	@ (8006bcc <HAL_RCC_OscConfig+0x4c8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d118      	bne.n	8006a00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ce:	4b7f      	ldr	r3, [pc, #508]	@ (8006bcc <HAL_RCC_OscConfig+0x4c8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a7e      	ldr	r2, [pc, #504]	@ (8006bcc <HAL_RCC_OscConfig+0x4c8>)
 80069d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069da:	f7fc fc59 	bl	8003290 <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e2:	f7fc fc55 	bl	8003290 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b64      	cmp	r3, #100	@ 0x64
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e103      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f4:	4b75      	ldr	r3, [pc, #468]	@ (8006bcc <HAL_RCC_OscConfig+0x4c8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0f0      	beq.n	80069e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d106      	bne.n	8006a16 <HAL_RCC_OscConfig+0x312>
 8006a08:	4b6f      	ldr	r3, [pc, #444]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a0e:	f043 0301 	orr.w	r3, r3, #1
 8006a12:	6213      	str	r3, [r2, #32]
 8006a14:	e02d      	b.n	8006a72 <HAL_RCC_OscConfig+0x36e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10c      	bne.n	8006a38 <HAL_RCC_OscConfig+0x334>
 8006a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	4a69      	ldr	r2, [pc, #420]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	6213      	str	r3, [r2, #32]
 8006a2a:	4b67      	ldr	r3, [pc, #412]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	4a66      	ldr	r2, [pc, #408]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a30:	f023 0304 	bic.w	r3, r3, #4
 8006a34:	6213      	str	r3, [r2, #32]
 8006a36:	e01c      	b.n	8006a72 <HAL_RCC_OscConfig+0x36e>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	2b05      	cmp	r3, #5
 8006a3e:	d10c      	bne.n	8006a5a <HAL_RCC_OscConfig+0x356>
 8006a40:	4b61      	ldr	r3, [pc, #388]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	4a60      	ldr	r2, [pc, #384]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a46:	f043 0304 	orr.w	r3, r3, #4
 8006a4a:	6213      	str	r3, [r2, #32]
 8006a4c:	4b5e      	ldr	r3, [pc, #376]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	4a5d      	ldr	r2, [pc, #372]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a52:	f043 0301 	orr.w	r3, r3, #1
 8006a56:	6213      	str	r3, [r2, #32]
 8006a58:	e00b      	b.n	8006a72 <HAL_RCC_OscConfig+0x36e>
 8006a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	4a5a      	ldr	r2, [pc, #360]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a60:	f023 0301 	bic.w	r3, r3, #1
 8006a64:	6213      	str	r3, [r2, #32]
 8006a66:	4b58      	ldr	r3, [pc, #352]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	4a57      	ldr	r2, [pc, #348]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a6c:	f023 0304 	bic.w	r3, r3, #4
 8006a70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d015      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a7a:	f7fc fc09 	bl	8003290 <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a80:	e00a      	b.n	8006a98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a82:	f7fc fc05 	bl	8003290 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e0b1      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a98:	4b4b      	ldr	r3, [pc, #300]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0ee      	beq.n	8006a82 <HAL_RCC_OscConfig+0x37e>
 8006aa4:	e014      	b.n	8006ad0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aa6:	f7fc fbf3 	bl	8003290 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aac:	e00a      	b.n	8006ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aae:	f7fc fbef 	bl	8003290 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e09b      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac4:	4b40      	ldr	r3, [pc, #256]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1ee      	bne.n	8006aae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d105      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	4a3b      	ldr	r2, [pc, #236]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8087 	beq.w	8006bfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aec:	4b36      	ldr	r3, [pc, #216]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f003 030c 	and.w	r3, r3, #12
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d061      	beq.n	8006bbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d146      	bne.n	8006b8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b00:	4b33      	ldr	r3, [pc, #204]	@ (8006bd0 <HAL_RCC_OscConfig+0x4cc>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b06:	f7fc fbc3 	bl	8003290 <HAL_GetTick>
 8006b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b0c:	e008      	b.n	8006b20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b0e:	f7fc fbbf 	bl	8003290 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e06d      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b20:	4b29      	ldr	r3, [pc, #164]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f0      	bne.n	8006b0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b34:	d108      	bne.n	8006b48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006b36:	4b24      	ldr	r3, [pc, #144]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	4921      	ldr	r1, [pc, #132]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b48:	4b1f      	ldr	r3, [pc, #124]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a19      	ldr	r1, [r3, #32]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	491b      	ldr	r1, [pc, #108]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b60:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd0 <HAL_RCC_OscConfig+0x4cc>)
 8006b62:	2201      	movs	r2, #1
 8006b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b66:	f7fc fb93 	bl	8003290 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b6e:	f7fc fb8f 	bl	8003290 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e03d      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b80:	4b11      	ldr	r3, [pc, #68]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x46a>
 8006b8c:	e035      	b.n	8006bfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8e:	4b10      	ldr	r3, [pc, #64]	@ (8006bd0 <HAL_RCC_OscConfig+0x4cc>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b94:	f7fc fb7c 	bl	8003290 <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b9c:	f7fc fb78 	bl	8003290 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e026      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bae:	4b06      	ldr	r3, [pc, #24]	@ (8006bc8 <HAL_RCC_OscConfig+0x4c4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f0      	bne.n	8006b9c <HAL_RCC_OscConfig+0x498>
 8006bba:	e01e      	b.n	8006bfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d107      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e019      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	40007000 	.word	0x40007000
 8006bd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c04 <HAL_RCC_OscConfig+0x500>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d106      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d001      	beq.n	8006bfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40021000 	.word	0x40021000

08006c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e0d0      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8006dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d910      	bls.n	8006c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c2a:	4b67      	ldr	r3, [pc, #412]	@ (8006dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f023 0207 	bic.w	r2, r3, #7
 8006c32:	4965      	ldr	r1, [pc, #404]	@ (8006dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c3a:	4b63      	ldr	r3, [pc, #396]	@ (8006dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d001      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0b8      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d020      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c64:	4b59      	ldr	r3, [pc, #356]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	4a58      	ldr	r2, [pc, #352]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006c6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c7c:	4b53      	ldr	r3, [pc, #332]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4a52      	ldr	r2, [pc, #328]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006c82:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006c86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c88:	4b50      	ldr	r3, [pc, #320]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	494d      	ldr	r1, [pc, #308]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d040      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d107      	bne.n	8006cbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cae:	4b47      	ldr	r3, [pc, #284]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d115      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e07f      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d107      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cc6:	4b41      	ldr	r3, [pc, #260]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e073      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e06b      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ce6:	4b39      	ldr	r3, [pc, #228]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f023 0203 	bic.w	r2, r3, #3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	4936      	ldr	r1, [pc, #216]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cf8:	f7fc faca 	bl	8003290 <HAL_GetTick>
 8006cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cfe:	e00a      	b.n	8006d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d00:	f7fc fac6 	bl	8003290 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e053      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d16:	4b2d      	ldr	r3, [pc, #180]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f003 020c 	and.w	r2, r3, #12
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d1eb      	bne.n	8006d00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d28:	4b27      	ldr	r3, [pc, #156]	@ (8006dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d210      	bcs.n	8006d58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d36:	4b24      	ldr	r3, [pc, #144]	@ (8006dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f023 0207 	bic.w	r2, r3, #7
 8006d3e:	4922      	ldr	r1, [pc, #136]	@ (8006dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d46:	4b20      	ldr	r3, [pc, #128]	@ (8006dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d001      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e032      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d008      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d64:	4b19      	ldr	r3, [pc, #100]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	4916      	ldr	r1, [pc, #88]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d82:	4b12      	ldr	r3, [pc, #72]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	490e      	ldr	r1, [pc, #56]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d96:	f000 f821 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	091b      	lsrs	r3, r3, #4
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	490a      	ldr	r1, [pc, #40]	@ (8006dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8006da8:	5ccb      	ldrb	r3, [r1, r3]
 8006daa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dae:	4a09      	ldr	r2, [pc, #36]	@ (8006dd4 <HAL_RCC_ClockConfig+0x1cc>)
 8006db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006db2:	4b09      	ldr	r3, [pc, #36]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1d0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fc fa28 	bl	800320c <HAL_InitTick>

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40022000 	.word	0x40022000
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	0800cae4 	.word	0x0800cae4
 8006dd4:	20000004 	.word	0x20000004
 8006dd8:	20000008 	.word	0x20000008

08006ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	2300      	movs	r3, #0
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	2300      	movs	r3, #0
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	2300      	movs	r3, #0
 8006df0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006df6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f003 030c 	and.w	r3, r3, #12
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d002      	beq.n	8006e0c <HAL_RCC_GetSysClockFreq+0x30>
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d003      	beq.n	8006e12 <HAL_RCC_GetSysClockFreq+0x36>
 8006e0a:	e027      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e0c:	4b19      	ldr	r3, [pc, #100]	@ (8006e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e0e:	613b      	str	r3, [r7, #16]
      break;
 8006e10:	e027      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	0c9b      	lsrs	r3, r3, #18
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	4a17      	ldr	r2, [pc, #92]	@ (8006e78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e1c:	5cd3      	ldrb	r3, [r2, r3]
 8006e1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d010      	beq.n	8006e4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006e2a:	4b11      	ldr	r3, [pc, #68]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	0c5b      	lsrs	r3, r3, #17
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	4a11      	ldr	r2, [pc, #68]	@ (8006e7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006e36:	5cd3      	ldrb	r3, [r2, r3]
 8006e38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e3e:	fb03 f202 	mul.w	r2, r3, r2
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	e004      	b.n	8006e56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006e50:	fb02 f303 	mul.w	r3, r2, r3
 8006e54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	613b      	str	r3, [r7, #16]
      break;
 8006e5a:	e002      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e5c:	4b05      	ldr	r3, [pc, #20]	@ (8006e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e5e:	613b      	str	r3, [r7, #16]
      break;
 8006e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e62:	693b      	ldr	r3, [r7, #16]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bc80      	pop	{r7}
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	40021000 	.word	0x40021000
 8006e74:	007a1200 	.word	0x007a1200
 8006e78:	0800cafc 	.word	0x0800cafc
 8006e7c:	0800cb0c 	.word	0x0800cb0c
 8006e80:	003d0900 	.word	0x003d0900

08006e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e88:	4b02      	ldr	r3, [pc, #8]	@ (8006e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr
 8006e94:	20000004 	.word	0x20000004

08006e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e9c:	f7ff fff2 	bl	8006e84 <HAL_RCC_GetHCLKFreq>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	4b05      	ldr	r3, [pc, #20]	@ (8006eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	0a1b      	lsrs	r3, r3, #8
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	4903      	ldr	r1, [pc, #12]	@ (8006ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eae:	5ccb      	ldrb	r3, [r1, r3]
 8006eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	0800caf4 	.word	0x0800caf4

08006ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ec4:	f7ff ffde 	bl	8006e84 <HAL_RCC_GetHCLKFreq>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	4b05      	ldr	r3, [pc, #20]	@ (8006ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	0adb      	lsrs	r3, r3, #11
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	4903      	ldr	r1, [pc, #12]	@ (8006ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ed6:	5ccb      	ldrb	r3, [r1, r3]
 8006ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	0800caf4 	.word	0x0800caf4

08006ee8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8006f1c <RCC_Delay+0x34>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8006f20 <RCC_Delay+0x38>)
 8006ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8006efa:	0a5b      	lsrs	r3, r3, #9
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	fb02 f303 	mul.w	r3, r2, r3
 8006f02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f04:	bf00      	nop
  }
  while (Delay --);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1e5a      	subs	r2, r3, #1
 8006f0a:	60fa      	str	r2, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f9      	bne.n	8006f04 <RCC_Delay+0x1c>
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr
 8006f1c:	20000004 	.word	0x20000004
 8006f20:	10624dd3 	.word	0x10624dd3

08006f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e076      	b.n	8007024 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d108      	bne.n	8006f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f46:	d009      	beq.n	8006f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	61da      	str	r2, [r3, #28]
 8006f4e:	e005      	b.n	8006f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d106      	bne.n	8006f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7fb fe6c 	bl	8002c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe0:	ea42 0103 	orr.w	r1, r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	0c1a      	lsrs	r2, r3, #16
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f002 0204 	and.w	r2, r2, #4
 8007002:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69da      	ldr	r2, [r3, #28]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007012:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	4613      	mov	r3, r2
 800703a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800703c:	f7fc f928 	bl	8003290 <HAL_GetTick>
 8007040:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b01      	cmp	r3, #1
 8007050:	d001      	beq.n	8007056 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007052:	2302      	movs	r3, #2
 8007054:	e12a      	b.n	80072ac <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <HAL_SPI_Transmit+0x36>
 800705c:	88fb      	ldrh	r3, [r7, #6]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e122      	b.n	80072ac <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800706c:	2b01      	cmp	r3, #1
 800706e:	d101      	bne.n	8007074 <HAL_SPI_Transmit+0x48>
 8007070:	2302      	movs	r3, #2
 8007072:	e11b      	b.n	80072ac <HAL_SPI_Transmit+0x280>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2203      	movs	r2, #3
 8007080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	88fa      	ldrh	r2, [r7, #6]
 8007094:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	88fa      	ldrh	r2, [r7, #6]
 800709a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c2:	d10f      	bne.n	80070e4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ee:	2b40      	cmp	r3, #64	@ 0x40
 80070f0:	d007      	beq.n	8007102 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007100:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800710a:	d152      	bne.n	80071b2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <HAL_SPI_Transmit+0xee>
 8007114:	8b7b      	ldrh	r3, [r7, #26]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d145      	bne.n	80071a6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711e:	881a      	ldrh	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712a:	1c9a      	adds	r2, r3, #2
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b01      	subs	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800713e:	e032      	b.n	80071a6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b02      	cmp	r3, #2
 800714c:	d112      	bne.n	8007174 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007152:	881a      	ldrh	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715e:	1c9a      	adds	r2, r3, #2
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007172:	e018      	b.n	80071a6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007174:	f7fc f88c 	bl	8003290 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d803      	bhi.n	800718c <HAL_SPI_Transmit+0x160>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d102      	bne.n	8007192 <HAL_SPI_Transmit+0x166>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d109      	bne.n	80071a6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e082      	b.n	80072ac <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1c7      	bne.n	8007140 <HAL_SPI_Transmit+0x114>
 80071b0:	e053      	b.n	800725a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_SPI_Transmit+0x194>
 80071ba:	8b7b      	ldrh	r3, [r7, #26]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d147      	bne.n	8007250 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	7812      	ldrb	r2, [r2, #0]
 80071cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071e6:	e033      	b.n	8007250 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d113      	bne.n	800721e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	330c      	adds	r3, #12
 8007200:	7812      	ldrb	r2, [r2, #0]
 8007202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007212:	b29b      	uxth	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800721c:	e018      	b.n	8007250 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800721e:	f7fc f837 	bl	8003290 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d803      	bhi.n	8007236 <HAL_SPI_Transmit+0x20a>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007234:	d102      	bne.n	800723c <HAL_SPI_Transmit+0x210>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d109      	bne.n	8007250 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e02d      	b.n	80072ac <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1c6      	bne.n	80071e8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 fbc4 	bl	80079ec <SPI_EndRxTxTransaction>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80072aa:	2300      	movs	r3, #0
  }
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3720      	adds	r7, #32
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b088      	sub	sp, #32
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	4613      	mov	r3, r2
 80072c2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d001      	beq.n	80072d4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80072d0:	2302      	movs	r3, #2
 80072d2:	e104      	b.n	80074de <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072dc:	d112      	bne.n	8007304 <HAL_SPI_Receive+0x50>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10e      	bne.n	8007304 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2204      	movs	r2, #4
 80072ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 f8f3 	bl	80074e6 <HAL_SPI_TransmitReceive>
 8007300:	4603      	mov	r3, r0
 8007302:	e0ec      	b.n	80074de <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007304:	f7fb ffc4 	bl	8003290 <HAL_GetTick>
 8007308:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <HAL_SPI_Receive+0x62>
 8007310:	88fb      	ldrh	r3, [r7, #6]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e0e1      	b.n	80074de <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_SPI_Receive+0x74>
 8007324:	2302      	movs	r3, #2
 8007326:	e0da      	b.n	80074de <HAL_SPI_Receive+0x22a>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2204      	movs	r2, #4
 8007334:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	88fa      	ldrh	r2, [r7, #6]
 8007348:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	88fa      	ldrh	r2, [r7, #6]
 800734e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007376:	d10f      	bne.n	8007398 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007386:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007396:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a2:	2b40      	cmp	r3, #64	@ 0x40
 80073a4:	d007      	beq.n	80073b6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d170      	bne.n	80074a0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80073be:	e035      	b.n	800742c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d115      	bne.n	80073fa <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f103 020c 	add.w	r2, r3, #12
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073da:	7812      	ldrb	r2, [r2, #0]
 80073dc:	b2d2      	uxtb	r2, r2
 80073de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073f8:	e018      	b.n	800742c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073fa:	f7fb ff49 	bl	8003290 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d803      	bhi.n	8007412 <HAL_SPI_Receive+0x15e>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007410:	d102      	bne.n	8007418 <HAL_SPI_Receive+0x164>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d109      	bne.n	800742c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e058      	b.n	80074de <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1c4      	bne.n	80073c0 <HAL_SPI_Receive+0x10c>
 8007436:	e038      	b.n	80074aa <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b01      	cmp	r3, #1
 8007444:	d113      	bne.n	800746e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007450:	b292      	uxth	r2, r2
 8007452:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007458:	1c9a      	adds	r2, r3, #2
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007462:	b29b      	uxth	r3, r3
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800746c:	e018      	b.n	80074a0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800746e:	f7fb ff0f 	bl	8003290 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d803      	bhi.n	8007486 <HAL_SPI_Receive+0x1d2>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007484:	d102      	bne.n	800748c <HAL_SPI_Receive+0x1d8>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d109      	bne.n	80074a0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e01e      	b.n	80074de <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1c6      	bne.n	8007438 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 fa4a 	bl	8007948 <SPI_EndRxTransaction>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e000      	b.n	80074de <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80074dc:	2300      	movs	r3, #0
  }
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b08a      	sub	sp, #40	@ 0x28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
 80074f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074f4:	2301      	movs	r3, #1
 80074f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074f8:	f7fb feca 	bl	8003290 <HAL_GetTick>
 80074fc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007504:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800750c:	887b      	ldrh	r3, [r7, #2]
 800750e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007510:	7ffb      	ldrb	r3, [r7, #31]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d00c      	beq.n	8007530 <HAL_SPI_TransmitReceive+0x4a>
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800751c:	d106      	bne.n	800752c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d102      	bne.n	800752c <HAL_SPI_TransmitReceive+0x46>
 8007526:	7ffb      	ldrb	r3, [r7, #31]
 8007528:	2b04      	cmp	r3, #4
 800752a:	d001      	beq.n	8007530 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800752c:	2302      	movs	r3, #2
 800752e:	e17f      	b.n	8007830 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <HAL_SPI_TransmitReceive+0x5c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <HAL_SPI_TransmitReceive+0x5c>
 800753c:	887b      	ldrh	r3, [r7, #2]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e174      	b.n	8007830 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x6e>
 8007550:	2302      	movs	r3, #2
 8007552:	e16d      	b.n	8007830 <HAL_SPI_TransmitReceive+0x34a>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b04      	cmp	r3, #4
 8007566:	d003      	beq.n	8007570 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2205      	movs	r2, #5
 800756c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	887a      	ldrh	r2, [r7, #2]
 8007580:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	887a      	ldrh	r2, [r7, #2]
 8007586:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	887a      	ldrh	r2, [r7, #2]
 8007592:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	887a      	ldrh	r2, [r7, #2]
 8007598:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b0:	2b40      	cmp	r3, #64	@ 0x40
 80075b2:	d007      	beq.n	80075c4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075cc:	d17e      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <HAL_SPI_TransmitReceive+0xf6>
 80075d6:	8afb      	ldrh	r3, [r7, #22]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d16c      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e0:	881a      	ldrh	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ec:	1c9a      	adds	r2, r3, #2
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007600:	e059      	b.n	80076b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b02      	cmp	r3, #2
 800760e:	d11b      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x162>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d016      	beq.n	8007648 <HAL_SPI_TransmitReceive+0x162>
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	2b01      	cmp	r3, #1
 800761e:	d113      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007624:	881a      	ldrh	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007630:	1c9a      	adds	r2, r3, #2
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b01      	cmp	r3, #1
 8007654:	d119      	bne.n	800768a <HAL_SPI_TransmitReceive+0x1a4>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d014      	beq.n	800768a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766a:	b292      	uxth	r2, r2
 800766c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007672:	1c9a      	adds	r2, r3, #2
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800767c:	b29b      	uxth	r3, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007686:	2301      	movs	r3, #1
 8007688:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800768a:	f7fb fe01 	bl	8003290 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007696:	429a      	cmp	r2, r3
 8007698:	d80d      	bhi.n	80076b6 <HAL_SPI_TransmitReceive+0x1d0>
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a0:	d009      	beq.n	80076b6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e0bc      	b.n	8007830 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1a0      	bne.n	8007602 <HAL_SPI_TransmitReceive+0x11c>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d19b      	bne.n	8007602 <HAL_SPI_TransmitReceive+0x11c>
 80076ca:	e082      	b.n	80077d2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <HAL_SPI_TransmitReceive+0x1f4>
 80076d4:	8afb      	ldrh	r3, [r7, #22]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d171      	bne.n	80077be <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	330c      	adds	r3, #12
 80076e4:	7812      	ldrb	r2, [r2, #0]
 80076e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007700:	e05d      	b.n	80077be <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b02      	cmp	r3, #2
 800770e:	d11c      	bne.n	800774a <HAL_SPI_TransmitReceive+0x264>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d017      	beq.n	800774a <HAL_SPI_TransmitReceive+0x264>
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	2b01      	cmp	r3, #1
 800771e:	d114      	bne.n	800774a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b01      	cmp	r3, #1
 8007756:	d119      	bne.n	800778c <HAL_SPI_TransmitReceive+0x2a6>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d014      	beq.n	800778c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007788:	2301      	movs	r3, #1
 800778a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800778c:	f7fb fd80 	bl	8003290 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007798:	429a      	cmp	r2, r3
 800779a:	d803      	bhi.n	80077a4 <HAL_SPI_TransmitReceive+0x2be>
 800779c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a2:	d102      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x2c4>
 80077a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d109      	bne.n	80077be <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e038      	b.n	8007830 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d19c      	bne.n	8007702 <HAL_SPI_TransmitReceive+0x21c>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d197      	bne.n	8007702 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077d2:	6a3a      	ldr	r2, [r7, #32]
 80077d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 f908 	bl	80079ec <SPI_EndRxTxTransaction>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d008      	beq.n	80077f4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2220      	movs	r2, #32
 80077e6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e01d      	b.n	8007830 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10a      	bne.n	8007812 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077fc:	2300      	movs	r3, #0
 80077fe:	613b      	str	r3, [r7, #16]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	613b      	str	r3, [r7, #16]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	613b      	str	r3, [r7, #16]
 8007810:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800782e:	2300      	movs	r3, #0
  }
}
 8007830:	4618      	mov	r0, r3
 8007832:	3728      	adds	r7, #40	@ 0x28
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	4613      	mov	r3, r2
 8007846:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007848:	f7fb fd22 	bl	8003290 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007850:	1a9b      	subs	r3, r3, r2
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	4413      	add	r3, r2
 8007856:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007858:	f7fb fd1a 	bl	8003290 <HAL_GetTick>
 800785c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800785e:	4b39      	ldr	r3, [pc, #228]	@ (8007944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	015b      	lsls	r3, r3, #5
 8007864:	0d1b      	lsrs	r3, r3, #20
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	fb02 f303 	mul.w	r3, r2, r3
 800786c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800786e:	e054      	b.n	800791a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007876:	d050      	beq.n	800791a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007878:	f7fb fd0a 	bl	8003290 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	429a      	cmp	r2, r3
 8007886:	d902      	bls.n	800788e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d13d      	bne.n	800790a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800789c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078a6:	d111      	bne.n	80078cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078b0:	d004      	beq.n	80078bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ba:	d107      	bne.n	80078cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078d4:	d10f      	bne.n	80078f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e017      	b.n	800793a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	3b01      	subs	r3, #1
 8007918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689a      	ldr	r2, [r3, #8]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	4013      	ands	r3, r2
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	429a      	cmp	r2, r3
 8007928:	bf0c      	ite	eq
 800792a:	2301      	moveq	r3, #1
 800792c:	2300      	movne	r3, #0
 800792e:	b2db      	uxtb	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	79fb      	ldrb	r3, [r7, #7]
 8007934:	429a      	cmp	r2, r3
 8007936:	d19b      	bne.n	8007870 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20000004 	.word	0x20000004

08007948 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800795c:	d111      	bne.n	8007982 <SPI_EndRxTransaction+0x3a>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007966:	d004      	beq.n	8007972 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007970:	d107      	bne.n	8007982 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007980:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800798a:	d117      	bne.n	80079bc <SPI_EndRxTransaction+0x74>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007994:	d112      	bne.n	80079bc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	2101      	movs	r1, #1
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff ff49 	bl	8007838 <SPI_WaitFlagStateUntilTimeout>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01a      	beq.n	80079e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b0:	f043 0220 	orr.w	r2, r3, #32
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e013      	b.n	80079e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2200      	movs	r2, #0
 80079c4:	2180      	movs	r1, #128	@ 0x80
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f7ff ff36 	bl	8007838 <SPI_WaitFlagStateUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d6:	f043 0220 	orr.w	r2, r3, #32
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e000      	b.n	80079e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2201      	movs	r2, #1
 8007a00:	2102      	movs	r1, #2
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff ff18 	bl	8007838 <SPI_WaitFlagStateUntilTimeout>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a12:	f043 0220 	orr.w	r2, r3, #32
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e013      	b.n	8007a46 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2200      	movs	r2, #0
 8007a26:	2180      	movs	r1, #128	@ 0x80
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f7ff ff05 	bl	8007838 <SPI_WaitFlagStateUntilTimeout>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d007      	beq.n	8007a44 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a38:	f043 0220 	orr.w	r2, r3, #32
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e000      	b.n	8007a46 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e042      	b.n	8007ae6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d106      	bne.n	8007a7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7fb fae9 	bl	800304c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2224      	movs	r2, #36	@ 0x24
 8007a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fd0a 	bl	80084ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007aa6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695a      	ldr	r2, [r3, #20]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ab6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ac6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b085      	sub	sp, #20
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	4613      	mov	r3, r2
 8007afa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b20      	cmp	r3, #32
 8007b06:	d121      	bne.n	8007b4c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_UART_Transmit_IT+0x26>
 8007b0e:	88fb      	ldrh	r3, [r7, #6]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e01a      	b.n	8007b4e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	88fa      	ldrh	r2, [r7, #6]
 8007b22:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	88fa      	ldrh	r2, [r7, #6]
 8007b28:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2221      	movs	r2, #33	@ 0x21
 8007b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007b46:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	e000      	b.n	8007b4e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007b4c:	2302      	movs	r3, #2
  }
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bc80      	pop	{r7}
 8007b56:	4770      	bx	lr

08007b58 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	4613      	mov	r3, r2
 8007b64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d112      	bne.n	8007b98 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_UART_Receive_IT+0x26>
 8007b78:	88fb      	ldrh	r3, [r7, #6]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e00b      	b.n	8007b9a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fab7 	bl	8008102 <UART_Start_Receive_IT>
 8007b94:	4603      	mov	r3, r0
 8007b96:	e000      	b.n	8007b9a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007b98:	2302      	movs	r3, #2
  }
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b0ba      	sub	sp, #232	@ 0xe8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10f      	bne.n	8007c0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <HAL_UART_IRQHandler+0x66>
 8007bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bfa:	f003 0320 	and.w	r3, r3, #32
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fb93 	bl	800832e <UART_Receive_IT>
      return;
 8007c08:	e25b      	b.n	80080c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 80de 	beq.w	8007dd0 <HAL_UART_IRQHandler+0x22c>
 8007c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d106      	bne.n	8007c2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80d1 	beq.w	8007dd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00b      	beq.n	8007c52 <HAL_UART_IRQHandler+0xae>
 8007c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c4a:	f043 0201 	orr.w	r2, r3, #1
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00b      	beq.n	8007c76 <HAL_UART_IRQHandler+0xd2>
 8007c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c6e:	f043 0202 	orr.w	r2, r3, #2
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <HAL_UART_IRQHandler+0xf6>
 8007c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c92:	f043 0204 	orr.w	r2, r3, #4
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d011      	beq.n	8007cca <HAL_UART_IRQHandler+0x126>
 8007ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d105      	bne.n	8007cbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc2:	f043 0208 	orr.w	r2, r3, #8
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 81f2 	beq.w	80080b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d008      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x14e>
 8007ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ce4:	f003 0320 	and.w	r3, r3, #32
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fb1e 	bl	800832e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bf14      	ite	ne
 8007d00:	2301      	movne	r3, #1
 8007d02:	2300      	moveq	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d103      	bne.n	8007d1e <HAL_UART_IRQHandler+0x17a>
 8007d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d04f      	beq.n	8007dbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa28 	bl	8008174 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d041      	beq.n	8007db6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3314      	adds	r3, #20
 8007d38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3314      	adds	r3, #20
 8007d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1d9      	bne.n	8007d32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d013      	beq.n	8007dae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8007f84 <HAL_UART_IRQHandler+0x3e0>)
 8007d8c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fb fbf2 	bl	800357c <HAL_DMA_Abort_IT>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d016      	beq.n	8007dcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dac:	e00e      	b.n	8007dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f993 	bl	80080da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db4:	e00a      	b.n	8007dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f98f 	bl	80080da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dbc:	e006      	b.n	8007dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f98b 	bl	80080da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007dca:	e175      	b.n	80080b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dcc:	bf00      	nop
    return;
 8007dce:	e173      	b.n	80080b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	f040 814f 	bne.w	8008078 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dde:	f003 0310 	and.w	r3, r3, #16
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 8148 	beq.w	8008078 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dec:	f003 0310 	and.w	r3, r3, #16
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8141 	beq.w	8008078 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007df6:	2300      	movs	r3, #0
 8007df8:	60bb      	str	r3, [r7, #8]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	60bb      	str	r3, [r7, #8]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	60bb      	str	r3, [r7, #8]
 8007e0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 80b6 	beq.w	8007f88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 8145 	beq.w	80080bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	f080 813e 	bcs.w	80080bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e46:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	f000 8088 	beq.w	8007f64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	330c      	adds	r3, #12
 8007e5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	330c      	adds	r3, #12
 8007e7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007e80:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1d9      	bne.n	8007e54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3314      	adds	r3, #20
 8007ea6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007eb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007eb2:	f023 0301 	bic.w	r3, r3, #1
 8007eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3314      	adds	r3, #20
 8007ec0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ec4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ec8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ecc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ed6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e1      	bne.n	8007ea0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3314      	adds	r3, #20
 8007ee2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3314      	adds	r3, #20
 8007efc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f06:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e3      	bne.n	8007edc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	330c      	adds	r3, #12
 8007f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f34:	f023 0310 	bic.w	r3, r3, #16
 8007f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	330c      	adds	r3, #12
 8007f42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007f46:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f48:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e3      	bne.n	8007f22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fb fad1 	bl	8003506 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f8b6 	bl	80080ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f80:	e09c      	b.n	80080bc <HAL_UART_IRQHandler+0x518>
 8007f82:	bf00      	nop
 8007f84:	08008239 	.word	0x08008239
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 808e 	beq.w	80080c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 8089 	beq.w	80080c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007fd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007fd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e3      	bne.n	8007fae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3314      	adds	r3, #20
 8007fec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
 8007ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3314      	adds	r3, #20
 8008006:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800800a:	633a      	str	r2, [r7, #48]	@ 0x30
 800800c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e3      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	330c      	adds	r3, #12
 8008032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	60fb      	str	r3, [r7, #12]
   return(result);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 0310 	bic.w	r3, r3, #16
 8008042:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	330c      	adds	r3, #12
 800804c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008050:	61fa      	str	r2, [r7, #28]
 8008052:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	69b9      	ldr	r1, [r7, #24]
 8008056:	69fa      	ldr	r2, [r7, #28]
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	617b      	str	r3, [r7, #20]
   return(result);
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e3      	bne.n	800802c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800806a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f83b 	bl	80080ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008076:	e023      	b.n	80080c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800807c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008080:	2b00      	cmp	r3, #0
 8008082:	d009      	beq.n	8008098 <HAL_UART_IRQHandler+0x4f4>
 8008084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f8e5 	bl	8008260 <UART_Transmit_IT>
    return;
 8008096:	e014      	b.n	80080c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800809c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00e      	beq.n	80080c2 <HAL_UART_IRQHandler+0x51e>
 80080a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d008      	beq.n	80080c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f924 	bl	80082fe <UART_EndTransmit_IT>
    return;
 80080b6:	e004      	b.n	80080c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80080b8:	bf00      	nop
 80080ba:	e002      	b.n	80080c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80080bc:	bf00      	nop
 80080be:	e000      	b.n	80080c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80080c0:	bf00      	nop
  }
}
 80080c2:	37e8      	adds	r7, #232	@ 0xe8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr

080080da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr

080080ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr

08008102 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008102:	b480      	push	{r7}
 8008104:	b085      	sub	sp, #20
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	4613      	mov	r3, r2
 800810e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	88fa      	ldrh	r2, [r7, #6]
 800811a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	88fa      	ldrh	r2, [r7, #6]
 8008120:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2222      	movs	r2, #34	@ 0x22
 800812c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008146:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	695a      	ldr	r2, [r3, #20]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0201 	orr.w	r2, r2, #1
 8008156:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0220 	orr.w	r2, r2, #32
 8008166:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr

08008174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008174:	b480      	push	{r7}
 8008176:	b095      	sub	sp, #84	@ 0x54
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	330c      	adds	r3, #12
 8008182:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800818c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	330c      	adds	r3, #12
 800819a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800819c:	643a      	str	r2, [r7, #64]	@ 0x40
 800819e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081a4:	e841 2300 	strex	r3, r2, [r1]
 80081a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e5      	bne.n	800817c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3314      	adds	r3, #20
 80081b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	e853 3f00 	ldrex	r3, [r3]
 80081be:	61fb      	str	r3, [r7, #28]
   return(result);
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	f023 0301 	bic.w	r3, r3, #1
 80081c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3314      	adds	r3, #20
 80081ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081d8:	e841 2300 	strex	r3, r2, [r1]
 80081dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e5      	bne.n	80081b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d119      	bne.n	8008220 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	330c      	adds	r3, #12
 80081f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f023 0310 	bic.w	r3, r3, #16
 8008202:	647b      	str	r3, [r7, #68]	@ 0x44
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	330c      	adds	r3, #12
 800820a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800820c:	61ba      	str	r2, [r7, #24]
 800820e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6979      	ldr	r1, [r7, #20]
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	613b      	str	r3, [r7, #16]
   return(result);
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e5      	bne.n	80081ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2220      	movs	r2, #32
 8008224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800822e:	bf00      	nop
 8008230:	3754      	adds	r7, #84	@ 0x54
 8008232:	46bd      	mov	sp, r7
 8008234:	bc80      	pop	{r7}
 8008236:	4770      	bx	lr

08008238 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008244:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff ff41 	bl	80080da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b21      	cmp	r3, #33	@ 0x21
 8008272:	d13e      	bne.n	80082f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800827c:	d114      	bne.n	80082a8 <UART_Transmit_IT+0x48>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d110      	bne.n	80082a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800829a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	1c9a      	adds	r2, r3, #2
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	621a      	str	r2, [r3, #32]
 80082a6:	e008      	b.n	80082ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	1c59      	adds	r1, r3, #1
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	6211      	str	r1, [r2, #32]
 80082b2:	781a      	ldrb	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3b01      	subs	r3, #1
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	4619      	mov	r1, r3
 80082c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10f      	bne.n	80082ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	e000      	b.n	80082f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082f2:	2302      	movs	r3, #2
  }
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr

080082fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008314:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff fed2 	bl	80080c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b08c      	sub	sp, #48	@ 0x30
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b22      	cmp	r3, #34	@ 0x22
 8008340:	f040 80ae 	bne.w	80084a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800834c:	d117      	bne.n	800837e <UART_Receive_IT+0x50>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d113      	bne.n	800837e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	b29b      	uxth	r3, r3
 8008368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836c:	b29a      	uxth	r2, r3
 800836e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008370:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008376:	1c9a      	adds	r2, r3, #2
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	629a      	str	r2, [r3, #40]	@ 0x28
 800837c:	e026      	b.n	80083cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008382:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008384:	2300      	movs	r3, #0
 8008386:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008390:	d007      	beq.n	80083a2 <UART_Receive_IT+0x74>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10a      	bne.n	80083b0 <UART_Receive_IT+0x82>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d106      	bne.n	80083b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	e008      	b.n	80083c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	4619      	mov	r1, r3
 80083da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d15d      	bne.n	800849c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0220 	bic.w	r2, r2, #32
 80083ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	695a      	ldr	r2, [r3, #20]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0201 	bic.w	r2, r2, #1
 800840e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2220      	movs	r2, #32
 8008414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008422:	2b01      	cmp	r3, #1
 8008424:	d135      	bne.n	8008492 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	330c      	adds	r3, #12
 8008432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	e853 3f00 	ldrex	r3, [r3]
 800843a:	613b      	str	r3, [r7, #16]
   return(result);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f023 0310 	bic.w	r3, r3, #16
 8008442:	627b      	str	r3, [r7, #36]	@ 0x24
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	330c      	adds	r3, #12
 800844a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800844c:	623a      	str	r2, [r7, #32]
 800844e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008450:	69f9      	ldr	r1, [r7, #28]
 8008452:	6a3a      	ldr	r2, [r7, #32]
 8008454:	e841 2300 	strex	r3, r2, [r1]
 8008458:	61bb      	str	r3, [r7, #24]
   return(result);
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1e5      	bne.n	800842c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0310 	and.w	r3, r3, #16
 800846a:	2b10      	cmp	r3, #16
 800846c:	d10a      	bne.n	8008484 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff fe2e 	bl	80080ec <HAL_UARTEx_RxEventCallback>
 8008490:	e002      	b.n	8008498 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7f9 fdc8 	bl	8002028 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	e002      	b.n	80084a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	e000      	b.n	80084a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80084a0:	2302      	movs	r3, #2
  }
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3730      	adds	r7, #48	@ 0x30
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	431a      	orrs	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80084e6:	f023 030c 	bic.w	r3, r3, #12
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	68b9      	ldr	r1, [r7, #8]
 80084f0:	430b      	orrs	r3, r1
 80084f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	699a      	ldr	r2, [r3, #24]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a2c      	ldr	r2, [pc, #176]	@ (80085c0 <UART_SetConfig+0x114>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d103      	bne.n	800851c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008514:	f7fe fcd4 	bl	8006ec0 <HAL_RCC_GetPCLK2Freq>
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	e002      	b.n	8008522 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800851c:	f7fe fcbc 	bl	8006e98 <HAL_RCC_GetPCLK1Freq>
 8008520:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009a      	lsls	r2, r3, #2
 800852c:	441a      	add	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	fbb2 f3f3 	udiv	r3, r2, r3
 8008538:	4a22      	ldr	r2, [pc, #136]	@ (80085c4 <UART_SetConfig+0x118>)
 800853a:	fba2 2303 	umull	r2, r3, r2, r3
 800853e:	095b      	lsrs	r3, r3, #5
 8008540:	0119      	lsls	r1, r3, #4
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	4613      	mov	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	009a      	lsls	r2, r3, #2
 800854c:	441a      	add	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	fbb2 f2f3 	udiv	r2, r2, r3
 8008558:	4b1a      	ldr	r3, [pc, #104]	@ (80085c4 <UART_SetConfig+0x118>)
 800855a:	fba3 0302 	umull	r0, r3, r3, r2
 800855e:	095b      	lsrs	r3, r3, #5
 8008560:	2064      	movs	r0, #100	@ 0x64
 8008562:	fb00 f303 	mul.w	r3, r0, r3
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	3332      	adds	r3, #50	@ 0x32
 800856c:	4a15      	ldr	r2, [pc, #84]	@ (80085c4 <UART_SetConfig+0x118>)
 800856e:	fba2 2303 	umull	r2, r3, r2, r3
 8008572:	095b      	lsrs	r3, r3, #5
 8008574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008578:	4419      	add	r1, r3
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009a      	lsls	r2, r3, #2
 8008584:	441a      	add	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008590:	4b0c      	ldr	r3, [pc, #48]	@ (80085c4 <UART_SetConfig+0x118>)
 8008592:	fba3 0302 	umull	r0, r3, r3, r2
 8008596:	095b      	lsrs	r3, r3, #5
 8008598:	2064      	movs	r0, #100	@ 0x64
 800859a:	fb00 f303 	mul.w	r3, r0, r3
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	011b      	lsls	r3, r3, #4
 80085a2:	3332      	adds	r3, #50	@ 0x32
 80085a4:	4a07      	ldr	r2, [pc, #28]	@ (80085c4 <UART_SetConfig+0x118>)
 80085a6:	fba2 2303 	umull	r2, r3, r2, r3
 80085aa:	095b      	lsrs	r3, r3, #5
 80085ac:	f003 020f 	and.w	r2, r3, #15
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	440a      	add	r2, r1
 80085b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40013800 	.word	0x40013800
 80085c4:	51eb851f 	.word	0x51eb851f

080085c8 <sqrt>:
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	4606      	mov	r6, r0
 80085cc:	460f      	mov	r7, r1
 80085ce:	f000 f81f 	bl	8008610 <__ieee754_sqrt>
 80085d2:	4632      	mov	r2, r6
 80085d4:	4604      	mov	r4, r0
 80085d6:	460d      	mov	r5, r1
 80085d8:	463b      	mov	r3, r7
 80085da:	4630      	mov	r0, r6
 80085dc:	4639      	mov	r1, r7
 80085de:	f7f8 fa15 	bl	8000a0c <__aeabi_dcmpun>
 80085e2:	b990      	cbnz	r0, 800860a <sqrt+0x42>
 80085e4:	2200      	movs	r2, #0
 80085e6:	2300      	movs	r3, #0
 80085e8:	4630      	mov	r0, r6
 80085ea:	4639      	mov	r1, r7
 80085ec:	f7f8 f9e6 	bl	80009bc <__aeabi_dcmplt>
 80085f0:	b158      	cbz	r0, 800860a <sqrt+0x42>
 80085f2:	f001 fd6b 	bl	800a0cc <__errno>
 80085f6:	2321      	movs	r3, #33	@ 0x21
 80085f8:	2200      	movs	r2, #0
 80085fa:	6003      	str	r3, [r0, #0]
 80085fc:	2300      	movs	r3, #0
 80085fe:	4610      	mov	r0, r2
 8008600:	4619      	mov	r1, r3
 8008602:	f7f8 f893 	bl	800072c <__aeabi_ddiv>
 8008606:	4604      	mov	r4, r0
 8008608:	460d      	mov	r5, r1
 800860a:	4620      	mov	r0, r4
 800860c:	4629      	mov	r1, r5
 800860e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008610 <__ieee754_sqrt>:
 8008610:	4a65      	ldr	r2, [pc, #404]	@ (80087a8 <__ieee754_sqrt+0x198>)
 8008612:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008616:	438a      	bics	r2, r1
 8008618:	4606      	mov	r6, r0
 800861a:	460f      	mov	r7, r1
 800861c:	460b      	mov	r3, r1
 800861e:	4604      	mov	r4, r0
 8008620:	d10e      	bne.n	8008640 <__ieee754_sqrt+0x30>
 8008622:	4602      	mov	r2, r0
 8008624:	f7f7 ff58 	bl	80004d8 <__aeabi_dmul>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4630      	mov	r0, r6
 800862e:	4639      	mov	r1, r7
 8008630:	f7f7 fd9c 	bl	800016c <__adddf3>
 8008634:	4606      	mov	r6, r0
 8008636:	460f      	mov	r7, r1
 8008638:	4630      	mov	r0, r6
 800863a:	4639      	mov	r1, r7
 800863c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008640:	2900      	cmp	r1, #0
 8008642:	dc0c      	bgt.n	800865e <__ieee754_sqrt+0x4e>
 8008644:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008648:	4302      	orrs	r2, r0
 800864a:	d0f5      	beq.n	8008638 <__ieee754_sqrt+0x28>
 800864c:	b189      	cbz	r1, 8008672 <__ieee754_sqrt+0x62>
 800864e:	4602      	mov	r2, r0
 8008650:	f7f7 fd8a 	bl	8000168 <__aeabi_dsub>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	f7f8 f868 	bl	800072c <__aeabi_ddiv>
 800865c:	e7ea      	b.n	8008634 <__ieee754_sqrt+0x24>
 800865e:	150a      	asrs	r2, r1, #20
 8008660:	d115      	bne.n	800868e <__ieee754_sqrt+0x7e>
 8008662:	2100      	movs	r1, #0
 8008664:	e009      	b.n	800867a <__ieee754_sqrt+0x6a>
 8008666:	0ae3      	lsrs	r3, r4, #11
 8008668:	3a15      	subs	r2, #21
 800866a:	0564      	lsls	r4, r4, #21
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0fa      	beq.n	8008666 <__ieee754_sqrt+0x56>
 8008670:	e7f7      	b.n	8008662 <__ieee754_sqrt+0x52>
 8008672:	460a      	mov	r2, r1
 8008674:	e7fa      	b.n	800866c <__ieee754_sqrt+0x5c>
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	3101      	adds	r1, #1
 800867a:	02d8      	lsls	r0, r3, #11
 800867c:	d5fb      	bpl.n	8008676 <__ieee754_sqrt+0x66>
 800867e:	1e48      	subs	r0, r1, #1
 8008680:	1a12      	subs	r2, r2, r0
 8008682:	f1c1 0020 	rsb	r0, r1, #32
 8008686:	fa24 f000 	lsr.w	r0, r4, r0
 800868a:	4303      	orrs	r3, r0
 800868c:	408c      	lsls	r4, r1
 800868e:	2700      	movs	r7, #0
 8008690:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8008694:	2116      	movs	r1, #22
 8008696:	07d2      	lsls	r2, r2, #31
 8008698:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800869c:	463a      	mov	r2, r7
 800869e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086a6:	bf5c      	itt	pl
 80086a8:	005b      	lslpl	r3, r3, #1
 80086aa:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80086ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80086b2:	bf58      	it	pl
 80086b4:	0064      	lslpl	r4, r4, #1
 80086b6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80086ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80086be:	0064      	lsls	r4, r4, #1
 80086c0:	1815      	adds	r5, r2, r0
 80086c2:	429d      	cmp	r5, r3
 80086c4:	bfde      	ittt	le
 80086c6:	182a      	addle	r2, r5, r0
 80086c8:	1b5b      	suble	r3, r3, r5
 80086ca:	183f      	addle	r7, r7, r0
 80086cc:	0fe5      	lsrs	r5, r4, #31
 80086ce:	3901      	subs	r1, #1
 80086d0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80086d4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80086d8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80086dc:	d1f0      	bne.n	80086c0 <__ieee754_sqrt+0xb0>
 80086de:	460d      	mov	r5, r1
 80086e0:	2620      	movs	r6, #32
 80086e2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80086e6:	4293      	cmp	r3, r2
 80086e8:	eb00 0c01 	add.w	ip, r0, r1
 80086ec:	dc02      	bgt.n	80086f4 <__ieee754_sqrt+0xe4>
 80086ee:	d113      	bne.n	8008718 <__ieee754_sqrt+0x108>
 80086f0:	45a4      	cmp	ip, r4
 80086f2:	d811      	bhi.n	8008718 <__ieee754_sqrt+0x108>
 80086f4:	f1bc 0f00 	cmp.w	ip, #0
 80086f8:	eb0c 0100 	add.w	r1, ip, r0
 80086fc:	da3e      	bge.n	800877c <__ieee754_sqrt+0x16c>
 80086fe:	2900      	cmp	r1, #0
 8008700:	db3c      	blt.n	800877c <__ieee754_sqrt+0x16c>
 8008702:	f102 0e01 	add.w	lr, r2, #1
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	4672      	mov	r2, lr
 800870a:	45a4      	cmp	ip, r4
 800870c:	bf88      	it	hi
 800870e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008712:	eba4 040c 	sub.w	r4, r4, ip
 8008716:	4405      	add	r5, r0
 8008718:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800871c:	3e01      	subs	r6, #1
 800871e:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008722:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008726:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800872a:	d1dc      	bne.n	80086e6 <__ieee754_sqrt+0xd6>
 800872c:	431c      	orrs	r4, r3
 800872e:	d01a      	beq.n	8008766 <__ieee754_sqrt+0x156>
 8008730:	4c1e      	ldr	r4, [pc, #120]	@ (80087ac <__ieee754_sqrt+0x19c>)
 8008732:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 80087b0 <__ieee754_sqrt+0x1a0>
 8008736:	e9d4 0100 	ldrd	r0, r1, [r4]
 800873a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800873e:	f7f7 fd13 	bl	8000168 <__aeabi_dsub>
 8008742:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4650      	mov	r0, sl
 800874c:	4659      	mov	r1, fp
 800874e:	f7f8 f93f 	bl	80009d0 <__aeabi_dcmple>
 8008752:	b140      	cbz	r0, 8008766 <__ieee754_sqrt+0x156>
 8008754:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008758:	e9d9 2300 	ldrd	r2, r3, [r9]
 800875c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008760:	d10e      	bne.n	8008780 <__ieee754_sqrt+0x170>
 8008762:	4635      	mov	r5, r6
 8008764:	3701      	adds	r7, #1
 8008766:	107b      	asrs	r3, r7, #1
 8008768:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800876c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008770:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8008774:	086b      	lsrs	r3, r5, #1
 8008776:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800877a:	e75b      	b.n	8008634 <__ieee754_sqrt+0x24>
 800877c:	4696      	mov	lr, r2
 800877e:	e7c2      	b.n	8008706 <__ieee754_sqrt+0xf6>
 8008780:	f7f7 fcf4 	bl	800016c <__adddf3>
 8008784:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	4650      	mov	r0, sl
 800878e:	4659      	mov	r1, fp
 8008790:	f7f8 f914 	bl	80009bc <__aeabi_dcmplt>
 8008794:	b120      	cbz	r0, 80087a0 <__ieee754_sqrt+0x190>
 8008796:	1cab      	adds	r3, r5, #2
 8008798:	bf08      	it	eq
 800879a:	3701      	addeq	r7, #1
 800879c:	3502      	adds	r5, #2
 800879e:	e7e2      	b.n	8008766 <__ieee754_sqrt+0x156>
 80087a0:	1c6b      	adds	r3, r5, #1
 80087a2:	f023 0501 	bic.w	r5, r3, #1
 80087a6:	e7de      	b.n	8008766 <__ieee754_sqrt+0x156>
 80087a8:	7ff00000 	.word	0x7ff00000
 80087ac:	0800cb18 	.word	0x0800cb18
 80087b0:	0800cb10 	.word	0x0800cb10

080087b4 <atof>:
 80087b4:	2100      	movs	r1, #0
 80087b6:	f000 bdff 	b.w	80093b8 <strtod>

080087ba <atoi>:
 80087ba:	220a      	movs	r2, #10
 80087bc:	2100      	movs	r1, #0
 80087be:	f000 be81 	b.w	80094c4 <strtol>

080087c2 <sulp>:
 80087c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c6:	460f      	mov	r7, r1
 80087c8:	4690      	mov	r8, r2
 80087ca:	f003 fae3 	bl	800bd94 <__ulp>
 80087ce:	4604      	mov	r4, r0
 80087d0:	460d      	mov	r5, r1
 80087d2:	f1b8 0f00 	cmp.w	r8, #0
 80087d6:	d011      	beq.n	80087fc <sulp+0x3a>
 80087d8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80087dc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	dd0b      	ble.n	80087fc <sulp+0x3a>
 80087e4:	2400      	movs	r4, #0
 80087e6:	051b      	lsls	r3, r3, #20
 80087e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80087ec:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80087f0:	4622      	mov	r2, r4
 80087f2:	462b      	mov	r3, r5
 80087f4:	f7f7 fe70 	bl	80004d8 <__aeabi_dmul>
 80087f8:	4604      	mov	r4, r0
 80087fa:	460d      	mov	r5, r1
 80087fc:	4620      	mov	r0, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008804:	0000      	movs	r0, r0
	...

08008808 <_strtod_l>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	b09f      	sub	sp, #124	@ 0x7c
 800880e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008810:	2200      	movs	r2, #0
 8008812:	460c      	mov	r4, r1
 8008814:	921a      	str	r2, [sp, #104]	@ 0x68
 8008816:	f04f 0a00 	mov.w	sl, #0
 800881a:	f04f 0b00 	mov.w	fp, #0
 800881e:	460a      	mov	r2, r1
 8008820:	9005      	str	r0, [sp, #20]
 8008822:	9219      	str	r2, [sp, #100]	@ 0x64
 8008824:	7811      	ldrb	r1, [r2, #0]
 8008826:	292b      	cmp	r1, #43	@ 0x2b
 8008828:	d048      	beq.n	80088bc <_strtod_l+0xb4>
 800882a:	d836      	bhi.n	800889a <_strtod_l+0x92>
 800882c:	290d      	cmp	r1, #13
 800882e:	d830      	bhi.n	8008892 <_strtod_l+0x8a>
 8008830:	2908      	cmp	r1, #8
 8008832:	d830      	bhi.n	8008896 <_strtod_l+0x8e>
 8008834:	2900      	cmp	r1, #0
 8008836:	d039      	beq.n	80088ac <_strtod_l+0xa4>
 8008838:	2200      	movs	r2, #0
 800883a:	920e      	str	r2, [sp, #56]	@ 0x38
 800883c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800883e:	782a      	ldrb	r2, [r5, #0]
 8008840:	2a30      	cmp	r2, #48	@ 0x30
 8008842:	f040 80b0 	bne.w	80089a6 <_strtod_l+0x19e>
 8008846:	786a      	ldrb	r2, [r5, #1]
 8008848:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800884c:	2a58      	cmp	r2, #88	@ 0x58
 800884e:	d16c      	bne.n	800892a <_strtod_l+0x122>
 8008850:	9302      	str	r3, [sp, #8]
 8008852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008854:	4a8f      	ldr	r2, [pc, #572]	@ (8008a94 <_strtod_l+0x28c>)
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	ab1a      	add	r3, sp, #104	@ 0x68
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	9805      	ldr	r0, [sp, #20]
 800885e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008860:	a919      	add	r1, sp, #100	@ 0x64
 8008862:	f002 fb91 	bl	800af88 <__gethex>
 8008866:	f010 060f 	ands.w	r6, r0, #15
 800886a:	4604      	mov	r4, r0
 800886c:	d005      	beq.n	800887a <_strtod_l+0x72>
 800886e:	2e06      	cmp	r6, #6
 8008870:	d126      	bne.n	80088c0 <_strtod_l+0xb8>
 8008872:	2300      	movs	r3, #0
 8008874:	3501      	adds	r5, #1
 8008876:	9519      	str	r5, [sp, #100]	@ 0x64
 8008878:	930e      	str	r3, [sp, #56]	@ 0x38
 800887a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800887c:	2b00      	cmp	r3, #0
 800887e:	f040 8582 	bne.w	8009386 <_strtod_l+0xb7e>
 8008882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008884:	b1bb      	cbz	r3, 80088b6 <_strtod_l+0xae>
 8008886:	4650      	mov	r0, sl
 8008888:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800888c:	b01f      	add	sp, #124	@ 0x7c
 800888e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008892:	2920      	cmp	r1, #32
 8008894:	d1d0      	bne.n	8008838 <_strtod_l+0x30>
 8008896:	3201      	adds	r2, #1
 8008898:	e7c3      	b.n	8008822 <_strtod_l+0x1a>
 800889a:	292d      	cmp	r1, #45	@ 0x2d
 800889c:	d1cc      	bne.n	8008838 <_strtod_l+0x30>
 800889e:	2101      	movs	r1, #1
 80088a0:	910e      	str	r1, [sp, #56]	@ 0x38
 80088a2:	1c51      	adds	r1, r2, #1
 80088a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80088a6:	7852      	ldrb	r2, [r2, #1]
 80088a8:	2a00      	cmp	r2, #0
 80088aa:	d1c7      	bne.n	800883c <_strtod_l+0x34>
 80088ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80088ae:	9419      	str	r4, [sp, #100]	@ 0x64
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f040 8566 	bne.w	8009382 <_strtod_l+0xb7a>
 80088b6:	4650      	mov	r0, sl
 80088b8:	4659      	mov	r1, fp
 80088ba:	e7e7      	b.n	800888c <_strtod_l+0x84>
 80088bc:	2100      	movs	r1, #0
 80088be:	e7ef      	b.n	80088a0 <_strtod_l+0x98>
 80088c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80088c2:	b13a      	cbz	r2, 80088d4 <_strtod_l+0xcc>
 80088c4:	2135      	movs	r1, #53	@ 0x35
 80088c6:	a81c      	add	r0, sp, #112	@ 0x70
 80088c8:	f003 fb54 	bl	800bf74 <__copybits>
 80088cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088ce:	9805      	ldr	r0, [sp, #20]
 80088d0:	f002 ff34 	bl	800b73c <_Bfree>
 80088d4:	3e01      	subs	r6, #1
 80088d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80088d8:	2e04      	cmp	r6, #4
 80088da:	d806      	bhi.n	80088ea <_strtod_l+0xe2>
 80088dc:	e8df f006 	tbb	[pc, r6]
 80088e0:	201d0314 	.word	0x201d0314
 80088e4:	14          	.byte	0x14
 80088e5:	00          	.byte	0x00
 80088e6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80088ea:	05e1      	lsls	r1, r4, #23
 80088ec:	bf48      	it	mi
 80088ee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80088f2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088f6:	0d1b      	lsrs	r3, r3, #20
 80088f8:	051b      	lsls	r3, r3, #20
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1bd      	bne.n	800887a <_strtod_l+0x72>
 80088fe:	f001 fbe5 	bl	800a0cc <__errno>
 8008902:	2322      	movs	r3, #34	@ 0x22
 8008904:	6003      	str	r3, [r0, #0]
 8008906:	e7b8      	b.n	800887a <_strtod_l+0x72>
 8008908:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800890c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008910:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008914:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008918:	e7e7      	b.n	80088ea <_strtod_l+0xe2>
 800891a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008a98 <_strtod_l+0x290>
 800891e:	e7e4      	b.n	80088ea <_strtod_l+0xe2>
 8008920:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008924:	f04f 3aff 	mov.w	sl, #4294967295
 8008928:	e7df      	b.n	80088ea <_strtod_l+0xe2>
 800892a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	2b30      	cmp	r3, #48	@ 0x30
 8008934:	d0f9      	beq.n	800892a <_strtod_l+0x122>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d09f      	beq.n	800887a <_strtod_l+0x72>
 800893a:	2301      	movs	r3, #1
 800893c:	2700      	movs	r7, #0
 800893e:	220a      	movs	r2, #10
 8008940:	46b9      	mov	r9, r7
 8008942:	9308      	str	r3, [sp, #32]
 8008944:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008946:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008948:	930c      	str	r3, [sp, #48]	@ 0x30
 800894a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800894c:	7805      	ldrb	r5, [r0, #0]
 800894e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008952:	b2d9      	uxtb	r1, r3
 8008954:	2909      	cmp	r1, #9
 8008956:	d928      	bls.n	80089aa <_strtod_l+0x1a2>
 8008958:	2201      	movs	r2, #1
 800895a:	4950      	ldr	r1, [pc, #320]	@ (8008a9c <_strtod_l+0x294>)
 800895c:	f001 fb59 	bl	800a012 <strncmp>
 8008960:	2800      	cmp	r0, #0
 8008962:	d032      	beq.n	80089ca <_strtod_l+0x1c2>
 8008964:	2000      	movs	r0, #0
 8008966:	462a      	mov	r2, r5
 8008968:	4603      	mov	r3, r0
 800896a:	464d      	mov	r5, r9
 800896c:	900a      	str	r0, [sp, #40]	@ 0x28
 800896e:	2a65      	cmp	r2, #101	@ 0x65
 8008970:	d001      	beq.n	8008976 <_strtod_l+0x16e>
 8008972:	2a45      	cmp	r2, #69	@ 0x45
 8008974:	d114      	bne.n	80089a0 <_strtod_l+0x198>
 8008976:	b91d      	cbnz	r5, 8008980 <_strtod_l+0x178>
 8008978:	9a08      	ldr	r2, [sp, #32]
 800897a:	4302      	orrs	r2, r0
 800897c:	d096      	beq.n	80088ac <_strtod_l+0xa4>
 800897e:	2500      	movs	r5, #0
 8008980:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008982:	1c62      	adds	r2, r4, #1
 8008984:	9219      	str	r2, [sp, #100]	@ 0x64
 8008986:	7862      	ldrb	r2, [r4, #1]
 8008988:	2a2b      	cmp	r2, #43	@ 0x2b
 800898a:	d07a      	beq.n	8008a82 <_strtod_l+0x27a>
 800898c:	2a2d      	cmp	r2, #45	@ 0x2d
 800898e:	d07e      	beq.n	8008a8e <_strtod_l+0x286>
 8008990:	f04f 0c00 	mov.w	ip, #0
 8008994:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008998:	2909      	cmp	r1, #9
 800899a:	f240 8085 	bls.w	8008aa8 <_strtod_l+0x2a0>
 800899e:	9419      	str	r4, [sp, #100]	@ 0x64
 80089a0:	f04f 0800 	mov.w	r8, #0
 80089a4:	e0a5      	b.n	8008af2 <_strtod_l+0x2ea>
 80089a6:	2300      	movs	r3, #0
 80089a8:	e7c8      	b.n	800893c <_strtod_l+0x134>
 80089aa:	f1b9 0f08 	cmp.w	r9, #8
 80089ae:	bfd8      	it	le
 80089b0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80089b2:	f100 0001 	add.w	r0, r0, #1
 80089b6:	bfd6      	itet	le
 80089b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80089bc:	fb02 3707 	mlagt	r7, r2, r7, r3
 80089c0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80089c2:	f109 0901 	add.w	r9, r9, #1
 80089c6:	9019      	str	r0, [sp, #100]	@ 0x64
 80089c8:	e7bf      	b.n	800894a <_strtod_l+0x142>
 80089ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80089d0:	785a      	ldrb	r2, [r3, #1]
 80089d2:	f1b9 0f00 	cmp.w	r9, #0
 80089d6:	d03b      	beq.n	8008a50 <_strtod_l+0x248>
 80089d8:	464d      	mov	r5, r9
 80089da:	900a      	str	r0, [sp, #40]	@ 0x28
 80089dc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80089e0:	2b09      	cmp	r3, #9
 80089e2:	d912      	bls.n	8008a0a <_strtod_l+0x202>
 80089e4:	2301      	movs	r3, #1
 80089e6:	e7c2      	b.n	800896e <_strtod_l+0x166>
 80089e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089ea:	3001      	adds	r0, #1
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80089f0:	785a      	ldrb	r2, [r3, #1]
 80089f2:	2a30      	cmp	r2, #48	@ 0x30
 80089f4:	d0f8      	beq.n	80089e8 <_strtod_l+0x1e0>
 80089f6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80089fa:	2b08      	cmp	r3, #8
 80089fc:	f200 84c8 	bhi.w	8009390 <_strtod_l+0xb88>
 8008a00:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a02:	2000      	movs	r0, #0
 8008a04:	4605      	mov	r5, r0
 8008a06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a08:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a0a:	3a30      	subs	r2, #48	@ 0x30
 8008a0c:	f100 0301 	add.w	r3, r0, #1
 8008a10:	d018      	beq.n	8008a44 <_strtod_l+0x23c>
 8008a12:	462e      	mov	r6, r5
 8008a14:	f04f 0e0a 	mov.w	lr, #10
 8008a18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a1a:	4419      	add	r1, r3
 8008a1c:	910a      	str	r1, [sp, #40]	@ 0x28
 8008a1e:	1c71      	adds	r1, r6, #1
 8008a20:	eba1 0c05 	sub.w	ip, r1, r5
 8008a24:	4563      	cmp	r3, ip
 8008a26:	dc15      	bgt.n	8008a54 <_strtod_l+0x24c>
 8008a28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008a2c:	182b      	adds	r3, r5, r0
 8008a2e:	2b08      	cmp	r3, #8
 8008a30:	f105 0501 	add.w	r5, r5, #1
 8008a34:	4405      	add	r5, r0
 8008a36:	dc1a      	bgt.n	8008a6e <_strtod_l+0x266>
 8008a38:	230a      	movs	r3, #10
 8008a3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a3c:	fb03 2301 	mla	r3, r3, r1, r2
 8008a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a42:	2300      	movs	r3, #0
 8008a44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a46:	4618      	mov	r0, r3
 8008a48:	1c51      	adds	r1, r2, #1
 8008a4a:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a4c:	7852      	ldrb	r2, [r2, #1]
 8008a4e:	e7c5      	b.n	80089dc <_strtod_l+0x1d4>
 8008a50:	4648      	mov	r0, r9
 8008a52:	e7ce      	b.n	80089f2 <_strtod_l+0x1ea>
 8008a54:	2e08      	cmp	r6, #8
 8008a56:	dc05      	bgt.n	8008a64 <_strtod_l+0x25c>
 8008a58:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008a5a:	fb0e f606 	mul.w	r6, lr, r6
 8008a5e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008a60:	460e      	mov	r6, r1
 8008a62:	e7dc      	b.n	8008a1e <_strtod_l+0x216>
 8008a64:	2910      	cmp	r1, #16
 8008a66:	bfd8      	it	le
 8008a68:	fb0e f707 	mulle.w	r7, lr, r7
 8008a6c:	e7f8      	b.n	8008a60 <_strtod_l+0x258>
 8008a6e:	2b0f      	cmp	r3, #15
 8008a70:	bfdc      	itt	le
 8008a72:	230a      	movle	r3, #10
 8008a74:	fb03 2707 	mlale	r7, r3, r7, r2
 8008a78:	e7e3      	b.n	8008a42 <_strtod_l+0x23a>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e77a      	b.n	8008978 <_strtod_l+0x170>
 8008a82:	f04f 0c00 	mov.w	ip, #0
 8008a86:	1ca2      	adds	r2, r4, #2
 8008a88:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a8a:	78a2      	ldrb	r2, [r4, #2]
 8008a8c:	e782      	b.n	8008994 <_strtod_l+0x18c>
 8008a8e:	f04f 0c01 	mov.w	ip, #1
 8008a92:	e7f8      	b.n	8008a86 <_strtod_l+0x27e>
 8008a94:	0800cd08 	.word	0x0800cd08
 8008a98:	7ff00000 	.word	0x7ff00000
 8008a9c:	0800cb20 	.word	0x0800cb20
 8008aa0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008aa2:	1c51      	adds	r1, r2, #1
 8008aa4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008aa6:	7852      	ldrb	r2, [r2, #1]
 8008aa8:	2a30      	cmp	r2, #48	@ 0x30
 8008aaa:	d0f9      	beq.n	8008aa0 <_strtod_l+0x298>
 8008aac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008ab0:	2908      	cmp	r1, #8
 8008ab2:	f63f af75 	bhi.w	80089a0 <_strtod_l+0x198>
 8008ab6:	f04f 080a 	mov.w	r8, #10
 8008aba:	3a30      	subs	r2, #48	@ 0x30
 8008abc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008abe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ac0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008ac2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ac4:	1c56      	adds	r6, r2, #1
 8008ac6:	9619      	str	r6, [sp, #100]	@ 0x64
 8008ac8:	7852      	ldrb	r2, [r2, #1]
 8008aca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008ace:	f1be 0f09 	cmp.w	lr, #9
 8008ad2:	d939      	bls.n	8008b48 <_strtod_l+0x340>
 8008ad4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ad6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008ada:	1a76      	subs	r6, r6, r1
 8008adc:	2e08      	cmp	r6, #8
 8008ade:	dc03      	bgt.n	8008ae8 <_strtod_l+0x2e0>
 8008ae0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ae2:	4588      	cmp	r8, r1
 8008ae4:	bfa8      	it	ge
 8008ae6:	4688      	movge	r8, r1
 8008ae8:	f1bc 0f00 	cmp.w	ip, #0
 8008aec:	d001      	beq.n	8008af2 <_strtod_l+0x2ea>
 8008aee:	f1c8 0800 	rsb	r8, r8, #0
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	d14e      	bne.n	8008b94 <_strtod_l+0x38c>
 8008af6:	9908      	ldr	r1, [sp, #32]
 8008af8:	4308      	orrs	r0, r1
 8008afa:	f47f aebe 	bne.w	800887a <_strtod_l+0x72>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f47f aed4 	bne.w	80088ac <_strtod_l+0xa4>
 8008b04:	2a69      	cmp	r2, #105	@ 0x69
 8008b06:	d028      	beq.n	8008b5a <_strtod_l+0x352>
 8008b08:	dc25      	bgt.n	8008b56 <_strtod_l+0x34e>
 8008b0a:	2a49      	cmp	r2, #73	@ 0x49
 8008b0c:	d025      	beq.n	8008b5a <_strtod_l+0x352>
 8008b0e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008b10:	f47f aecc 	bne.w	80088ac <_strtod_l+0xa4>
 8008b14:	4999      	ldr	r1, [pc, #612]	@ (8008d7c <_strtod_l+0x574>)
 8008b16:	a819      	add	r0, sp, #100	@ 0x64
 8008b18:	f002 fc58 	bl	800b3cc <__match>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	f43f aec5 	beq.w	80088ac <_strtod_l+0xa4>
 8008b22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b28      	cmp	r3, #40	@ 0x28
 8008b28:	d12e      	bne.n	8008b88 <_strtod_l+0x380>
 8008b2a:	4995      	ldr	r1, [pc, #596]	@ (8008d80 <_strtod_l+0x578>)
 8008b2c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008b2e:	a819      	add	r0, sp, #100	@ 0x64
 8008b30:	f002 fc60 	bl	800b3f4 <__hexnan>
 8008b34:	2805      	cmp	r0, #5
 8008b36:	d127      	bne.n	8008b88 <_strtod_l+0x380>
 8008b38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b3a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008b3e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008b42:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008b46:	e698      	b.n	800887a <_strtod_l+0x72>
 8008b48:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b4a:	fb08 2101 	mla	r1, r8, r1, r2
 8008b4e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008b52:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b54:	e7b5      	b.n	8008ac2 <_strtod_l+0x2ba>
 8008b56:	2a6e      	cmp	r2, #110	@ 0x6e
 8008b58:	e7da      	b.n	8008b10 <_strtod_l+0x308>
 8008b5a:	498a      	ldr	r1, [pc, #552]	@ (8008d84 <_strtod_l+0x57c>)
 8008b5c:	a819      	add	r0, sp, #100	@ 0x64
 8008b5e:	f002 fc35 	bl	800b3cc <__match>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f43f aea2 	beq.w	80088ac <_strtod_l+0xa4>
 8008b68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b6a:	4987      	ldr	r1, [pc, #540]	@ (8008d88 <_strtod_l+0x580>)
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	a819      	add	r0, sp, #100	@ 0x64
 8008b70:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b72:	f002 fc2b 	bl	800b3cc <__match>
 8008b76:	b910      	cbnz	r0, 8008b7e <_strtod_l+0x376>
 8008b78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b7e:	f04f 0a00 	mov.w	sl, #0
 8008b82:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8008d8c <_strtod_l+0x584>
 8008b86:	e678      	b.n	800887a <_strtod_l+0x72>
 8008b88:	4881      	ldr	r0, [pc, #516]	@ (8008d90 <_strtod_l+0x588>)
 8008b8a:	f001 fae9 	bl	800a160 <nan>
 8008b8e:	4682      	mov	sl, r0
 8008b90:	468b      	mov	fp, r1
 8008b92:	e672      	b.n	800887a <_strtod_l+0x72>
 8008b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b96:	f1b9 0f00 	cmp.w	r9, #0
 8008b9a:	bf08      	it	eq
 8008b9c:	46a9      	moveq	r9, r5
 8008b9e:	eba8 0303 	sub.w	r3, r8, r3
 8008ba2:	2d10      	cmp	r5, #16
 8008ba4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008ba6:	462c      	mov	r4, r5
 8008ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008baa:	bfa8      	it	ge
 8008bac:	2410      	movge	r4, #16
 8008bae:	f7f7 fc19 	bl	80003e4 <__aeabi_ui2d>
 8008bb2:	2d09      	cmp	r5, #9
 8008bb4:	4682      	mov	sl, r0
 8008bb6:	468b      	mov	fp, r1
 8008bb8:	dc11      	bgt.n	8008bde <_strtod_l+0x3d6>
 8008bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f43f ae5c 	beq.w	800887a <_strtod_l+0x72>
 8008bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc4:	dd76      	ble.n	8008cb4 <_strtod_l+0x4ac>
 8008bc6:	2b16      	cmp	r3, #22
 8008bc8:	dc5d      	bgt.n	8008c86 <_strtod_l+0x47e>
 8008bca:	4972      	ldr	r1, [pc, #456]	@ (8008d94 <_strtod_l+0x58c>)
 8008bcc:	4652      	mov	r2, sl
 8008bce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bd2:	465b      	mov	r3, fp
 8008bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bd8:	f7f7 fc7e 	bl	80004d8 <__aeabi_dmul>
 8008bdc:	e7d7      	b.n	8008b8e <_strtod_l+0x386>
 8008bde:	4b6d      	ldr	r3, [pc, #436]	@ (8008d94 <_strtod_l+0x58c>)
 8008be0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008be4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008be8:	f7f7 fc76 	bl	80004d8 <__aeabi_dmul>
 8008bec:	4682      	mov	sl, r0
 8008bee:	4638      	mov	r0, r7
 8008bf0:	468b      	mov	fp, r1
 8008bf2:	f7f7 fbf7 	bl	80003e4 <__aeabi_ui2d>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4650      	mov	r0, sl
 8008bfc:	4659      	mov	r1, fp
 8008bfe:	f7f7 fab5 	bl	800016c <__adddf3>
 8008c02:	2d0f      	cmp	r5, #15
 8008c04:	4682      	mov	sl, r0
 8008c06:	468b      	mov	fp, r1
 8008c08:	ddd7      	ble.n	8008bba <_strtod_l+0x3b2>
 8008c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c0c:	1b2c      	subs	r4, r5, r4
 8008c0e:	441c      	add	r4, r3
 8008c10:	2c00      	cmp	r4, #0
 8008c12:	f340 8093 	ble.w	8008d3c <_strtod_l+0x534>
 8008c16:	f014 030f 	ands.w	r3, r4, #15
 8008c1a:	d00a      	beq.n	8008c32 <_strtod_l+0x42a>
 8008c1c:	495d      	ldr	r1, [pc, #372]	@ (8008d94 <_strtod_l+0x58c>)
 8008c1e:	4652      	mov	r2, sl
 8008c20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c28:	465b      	mov	r3, fp
 8008c2a:	f7f7 fc55 	bl	80004d8 <__aeabi_dmul>
 8008c2e:	4682      	mov	sl, r0
 8008c30:	468b      	mov	fp, r1
 8008c32:	f034 040f 	bics.w	r4, r4, #15
 8008c36:	d073      	beq.n	8008d20 <_strtod_l+0x518>
 8008c38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008c3c:	dd49      	ble.n	8008cd2 <_strtod_l+0x4ca>
 8008c3e:	2400      	movs	r4, #0
 8008c40:	46a0      	mov	r8, r4
 8008c42:	46a1      	mov	r9, r4
 8008c44:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c46:	2322      	movs	r3, #34	@ 0x22
 8008c48:	f04f 0a00 	mov.w	sl, #0
 8008c4c:	9a05      	ldr	r2, [sp, #20]
 8008c4e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8008d8c <_strtod_l+0x584>
 8008c52:	6013      	str	r3, [r2, #0]
 8008c54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f43f ae0f 	beq.w	800887a <_strtod_l+0x72>
 8008c5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c5e:	9805      	ldr	r0, [sp, #20]
 8008c60:	f002 fd6c 	bl	800b73c <_Bfree>
 8008c64:	4649      	mov	r1, r9
 8008c66:	9805      	ldr	r0, [sp, #20]
 8008c68:	f002 fd68 	bl	800b73c <_Bfree>
 8008c6c:	4641      	mov	r1, r8
 8008c6e:	9805      	ldr	r0, [sp, #20]
 8008c70:	f002 fd64 	bl	800b73c <_Bfree>
 8008c74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c76:	9805      	ldr	r0, [sp, #20]
 8008c78:	f002 fd60 	bl	800b73c <_Bfree>
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	9805      	ldr	r0, [sp, #20]
 8008c80:	f002 fd5c 	bl	800b73c <_Bfree>
 8008c84:	e5f9      	b.n	800887a <_strtod_l+0x72>
 8008c86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	dbbc      	blt.n	8008c0a <_strtod_l+0x402>
 8008c90:	4c40      	ldr	r4, [pc, #256]	@ (8008d94 <_strtod_l+0x58c>)
 8008c92:	f1c5 050f 	rsb	r5, r5, #15
 8008c96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008c9a:	4652      	mov	r2, sl
 8008c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ca0:	465b      	mov	r3, fp
 8008ca2:	f7f7 fc19 	bl	80004d8 <__aeabi_dmul>
 8008ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca8:	1b5d      	subs	r5, r3, r5
 8008caa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008cae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008cb2:	e791      	b.n	8008bd8 <_strtod_l+0x3d0>
 8008cb4:	3316      	adds	r3, #22
 8008cb6:	dba8      	blt.n	8008c0a <_strtod_l+0x402>
 8008cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cba:	4650      	mov	r0, sl
 8008cbc:	eba3 0808 	sub.w	r8, r3, r8
 8008cc0:	4b34      	ldr	r3, [pc, #208]	@ (8008d94 <_strtod_l+0x58c>)
 8008cc2:	4659      	mov	r1, fp
 8008cc4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008cc8:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ccc:	f7f7 fd2e 	bl	800072c <__aeabi_ddiv>
 8008cd0:	e75d      	b.n	8008b8e <_strtod_l+0x386>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	4650      	mov	r0, sl
 8008cd6:	4659      	mov	r1, fp
 8008cd8:	461e      	mov	r6, r3
 8008cda:	4f2f      	ldr	r7, [pc, #188]	@ (8008d98 <_strtod_l+0x590>)
 8008cdc:	1124      	asrs	r4, r4, #4
 8008cde:	2c01      	cmp	r4, #1
 8008ce0:	dc21      	bgt.n	8008d26 <_strtod_l+0x51e>
 8008ce2:	b10b      	cbz	r3, 8008ce8 <_strtod_l+0x4e0>
 8008ce4:	4682      	mov	sl, r0
 8008ce6:	468b      	mov	fp, r1
 8008ce8:	492b      	ldr	r1, [pc, #172]	@ (8008d98 <_strtod_l+0x590>)
 8008cea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008cee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008cf2:	4652      	mov	r2, sl
 8008cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cf8:	465b      	mov	r3, fp
 8008cfa:	f7f7 fbed 	bl	80004d8 <__aeabi_dmul>
 8008cfe:	4b23      	ldr	r3, [pc, #140]	@ (8008d8c <_strtod_l+0x584>)
 8008d00:	460a      	mov	r2, r1
 8008d02:	400b      	ands	r3, r1
 8008d04:	4925      	ldr	r1, [pc, #148]	@ (8008d9c <_strtod_l+0x594>)
 8008d06:	4682      	mov	sl, r0
 8008d08:	428b      	cmp	r3, r1
 8008d0a:	d898      	bhi.n	8008c3e <_strtod_l+0x436>
 8008d0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008d10:	428b      	cmp	r3, r1
 8008d12:	bf86      	itte	hi
 8008d14:	f04f 3aff 	movhi.w	sl, #4294967295
 8008d18:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8008da0 <_strtod_l+0x598>
 8008d1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008d20:	2300      	movs	r3, #0
 8008d22:	9308      	str	r3, [sp, #32]
 8008d24:	e076      	b.n	8008e14 <_strtod_l+0x60c>
 8008d26:	07e2      	lsls	r2, r4, #31
 8008d28:	d504      	bpl.n	8008d34 <_strtod_l+0x52c>
 8008d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d2e:	f7f7 fbd3 	bl	80004d8 <__aeabi_dmul>
 8008d32:	2301      	movs	r3, #1
 8008d34:	3601      	adds	r6, #1
 8008d36:	1064      	asrs	r4, r4, #1
 8008d38:	3708      	adds	r7, #8
 8008d3a:	e7d0      	b.n	8008cde <_strtod_l+0x4d6>
 8008d3c:	d0f0      	beq.n	8008d20 <_strtod_l+0x518>
 8008d3e:	4264      	negs	r4, r4
 8008d40:	f014 020f 	ands.w	r2, r4, #15
 8008d44:	d00a      	beq.n	8008d5c <_strtod_l+0x554>
 8008d46:	4b13      	ldr	r3, [pc, #76]	@ (8008d94 <_strtod_l+0x58c>)
 8008d48:	4650      	mov	r0, sl
 8008d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d4e:	4659      	mov	r1, fp
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f7f7 fcea 	bl	800072c <__aeabi_ddiv>
 8008d58:	4682      	mov	sl, r0
 8008d5a:	468b      	mov	fp, r1
 8008d5c:	1124      	asrs	r4, r4, #4
 8008d5e:	d0df      	beq.n	8008d20 <_strtod_l+0x518>
 8008d60:	2c1f      	cmp	r4, #31
 8008d62:	dd1f      	ble.n	8008da4 <_strtod_l+0x59c>
 8008d64:	2400      	movs	r4, #0
 8008d66:	46a0      	mov	r8, r4
 8008d68:	46a1      	mov	r9, r4
 8008d6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d6c:	2322      	movs	r3, #34	@ 0x22
 8008d6e:	9a05      	ldr	r2, [sp, #20]
 8008d70:	f04f 0a00 	mov.w	sl, #0
 8008d74:	f04f 0b00 	mov.w	fp, #0
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	e76b      	b.n	8008c54 <_strtod_l+0x44c>
 8008d7c:	0800cb2f 	.word	0x0800cb2f
 8008d80:	0800ccf4 	.word	0x0800ccf4
 8008d84:	0800cb27 	.word	0x0800cb27
 8008d88:	0800cb61 	.word	0x0800cb61
 8008d8c:	7ff00000 	.word	0x7ff00000
 8008d90:	0800ccf0 	.word	0x0800ccf0
 8008d94:	0800ce80 	.word	0x0800ce80
 8008d98:	0800ce58 	.word	0x0800ce58
 8008d9c:	7ca00000 	.word	0x7ca00000
 8008da0:	7fefffff 	.word	0x7fefffff
 8008da4:	f014 0310 	ands.w	r3, r4, #16
 8008da8:	bf18      	it	ne
 8008daa:	236a      	movne	r3, #106	@ 0x6a
 8008dac:	4650      	mov	r0, sl
 8008dae:	9308      	str	r3, [sp, #32]
 8008db0:	4659      	mov	r1, fp
 8008db2:	2300      	movs	r3, #0
 8008db4:	4e77      	ldr	r6, [pc, #476]	@ (8008f94 <_strtod_l+0x78c>)
 8008db6:	07e7      	lsls	r7, r4, #31
 8008db8:	d504      	bpl.n	8008dc4 <_strtod_l+0x5bc>
 8008dba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dbe:	f7f7 fb8b 	bl	80004d8 <__aeabi_dmul>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	1064      	asrs	r4, r4, #1
 8008dc6:	f106 0608 	add.w	r6, r6, #8
 8008dca:	d1f4      	bne.n	8008db6 <_strtod_l+0x5ae>
 8008dcc:	b10b      	cbz	r3, 8008dd2 <_strtod_l+0x5ca>
 8008dce:	4682      	mov	sl, r0
 8008dd0:	468b      	mov	fp, r1
 8008dd2:	9b08      	ldr	r3, [sp, #32]
 8008dd4:	b1b3      	cbz	r3, 8008e04 <_strtod_l+0x5fc>
 8008dd6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008dda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	4659      	mov	r1, fp
 8008de2:	dd0f      	ble.n	8008e04 <_strtod_l+0x5fc>
 8008de4:	2b1f      	cmp	r3, #31
 8008de6:	dd58      	ble.n	8008e9a <_strtod_l+0x692>
 8008de8:	2b34      	cmp	r3, #52	@ 0x34
 8008dea:	bfd8      	it	le
 8008dec:	f04f 33ff 	movle.w	r3, #4294967295
 8008df0:	f04f 0a00 	mov.w	sl, #0
 8008df4:	bfcf      	iteee	gt
 8008df6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008dfa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008dfe:	4093      	lslle	r3, r2
 8008e00:	ea03 0b01 	andle.w	fp, r3, r1
 8008e04:	2200      	movs	r2, #0
 8008e06:	2300      	movs	r3, #0
 8008e08:	4650      	mov	r0, sl
 8008e0a:	4659      	mov	r1, fp
 8008e0c:	f7f7 fdcc 	bl	80009a8 <__aeabi_dcmpeq>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d1a7      	bne.n	8008d64 <_strtod_l+0x55c>
 8008e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e16:	464a      	mov	r2, r9
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008e1c:	462b      	mov	r3, r5
 8008e1e:	9805      	ldr	r0, [sp, #20]
 8008e20:	f002 fcf4 	bl	800b80c <__s2b>
 8008e24:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f43f af09 	beq.w	8008c3e <_strtod_l+0x436>
 8008e2c:	2400      	movs	r4, #0
 8008e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e32:	2a00      	cmp	r2, #0
 8008e34:	eba3 0308 	sub.w	r3, r3, r8
 8008e38:	bfa8      	it	ge
 8008e3a:	2300      	movge	r3, #0
 8008e3c:	46a0      	mov	r8, r4
 8008e3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e40:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008e44:	9316      	str	r3, [sp, #88]	@ 0x58
 8008e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e48:	9805      	ldr	r0, [sp, #20]
 8008e4a:	6859      	ldr	r1, [r3, #4]
 8008e4c:	f002 fc36 	bl	800b6bc <_Balloc>
 8008e50:	4681      	mov	r9, r0
 8008e52:	2800      	cmp	r0, #0
 8008e54:	f43f aef7 	beq.w	8008c46 <_strtod_l+0x43e>
 8008e58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e5a:	300c      	adds	r0, #12
 8008e5c:	691a      	ldr	r2, [r3, #16]
 8008e5e:	f103 010c 	add.w	r1, r3, #12
 8008e62:	3202      	adds	r2, #2
 8008e64:	0092      	lsls	r2, r2, #2
 8008e66:	f001 f96c 	bl	800a142 <memcpy>
 8008e6a:	ab1c      	add	r3, sp, #112	@ 0x70
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	4652      	mov	r2, sl
 8008e74:	465b      	mov	r3, fp
 8008e76:	9805      	ldr	r0, [sp, #20]
 8008e78:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008e7c:	f002 fff2 	bl	800be64 <__d2b>
 8008e80:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e82:	2800      	cmp	r0, #0
 8008e84:	f43f aedf 	beq.w	8008c46 <_strtod_l+0x43e>
 8008e88:	2101      	movs	r1, #1
 8008e8a:	9805      	ldr	r0, [sp, #20]
 8008e8c:	f002 fd54 	bl	800b938 <__i2b>
 8008e90:	4680      	mov	r8, r0
 8008e92:	b948      	cbnz	r0, 8008ea8 <_strtod_l+0x6a0>
 8008e94:	f04f 0800 	mov.w	r8, #0
 8008e98:	e6d5      	b.n	8008c46 <_strtod_l+0x43e>
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea2:	ea03 0a0a 	and.w	sl, r3, sl
 8008ea6:	e7ad      	b.n	8008e04 <_strtod_l+0x5fc>
 8008ea8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008eaa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008eac:	2d00      	cmp	r5, #0
 8008eae:	bfab      	itete	ge
 8008eb0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008eb2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008eb4:	18ef      	addge	r7, r5, r3
 8008eb6:	1b5e      	sublt	r6, r3, r5
 8008eb8:	9b08      	ldr	r3, [sp, #32]
 8008eba:	bfa8      	it	ge
 8008ebc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008ebe:	eba5 0503 	sub.w	r5, r5, r3
 8008ec2:	4415      	add	r5, r2
 8008ec4:	4b34      	ldr	r3, [pc, #208]	@ (8008f98 <_strtod_l+0x790>)
 8008ec6:	f105 35ff 	add.w	r5, r5, #4294967295
 8008eca:	bfb8      	it	lt
 8008ecc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008ece:	429d      	cmp	r5, r3
 8008ed0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008ed4:	da50      	bge.n	8008f78 <_strtod_l+0x770>
 8008ed6:	1b5b      	subs	r3, r3, r5
 8008ed8:	2b1f      	cmp	r3, #31
 8008eda:	f04f 0101 	mov.w	r1, #1
 8008ede:	eba2 0203 	sub.w	r2, r2, r3
 8008ee2:	dc3d      	bgt.n	8008f60 <_strtod_l+0x758>
 8008ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008eea:	2300      	movs	r3, #0
 8008eec:	9310      	str	r3, [sp, #64]	@ 0x40
 8008eee:	18bd      	adds	r5, r7, r2
 8008ef0:	9b08      	ldr	r3, [sp, #32]
 8008ef2:	42af      	cmp	r7, r5
 8008ef4:	4416      	add	r6, r2
 8008ef6:	441e      	add	r6, r3
 8008ef8:	463b      	mov	r3, r7
 8008efa:	bfa8      	it	ge
 8008efc:	462b      	movge	r3, r5
 8008efe:	42b3      	cmp	r3, r6
 8008f00:	bfa8      	it	ge
 8008f02:	4633      	movge	r3, r6
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bfc2      	ittt	gt
 8008f08:	1aed      	subgt	r5, r5, r3
 8008f0a:	1af6      	subgt	r6, r6, r3
 8008f0c:	1aff      	subgt	r7, r7, r3
 8008f0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dd16      	ble.n	8008f42 <_strtod_l+0x73a>
 8008f14:	4641      	mov	r1, r8
 8008f16:	461a      	mov	r2, r3
 8008f18:	9805      	ldr	r0, [sp, #20]
 8008f1a:	f002 fdc5 	bl	800baa8 <__pow5mult>
 8008f1e:	4680      	mov	r8, r0
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d0b7      	beq.n	8008e94 <_strtod_l+0x68c>
 8008f24:	4601      	mov	r1, r0
 8008f26:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f28:	9805      	ldr	r0, [sp, #20]
 8008f2a:	f002 fd1b 	bl	800b964 <__multiply>
 8008f2e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f30:	2800      	cmp	r0, #0
 8008f32:	f43f ae88 	beq.w	8008c46 <_strtod_l+0x43e>
 8008f36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f38:	9805      	ldr	r0, [sp, #20]
 8008f3a:	f002 fbff 	bl	800b73c <_Bfree>
 8008f3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f40:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f42:	2d00      	cmp	r5, #0
 8008f44:	dc1d      	bgt.n	8008f82 <_strtod_l+0x77a>
 8008f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dd27      	ble.n	8008f9c <_strtod_l+0x794>
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f50:	9805      	ldr	r0, [sp, #20]
 8008f52:	f002 fda9 	bl	800baa8 <__pow5mult>
 8008f56:	4681      	mov	r9, r0
 8008f58:	bb00      	cbnz	r0, 8008f9c <_strtod_l+0x794>
 8008f5a:	f04f 0900 	mov.w	r9, #0
 8008f5e:	e672      	b.n	8008c46 <_strtod_l+0x43e>
 8008f60:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008f64:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008f68:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008f6c:	35e2      	adds	r5, #226	@ 0xe2
 8008f6e:	fa01 f305 	lsl.w	r3, r1, r5
 8008f72:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f74:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008f76:	e7ba      	b.n	8008eee <_strtod_l+0x6e6>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f80:	e7b5      	b.n	8008eee <_strtod_l+0x6e6>
 8008f82:	462a      	mov	r2, r5
 8008f84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f86:	9805      	ldr	r0, [sp, #20]
 8008f88:	f002 fde8 	bl	800bb5c <__lshift>
 8008f8c:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d1d9      	bne.n	8008f46 <_strtod_l+0x73e>
 8008f92:	e658      	b.n	8008c46 <_strtod_l+0x43e>
 8008f94:	0800cd20 	.word	0x0800cd20
 8008f98:	fffffc02 	.word	0xfffffc02
 8008f9c:	2e00      	cmp	r6, #0
 8008f9e:	dd07      	ble.n	8008fb0 <_strtod_l+0x7a8>
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	4632      	mov	r2, r6
 8008fa4:	9805      	ldr	r0, [sp, #20]
 8008fa6:	f002 fdd9 	bl	800bb5c <__lshift>
 8008faa:	4681      	mov	r9, r0
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d0d4      	beq.n	8008f5a <_strtod_l+0x752>
 8008fb0:	2f00      	cmp	r7, #0
 8008fb2:	dd08      	ble.n	8008fc6 <_strtod_l+0x7be>
 8008fb4:	4641      	mov	r1, r8
 8008fb6:	463a      	mov	r2, r7
 8008fb8:	9805      	ldr	r0, [sp, #20]
 8008fba:	f002 fdcf 	bl	800bb5c <__lshift>
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	f43f ae40 	beq.w	8008c46 <_strtod_l+0x43e>
 8008fc6:	464a      	mov	r2, r9
 8008fc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fca:	9805      	ldr	r0, [sp, #20]
 8008fcc:	f002 fe4e 	bl	800bc6c <__mdiff>
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	f43f ae37 	beq.w	8008c46 <_strtod_l+0x43e>
 8008fd8:	68c3      	ldr	r3, [r0, #12]
 8008fda:	4641      	mov	r1, r8
 8008fdc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60c3      	str	r3, [r0, #12]
 8008fe2:	f002 fe27 	bl	800bc34 <__mcmp>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	da3d      	bge.n	8009066 <_strtod_l+0x85e>
 8008fea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fec:	ea53 030a 	orrs.w	r3, r3, sl
 8008ff0:	d163      	bne.n	80090ba <_strtod_l+0x8b2>
 8008ff2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d15f      	bne.n	80090ba <_strtod_l+0x8b2>
 8008ffa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ffe:	0d1b      	lsrs	r3, r3, #20
 8009000:	051b      	lsls	r3, r3, #20
 8009002:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009006:	d958      	bls.n	80090ba <_strtod_l+0x8b2>
 8009008:	6963      	ldr	r3, [r4, #20]
 800900a:	b913      	cbnz	r3, 8009012 <_strtod_l+0x80a>
 800900c:	6923      	ldr	r3, [r4, #16]
 800900e:	2b01      	cmp	r3, #1
 8009010:	dd53      	ble.n	80090ba <_strtod_l+0x8b2>
 8009012:	4621      	mov	r1, r4
 8009014:	2201      	movs	r2, #1
 8009016:	9805      	ldr	r0, [sp, #20]
 8009018:	f002 fda0 	bl	800bb5c <__lshift>
 800901c:	4641      	mov	r1, r8
 800901e:	4604      	mov	r4, r0
 8009020:	f002 fe08 	bl	800bc34 <__mcmp>
 8009024:	2800      	cmp	r0, #0
 8009026:	dd48      	ble.n	80090ba <_strtod_l+0x8b2>
 8009028:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800902c:	9a08      	ldr	r2, [sp, #32]
 800902e:	0d1b      	lsrs	r3, r3, #20
 8009030:	051b      	lsls	r3, r3, #20
 8009032:	2a00      	cmp	r2, #0
 8009034:	d062      	beq.n	80090fc <_strtod_l+0x8f4>
 8009036:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800903a:	d85f      	bhi.n	80090fc <_strtod_l+0x8f4>
 800903c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009040:	f67f ae94 	bls.w	8008d6c <_strtod_l+0x564>
 8009044:	4650      	mov	r0, sl
 8009046:	4659      	mov	r1, fp
 8009048:	4ba3      	ldr	r3, [pc, #652]	@ (80092d8 <_strtod_l+0xad0>)
 800904a:	2200      	movs	r2, #0
 800904c:	f7f7 fa44 	bl	80004d8 <__aeabi_dmul>
 8009050:	4ba2      	ldr	r3, [pc, #648]	@ (80092dc <_strtod_l+0xad4>)
 8009052:	4682      	mov	sl, r0
 8009054:	400b      	ands	r3, r1
 8009056:	468b      	mov	fp, r1
 8009058:	2b00      	cmp	r3, #0
 800905a:	f47f adff 	bne.w	8008c5c <_strtod_l+0x454>
 800905e:	2322      	movs	r3, #34	@ 0x22
 8009060:	9a05      	ldr	r2, [sp, #20]
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	e5fa      	b.n	8008c5c <_strtod_l+0x454>
 8009066:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800906a:	d165      	bne.n	8009138 <_strtod_l+0x930>
 800906c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800906e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009072:	b35a      	cbz	r2, 80090cc <_strtod_l+0x8c4>
 8009074:	4a9a      	ldr	r2, [pc, #616]	@ (80092e0 <_strtod_l+0xad8>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d12b      	bne.n	80090d2 <_strtod_l+0x8ca>
 800907a:	9b08      	ldr	r3, [sp, #32]
 800907c:	4651      	mov	r1, sl
 800907e:	b303      	cbz	r3, 80090c2 <_strtod_l+0x8ba>
 8009080:	465a      	mov	r2, fp
 8009082:	4b96      	ldr	r3, [pc, #600]	@ (80092dc <_strtod_l+0xad4>)
 8009084:	4013      	ands	r3, r2
 8009086:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800908a:	f04f 32ff 	mov.w	r2, #4294967295
 800908e:	d81b      	bhi.n	80090c8 <_strtod_l+0x8c0>
 8009090:	0d1b      	lsrs	r3, r3, #20
 8009092:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009096:	fa02 f303 	lsl.w	r3, r2, r3
 800909a:	4299      	cmp	r1, r3
 800909c:	d119      	bne.n	80090d2 <_strtod_l+0x8ca>
 800909e:	4b91      	ldr	r3, [pc, #580]	@ (80092e4 <_strtod_l+0xadc>)
 80090a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d102      	bne.n	80090ac <_strtod_l+0x8a4>
 80090a6:	3101      	adds	r1, #1
 80090a8:	f43f adcd 	beq.w	8008c46 <_strtod_l+0x43e>
 80090ac:	f04f 0a00 	mov.w	sl, #0
 80090b0:	4b8a      	ldr	r3, [pc, #552]	@ (80092dc <_strtod_l+0xad4>)
 80090b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090b4:	401a      	ands	r2, r3
 80090b6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80090ba:	9b08      	ldr	r3, [sp, #32]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1c1      	bne.n	8009044 <_strtod_l+0x83c>
 80090c0:	e5cc      	b.n	8008c5c <_strtod_l+0x454>
 80090c2:	f04f 33ff 	mov.w	r3, #4294967295
 80090c6:	e7e8      	b.n	800909a <_strtod_l+0x892>
 80090c8:	4613      	mov	r3, r2
 80090ca:	e7e6      	b.n	800909a <_strtod_l+0x892>
 80090cc:	ea53 030a 	orrs.w	r3, r3, sl
 80090d0:	d0aa      	beq.n	8009028 <_strtod_l+0x820>
 80090d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80090d4:	b1db      	cbz	r3, 800910e <_strtod_l+0x906>
 80090d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090d8:	4213      	tst	r3, r2
 80090da:	d0ee      	beq.n	80090ba <_strtod_l+0x8b2>
 80090dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090de:	4650      	mov	r0, sl
 80090e0:	4659      	mov	r1, fp
 80090e2:	9a08      	ldr	r2, [sp, #32]
 80090e4:	b1bb      	cbz	r3, 8009116 <_strtod_l+0x90e>
 80090e6:	f7ff fb6c 	bl	80087c2 <sulp>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090f2:	f7f7 f83b 	bl	800016c <__adddf3>
 80090f6:	4682      	mov	sl, r0
 80090f8:	468b      	mov	fp, r1
 80090fa:	e7de      	b.n	80090ba <_strtod_l+0x8b2>
 80090fc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009100:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009104:	f04f 3aff 	mov.w	sl, #4294967295
 8009108:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800910c:	e7d5      	b.n	80090ba <_strtod_l+0x8b2>
 800910e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009110:	ea13 0f0a 	tst.w	r3, sl
 8009114:	e7e1      	b.n	80090da <_strtod_l+0x8d2>
 8009116:	f7ff fb54 	bl	80087c2 <sulp>
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009122:	f7f7 f821 	bl	8000168 <__aeabi_dsub>
 8009126:	2200      	movs	r2, #0
 8009128:	2300      	movs	r3, #0
 800912a:	4682      	mov	sl, r0
 800912c:	468b      	mov	fp, r1
 800912e:	f7f7 fc3b 	bl	80009a8 <__aeabi_dcmpeq>
 8009132:	2800      	cmp	r0, #0
 8009134:	d0c1      	beq.n	80090ba <_strtod_l+0x8b2>
 8009136:	e619      	b.n	8008d6c <_strtod_l+0x564>
 8009138:	4641      	mov	r1, r8
 800913a:	4620      	mov	r0, r4
 800913c:	f002 feea 	bl	800bf14 <__ratio>
 8009140:	2200      	movs	r2, #0
 8009142:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009146:	4606      	mov	r6, r0
 8009148:	460f      	mov	r7, r1
 800914a:	f7f7 fc41 	bl	80009d0 <__aeabi_dcmple>
 800914e:	2800      	cmp	r0, #0
 8009150:	d06d      	beq.n	800922e <_strtod_l+0xa26>
 8009152:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009154:	2b00      	cmp	r3, #0
 8009156:	d178      	bne.n	800924a <_strtod_l+0xa42>
 8009158:	f1ba 0f00 	cmp.w	sl, #0
 800915c:	d156      	bne.n	800920c <_strtod_l+0xa04>
 800915e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009164:	2b00      	cmp	r3, #0
 8009166:	d158      	bne.n	800921a <_strtod_l+0xa12>
 8009168:	2200      	movs	r2, #0
 800916a:	4630      	mov	r0, r6
 800916c:	4639      	mov	r1, r7
 800916e:	4b5e      	ldr	r3, [pc, #376]	@ (80092e8 <_strtod_l+0xae0>)
 8009170:	f7f7 fc24 	bl	80009bc <__aeabi_dcmplt>
 8009174:	2800      	cmp	r0, #0
 8009176:	d157      	bne.n	8009228 <_strtod_l+0xa20>
 8009178:	4630      	mov	r0, r6
 800917a:	4639      	mov	r1, r7
 800917c:	2200      	movs	r2, #0
 800917e:	4b5b      	ldr	r3, [pc, #364]	@ (80092ec <_strtod_l+0xae4>)
 8009180:	f7f7 f9aa 	bl	80004d8 <__aeabi_dmul>
 8009184:	4606      	mov	r6, r0
 8009186:	460f      	mov	r7, r1
 8009188:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800918c:	9606      	str	r6, [sp, #24]
 800918e:	9307      	str	r3, [sp, #28]
 8009190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009194:	4d51      	ldr	r5, [pc, #324]	@ (80092dc <_strtod_l+0xad4>)
 8009196:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800919a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800919c:	401d      	ands	r5, r3
 800919e:	4b54      	ldr	r3, [pc, #336]	@ (80092f0 <_strtod_l+0xae8>)
 80091a0:	429d      	cmp	r5, r3
 80091a2:	f040 80ab 	bne.w	80092fc <_strtod_l+0xaf4>
 80091a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091a8:	4650      	mov	r0, sl
 80091aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80091ae:	4659      	mov	r1, fp
 80091b0:	f002 fdf0 	bl	800bd94 <__ulp>
 80091b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091b8:	f7f7 f98e 	bl	80004d8 <__aeabi_dmul>
 80091bc:	4652      	mov	r2, sl
 80091be:	465b      	mov	r3, fp
 80091c0:	f7f6 ffd4 	bl	800016c <__adddf3>
 80091c4:	460b      	mov	r3, r1
 80091c6:	4945      	ldr	r1, [pc, #276]	@ (80092dc <_strtod_l+0xad4>)
 80091c8:	4a4a      	ldr	r2, [pc, #296]	@ (80092f4 <_strtod_l+0xaec>)
 80091ca:	4019      	ands	r1, r3
 80091cc:	4291      	cmp	r1, r2
 80091ce:	4682      	mov	sl, r0
 80091d0:	d942      	bls.n	8009258 <_strtod_l+0xa50>
 80091d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80091d4:	4b43      	ldr	r3, [pc, #268]	@ (80092e4 <_strtod_l+0xadc>)
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d103      	bne.n	80091e2 <_strtod_l+0x9da>
 80091da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091dc:	3301      	adds	r3, #1
 80091de:	f43f ad32 	beq.w	8008c46 <_strtod_l+0x43e>
 80091e2:	f04f 3aff 	mov.w	sl, #4294967295
 80091e6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80092e4 <_strtod_l+0xadc>
 80091ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091ec:	9805      	ldr	r0, [sp, #20]
 80091ee:	f002 faa5 	bl	800b73c <_Bfree>
 80091f2:	4649      	mov	r1, r9
 80091f4:	9805      	ldr	r0, [sp, #20]
 80091f6:	f002 faa1 	bl	800b73c <_Bfree>
 80091fa:	4641      	mov	r1, r8
 80091fc:	9805      	ldr	r0, [sp, #20]
 80091fe:	f002 fa9d 	bl	800b73c <_Bfree>
 8009202:	4621      	mov	r1, r4
 8009204:	9805      	ldr	r0, [sp, #20]
 8009206:	f002 fa99 	bl	800b73c <_Bfree>
 800920a:	e61c      	b.n	8008e46 <_strtod_l+0x63e>
 800920c:	f1ba 0f01 	cmp.w	sl, #1
 8009210:	d103      	bne.n	800921a <_strtod_l+0xa12>
 8009212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009214:	2b00      	cmp	r3, #0
 8009216:	f43f ada9 	beq.w	8008d6c <_strtod_l+0x564>
 800921a:	2200      	movs	r2, #0
 800921c:	4b36      	ldr	r3, [pc, #216]	@ (80092f8 <_strtod_l+0xaf0>)
 800921e:	2600      	movs	r6, #0
 8009220:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009224:	4f30      	ldr	r7, [pc, #192]	@ (80092e8 <_strtod_l+0xae0>)
 8009226:	e7b3      	b.n	8009190 <_strtod_l+0x988>
 8009228:	2600      	movs	r6, #0
 800922a:	4f30      	ldr	r7, [pc, #192]	@ (80092ec <_strtod_l+0xae4>)
 800922c:	e7ac      	b.n	8009188 <_strtod_l+0x980>
 800922e:	4630      	mov	r0, r6
 8009230:	4639      	mov	r1, r7
 8009232:	4b2e      	ldr	r3, [pc, #184]	@ (80092ec <_strtod_l+0xae4>)
 8009234:	2200      	movs	r2, #0
 8009236:	f7f7 f94f 	bl	80004d8 <__aeabi_dmul>
 800923a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800923c:	4606      	mov	r6, r0
 800923e:	460f      	mov	r7, r1
 8009240:	2b00      	cmp	r3, #0
 8009242:	d0a1      	beq.n	8009188 <_strtod_l+0x980>
 8009244:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009248:	e7a2      	b.n	8009190 <_strtod_l+0x988>
 800924a:	2200      	movs	r2, #0
 800924c:	4b26      	ldr	r3, [pc, #152]	@ (80092e8 <_strtod_l+0xae0>)
 800924e:	4616      	mov	r6, r2
 8009250:	461f      	mov	r7, r3
 8009252:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009256:	e79b      	b.n	8009190 <_strtod_l+0x988>
 8009258:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800925c:	9b08      	ldr	r3, [sp, #32]
 800925e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1c1      	bne.n	80091ea <_strtod_l+0x9e2>
 8009266:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800926a:	0d1b      	lsrs	r3, r3, #20
 800926c:	051b      	lsls	r3, r3, #20
 800926e:	429d      	cmp	r5, r3
 8009270:	d1bb      	bne.n	80091ea <_strtod_l+0x9e2>
 8009272:	4630      	mov	r0, r6
 8009274:	4639      	mov	r1, r7
 8009276:	f7f7 ff6b 	bl	8001150 <__aeabi_d2lz>
 800927a:	f7f7 f8ff 	bl	800047c <__aeabi_l2d>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4630      	mov	r0, r6
 8009284:	4639      	mov	r1, r7
 8009286:	f7f6 ff6f 	bl	8000168 <__aeabi_dsub>
 800928a:	460b      	mov	r3, r1
 800928c:	4602      	mov	r2, r0
 800928e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009292:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009296:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009298:	ea46 060a 	orr.w	r6, r6, sl
 800929c:	431e      	orrs	r6, r3
 800929e:	d06a      	beq.n	8009376 <_strtod_l+0xb6e>
 80092a0:	a309      	add	r3, pc, #36	@ (adr r3, 80092c8 <_strtod_l+0xac0>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	f7f7 fb89 	bl	80009bc <__aeabi_dcmplt>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	f47f acd6 	bne.w	8008c5c <_strtod_l+0x454>
 80092b0:	a307      	add	r3, pc, #28	@ (adr r3, 80092d0 <_strtod_l+0xac8>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092ba:	f7f7 fb9d 	bl	80009f8 <__aeabi_dcmpgt>
 80092be:	2800      	cmp	r0, #0
 80092c0:	d093      	beq.n	80091ea <_strtod_l+0x9e2>
 80092c2:	e4cb      	b.n	8008c5c <_strtod_l+0x454>
 80092c4:	f3af 8000 	nop.w
 80092c8:	94a03595 	.word	0x94a03595
 80092cc:	3fdfffff 	.word	0x3fdfffff
 80092d0:	35afe535 	.word	0x35afe535
 80092d4:	3fe00000 	.word	0x3fe00000
 80092d8:	39500000 	.word	0x39500000
 80092dc:	7ff00000 	.word	0x7ff00000
 80092e0:	000fffff 	.word	0x000fffff
 80092e4:	7fefffff 	.word	0x7fefffff
 80092e8:	3ff00000 	.word	0x3ff00000
 80092ec:	3fe00000 	.word	0x3fe00000
 80092f0:	7fe00000 	.word	0x7fe00000
 80092f4:	7c9fffff 	.word	0x7c9fffff
 80092f8:	bff00000 	.word	0xbff00000
 80092fc:	9b08      	ldr	r3, [sp, #32]
 80092fe:	b323      	cbz	r3, 800934a <_strtod_l+0xb42>
 8009300:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009304:	d821      	bhi.n	800934a <_strtod_l+0xb42>
 8009306:	a328      	add	r3, pc, #160	@ (adr r3, 80093a8 <_strtod_l+0xba0>)
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	4630      	mov	r0, r6
 800930e:	4639      	mov	r1, r7
 8009310:	f7f7 fb5e 	bl	80009d0 <__aeabi_dcmple>
 8009314:	b1a0      	cbz	r0, 8009340 <_strtod_l+0xb38>
 8009316:	4639      	mov	r1, r7
 8009318:	4630      	mov	r0, r6
 800931a:	f7f7 fbb5 	bl	8000a88 <__aeabi_d2uiz>
 800931e:	2801      	cmp	r0, #1
 8009320:	bf38      	it	cc
 8009322:	2001      	movcc	r0, #1
 8009324:	f7f7 f85e 	bl	80003e4 <__aeabi_ui2d>
 8009328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800932a:	4606      	mov	r6, r0
 800932c:	460f      	mov	r7, r1
 800932e:	b9fb      	cbnz	r3, 8009370 <_strtod_l+0xb68>
 8009330:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009334:	9014      	str	r0, [sp, #80]	@ 0x50
 8009336:	9315      	str	r3, [sp, #84]	@ 0x54
 8009338:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800933c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009340:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009342:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009346:	1b5b      	subs	r3, r3, r5
 8009348:	9311      	str	r3, [sp, #68]	@ 0x44
 800934a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800934e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009352:	f002 fd1f 	bl	800bd94 <__ulp>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4650      	mov	r0, sl
 800935c:	4659      	mov	r1, fp
 800935e:	f7f7 f8bb 	bl	80004d8 <__aeabi_dmul>
 8009362:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009366:	f7f6 ff01 	bl	800016c <__adddf3>
 800936a:	4682      	mov	sl, r0
 800936c:	468b      	mov	fp, r1
 800936e:	e775      	b.n	800925c <_strtod_l+0xa54>
 8009370:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009374:	e7e0      	b.n	8009338 <_strtod_l+0xb30>
 8009376:	a30e      	add	r3, pc, #56	@ (adr r3, 80093b0 <_strtod_l+0xba8>)
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	f7f7 fb1e 	bl	80009bc <__aeabi_dcmplt>
 8009380:	e79d      	b.n	80092be <_strtod_l+0xab6>
 8009382:	2300      	movs	r3, #0
 8009384:	930e      	str	r3, [sp, #56]	@ 0x38
 8009386:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009388:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	f7ff ba79 	b.w	8008882 <_strtod_l+0x7a>
 8009390:	2a65      	cmp	r2, #101	@ 0x65
 8009392:	f43f ab72 	beq.w	8008a7a <_strtod_l+0x272>
 8009396:	2a45      	cmp	r2, #69	@ 0x45
 8009398:	f43f ab6f 	beq.w	8008a7a <_strtod_l+0x272>
 800939c:	2301      	movs	r3, #1
 800939e:	f7ff bbaa 	b.w	8008af6 <_strtod_l+0x2ee>
 80093a2:	bf00      	nop
 80093a4:	f3af 8000 	nop.w
 80093a8:	ffc00000 	.word	0xffc00000
 80093ac:	41dfffff 	.word	0x41dfffff
 80093b0:	94a03595 	.word	0x94a03595
 80093b4:	3fcfffff 	.word	0x3fcfffff

080093b8 <strtod>:
 80093b8:	460a      	mov	r2, r1
 80093ba:	4601      	mov	r1, r0
 80093bc:	4802      	ldr	r0, [pc, #8]	@ (80093c8 <strtod+0x10>)
 80093be:	4b03      	ldr	r3, [pc, #12]	@ (80093cc <strtod+0x14>)
 80093c0:	6800      	ldr	r0, [r0, #0]
 80093c2:	f7ff ba21 	b.w	8008808 <_strtod_l>
 80093c6:	bf00      	nop
 80093c8:	20000188 	.word	0x20000188
 80093cc:	2000001c 	.word	0x2000001c

080093d0 <_strtol_l.isra.0>:
 80093d0:	2b24      	cmp	r3, #36	@ 0x24
 80093d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d6:	4686      	mov	lr, r0
 80093d8:	4690      	mov	r8, r2
 80093da:	d801      	bhi.n	80093e0 <_strtol_l.isra.0+0x10>
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d106      	bne.n	80093ee <_strtol_l.isra.0+0x1e>
 80093e0:	f000 fe74 	bl	800a0cc <__errno>
 80093e4:	2316      	movs	r3, #22
 80093e6:	6003      	str	r3, [r0, #0]
 80093e8:	2000      	movs	r0, #0
 80093ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ee:	460d      	mov	r5, r1
 80093f0:	4833      	ldr	r0, [pc, #204]	@ (80094c0 <_strtol_l.isra.0+0xf0>)
 80093f2:	462a      	mov	r2, r5
 80093f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093f8:	5d06      	ldrb	r6, [r0, r4]
 80093fa:	f016 0608 	ands.w	r6, r6, #8
 80093fe:	d1f8      	bne.n	80093f2 <_strtol_l.isra.0+0x22>
 8009400:	2c2d      	cmp	r4, #45	@ 0x2d
 8009402:	d110      	bne.n	8009426 <_strtol_l.isra.0+0x56>
 8009404:	2601      	movs	r6, #1
 8009406:	782c      	ldrb	r4, [r5, #0]
 8009408:	1c95      	adds	r5, r2, #2
 800940a:	f033 0210 	bics.w	r2, r3, #16
 800940e:	d115      	bne.n	800943c <_strtol_l.isra.0+0x6c>
 8009410:	2c30      	cmp	r4, #48	@ 0x30
 8009412:	d10d      	bne.n	8009430 <_strtol_l.isra.0+0x60>
 8009414:	782a      	ldrb	r2, [r5, #0]
 8009416:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800941a:	2a58      	cmp	r2, #88	@ 0x58
 800941c:	d108      	bne.n	8009430 <_strtol_l.isra.0+0x60>
 800941e:	786c      	ldrb	r4, [r5, #1]
 8009420:	3502      	adds	r5, #2
 8009422:	2310      	movs	r3, #16
 8009424:	e00a      	b.n	800943c <_strtol_l.isra.0+0x6c>
 8009426:	2c2b      	cmp	r4, #43	@ 0x2b
 8009428:	bf04      	itt	eq
 800942a:	782c      	ldrbeq	r4, [r5, #0]
 800942c:	1c95      	addeq	r5, r2, #2
 800942e:	e7ec      	b.n	800940a <_strtol_l.isra.0+0x3a>
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1f6      	bne.n	8009422 <_strtol_l.isra.0+0x52>
 8009434:	2c30      	cmp	r4, #48	@ 0x30
 8009436:	bf14      	ite	ne
 8009438:	230a      	movne	r3, #10
 800943a:	2308      	moveq	r3, #8
 800943c:	2200      	movs	r2, #0
 800943e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009442:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009446:	fbbc f9f3 	udiv	r9, ip, r3
 800944a:	4610      	mov	r0, r2
 800944c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009450:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009454:	2f09      	cmp	r7, #9
 8009456:	d80f      	bhi.n	8009478 <_strtol_l.isra.0+0xa8>
 8009458:	463c      	mov	r4, r7
 800945a:	42a3      	cmp	r3, r4
 800945c:	dd1b      	ble.n	8009496 <_strtol_l.isra.0+0xc6>
 800945e:	1c57      	adds	r7, r2, #1
 8009460:	d007      	beq.n	8009472 <_strtol_l.isra.0+0xa2>
 8009462:	4581      	cmp	r9, r0
 8009464:	d314      	bcc.n	8009490 <_strtol_l.isra.0+0xc0>
 8009466:	d101      	bne.n	800946c <_strtol_l.isra.0+0x9c>
 8009468:	45a2      	cmp	sl, r4
 800946a:	db11      	blt.n	8009490 <_strtol_l.isra.0+0xc0>
 800946c:	2201      	movs	r2, #1
 800946e:	fb00 4003 	mla	r0, r0, r3, r4
 8009472:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009476:	e7eb      	b.n	8009450 <_strtol_l.isra.0+0x80>
 8009478:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800947c:	2f19      	cmp	r7, #25
 800947e:	d801      	bhi.n	8009484 <_strtol_l.isra.0+0xb4>
 8009480:	3c37      	subs	r4, #55	@ 0x37
 8009482:	e7ea      	b.n	800945a <_strtol_l.isra.0+0x8a>
 8009484:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009488:	2f19      	cmp	r7, #25
 800948a:	d804      	bhi.n	8009496 <_strtol_l.isra.0+0xc6>
 800948c:	3c57      	subs	r4, #87	@ 0x57
 800948e:	e7e4      	b.n	800945a <_strtol_l.isra.0+0x8a>
 8009490:	f04f 32ff 	mov.w	r2, #4294967295
 8009494:	e7ed      	b.n	8009472 <_strtol_l.isra.0+0xa2>
 8009496:	1c53      	adds	r3, r2, #1
 8009498:	d108      	bne.n	80094ac <_strtol_l.isra.0+0xdc>
 800949a:	2322      	movs	r3, #34	@ 0x22
 800949c:	4660      	mov	r0, ip
 800949e:	f8ce 3000 	str.w	r3, [lr]
 80094a2:	f1b8 0f00 	cmp.w	r8, #0
 80094a6:	d0a0      	beq.n	80093ea <_strtol_l.isra.0+0x1a>
 80094a8:	1e69      	subs	r1, r5, #1
 80094aa:	e006      	b.n	80094ba <_strtol_l.isra.0+0xea>
 80094ac:	b106      	cbz	r6, 80094b0 <_strtol_l.isra.0+0xe0>
 80094ae:	4240      	negs	r0, r0
 80094b0:	f1b8 0f00 	cmp.w	r8, #0
 80094b4:	d099      	beq.n	80093ea <_strtol_l.isra.0+0x1a>
 80094b6:	2a00      	cmp	r2, #0
 80094b8:	d1f6      	bne.n	80094a8 <_strtol_l.isra.0+0xd8>
 80094ba:	f8c8 1000 	str.w	r1, [r8]
 80094be:	e794      	b.n	80093ea <_strtol_l.isra.0+0x1a>
 80094c0:	0800cd49 	.word	0x0800cd49

080094c4 <strtol>:
 80094c4:	4613      	mov	r3, r2
 80094c6:	460a      	mov	r2, r1
 80094c8:	4601      	mov	r1, r0
 80094ca:	4802      	ldr	r0, [pc, #8]	@ (80094d4 <strtol+0x10>)
 80094cc:	6800      	ldr	r0, [r0, #0]
 80094ce:	f7ff bf7f 	b.w	80093d0 <_strtol_l.isra.0>
 80094d2:	bf00      	nop
 80094d4:	20000188 	.word	0x20000188

080094d8 <__cvt>:
 80094d8:	2b00      	cmp	r3, #0
 80094da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094de:	461d      	mov	r5, r3
 80094e0:	bfbb      	ittet	lt
 80094e2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80094e6:	461d      	movlt	r5, r3
 80094e8:	2300      	movge	r3, #0
 80094ea:	232d      	movlt	r3, #45	@ 0x2d
 80094ec:	b088      	sub	sp, #32
 80094ee:	4614      	mov	r4, r2
 80094f0:	bfb8      	it	lt
 80094f2:	4614      	movlt	r4, r2
 80094f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80094f6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80094f8:	7013      	strb	r3, [r2, #0]
 80094fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009500:	f023 0820 	bic.w	r8, r3, #32
 8009504:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009508:	d005      	beq.n	8009516 <__cvt+0x3e>
 800950a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800950e:	d100      	bne.n	8009512 <__cvt+0x3a>
 8009510:	3601      	adds	r6, #1
 8009512:	2302      	movs	r3, #2
 8009514:	e000      	b.n	8009518 <__cvt+0x40>
 8009516:	2303      	movs	r3, #3
 8009518:	aa07      	add	r2, sp, #28
 800951a:	9204      	str	r2, [sp, #16]
 800951c:	aa06      	add	r2, sp, #24
 800951e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009522:	e9cd 3600 	strd	r3, r6, [sp]
 8009526:	4622      	mov	r2, r4
 8009528:	462b      	mov	r3, r5
 800952a:	f000 fea9 	bl	800a280 <_dtoa_r>
 800952e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009532:	4607      	mov	r7, r0
 8009534:	d119      	bne.n	800956a <__cvt+0x92>
 8009536:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009538:	07db      	lsls	r3, r3, #31
 800953a:	d50e      	bpl.n	800955a <__cvt+0x82>
 800953c:	eb00 0906 	add.w	r9, r0, r6
 8009540:	2200      	movs	r2, #0
 8009542:	2300      	movs	r3, #0
 8009544:	4620      	mov	r0, r4
 8009546:	4629      	mov	r1, r5
 8009548:	f7f7 fa2e 	bl	80009a8 <__aeabi_dcmpeq>
 800954c:	b108      	cbz	r0, 8009552 <__cvt+0x7a>
 800954e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009552:	2230      	movs	r2, #48	@ 0x30
 8009554:	9b07      	ldr	r3, [sp, #28]
 8009556:	454b      	cmp	r3, r9
 8009558:	d31e      	bcc.n	8009598 <__cvt+0xc0>
 800955a:	4638      	mov	r0, r7
 800955c:	9b07      	ldr	r3, [sp, #28]
 800955e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009560:	1bdb      	subs	r3, r3, r7
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	b008      	add	sp, #32
 8009566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800956e:	eb00 0906 	add.w	r9, r0, r6
 8009572:	d1e5      	bne.n	8009540 <__cvt+0x68>
 8009574:	7803      	ldrb	r3, [r0, #0]
 8009576:	2b30      	cmp	r3, #48	@ 0x30
 8009578:	d10a      	bne.n	8009590 <__cvt+0xb8>
 800957a:	2200      	movs	r2, #0
 800957c:	2300      	movs	r3, #0
 800957e:	4620      	mov	r0, r4
 8009580:	4629      	mov	r1, r5
 8009582:	f7f7 fa11 	bl	80009a8 <__aeabi_dcmpeq>
 8009586:	b918      	cbnz	r0, 8009590 <__cvt+0xb8>
 8009588:	f1c6 0601 	rsb	r6, r6, #1
 800958c:	f8ca 6000 	str.w	r6, [sl]
 8009590:	f8da 3000 	ldr.w	r3, [sl]
 8009594:	4499      	add	r9, r3
 8009596:	e7d3      	b.n	8009540 <__cvt+0x68>
 8009598:	1c59      	adds	r1, r3, #1
 800959a:	9107      	str	r1, [sp, #28]
 800959c:	701a      	strb	r2, [r3, #0]
 800959e:	e7d9      	b.n	8009554 <__cvt+0x7c>

080095a0 <__exponent>:
 80095a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095a2:	2900      	cmp	r1, #0
 80095a4:	bfb6      	itet	lt
 80095a6:	232d      	movlt	r3, #45	@ 0x2d
 80095a8:	232b      	movge	r3, #43	@ 0x2b
 80095aa:	4249      	neglt	r1, r1
 80095ac:	2909      	cmp	r1, #9
 80095ae:	7002      	strb	r2, [r0, #0]
 80095b0:	7043      	strb	r3, [r0, #1]
 80095b2:	dd29      	ble.n	8009608 <__exponent+0x68>
 80095b4:	f10d 0307 	add.w	r3, sp, #7
 80095b8:	461d      	mov	r5, r3
 80095ba:	270a      	movs	r7, #10
 80095bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80095c0:	461a      	mov	r2, r3
 80095c2:	fb07 1416 	mls	r4, r7, r6, r1
 80095c6:	3430      	adds	r4, #48	@ 0x30
 80095c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80095cc:	460c      	mov	r4, r1
 80095ce:	2c63      	cmp	r4, #99	@ 0x63
 80095d0:	4631      	mov	r1, r6
 80095d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80095d6:	dcf1      	bgt.n	80095bc <__exponent+0x1c>
 80095d8:	3130      	adds	r1, #48	@ 0x30
 80095da:	1e94      	subs	r4, r2, #2
 80095dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80095e0:	4623      	mov	r3, r4
 80095e2:	1c41      	adds	r1, r0, #1
 80095e4:	42ab      	cmp	r3, r5
 80095e6:	d30a      	bcc.n	80095fe <__exponent+0x5e>
 80095e8:	f10d 0309 	add.w	r3, sp, #9
 80095ec:	1a9b      	subs	r3, r3, r2
 80095ee:	42ac      	cmp	r4, r5
 80095f0:	bf88      	it	hi
 80095f2:	2300      	movhi	r3, #0
 80095f4:	3302      	adds	r3, #2
 80095f6:	4403      	add	r3, r0
 80095f8:	1a18      	subs	r0, r3, r0
 80095fa:	b003      	add	sp, #12
 80095fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009602:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009606:	e7ed      	b.n	80095e4 <__exponent+0x44>
 8009608:	2330      	movs	r3, #48	@ 0x30
 800960a:	3130      	adds	r1, #48	@ 0x30
 800960c:	7083      	strb	r3, [r0, #2]
 800960e:	70c1      	strb	r1, [r0, #3]
 8009610:	1d03      	adds	r3, r0, #4
 8009612:	e7f1      	b.n	80095f8 <__exponent+0x58>

08009614 <_printf_float>:
 8009614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009618:	b091      	sub	sp, #68	@ 0x44
 800961a:	460c      	mov	r4, r1
 800961c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009620:	4616      	mov	r6, r2
 8009622:	461f      	mov	r7, r3
 8009624:	4605      	mov	r5, r0
 8009626:	f000 fd07 	bl	800a038 <_localeconv_r>
 800962a:	6803      	ldr	r3, [r0, #0]
 800962c:	4618      	mov	r0, r3
 800962e:	9308      	str	r3, [sp, #32]
 8009630:	f7f6 fd8e 	bl	8000150 <strlen>
 8009634:	2300      	movs	r3, #0
 8009636:	930e      	str	r3, [sp, #56]	@ 0x38
 8009638:	f8d8 3000 	ldr.w	r3, [r8]
 800963c:	9009      	str	r0, [sp, #36]	@ 0x24
 800963e:	3307      	adds	r3, #7
 8009640:	f023 0307 	bic.w	r3, r3, #7
 8009644:	f103 0208 	add.w	r2, r3, #8
 8009648:	f894 a018 	ldrb.w	sl, [r4, #24]
 800964c:	f8d4 b000 	ldr.w	fp, [r4]
 8009650:	f8c8 2000 	str.w	r2, [r8]
 8009654:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009658:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800965c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800965e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009662:	f04f 32ff 	mov.w	r2, #4294967295
 8009666:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800966a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800966e:	4b9c      	ldr	r3, [pc, #624]	@ (80098e0 <_printf_float+0x2cc>)
 8009670:	f7f7 f9cc 	bl	8000a0c <__aeabi_dcmpun>
 8009674:	bb70      	cbnz	r0, 80096d4 <_printf_float+0xc0>
 8009676:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800967a:	f04f 32ff 	mov.w	r2, #4294967295
 800967e:	4b98      	ldr	r3, [pc, #608]	@ (80098e0 <_printf_float+0x2cc>)
 8009680:	f7f7 f9a6 	bl	80009d0 <__aeabi_dcmple>
 8009684:	bb30      	cbnz	r0, 80096d4 <_printf_float+0xc0>
 8009686:	2200      	movs	r2, #0
 8009688:	2300      	movs	r3, #0
 800968a:	4640      	mov	r0, r8
 800968c:	4649      	mov	r1, r9
 800968e:	f7f7 f995 	bl	80009bc <__aeabi_dcmplt>
 8009692:	b110      	cbz	r0, 800969a <_printf_float+0x86>
 8009694:	232d      	movs	r3, #45	@ 0x2d
 8009696:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800969a:	4a92      	ldr	r2, [pc, #584]	@ (80098e4 <_printf_float+0x2d0>)
 800969c:	4b92      	ldr	r3, [pc, #584]	@ (80098e8 <_printf_float+0x2d4>)
 800969e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80096a2:	bf8c      	ite	hi
 80096a4:	4690      	movhi	r8, r2
 80096a6:	4698      	movls	r8, r3
 80096a8:	2303      	movs	r3, #3
 80096aa:	f04f 0900 	mov.w	r9, #0
 80096ae:	6123      	str	r3, [r4, #16]
 80096b0:	f02b 0304 	bic.w	r3, fp, #4
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	4633      	mov	r3, r6
 80096b8:	4621      	mov	r1, r4
 80096ba:	4628      	mov	r0, r5
 80096bc:	9700      	str	r7, [sp, #0]
 80096be:	aa0f      	add	r2, sp, #60	@ 0x3c
 80096c0:	f000 f9d4 	bl	8009a6c <_printf_common>
 80096c4:	3001      	adds	r0, #1
 80096c6:	f040 8090 	bne.w	80097ea <_printf_float+0x1d6>
 80096ca:	f04f 30ff 	mov.w	r0, #4294967295
 80096ce:	b011      	add	sp, #68	@ 0x44
 80096d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d4:	4642      	mov	r2, r8
 80096d6:	464b      	mov	r3, r9
 80096d8:	4640      	mov	r0, r8
 80096da:	4649      	mov	r1, r9
 80096dc:	f7f7 f996 	bl	8000a0c <__aeabi_dcmpun>
 80096e0:	b148      	cbz	r0, 80096f6 <_printf_float+0xe2>
 80096e2:	464b      	mov	r3, r9
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	bfb8      	it	lt
 80096e8:	232d      	movlt	r3, #45	@ 0x2d
 80096ea:	4a80      	ldr	r2, [pc, #512]	@ (80098ec <_printf_float+0x2d8>)
 80096ec:	bfb8      	it	lt
 80096ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80096f2:	4b7f      	ldr	r3, [pc, #508]	@ (80098f0 <_printf_float+0x2dc>)
 80096f4:	e7d3      	b.n	800969e <_printf_float+0x8a>
 80096f6:	6863      	ldr	r3, [r4, #4]
 80096f8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	d13f      	bne.n	8009780 <_printf_float+0x16c>
 8009700:	2306      	movs	r3, #6
 8009702:	6063      	str	r3, [r4, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	9206      	str	r2, [sp, #24]
 800970e:	aa0e      	add	r2, sp, #56	@ 0x38
 8009710:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009714:	aa0d      	add	r2, sp, #52	@ 0x34
 8009716:	9203      	str	r2, [sp, #12]
 8009718:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800971c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009720:	6863      	ldr	r3, [r4, #4]
 8009722:	4642      	mov	r2, r8
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	4628      	mov	r0, r5
 8009728:	464b      	mov	r3, r9
 800972a:	910a      	str	r1, [sp, #40]	@ 0x28
 800972c:	f7ff fed4 	bl	80094d8 <__cvt>
 8009730:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009732:	4680      	mov	r8, r0
 8009734:	2947      	cmp	r1, #71	@ 0x47
 8009736:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009738:	d128      	bne.n	800978c <_printf_float+0x178>
 800973a:	1cc8      	adds	r0, r1, #3
 800973c:	db02      	blt.n	8009744 <_printf_float+0x130>
 800973e:	6863      	ldr	r3, [r4, #4]
 8009740:	4299      	cmp	r1, r3
 8009742:	dd40      	ble.n	80097c6 <_printf_float+0x1b2>
 8009744:	f1aa 0a02 	sub.w	sl, sl, #2
 8009748:	fa5f fa8a 	uxtb.w	sl, sl
 800974c:	4652      	mov	r2, sl
 800974e:	3901      	subs	r1, #1
 8009750:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009754:	910d      	str	r1, [sp, #52]	@ 0x34
 8009756:	f7ff ff23 	bl	80095a0 <__exponent>
 800975a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800975c:	4681      	mov	r9, r0
 800975e:	1813      	adds	r3, r2, r0
 8009760:	2a01      	cmp	r2, #1
 8009762:	6123      	str	r3, [r4, #16]
 8009764:	dc02      	bgt.n	800976c <_printf_float+0x158>
 8009766:	6822      	ldr	r2, [r4, #0]
 8009768:	07d2      	lsls	r2, r2, #31
 800976a:	d501      	bpl.n	8009770 <_printf_float+0x15c>
 800976c:	3301      	adds	r3, #1
 800976e:	6123      	str	r3, [r4, #16]
 8009770:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009774:	2b00      	cmp	r3, #0
 8009776:	d09e      	beq.n	80096b6 <_printf_float+0xa2>
 8009778:	232d      	movs	r3, #45	@ 0x2d
 800977a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800977e:	e79a      	b.n	80096b6 <_printf_float+0xa2>
 8009780:	2947      	cmp	r1, #71	@ 0x47
 8009782:	d1bf      	bne.n	8009704 <_printf_float+0xf0>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1bd      	bne.n	8009704 <_printf_float+0xf0>
 8009788:	2301      	movs	r3, #1
 800978a:	e7ba      	b.n	8009702 <_printf_float+0xee>
 800978c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009790:	d9dc      	bls.n	800974c <_printf_float+0x138>
 8009792:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009796:	d118      	bne.n	80097ca <_printf_float+0x1b6>
 8009798:	2900      	cmp	r1, #0
 800979a:	6863      	ldr	r3, [r4, #4]
 800979c:	dd0b      	ble.n	80097b6 <_printf_float+0x1a2>
 800979e:	6121      	str	r1, [r4, #16]
 80097a0:	b913      	cbnz	r3, 80097a8 <_printf_float+0x194>
 80097a2:	6822      	ldr	r2, [r4, #0]
 80097a4:	07d0      	lsls	r0, r2, #31
 80097a6:	d502      	bpl.n	80097ae <_printf_float+0x19a>
 80097a8:	3301      	adds	r3, #1
 80097aa:	440b      	add	r3, r1
 80097ac:	6123      	str	r3, [r4, #16]
 80097ae:	f04f 0900 	mov.w	r9, #0
 80097b2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80097b4:	e7dc      	b.n	8009770 <_printf_float+0x15c>
 80097b6:	b913      	cbnz	r3, 80097be <_printf_float+0x1aa>
 80097b8:	6822      	ldr	r2, [r4, #0]
 80097ba:	07d2      	lsls	r2, r2, #31
 80097bc:	d501      	bpl.n	80097c2 <_printf_float+0x1ae>
 80097be:	3302      	adds	r3, #2
 80097c0:	e7f4      	b.n	80097ac <_printf_float+0x198>
 80097c2:	2301      	movs	r3, #1
 80097c4:	e7f2      	b.n	80097ac <_printf_float+0x198>
 80097c6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80097ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097cc:	4299      	cmp	r1, r3
 80097ce:	db05      	blt.n	80097dc <_printf_float+0x1c8>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	6121      	str	r1, [r4, #16]
 80097d4:	07d8      	lsls	r0, r3, #31
 80097d6:	d5ea      	bpl.n	80097ae <_printf_float+0x19a>
 80097d8:	1c4b      	adds	r3, r1, #1
 80097da:	e7e7      	b.n	80097ac <_printf_float+0x198>
 80097dc:	2900      	cmp	r1, #0
 80097de:	bfcc      	ite	gt
 80097e0:	2201      	movgt	r2, #1
 80097e2:	f1c1 0202 	rsble	r2, r1, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	e7e0      	b.n	80097ac <_printf_float+0x198>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	055a      	lsls	r2, r3, #21
 80097ee:	d407      	bmi.n	8009800 <_printf_float+0x1ec>
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	4642      	mov	r2, r8
 80097f4:	4631      	mov	r1, r6
 80097f6:	4628      	mov	r0, r5
 80097f8:	47b8      	blx	r7
 80097fa:	3001      	adds	r0, #1
 80097fc:	d12b      	bne.n	8009856 <_printf_float+0x242>
 80097fe:	e764      	b.n	80096ca <_printf_float+0xb6>
 8009800:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009804:	f240 80dc 	bls.w	80099c0 <_printf_float+0x3ac>
 8009808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800980c:	2200      	movs	r2, #0
 800980e:	2300      	movs	r3, #0
 8009810:	f7f7 f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8009814:	2800      	cmp	r0, #0
 8009816:	d033      	beq.n	8009880 <_printf_float+0x26c>
 8009818:	2301      	movs	r3, #1
 800981a:	4631      	mov	r1, r6
 800981c:	4628      	mov	r0, r5
 800981e:	4a35      	ldr	r2, [pc, #212]	@ (80098f4 <_printf_float+0x2e0>)
 8009820:	47b8      	blx	r7
 8009822:	3001      	adds	r0, #1
 8009824:	f43f af51 	beq.w	80096ca <_printf_float+0xb6>
 8009828:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800982c:	4543      	cmp	r3, r8
 800982e:	db02      	blt.n	8009836 <_printf_float+0x222>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	07d8      	lsls	r0, r3, #31
 8009834:	d50f      	bpl.n	8009856 <_printf_float+0x242>
 8009836:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800983a:	4631      	mov	r1, r6
 800983c:	4628      	mov	r0, r5
 800983e:	47b8      	blx	r7
 8009840:	3001      	adds	r0, #1
 8009842:	f43f af42 	beq.w	80096ca <_printf_float+0xb6>
 8009846:	f04f 0900 	mov.w	r9, #0
 800984a:	f108 38ff 	add.w	r8, r8, #4294967295
 800984e:	f104 0a1a 	add.w	sl, r4, #26
 8009852:	45c8      	cmp	r8, r9
 8009854:	dc09      	bgt.n	800986a <_printf_float+0x256>
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	079b      	lsls	r3, r3, #30
 800985a:	f100 8102 	bmi.w	8009a62 <_printf_float+0x44e>
 800985e:	68e0      	ldr	r0, [r4, #12]
 8009860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009862:	4298      	cmp	r0, r3
 8009864:	bfb8      	it	lt
 8009866:	4618      	movlt	r0, r3
 8009868:	e731      	b.n	80096ce <_printf_float+0xba>
 800986a:	2301      	movs	r3, #1
 800986c:	4652      	mov	r2, sl
 800986e:	4631      	mov	r1, r6
 8009870:	4628      	mov	r0, r5
 8009872:	47b8      	blx	r7
 8009874:	3001      	adds	r0, #1
 8009876:	f43f af28 	beq.w	80096ca <_printf_float+0xb6>
 800987a:	f109 0901 	add.w	r9, r9, #1
 800987e:	e7e8      	b.n	8009852 <_printf_float+0x23e>
 8009880:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009882:	2b00      	cmp	r3, #0
 8009884:	dc38      	bgt.n	80098f8 <_printf_float+0x2e4>
 8009886:	2301      	movs	r3, #1
 8009888:	4631      	mov	r1, r6
 800988a:	4628      	mov	r0, r5
 800988c:	4a19      	ldr	r2, [pc, #100]	@ (80098f4 <_printf_float+0x2e0>)
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f af1a 	beq.w	80096ca <_printf_float+0xb6>
 8009896:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800989a:	ea59 0303 	orrs.w	r3, r9, r3
 800989e:	d102      	bne.n	80098a6 <_printf_float+0x292>
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	07d9      	lsls	r1, r3, #31
 80098a4:	d5d7      	bpl.n	8009856 <_printf_float+0x242>
 80098a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80098aa:	4631      	mov	r1, r6
 80098ac:	4628      	mov	r0, r5
 80098ae:	47b8      	blx	r7
 80098b0:	3001      	adds	r0, #1
 80098b2:	f43f af0a 	beq.w	80096ca <_printf_float+0xb6>
 80098b6:	f04f 0a00 	mov.w	sl, #0
 80098ba:	f104 0b1a 	add.w	fp, r4, #26
 80098be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098c0:	425b      	negs	r3, r3
 80098c2:	4553      	cmp	r3, sl
 80098c4:	dc01      	bgt.n	80098ca <_printf_float+0x2b6>
 80098c6:	464b      	mov	r3, r9
 80098c8:	e793      	b.n	80097f2 <_printf_float+0x1de>
 80098ca:	2301      	movs	r3, #1
 80098cc:	465a      	mov	r2, fp
 80098ce:	4631      	mov	r1, r6
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b8      	blx	r7
 80098d4:	3001      	adds	r0, #1
 80098d6:	f43f aef8 	beq.w	80096ca <_printf_float+0xb6>
 80098da:	f10a 0a01 	add.w	sl, sl, #1
 80098de:	e7ee      	b.n	80098be <_printf_float+0x2aa>
 80098e0:	7fefffff 	.word	0x7fefffff
 80098e4:	0800cb26 	.word	0x0800cb26
 80098e8:	0800cb22 	.word	0x0800cb22
 80098ec:	0800cb2e 	.word	0x0800cb2e
 80098f0:	0800cb2a 	.word	0x0800cb2a
 80098f4:	0800cb32 	.word	0x0800cb32
 80098f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80098fa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80098fe:	4553      	cmp	r3, sl
 8009900:	bfa8      	it	ge
 8009902:	4653      	movge	r3, sl
 8009904:	2b00      	cmp	r3, #0
 8009906:	4699      	mov	r9, r3
 8009908:	dc36      	bgt.n	8009978 <_printf_float+0x364>
 800990a:	f04f 0b00 	mov.w	fp, #0
 800990e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009912:	f104 021a 	add.w	r2, r4, #26
 8009916:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009918:	930a      	str	r3, [sp, #40]	@ 0x28
 800991a:	eba3 0309 	sub.w	r3, r3, r9
 800991e:	455b      	cmp	r3, fp
 8009920:	dc31      	bgt.n	8009986 <_printf_float+0x372>
 8009922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009924:	459a      	cmp	sl, r3
 8009926:	dc3a      	bgt.n	800999e <_printf_float+0x38a>
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	07da      	lsls	r2, r3, #31
 800992c:	d437      	bmi.n	800999e <_printf_float+0x38a>
 800992e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009930:	ebaa 0903 	sub.w	r9, sl, r3
 8009934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009936:	ebaa 0303 	sub.w	r3, sl, r3
 800993a:	4599      	cmp	r9, r3
 800993c:	bfa8      	it	ge
 800993e:	4699      	movge	r9, r3
 8009940:	f1b9 0f00 	cmp.w	r9, #0
 8009944:	dc33      	bgt.n	80099ae <_printf_float+0x39a>
 8009946:	f04f 0800 	mov.w	r8, #0
 800994a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800994e:	f104 0b1a 	add.w	fp, r4, #26
 8009952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009954:	ebaa 0303 	sub.w	r3, sl, r3
 8009958:	eba3 0309 	sub.w	r3, r3, r9
 800995c:	4543      	cmp	r3, r8
 800995e:	f77f af7a 	ble.w	8009856 <_printf_float+0x242>
 8009962:	2301      	movs	r3, #1
 8009964:	465a      	mov	r2, fp
 8009966:	4631      	mov	r1, r6
 8009968:	4628      	mov	r0, r5
 800996a:	47b8      	blx	r7
 800996c:	3001      	adds	r0, #1
 800996e:	f43f aeac 	beq.w	80096ca <_printf_float+0xb6>
 8009972:	f108 0801 	add.w	r8, r8, #1
 8009976:	e7ec      	b.n	8009952 <_printf_float+0x33e>
 8009978:	4642      	mov	r2, r8
 800997a:	4631      	mov	r1, r6
 800997c:	4628      	mov	r0, r5
 800997e:	47b8      	blx	r7
 8009980:	3001      	adds	r0, #1
 8009982:	d1c2      	bne.n	800990a <_printf_float+0x2f6>
 8009984:	e6a1      	b.n	80096ca <_printf_float+0xb6>
 8009986:	2301      	movs	r3, #1
 8009988:	4631      	mov	r1, r6
 800998a:	4628      	mov	r0, r5
 800998c:	920a      	str	r2, [sp, #40]	@ 0x28
 800998e:	47b8      	blx	r7
 8009990:	3001      	adds	r0, #1
 8009992:	f43f ae9a 	beq.w	80096ca <_printf_float+0xb6>
 8009996:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009998:	f10b 0b01 	add.w	fp, fp, #1
 800999c:	e7bb      	b.n	8009916 <_printf_float+0x302>
 800999e:	4631      	mov	r1, r6
 80099a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80099a4:	4628      	mov	r0, r5
 80099a6:	47b8      	blx	r7
 80099a8:	3001      	adds	r0, #1
 80099aa:	d1c0      	bne.n	800992e <_printf_float+0x31a>
 80099ac:	e68d      	b.n	80096ca <_printf_float+0xb6>
 80099ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099b0:	464b      	mov	r3, r9
 80099b2:	4631      	mov	r1, r6
 80099b4:	4628      	mov	r0, r5
 80099b6:	4442      	add	r2, r8
 80099b8:	47b8      	blx	r7
 80099ba:	3001      	adds	r0, #1
 80099bc:	d1c3      	bne.n	8009946 <_printf_float+0x332>
 80099be:	e684      	b.n	80096ca <_printf_float+0xb6>
 80099c0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80099c4:	f1ba 0f01 	cmp.w	sl, #1
 80099c8:	dc01      	bgt.n	80099ce <_printf_float+0x3ba>
 80099ca:	07db      	lsls	r3, r3, #31
 80099cc:	d536      	bpl.n	8009a3c <_printf_float+0x428>
 80099ce:	2301      	movs	r3, #1
 80099d0:	4642      	mov	r2, r8
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f ae76 	beq.w	80096ca <_printf_float+0xb6>
 80099de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80099e2:	4631      	mov	r1, r6
 80099e4:	4628      	mov	r0, r5
 80099e6:	47b8      	blx	r7
 80099e8:	3001      	adds	r0, #1
 80099ea:	f43f ae6e 	beq.w	80096ca <_printf_float+0xb6>
 80099ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80099f2:	2200      	movs	r2, #0
 80099f4:	2300      	movs	r3, #0
 80099f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099fa:	f7f6 ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80099fe:	b9c0      	cbnz	r0, 8009a32 <_printf_float+0x41e>
 8009a00:	4653      	mov	r3, sl
 8009a02:	f108 0201 	add.w	r2, r8, #1
 8009a06:	4631      	mov	r1, r6
 8009a08:	4628      	mov	r0, r5
 8009a0a:	47b8      	blx	r7
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d10c      	bne.n	8009a2a <_printf_float+0x416>
 8009a10:	e65b      	b.n	80096ca <_printf_float+0xb6>
 8009a12:	2301      	movs	r3, #1
 8009a14:	465a      	mov	r2, fp
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47b8      	blx	r7
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	f43f ae54 	beq.w	80096ca <_printf_float+0xb6>
 8009a22:	f108 0801 	add.w	r8, r8, #1
 8009a26:	45d0      	cmp	r8, sl
 8009a28:	dbf3      	blt.n	8009a12 <_printf_float+0x3fe>
 8009a2a:	464b      	mov	r3, r9
 8009a2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009a30:	e6e0      	b.n	80097f4 <_printf_float+0x1e0>
 8009a32:	f04f 0800 	mov.w	r8, #0
 8009a36:	f104 0b1a 	add.w	fp, r4, #26
 8009a3a:	e7f4      	b.n	8009a26 <_printf_float+0x412>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	4642      	mov	r2, r8
 8009a40:	e7e1      	b.n	8009a06 <_printf_float+0x3f2>
 8009a42:	2301      	movs	r3, #1
 8009a44:	464a      	mov	r2, r9
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b8      	blx	r7
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	f43f ae3c 	beq.w	80096ca <_printf_float+0xb6>
 8009a52:	f108 0801 	add.w	r8, r8, #1
 8009a56:	68e3      	ldr	r3, [r4, #12]
 8009a58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009a5a:	1a5b      	subs	r3, r3, r1
 8009a5c:	4543      	cmp	r3, r8
 8009a5e:	dcf0      	bgt.n	8009a42 <_printf_float+0x42e>
 8009a60:	e6fd      	b.n	800985e <_printf_float+0x24a>
 8009a62:	f04f 0800 	mov.w	r8, #0
 8009a66:	f104 0919 	add.w	r9, r4, #25
 8009a6a:	e7f4      	b.n	8009a56 <_printf_float+0x442>

08009a6c <_printf_common>:
 8009a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a70:	4616      	mov	r6, r2
 8009a72:	4698      	mov	r8, r3
 8009a74:	688a      	ldr	r2, [r1, #8]
 8009a76:	690b      	ldr	r3, [r1, #16]
 8009a78:	4607      	mov	r7, r0
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	bfb8      	it	lt
 8009a7e:	4613      	movlt	r3, r2
 8009a80:	6033      	str	r3, [r6, #0]
 8009a82:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a86:	460c      	mov	r4, r1
 8009a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a8c:	b10a      	cbz	r2, 8009a92 <_printf_common+0x26>
 8009a8e:	3301      	adds	r3, #1
 8009a90:	6033      	str	r3, [r6, #0]
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	0699      	lsls	r1, r3, #26
 8009a96:	bf42      	ittt	mi
 8009a98:	6833      	ldrmi	r3, [r6, #0]
 8009a9a:	3302      	addmi	r3, #2
 8009a9c:	6033      	strmi	r3, [r6, #0]
 8009a9e:	6825      	ldr	r5, [r4, #0]
 8009aa0:	f015 0506 	ands.w	r5, r5, #6
 8009aa4:	d106      	bne.n	8009ab4 <_printf_common+0x48>
 8009aa6:	f104 0a19 	add.w	sl, r4, #25
 8009aaa:	68e3      	ldr	r3, [r4, #12]
 8009aac:	6832      	ldr	r2, [r6, #0]
 8009aae:	1a9b      	subs	r3, r3, r2
 8009ab0:	42ab      	cmp	r3, r5
 8009ab2:	dc2b      	bgt.n	8009b0c <_printf_common+0xa0>
 8009ab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ab8:	6822      	ldr	r2, [r4, #0]
 8009aba:	3b00      	subs	r3, #0
 8009abc:	bf18      	it	ne
 8009abe:	2301      	movne	r3, #1
 8009ac0:	0692      	lsls	r2, r2, #26
 8009ac2:	d430      	bmi.n	8009b26 <_printf_common+0xba>
 8009ac4:	4641      	mov	r1, r8
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009acc:	47c8      	blx	r9
 8009ace:	3001      	adds	r0, #1
 8009ad0:	d023      	beq.n	8009b1a <_printf_common+0xae>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	6922      	ldr	r2, [r4, #16]
 8009ad6:	f003 0306 	and.w	r3, r3, #6
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	bf14      	ite	ne
 8009ade:	2500      	movne	r5, #0
 8009ae0:	6833      	ldreq	r3, [r6, #0]
 8009ae2:	f04f 0600 	mov.w	r6, #0
 8009ae6:	bf08      	it	eq
 8009ae8:	68e5      	ldreq	r5, [r4, #12]
 8009aea:	f104 041a 	add.w	r4, r4, #26
 8009aee:	bf08      	it	eq
 8009af0:	1aed      	subeq	r5, r5, r3
 8009af2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009af6:	bf08      	it	eq
 8009af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009afc:	4293      	cmp	r3, r2
 8009afe:	bfc4      	itt	gt
 8009b00:	1a9b      	subgt	r3, r3, r2
 8009b02:	18ed      	addgt	r5, r5, r3
 8009b04:	42b5      	cmp	r5, r6
 8009b06:	d11a      	bne.n	8009b3e <_printf_common+0xd2>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e008      	b.n	8009b1e <_printf_common+0xb2>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	4652      	mov	r2, sl
 8009b10:	4641      	mov	r1, r8
 8009b12:	4638      	mov	r0, r7
 8009b14:	47c8      	blx	r9
 8009b16:	3001      	adds	r0, #1
 8009b18:	d103      	bne.n	8009b22 <_printf_common+0xb6>
 8009b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b22:	3501      	adds	r5, #1
 8009b24:	e7c1      	b.n	8009aaa <_printf_common+0x3e>
 8009b26:	2030      	movs	r0, #48	@ 0x30
 8009b28:	18e1      	adds	r1, r4, r3
 8009b2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b34:	4422      	add	r2, r4
 8009b36:	3302      	adds	r3, #2
 8009b38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b3c:	e7c2      	b.n	8009ac4 <_printf_common+0x58>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4622      	mov	r2, r4
 8009b42:	4641      	mov	r1, r8
 8009b44:	4638      	mov	r0, r7
 8009b46:	47c8      	blx	r9
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d0e6      	beq.n	8009b1a <_printf_common+0xae>
 8009b4c:	3601      	adds	r6, #1
 8009b4e:	e7d9      	b.n	8009b04 <_printf_common+0x98>

08009b50 <_printf_i>:
 8009b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	7e0f      	ldrb	r7, [r1, #24]
 8009b56:	4691      	mov	r9, r2
 8009b58:	2f78      	cmp	r7, #120	@ 0x78
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	469a      	mov	sl, r3
 8009b60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b66:	d807      	bhi.n	8009b78 <_printf_i+0x28>
 8009b68:	2f62      	cmp	r7, #98	@ 0x62
 8009b6a:	d80a      	bhi.n	8009b82 <_printf_i+0x32>
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	f000 80d1 	beq.w	8009d14 <_printf_i+0x1c4>
 8009b72:	2f58      	cmp	r7, #88	@ 0x58
 8009b74:	f000 80b8 	beq.w	8009ce8 <_printf_i+0x198>
 8009b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b80:	e03a      	b.n	8009bf8 <_printf_i+0xa8>
 8009b82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b86:	2b15      	cmp	r3, #21
 8009b88:	d8f6      	bhi.n	8009b78 <_printf_i+0x28>
 8009b8a:	a101      	add	r1, pc, #4	@ (adr r1, 8009b90 <_printf_i+0x40>)
 8009b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b90:	08009be9 	.word	0x08009be9
 8009b94:	08009bfd 	.word	0x08009bfd
 8009b98:	08009b79 	.word	0x08009b79
 8009b9c:	08009b79 	.word	0x08009b79
 8009ba0:	08009b79 	.word	0x08009b79
 8009ba4:	08009b79 	.word	0x08009b79
 8009ba8:	08009bfd 	.word	0x08009bfd
 8009bac:	08009b79 	.word	0x08009b79
 8009bb0:	08009b79 	.word	0x08009b79
 8009bb4:	08009b79 	.word	0x08009b79
 8009bb8:	08009b79 	.word	0x08009b79
 8009bbc:	08009cfb 	.word	0x08009cfb
 8009bc0:	08009c27 	.word	0x08009c27
 8009bc4:	08009cb5 	.word	0x08009cb5
 8009bc8:	08009b79 	.word	0x08009b79
 8009bcc:	08009b79 	.word	0x08009b79
 8009bd0:	08009d1d 	.word	0x08009d1d
 8009bd4:	08009b79 	.word	0x08009b79
 8009bd8:	08009c27 	.word	0x08009c27
 8009bdc:	08009b79 	.word	0x08009b79
 8009be0:	08009b79 	.word	0x08009b79
 8009be4:	08009cbd 	.word	0x08009cbd
 8009be8:	6833      	ldr	r3, [r6, #0]
 8009bea:	1d1a      	adds	r2, r3, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6032      	str	r2, [r6, #0]
 8009bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e09c      	b.n	8009d36 <_printf_i+0x1e6>
 8009bfc:	6833      	ldr	r3, [r6, #0]
 8009bfe:	6820      	ldr	r0, [r4, #0]
 8009c00:	1d19      	adds	r1, r3, #4
 8009c02:	6031      	str	r1, [r6, #0]
 8009c04:	0606      	lsls	r6, r0, #24
 8009c06:	d501      	bpl.n	8009c0c <_printf_i+0xbc>
 8009c08:	681d      	ldr	r5, [r3, #0]
 8009c0a:	e003      	b.n	8009c14 <_printf_i+0xc4>
 8009c0c:	0645      	lsls	r5, r0, #25
 8009c0e:	d5fb      	bpl.n	8009c08 <_printf_i+0xb8>
 8009c10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c14:	2d00      	cmp	r5, #0
 8009c16:	da03      	bge.n	8009c20 <_printf_i+0xd0>
 8009c18:	232d      	movs	r3, #45	@ 0x2d
 8009c1a:	426d      	negs	r5, r5
 8009c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c20:	230a      	movs	r3, #10
 8009c22:	4858      	ldr	r0, [pc, #352]	@ (8009d84 <_printf_i+0x234>)
 8009c24:	e011      	b.n	8009c4a <_printf_i+0xfa>
 8009c26:	6821      	ldr	r1, [r4, #0]
 8009c28:	6833      	ldr	r3, [r6, #0]
 8009c2a:	0608      	lsls	r0, r1, #24
 8009c2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c30:	d402      	bmi.n	8009c38 <_printf_i+0xe8>
 8009c32:	0649      	lsls	r1, r1, #25
 8009c34:	bf48      	it	mi
 8009c36:	b2ad      	uxthmi	r5, r5
 8009c38:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c3a:	6033      	str	r3, [r6, #0]
 8009c3c:	bf14      	ite	ne
 8009c3e:	230a      	movne	r3, #10
 8009c40:	2308      	moveq	r3, #8
 8009c42:	4850      	ldr	r0, [pc, #320]	@ (8009d84 <_printf_i+0x234>)
 8009c44:	2100      	movs	r1, #0
 8009c46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c4a:	6866      	ldr	r6, [r4, #4]
 8009c4c:	2e00      	cmp	r6, #0
 8009c4e:	60a6      	str	r6, [r4, #8]
 8009c50:	db05      	blt.n	8009c5e <_printf_i+0x10e>
 8009c52:	6821      	ldr	r1, [r4, #0]
 8009c54:	432e      	orrs	r6, r5
 8009c56:	f021 0104 	bic.w	r1, r1, #4
 8009c5a:	6021      	str	r1, [r4, #0]
 8009c5c:	d04b      	beq.n	8009cf6 <_printf_i+0x1a6>
 8009c5e:	4616      	mov	r6, r2
 8009c60:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c64:	fb03 5711 	mls	r7, r3, r1, r5
 8009c68:	5dc7      	ldrb	r7, [r0, r7]
 8009c6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c6e:	462f      	mov	r7, r5
 8009c70:	42bb      	cmp	r3, r7
 8009c72:	460d      	mov	r5, r1
 8009c74:	d9f4      	bls.n	8009c60 <_printf_i+0x110>
 8009c76:	2b08      	cmp	r3, #8
 8009c78:	d10b      	bne.n	8009c92 <_printf_i+0x142>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	07df      	lsls	r7, r3, #31
 8009c7e:	d508      	bpl.n	8009c92 <_printf_i+0x142>
 8009c80:	6923      	ldr	r3, [r4, #16]
 8009c82:	6861      	ldr	r1, [r4, #4]
 8009c84:	4299      	cmp	r1, r3
 8009c86:	bfde      	ittt	le
 8009c88:	2330      	movle	r3, #48	@ 0x30
 8009c8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c92:	1b92      	subs	r2, r2, r6
 8009c94:	6122      	str	r2, [r4, #16]
 8009c96:	464b      	mov	r3, r9
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	f8cd a000 	str.w	sl, [sp]
 8009ca0:	aa03      	add	r2, sp, #12
 8009ca2:	f7ff fee3 	bl	8009a6c <_printf_common>
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	d14a      	bne.n	8009d40 <_printf_i+0x1f0>
 8009caa:	f04f 30ff 	mov.w	r0, #4294967295
 8009cae:	b004      	add	sp, #16
 8009cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	f043 0320 	orr.w	r3, r3, #32
 8009cba:	6023      	str	r3, [r4, #0]
 8009cbc:	2778      	movs	r7, #120	@ 0x78
 8009cbe:	4832      	ldr	r0, [pc, #200]	@ (8009d88 <_printf_i+0x238>)
 8009cc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	6831      	ldr	r1, [r6, #0]
 8009cc8:	061f      	lsls	r7, r3, #24
 8009cca:	f851 5b04 	ldr.w	r5, [r1], #4
 8009cce:	d402      	bmi.n	8009cd6 <_printf_i+0x186>
 8009cd0:	065f      	lsls	r7, r3, #25
 8009cd2:	bf48      	it	mi
 8009cd4:	b2ad      	uxthmi	r5, r5
 8009cd6:	6031      	str	r1, [r6, #0]
 8009cd8:	07d9      	lsls	r1, r3, #31
 8009cda:	bf44      	itt	mi
 8009cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8009ce0:	6023      	strmi	r3, [r4, #0]
 8009ce2:	b11d      	cbz	r5, 8009cec <_printf_i+0x19c>
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	e7ad      	b.n	8009c44 <_printf_i+0xf4>
 8009ce8:	4826      	ldr	r0, [pc, #152]	@ (8009d84 <_printf_i+0x234>)
 8009cea:	e7e9      	b.n	8009cc0 <_printf_i+0x170>
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	f023 0320 	bic.w	r3, r3, #32
 8009cf2:	6023      	str	r3, [r4, #0]
 8009cf4:	e7f6      	b.n	8009ce4 <_printf_i+0x194>
 8009cf6:	4616      	mov	r6, r2
 8009cf8:	e7bd      	b.n	8009c76 <_printf_i+0x126>
 8009cfa:	6833      	ldr	r3, [r6, #0]
 8009cfc:	6825      	ldr	r5, [r4, #0]
 8009cfe:	1d18      	adds	r0, r3, #4
 8009d00:	6961      	ldr	r1, [r4, #20]
 8009d02:	6030      	str	r0, [r6, #0]
 8009d04:	062e      	lsls	r6, r5, #24
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	d501      	bpl.n	8009d0e <_printf_i+0x1be>
 8009d0a:	6019      	str	r1, [r3, #0]
 8009d0c:	e002      	b.n	8009d14 <_printf_i+0x1c4>
 8009d0e:	0668      	lsls	r0, r5, #25
 8009d10:	d5fb      	bpl.n	8009d0a <_printf_i+0x1ba>
 8009d12:	8019      	strh	r1, [r3, #0]
 8009d14:	2300      	movs	r3, #0
 8009d16:	4616      	mov	r6, r2
 8009d18:	6123      	str	r3, [r4, #16]
 8009d1a:	e7bc      	b.n	8009c96 <_printf_i+0x146>
 8009d1c:	6833      	ldr	r3, [r6, #0]
 8009d1e:	2100      	movs	r1, #0
 8009d20:	1d1a      	adds	r2, r3, #4
 8009d22:	6032      	str	r2, [r6, #0]
 8009d24:	681e      	ldr	r6, [r3, #0]
 8009d26:	6862      	ldr	r2, [r4, #4]
 8009d28:	4630      	mov	r0, r6
 8009d2a:	f000 f9fc 	bl	800a126 <memchr>
 8009d2e:	b108      	cbz	r0, 8009d34 <_printf_i+0x1e4>
 8009d30:	1b80      	subs	r0, r0, r6
 8009d32:	6060      	str	r0, [r4, #4]
 8009d34:	6863      	ldr	r3, [r4, #4]
 8009d36:	6123      	str	r3, [r4, #16]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d3e:	e7aa      	b.n	8009c96 <_printf_i+0x146>
 8009d40:	4632      	mov	r2, r6
 8009d42:	4649      	mov	r1, r9
 8009d44:	4640      	mov	r0, r8
 8009d46:	6923      	ldr	r3, [r4, #16]
 8009d48:	47d0      	blx	sl
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	d0ad      	beq.n	8009caa <_printf_i+0x15a>
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	079b      	lsls	r3, r3, #30
 8009d52:	d413      	bmi.n	8009d7c <_printf_i+0x22c>
 8009d54:	68e0      	ldr	r0, [r4, #12]
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	4298      	cmp	r0, r3
 8009d5a:	bfb8      	it	lt
 8009d5c:	4618      	movlt	r0, r3
 8009d5e:	e7a6      	b.n	8009cae <_printf_i+0x15e>
 8009d60:	2301      	movs	r3, #1
 8009d62:	4632      	mov	r2, r6
 8009d64:	4649      	mov	r1, r9
 8009d66:	4640      	mov	r0, r8
 8009d68:	47d0      	blx	sl
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	d09d      	beq.n	8009caa <_printf_i+0x15a>
 8009d6e:	3501      	adds	r5, #1
 8009d70:	68e3      	ldr	r3, [r4, #12]
 8009d72:	9903      	ldr	r1, [sp, #12]
 8009d74:	1a5b      	subs	r3, r3, r1
 8009d76:	42ab      	cmp	r3, r5
 8009d78:	dcf2      	bgt.n	8009d60 <_printf_i+0x210>
 8009d7a:	e7eb      	b.n	8009d54 <_printf_i+0x204>
 8009d7c:	2500      	movs	r5, #0
 8009d7e:	f104 0619 	add.w	r6, r4, #25
 8009d82:	e7f5      	b.n	8009d70 <_printf_i+0x220>
 8009d84:	0800cb34 	.word	0x0800cb34
 8009d88:	0800cb45 	.word	0x0800cb45

08009d8c <std>:
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	b510      	push	{r4, lr}
 8009d90:	4604      	mov	r4, r0
 8009d92:	e9c0 3300 	strd	r3, r3, [r0]
 8009d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d9a:	6083      	str	r3, [r0, #8]
 8009d9c:	8181      	strh	r1, [r0, #12]
 8009d9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009da0:	81c2      	strh	r2, [r0, #14]
 8009da2:	6183      	str	r3, [r0, #24]
 8009da4:	4619      	mov	r1, r3
 8009da6:	2208      	movs	r2, #8
 8009da8:	305c      	adds	r0, #92	@ 0x5c
 8009daa:	f000 f92a 	bl	800a002 <memset>
 8009dae:	4b0d      	ldr	r3, [pc, #52]	@ (8009de4 <std+0x58>)
 8009db0:	6224      	str	r4, [r4, #32]
 8009db2:	6263      	str	r3, [r4, #36]	@ 0x24
 8009db4:	4b0c      	ldr	r3, [pc, #48]	@ (8009de8 <std+0x5c>)
 8009db6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009db8:	4b0c      	ldr	r3, [pc, #48]	@ (8009dec <std+0x60>)
 8009dba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8009df0 <std+0x64>)
 8009dbe:	6323      	str	r3, [r4, #48]	@ 0x30
 8009dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8009df4 <std+0x68>)
 8009dc2:	429c      	cmp	r4, r3
 8009dc4:	d006      	beq.n	8009dd4 <std+0x48>
 8009dc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009dca:	4294      	cmp	r4, r2
 8009dcc:	d002      	beq.n	8009dd4 <std+0x48>
 8009dce:	33d0      	adds	r3, #208	@ 0xd0
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	d105      	bne.n	8009de0 <std+0x54>
 8009dd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ddc:	f000 b9a0 	b.w	800a120 <__retarget_lock_init_recursive>
 8009de0:	bd10      	pop	{r4, pc}
 8009de2:	bf00      	nop
 8009de4:	08009f7d 	.word	0x08009f7d
 8009de8:	08009f9f 	.word	0x08009f9f
 8009dec:	08009fd7 	.word	0x08009fd7
 8009df0:	08009ffb 	.word	0x08009ffb
 8009df4:	20000be4 	.word	0x20000be4

08009df8 <stdio_exit_handler>:
 8009df8:	4a02      	ldr	r2, [pc, #8]	@ (8009e04 <stdio_exit_handler+0xc>)
 8009dfa:	4903      	ldr	r1, [pc, #12]	@ (8009e08 <stdio_exit_handler+0x10>)
 8009dfc:	4803      	ldr	r0, [pc, #12]	@ (8009e0c <stdio_exit_handler+0x14>)
 8009dfe:	f000 b869 	b.w	8009ed4 <_fwalk_sglue>
 8009e02:	bf00      	nop
 8009e04:	20000010 	.word	0x20000010
 8009e08:	0800c3c5 	.word	0x0800c3c5
 8009e0c:	2000018c 	.word	0x2000018c

08009e10 <cleanup_stdio>:
 8009e10:	6841      	ldr	r1, [r0, #4]
 8009e12:	4b0c      	ldr	r3, [pc, #48]	@ (8009e44 <cleanup_stdio+0x34>)
 8009e14:	b510      	push	{r4, lr}
 8009e16:	4299      	cmp	r1, r3
 8009e18:	4604      	mov	r4, r0
 8009e1a:	d001      	beq.n	8009e20 <cleanup_stdio+0x10>
 8009e1c:	f002 fad2 	bl	800c3c4 <_fflush_r>
 8009e20:	68a1      	ldr	r1, [r4, #8]
 8009e22:	4b09      	ldr	r3, [pc, #36]	@ (8009e48 <cleanup_stdio+0x38>)
 8009e24:	4299      	cmp	r1, r3
 8009e26:	d002      	beq.n	8009e2e <cleanup_stdio+0x1e>
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f002 facb 	bl	800c3c4 <_fflush_r>
 8009e2e:	68e1      	ldr	r1, [r4, #12]
 8009e30:	4b06      	ldr	r3, [pc, #24]	@ (8009e4c <cleanup_stdio+0x3c>)
 8009e32:	4299      	cmp	r1, r3
 8009e34:	d004      	beq.n	8009e40 <cleanup_stdio+0x30>
 8009e36:	4620      	mov	r0, r4
 8009e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e3c:	f002 bac2 	b.w	800c3c4 <_fflush_r>
 8009e40:	bd10      	pop	{r4, pc}
 8009e42:	bf00      	nop
 8009e44:	20000be4 	.word	0x20000be4
 8009e48:	20000c4c 	.word	0x20000c4c
 8009e4c:	20000cb4 	.word	0x20000cb4

08009e50 <global_stdio_init.part.0>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	4b0b      	ldr	r3, [pc, #44]	@ (8009e80 <global_stdio_init.part.0+0x30>)
 8009e54:	4c0b      	ldr	r4, [pc, #44]	@ (8009e84 <global_stdio_init.part.0+0x34>)
 8009e56:	4a0c      	ldr	r2, [pc, #48]	@ (8009e88 <global_stdio_init.part.0+0x38>)
 8009e58:	4620      	mov	r0, r4
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	2104      	movs	r1, #4
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f7ff ff94 	bl	8009d8c <std>
 8009e64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e68:	2201      	movs	r2, #1
 8009e6a:	2109      	movs	r1, #9
 8009e6c:	f7ff ff8e 	bl	8009d8c <std>
 8009e70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009e74:	2202      	movs	r2, #2
 8009e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e7a:	2112      	movs	r1, #18
 8009e7c:	f7ff bf86 	b.w	8009d8c <std>
 8009e80:	20000d1c 	.word	0x20000d1c
 8009e84:	20000be4 	.word	0x20000be4
 8009e88:	08009df9 	.word	0x08009df9

08009e8c <__sfp_lock_acquire>:
 8009e8c:	4801      	ldr	r0, [pc, #4]	@ (8009e94 <__sfp_lock_acquire+0x8>)
 8009e8e:	f000 b948 	b.w	800a122 <__retarget_lock_acquire_recursive>
 8009e92:	bf00      	nop
 8009e94:	20000d25 	.word	0x20000d25

08009e98 <__sfp_lock_release>:
 8009e98:	4801      	ldr	r0, [pc, #4]	@ (8009ea0 <__sfp_lock_release+0x8>)
 8009e9a:	f000 b943 	b.w	800a124 <__retarget_lock_release_recursive>
 8009e9e:	bf00      	nop
 8009ea0:	20000d25 	.word	0x20000d25

08009ea4 <__sinit>:
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	f7ff fff0 	bl	8009e8c <__sfp_lock_acquire>
 8009eac:	6a23      	ldr	r3, [r4, #32]
 8009eae:	b11b      	cbz	r3, 8009eb8 <__sinit+0x14>
 8009eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb4:	f7ff bff0 	b.w	8009e98 <__sfp_lock_release>
 8009eb8:	4b04      	ldr	r3, [pc, #16]	@ (8009ecc <__sinit+0x28>)
 8009eba:	6223      	str	r3, [r4, #32]
 8009ebc:	4b04      	ldr	r3, [pc, #16]	@ (8009ed0 <__sinit+0x2c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1f5      	bne.n	8009eb0 <__sinit+0xc>
 8009ec4:	f7ff ffc4 	bl	8009e50 <global_stdio_init.part.0>
 8009ec8:	e7f2      	b.n	8009eb0 <__sinit+0xc>
 8009eca:	bf00      	nop
 8009ecc:	08009e11 	.word	0x08009e11
 8009ed0:	20000d1c 	.word	0x20000d1c

08009ed4 <_fwalk_sglue>:
 8009ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed8:	4607      	mov	r7, r0
 8009eda:	4688      	mov	r8, r1
 8009edc:	4614      	mov	r4, r2
 8009ede:	2600      	movs	r6, #0
 8009ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ee8:	d505      	bpl.n	8009ef6 <_fwalk_sglue+0x22>
 8009eea:	6824      	ldr	r4, [r4, #0]
 8009eec:	2c00      	cmp	r4, #0
 8009eee:	d1f7      	bne.n	8009ee0 <_fwalk_sglue+0xc>
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ef6:	89ab      	ldrh	r3, [r5, #12]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d907      	bls.n	8009f0c <_fwalk_sglue+0x38>
 8009efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f00:	3301      	adds	r3, #1
 8009f02:	d003      	beq.n	8009f0c <_fwalk_sglue+0x38>
 8009f04:	4629      	mov	r1, r5
 8009f06:	4638      	mov	r0, r7
 8009f08:	47c0      	blx	r8
 8009f0a:	4306      	orrs	r6, r0
 8009f0c:	3568      	adds	r5, #104	@ 0x68
 8009f0e:	e7e9      	b.n	8009ee4 <_fwalk_sglue+0x10>

08009f10 <sniprintf>:
 8009f10:	b40c      	push	{r2, r3}
 8009f12:	b530      	push	{r4, r5, lr}
 8009f14:	4b18      	ldr	r3, [pc, #96]	@ (8009f78 <sniprintf+0x68>)
 8009f16:	1e0c      	subs	r4, r1, #0
 8009f18:	681d      	ldr	r5, [r3, #0]
 8009f1a:	b09d      	sub	sp, #116	@ 0x74
 8009f1c:	da08      	bge.n	8009f30 <sniprintf+0x20>
 8009f1e:	238b      	movs	r3, #139	@ 0x8b
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	b01d      	add	sp, #116	@ 0x74
 8009f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f2c:	b002      	add	sp, #8
 8009f2e:	4770      	bx	lr
 8009f30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009f34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009f38:	f04f 0300 	mov.w	r3, #0
 8009f3c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009f3e:	bf0c      	ite	eq
 8009f40:	4623      	moveq	r3, r4
 8009f42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f46:	9304      	str	r3, [sp, #16]
 8009f48:	9307      	str	r3, [sp, #28]
 8009f4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f4e:	9002      	str	r0, [sp, #8]
 8009f50:	9006      	str	r0, [sp, #24]
 8009f52:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f56:	4628      	mov	r0, r5
 8009f58:	ab21      	add	r3, sp, #132	@ 0x84
 8009f5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009f5c:	a902      	add	r1, sp, #8
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	f002 f8b4 	bl	800c0cc <_svfiprintf_r>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	bfbc      	itt	lt
 8009f68:	238b      	movlt	r3, #139	@ 0x8b
 8009f6a:	602b      	strlt	r3, [r5, #0]
 8009f6c:	2c00      	cmp	r4, #0
 8009f6e:	d0da      	beq.n	8009f26 <sniprintf+0x16>
 8009f70:	2200      	movs	r2, #0
 8009f72:	9b02      	ldr	r3, [sp, #8]
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	e7d6      	b.n	8009f26 <sniprintf+0x16>
 8009f78:	20000188 	.word	0x20000188

08009f7c <__sread>:
 8009f7c:	b510      	push	{r4, lr}
 8009f7e:	460c      	mov	r4, r1
 8009f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f84:	f000 f87e 	bl	800a084 <_read_r>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	bfab      	itete	ge
 8009f8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8009f90:	181b      	addge	r3, r3, r0
 8009f92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009f96:	bfac      	ite	ge
 8009f98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009f9a:	81a3      	strhlt	r3, [r4, #12]
 8009f9c:	bd10      	pop	{r4, pc}

08009f9e <__swrite>:
 8009f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa2:	461f      	mov	r7, r3
 8009fa4:	898b      	ldrh	r3, [r1, #12]
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	05db      	lsls	r3, r3, #23
 8009faa:	460c      	mov	r4, r1
 8009fac:	4616      	mov	r6, r2
 8009fae:	d505      	bpl.n	8009fbc <__swrite+0x1e>
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb8:	f000 f852 	bl	800a060 <_lseek_r>
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	4632      	mov	r2, r6
 8009fc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fc4:	81a3      	strh	r3, [r4, #12]
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	463b      	mov	r3, r7
 8009fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd2:	f000 b869 	b.w	800a0a8 <_write_r>

08009fd6 <__sseek>:
 8009fd6:	b510      	push	{r4, lr}
 8009fd8:	460c      	mov	r4, r1
 8009fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fde:	f000 f83f 	bl	800a060 <_lseek_r>
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	bf15      	itete	ne
 8009fe8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009fea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009fee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ff2:	81a3      	strheq	r3, [r4, #12]
 8009ff4:	bf18      	it	ne
 8009ff6:	81a3      	strhne	r3, [r4, #12]
 8009ff8:	bd10      	pop	{r4, pc}

08009ffa <__sclose>:
 8009ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffe:	f000 b81f 	b.w	800a040 <_close_r>

0800a002 <memset>:
 800a002:	4603      	mov	r3, r0
 800a004:	4402      	add	r2, r0
 800a006:	4293      	cmp	r3, r2
 800a008:	d100      	bne.n	800a00c <memset+0xa>
 800a00a:	4770      	bx	lr
 800a00c:	f803 1b01 	strb.w	r1, [r3], #1
 800a010:	e7f9      	b.n	800a006 <memset+0x4>

0800a012 <strncmp>:
 800a012:	b510      	push	{r4, lr}
 800a014:	b16a      	cbz	r2, 800a032 <strncmp+0x20>
 800a016:	3901      	subs	r1, #1
 800a018:	1884      	adds	r4, r0, r2
 800a01a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a01e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a022:	429a      	cmp	r2, r3
 800a024:	d103      	bne.n	800a02e <strncmp+0x1c>
 800a026:	42a0      	cmp	r0, r4
 800a028:	d001      	beq.n	800a02e <strncmp+0x1c>
 800a02a:	2a00      	cmp	r2, #0
 800a02c:	d1f5      	bne.n	800a01a <strncmp+0x8>
 800a02e:	1ad0      	subs	r0, r2, r3
 800a030:	bd10      	pop	{r4, pc}
 800a032:	4610      	mov	r0, r2
 800a034:	e7fc      	b.n	800a030 <strncmp+0x1e>
	...

0800a038 <_localeconv_r>:
 800a038:	4800      	ldr	r0, [pc, #0]	@ (800a03c <_localeconv_r+0x4>)
 800a03a:	4770      	bx	lr
 800a03c:	2000010c 	.word	0x2000010c

0800a040 <_close_r>:
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	2300      	movs	r3, #0
 800a044:	4d05      	ldr	r5, [pc, #20]	@ (800a05c <_close_r+0x1c>)
 800a046:	4604      	mov	r4, r0
 800a048:	4608      	mov	r0, r1
 800a04a:	602b      	str	r3, [r5, #0]
 800a04c:	f7f8 ff3d 	bl	8002eca <_close>
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d102      	bne.n	800a05a <_close_r+0x1a>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	b103      	cbz	r3, 800a05a <_close_r+0x1a>
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	20000d20 	.word	0x20000d20

0800a060 <_lseek_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4604      	mov	r4, r0
 800a064:	4608      	mov	r0, r1
 800a066:	4611      	mov	r1, r2
 800a068:	2200      	movs	r2, #0
 800a06a:	4d05      	ldr	r5, [pc, #20]	@ (800a080 <_lseek_r+0x20>)
 800a06c:	602a      	str	r2, [r5, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	f7f8 ff4f 	bl	8002f12 <_lseek>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d102      	bne.n	800a07e <_lseek_r+0x1e>
 800a078:	682b      	ldr	r3, [r5, #0]
 800a07a:	b103      	cbz	r3, 800a07e <_lseek_r+0x1e>
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	20000d20 	.word	0x20000d20

0800a084 <_read_r>:
 800a084:	b538      	push	{r3, r4, r5, lr}
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	4611      	mov	r1, r2
 800a08c:	2200      	movs	r2, #0
 800a08e:	4d05      	ldr	r5, [pc, #20]	@ (800a0a4 <_read_r+0x20>)
 800a090:	602a      	str	r2, [r5, #0]
 800a092:	461a      	mov	r2, r3
 800a094:	f7f8 fee0 	bl	8002e58 <_read>
 800a098:	1c43      	adds	r3, r0, #1
 800a09a:	d102      	bne.n	800a0a2 <_read_r+0x1e>
 800a09c:	682b      	ldr	r3, [r5, #0]
 800a09e:	b103      	cbz	r3, 800a0a2 <_read_r+0x1e>
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	bd38      	pop	{r3, r4, r5, pc}
 800a0a4:	20000d20 	.word	0x20000d20

0800a0a8 <_write_r>:
 800a0a8:	b538      	push	{r3, r4, r5, lr}
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4d05      	ldr	r5, [pc, #20]	@ (800a0c8 <_write_r+0x20>)
 800a0b4:	602a      	str	r2, [r5, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f7f8 feeb 	bl	8002e92 <_write>
 800a0bc:	1c43      	adds	r3, r0, #1
 800a0be:	d102      	bne.n	800a0c6 <_write_r+0x1e>
 800a0c0:	682b      	ldr	r3, [r5, #0]
 800a0c2:	b103      	cbz	r3, 800a0c6 <_write_r+0x1e>
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	bd38      	pop	{r3, r4, r5, pc}
 800a0c8:	20000d20 	.word	0x20000d20

0800a0cc <__errno>:
 800a0cc:	4b01      	ldr	r3, [pc, #4]	@ (800a0d4 <__errno+0x8>)
 800a0ce:	6818      	ldr	r0, [r3, #0]
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20000188 	.word	0x20000188

0800a0d8 <__libc_init_array>:
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	2600      	movs	r6, #0
 800a0dc:	4d0c      	ldr	r5, [pc, #48]	@ (800a110 <__libc_init_array+0x38>)
 800a0de:	4c0d      	ldr	r4, [pc, #52]	@ (800a114 <__libc_init_array+0x3c>)
 800a0e0:	1b64      	subs	r4, r4, r5
 800a0e2:	10a4      	asrs	r4, r4, #2
 800a0e4:	42a6      	cmp	r6, r4
 800a0e6:	d109      	bne.n	800a0fc <__libc_init_array+0x24>
 800a0e8:	f002 fcda 	bl	800caa0 <_init>
 800a0ec:	2600      	movs	r6, #0
 800a0ee:	4d0a      	ldr	r5, [pc, #40]	@ (800a118 <__libc_init_array+0x40>)
 800a0f0:	4c0a      	ldr	r4, [pc, #40]	@ (800a11c <__libc_init_array+0x44>)
 800a0f2:	1b64      	subs	r4, r4, r5
 800a0f4:	10a4      	asrs	r4, r4, #2
 800a0f6:	42a6      	cmp	r6, r4
 800a0f8:	d105      	bne.n	800a106 <__libc_init_array+0x2e>
 800a0fa:	bd70      	pop	{r4, r5, r6, pc}
 800a0fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a100:	4798      	blx	r3
 800a102:	3601      	adds	r6, #1
 800a104:	e7ee      	b.n	800a0e4 <__libc_init_array+0xc>
 800a106:	f855 3b04 	ldr.w	r3, [r5], #4
 800a10a:	4798      	blx	r3
 800a10c:	3601      	adds	r6, #1
 800a10e:	e7f2      	b.n	800a0f6 <__libc_init_array+0x1e>
 800a110:	0800cf50 	.word	0x0800cf50
 800a114:	0800cf50 	.word	0x0800cf50
 800a118:	0800cf50 	.word	0x0800cf50
 800a11c:	0800cf54 	.word	0x0800cf54

0800a120 <__retarget_lock_init_recursive>:
 800a120:	4770      	bx	lr

0800a122 <__retarget_lock_acquire_recursive>:
 800a122:	4770      	bx	lr

0800a124 <__retarget_lock_release_recursive>:
 800a124:	4770      	bx	lr

0800a126 <memchr>:
 800a126:	4603      	mov	r3, r0
 800a128:	b510      	push	{r4, lr}
 800a12a:	b2c9      	uxtb	r1, r1
 800a12c:	4402      	add	r2, r0
 800a12e:	4293      	cmp	r3, r2
 800a130:	4618      	mov	r0, r3
 800a132:	d101      	bne.n	800a138 <memchr+0x12>
 800a134:	2000      	movs	r0, #0
 800a136:	e003      	b.n	800a140 <memchr+0x1a>
 800a138:	7804      	ldrb	r4, [r0, #0]
 800a13a:	3301      	adds	r3, #1
 800a13c:	428c      	cmp	r4, r1
 800a13e:	d1f6      	bne.n	800a12e <memchr+0x8>
 800a140:	bd10      	pop	{r4, pc}

0800a142 <memcpy>:
 800a142:	440a      	add	r2, r1
 800a144:	4291      	cmp	r1, r2
 800a146:	f100 33ff 	add.w	r3, r0, #4294967295
 800a14a:	d100      	bne.n	800a14e <memcpy+0xc>
 800a14c:	4770      	bx	lr
 800a14e:	b510      	push	{r4, lr}
 800a150:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a154:	4291      	cmp	r1, r2
 800a156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a15a:	d1f9      	bne.n	800a150 <memcpy+0xe>
 800a15c:	bd10      	pop	{r4, pc}
	...

0800a160 <nan>:
 800a160:	2000      	movs	r0, #0
 800a162:	4901      	ldr	r1, [pc, #4]	@ (800a168 <nan+0x8>)
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	7ff80000 	.word	0x7ff80000

0800a16c <quorem>:
 800a16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a170:	6903      	ldr	r3, [r0, #16]
 800a172:	690c      	ldr	r4, [r1, #16]
 800a174:	4607      	mov	r7, r0
 800a176:	42a3      	cmp	r3, r4
 800a178:	db7e      	blt.n	800a278 <quorem+0x10c>
 800a17a:	3c01      	subs	r4, #1
 800a17c:	00a3      	lsls	r3, r4, #2
 800a17e:	f100 0514 	add.w	r5, r0, #20
 800a182:	f101 0814 	add.w	r8, r1, #20
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a18c:	9301      	str	r3, [sp, #4]
 800a18e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a196:	3301      	adds	r3, #1
 800a198:	429a      	cmp	r2, r3
 800a19a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a19e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1a2:	d32e      	bcc.n	800a202 <quorem+0x96>
 800a1a4:	f04f 0a00 	mov.w	sl, #0
 800a1a8:	46c4      	mov	ip, r8
 800a1aa:	46ae      	mov	lr, r5
 800a1ac:	46d3      	mov	fp, sl
 800a1ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1b2:	b298      	uxth	r0, r3
 800a1b4:	fb06 a000 	mla	r0, r6, r0, sl
 800a1b8:	0c1b      	lsrs	r3, r3, #16
 800a1ba:	0c02      	lsrs	r2, r0, #16
 800a1bc:	fb06 2303 	mla	r3, r6, r3, r2
 800a1c0:	f8de 2000 	ldr.w	r2, [lr]
 800a1c4:	b280      	uxth	r0, r0
 800a1c6:	b292      	uxth	r2, r2
 800a1c8:	1a12      	subs	r2, r2, r0
 800a1ca:	445a      	add	r2, fp
 800a1cc:	f8de 0000 	ldr.w	r0, [lr]
 800a1d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1de:	b292      	uxth	r2, r2
 800a1e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1e4:	45e1      	cmp	r9, ip
 800a1e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a1ea:	f84e 2b04 	str.w	r2, [lr], #4
 800a1ee:	d2de      	bcs.n	800a1ae <quorem+0x42>
 800a1f0:	9b00      	ldr	r3, [sp, #0]
 800a1f2:	58eb      	ldr	r3, [r5, r3]
 800a1f4:	b92b      	cbnz	r3, 800a202 <quorem+0x96>
 800a1f6:	9b01      	ldr	r3, [sp, #4]
 800a1f8:	3b04      	subs	r3, #4
 800a1fa:	429d      	cmp	r5, r3
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	d32f      	bcc.n	800a260 <quorem+0xf4>
 800a200:	613c      	str	r4, [r7, #16]
 800a202:	4638      	mov	r0, r7
 800a204:	f001 fd16 	bl	800bc34 <__mcmp>
 800a208:	2800      	cmp	r0, #0
 800a20a:	db25      	blt.n	800a258 <quorem+0xec>
 800a20c:	4629      	mov	r1, r5
 800a20e:	2000      	movs	r0, #0
 800a210:	f858 2b04 	ldr.w	r2, [r8], #4
 800a214:	f8d1 c000 	ldr.w	ip, [r1]
 800a218:	fa1f fe82 	uxth.w	lr, r2
 800a21c:	fa1f f38c 	uxth.w	r3, ip
 800a220:	eba3 030e 	sub.w	r3, r3, lr
 800a224:	4403      	add	r3, r0
 800a226:	0c12      	lsrs	r2, r2, #16
 800a228:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a22c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a230:	b29b      	uxth	r3, r3
 800a232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a236:	45c1      	cmp	r9, r8
 800a238:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a23c:	f841 3b04 	str.w	r3, [r1], #4
 800a240:	d2e6      	bcs.n	800a210 <quorem+0xa4>
 800a242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a24a:	b922      	cbnz	r2, 800a256 <quorem+0xea>
 800a24c:	3b04      	subs	r3, #4
 800a24e:	429d      	cmp	r5, r3
 800a250:	461a      	mov	r2, r3
 800a252:	d30b      	bcc.n	800a26c <quorem+0x100>
 800a254:	613c      	str	r4, [r7, #16]
 800a256:	3601      	adds	r6, #1
 800a258:	4630      	mov	r0, r6
 800a25a:	b003      	add	sp, #12
 800a25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a260:	6812      	ldr	r2, [r2, #0]
 800a262:	3b04      	subs	r3, #4
 800a264:	2a00      	cmp	r2, #0
 800a266:	d1cb      	bne.n	800a200 <quorem+0x94>
 800a268:	3c01      	subs	r4, #1
 800a26a:	e7c6      	b.n	800a1fa <quorem+0x8e>
 800a26c:	6812      	ldr	r2, [r2, #0]
 800a26e:	3b04      	subs	r3, #4
 800a270:	2a00      	cmp	r2, #0
 800a272:	d1ef      	bne.n	800a254 <quorem+0xe8>
 800a274:	3c01      	subs	r4, #1
 800a276:	e7ea      	b.n	800a24e <quorem+0xe2>
 800a278:	2000      	movs	r0, #0
 800a27a:	e7ee      	b.n	800a25a <quorem+0xee>
 800a27c:	0000      	movs	r0, r0
	...

0800a280 <_dtoa_r>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	4614      	mov	r4, r2
 800a286:	461d      	mov	r5, r3
 800a288:	69c7      	ldr	r7, [r0, #28]
 800a28a:	b097      	sub	sp, #92	@ 0x5c
 800a28c:	4681      	mov	r9, r0
 800a28e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a292:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a294:	b97f      	cbnz	r7, 800a2b6 <_dtoa_r+0x36>
 800a296:	2010      	movs	r0, #16
 800a298:	f001 f948 	bl	800b52c <malloc>
 800a29c:	4602      	mov	r2, r0
 800a29e:	f8c9 001c 	str.w	r0, [r9, #28]
 800a2a2:	b920      	cbnz	r0, 800a2ae <_dtoa_r+0x2e>
 800a2a4:	21ef      	movs	r1, #239	@ 0xef
 800a2a6:	4bac      	ldr	r3, [pc, #688]	@ (800a558 <_dtoa_r+0x2d8>)
 800a2a8:	48ac      	ldr	r0, [pc, #688]	@ (800a55c <_dtoa_r+0x2dc>)
 800a2aa:	f002 f8dd 	bl	800c468 <__assert_func>
 800a2ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a2b2:	6007      	str	r7, [r0, #0]
 800a2b4:	60c7      	str	r7, [r0, #12]
 800a2b6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a2ba:	6819      	ldr	r1, [r3, #0]
 800a2bc:	b159      	cbz	r1, 800a2d6 <_dtoa_r+0x56>
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	4093      	lsls	r3, r2
 800a2c4:	604a      	str	r2, [r1, #4]
 800a2c6:	608b      	str	r3, [r1, #8]
 800a2c8:	4648      	mov	r0, r9
 800a2ca:	f001 fa37 	bl	800b73c <_Bfree>
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	1e2b      	subs	r3, r5, #0
 800a2d8:	bfaf      	iteee	ge
 800a2da:	2300      	movge	r3, #0
 800a2dc:	2201      	movlt	r2, #1
 800a2de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2e2:	9307      	strlt	r3, [sp, #28]
 800a2e4:	bfa8      	it	ge
 800a2e6:	6033      	strge	r3, [r6, #0]
 800a2e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a2ec:	4b9c      	ldr	r3, [pc, #624]	@ (800a560 <_dtoa_r+0x2e0>)
 800a2ee:	bfb8      	it	lt
 800a2f0:	6032      	strlt	r2, [r6, #0]
 800a2f2:	ea33 0308 	bics.w	r3, r3, r8
 800a2f6:	d112      	bne.n	800a31e <_dtoa_r+0x9e>
 800a2f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a2fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a304:	4323      	orrs	r3, r4
 800a306:	f000 855e 	beq.w	800adc6 <_dtoa_r+0xb46>
 800a30a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a30c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a564 <_dtoa_r+0x2e4>
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 8560 	beq.w	800add6 <_dtoa_r+0xb56>
 800a316:	f10a 0303 	add.w	r3, sl, #3
 800a31a:	f000 bd5a 	b.w	800add2 <_dtoa_r+0xb52>
 800a31e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a322:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a32a:	2200      	movs	r2, #0
 800a32c:	2300      	movs	r3, #0
 800a32e:	f7f6 fb3b 	bl	80009a8 <__aeabi_dcmpeq>
 800a332:	4607      	mov	r7, r0
 800a334:	b158      	cbz	r0, 800a34e <_dtoa_r+0xce>
 800a336:	2301      	movs	r3, #1
 800a338:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a33e:	b113      	cbz	r3, 800a346 <_dtoa_r+0xc6>
 800a340:	4b89      	ldr	r3, [pc, #548]	@ (800a568 <_dtoa_r+0x2e8>)
 800a342:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a344:	6013      	str	r3, [r2, #0]
 800a346:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a56c <_dtoa_r+0x2ec>
 800a34a:	f000 bd44 	b.w	800add6 <_dtoa_r+0xb56>
 800a34e:	ab14      	add	r3, sp, #80	@ 0x50
 800a350:	9301      	str	r3, [sp, #4]
 800a352:	ab15      	add	r3, sp, #84	@ 0x54
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	4648      	mov	r0, r9
 800a358:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a35c:	f001 fd82 	bl	800be64 <__d2b>
 800a360:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a364:	9003      	str	r0, [sp, #12]
 800a366:	2e00      	cmp	r6, #0
 800a368:	d078      	beq.n	800a45c <_dtoa_r+0x1dc>
 800a36a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a36e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a370:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a378:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a37c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a380:	9712      	str	r7, [sp, #72]	@ 0x48
 800a382:	4619      	mov	r1, r3
 800a384:	2200      	movs	r2, #0
 800a386:	4b7a      	ldr	r3, [pc, #488]	@ (800a570 <_dtoa_r+0x2f0>)
 800a388:	f7f5 feee 	bl	8000168 <__aeabi_dsub>
 800a38c:	a36c      	add	r3, pc, #432	@ (adr r3, 800a540 <_dtoa_r+0x2c0>)
 800a38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a392:	f7f6 f8a1 	bl	80004d8 <__aeabi_dmul>
 800a396:	a36c      	add	r3, pc, #432	@ (adr r3, 800a548 <_dtoa_r+0x2c8>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f5 fee6 	bl	800016c <__adddf3>
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	460d      	mov	r5, r1
 800a3a6:	f7f6 f82d 	bl	8000404 <__aeabi_i2d>
 800a3aa:	a369      	add	r3, pc, #420	@ (adr r3, 800a550 <_dtoa_r+0x2d0>)
 800a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b0:	f7f6 f892 	bl	80004d8 <__aeabi_dmul>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f7f5 fed6 	bl	800016c <__adddf3>
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	460d      	mov	r5, r1
 800a3c4:	f7f6 fb38 	bl	8000a38 <__aeabi_d2iz>
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	4607      	mov	r7, r0
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	f7f6 faf3 	bl	80009bc <__aeabi_dcmplt>
 800a3d6:	b140      	cbz	r0, 800a3ea <_dtoa_r+0x16a>
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f7f6 f813 	bl	8000404 <__aeabi_i2d>
 800a3de:	4622      	mov	r2, r4
 800a3e0:	462b      	mov	r3, r5
 800a3e2:	f7f6 fae1 	bl	80009a8 <__aeabi_dcmpeq>
 800a3e6:	b900      	cbnz	r0, 800a3ea <_dtoa_r+0x16a>
 800a3e8:	3f01      	subs	r7, #1
 800a3ea:	2f16      	cmp	r7, #22
 800a3ec:	d854      	bhi.n	800a498 <_dtoa_r+0x218>
 800a3ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3f2:	4b60      	ldr	r3, [pc, #384]	@ (800a574 <_dtoa_r+0x2f4>)
 800a3f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	f7f6 fade 	bl	80009bc <__aeabi_dcmplt>
 800a400:	2800      	cmp	r0, #0
 800a402:	d04b      	beq.n	800a49c <_dtoa_r+0x21c>
 800a404:	2300      	movs	r3, #0
 800a406:	3f01      	subs	r7, #1
 800a408:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a40a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a40c:	1b9b      	subs	r3, r3, r6
 800a40e:	1e5a      	subs	r2, r3, #1
 800a410:	bf49      	itett	mi
 800a412:	f1c3 0301 	rsbmi	r3, r3, #1
 800a416:	2300      	movpl	r3, #0
 800a418:	9304      	strmi	r3, [sp, #16]
 800a41a:	2300      	movmi	r3, #0
 800a41c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a41e:	bf54      	ite	pl
 800a420:	9304      	strpl	r3, [sp, #16]
 800a422:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a424:	2f00      	cmp	r7, #0
 800a426:	db3b      	blt.n	800a4a0 <_dtoa_r+0x220>
 800a428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a42a:	970e      	str	r7, [sp, #56]	@ 0x38
 800a42c:	443b      	add	r3, r7
 800a42e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a430:	2300      	movs	r3, #0
 800a432:	930a      	str	r3, [sp, #40]	@ 0x28
 800a434:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a436:	2b09      	cmp	r3, #9
 800a438:	d865      	bhi.n	800a506 <_dtoa_r+0x286>
 800a43a:	2b05      	cmp	r3, #5
 800a43c:	bfc4      	itt	gt
 800a43e:	3b04      	subgt	r3, #4
 800a440:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a442:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a444:	bfc8      	it	gt
 800a446:	2400      	movgt	r4, #0
 800a448:	f1a3 0302 	sub.w	r3, r3, #2
 800a44c:	bfd8      	it	le
 800a44e:	2401      	movle	r4, #1
 800a450:	2b03      	cmp	r3, #3
 800a452:	d864      	bhi.n	800a51e <_dtoa_r+0x29e>
 800a454:	e8df f003 	tbb	[pc, r3]
 800a458:	2c385553 	.word	0x2c385553
 800a45c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a460:	441e      	add	r6, r3
 800a462:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a466:	2b20      	cmp	r3, #32
 800a468:	bfc1      	itttt	gt
 800a46a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a46e:	fa08 f803 	lslgt.w	r8, r8, r3
 800a472:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a476:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a47a:	bfd6      	itet	le
 800a47c:	f1c3 0320 	rsble	r3, r3, #32
 800a480:	ea48 0003 	orrgt.w	r0, r8, r3
 800a484:	fa04 f003 	lslle.w	r0, r4, r3
 800a488:	f7f5 ffac 	bl	80003e4 <__aeabi_ui2d>
 800a48c:	2201      	movs	r2, #1
 800a48e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a492:	3e01      	subs	r6, #1
 800a494:	9212      	str	r2, [sp, #72]	@ 0x48
 800a496:	e774      	b.n	800a382 <_dtoa_r+0x102>
 800a498:	2301      	movs	r3, #1
 800a49a:	e7b5      	b.n	800a408 <_dtoa_r+0x188>
 800a49c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a49e:	e7b4      	b.n	800a40a <_dtoa_r+0x18a>
 800a4a0:	9b04      	ldr	r3, [sp, #16]
 800a4a2:	1bdb      	subs	r3, r3, r7
 800a4a4:	9304      	str	r3, [sp, #16]
 800a4a6:	427b      	negs	r3, r7
 800a4a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800a4ae:	e7c1      	b.n	800a434 <_dtoa_r+0x1b4>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4b6:	eb07 0b03 	add.w	fp, r7, r3
 800a4ba:	f10b 0301 	add.w	r3, fp, #1
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	9308      	str	r3, [sp, #32]
 800a4c2:	bfb8      	it	lt
 800a4c4:	2301      	movlt	r3, #1
 800a4c6:	e006      	b.n	800a4d6 <_dtoa_r+0x256>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	dd28      	ble.n	800a524 <_dtoa_r+0x2a4>
 800a4d2:	469b      	mov	fp, r3
 800a4d4:	9308      	str	r3, [sp, #32]
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	2204      	movs	r2, #4
 800a4da:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a4de:	f102 0514 	add.w	r5, r2, #20
 800a4e2:	429d      	cmp	r5, r3
 800a4e4:	d926      	bls.n	800a534 <_dtoa_r+0x2b4>
 800a4e6:	6041      	str	r1, [r0, #4]
 800a4e8:	4648      	mov	r0, r9
 800a4ea:	f001 f8e7 	bl	800b6bc <_Balloc>
 800a4ee:	4682      	mov	sl, r0
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d143      	bne.n	800a57c <_dtoa_r+0x2fc>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a4fa:	4b1f      	ldr	r3, [pc, #124]	@ (800a578 <_dtoa_r+0x2f8>)
 800a4fc:	e6d4      	b.n	800a2a8 <_dtoa_r+0x28>
 800a4fe:	2300      	movs	r3, #0
 800a500:	e7e3      	b.n	800a4ca <_dtoa_r+0x24a>
 800a502:	2300      	movs	r3, #0
 800a504:	e7d5      	b.n	800a4b2 <_dtoa_r+0x232>
 800a506:	2401      	movs	r4, #1
 800a508:	2300      	movs	r3, #0
 800a50a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a50c:	9320      	str	r3, [sp, #128]	@ 0x80
 800a50e:	f04f 3bff 	mov.w	fp, #4294967295
 800a512:	2200      	movs	r2, #0
 800a514:	2312      	movs	r3, #18
 800a516:	f8cd b020 	str.w	fp, [sp, #32]
 800a51a:	9221      	str	r2, [sp, #132]	@ 0x84
 800a51c:	e7db      	b.n	800a4d6 <_dtoa_r+0x256>
 800a51e:	2301      	movs	r3, #1
 800a520:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a522:	e7f4      	b.n	800a50e <_dtoa_r+0x28e>
 800a524:	f04f 0b01 	mov.w	fp, #1
 800a528:	465b      	mov	r3, fp
 800a52a:	f8cd b020 	str.w	fp, [sp, #32]
 800a52e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800a532:	e7d0      	b.n	800a4d6 <_dtoa_r+0x256>
 800a534:	3101      	adds	r1, #1
 800a536:	0052      	lsls	r2, r2, #1
 800a538:	e7d1      	b.n	800a4de <_dtoa_r+0x25e>
 800a53a:	bf00      	nop
 800a53c:	f3af 8000 	nop.w
 800a540:	636f4361 	.word	0x636f4361
 800a544:	3fd287a7 	.word	0x3fd287a7
 800a548:	8b60c8b3 	.word	0x8b60c8b3
 800a54c:	3fc68a28 	.word	0x3fc68a28
 800a550:	509f79fb 	.word	0x509f79fb
 800a554:	3fd34413 	.word	0x3fd34413
 800a558:	0800cb6b 	.word	0x0800cb6b
 800a55c:	0800cb82 	.word	0x0800cb82
 800a560:	7ff00000 	.word	0x7ff00000
 800a564:	0800cb67 	.word	0x0800cb67
 800a568:	0800cb33 	.word	0x0800cb33
 800a56c:	0800cb32 	.word	0x0800cb32
 800a570:	3ff80000 	.word	0x3ff80000
 800a574:	0800ce80 	.word	0x0800ce80
 800a578:	0800cbda 	.word	0x0800cbda
 800a57c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a580:	6018      	str	r0, [r3, #0]
 800a582:	9b08      	ldr	r3, [sp, #32]
 800a584:	2b0e      	cmp	r3, #14
 800a586:	f200 80a1 	bhi.w	800a6cc <_dtoa_r+0x44c>
 800a58a:	2c00      	cmp	r4, #0
 800a58c:	f000 809e 	beq.w	800a6cc <_dtoa_r+0x44c>
 800a590:	2f00      	cmp	r7, #0
 800a592:	dd33      	ble.n	800a5fc <_dtoa_r+0x37c>
 800a594:	4b9c      	ldr	r3, [pc, #624]	@ (800a808 <_dtoa_r+0x588>)
 800a596:	f007 020f 	and.w	r2, r7, #15
 800a59a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a59e:	05f8      	lsls	r0, r7, #23
 800a5a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800a5a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a5ac:	d516      	bpl.n	800a5dc <_dtoa_r+0x35c>
 800a5ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5b2:	4b96      	ldr	r3, [pc, #600]	@ (800a80c <_dtoa_r+0x58c>)
 800a5b4:	2603      	movs	r6, #3
 800a5b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5ba:	f7f6 f8b7 	bl	800072c <__aeabi_ddiv>
 800a5be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a5c2:	f004 040f 	and.w	r4, r4, #15
 800a5c6:	4d91      	ldr	r5, [pc, #580]	@ (800a80c <_dtoa_r+0x58c>)
 800a5c8:	b954      	cbnz	r4, 800a5e0 <_dtoa_r+0x360>
 800a5ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5d2:	f7f6 f8ab 	bl	800072c <__aeabi_ddiv>
 800a5d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a5da:	e028      	b.n	800a62e <_dtoa_r+0x3ae>
 800a5dc:	2602      	movs	r6, #2
 800a5de:	e7f2      	b.n	800a5c6 <_dtoa_r+0x346>
 800a5e0:	07e1      	lsls	r1, r4, #31
 800a5e2:	d508      	bpl.n	800a5f6 <_dtoa_r+0x376>
 800a5e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a5e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5ec:	f7f5 ff74 	bl	80004d8 <__aeabi_dmul>
 800a5f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5f4:	3601      	adds	r6, #1
 800a5f6:	1064      	asrs	r4, r4, #1
 800a5f8:	3508      	adds	r5, #8
 800a5fa:	e7e5      	b.n	800a5c8 <_dtoa_r+0x348>
 800a5fc:	f000 80af 	beq.w	800a75e <_dtoa_r+0x4de>
 800a600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a604:	427c      	negs	r4, r7
 800a606:	4b80      	ldr	r3, [pc, #512]	@ (800a808 <_dtoa_r+0x588>)
 800a608:	f004 020f 	and.w	r2, r4, #15
 800a60c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	f7f5 ff60 	bl	80004d8 <__aeabi_dmul>
 800a618:	2602      	movs	r6, #2
 800a61a:	2300      	movs	r3, #0
 800a61c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a620:	4d7a      	ldr	r5, [pc, #488]	@ (800a80c <_dtoa_r+0x58c>)
 800a622:	1124      	asrs	r4, r4, #4
 800a624:	2c00      	cmp	r4, #0
 800a626:	f040 808f 	bne.w	800a748 <_dtoa_r+0x4c8>
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1d3      	bne.n	800a5d6 <_dtoa_r+0x356>
 800a62e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800a632:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 8094 	beq.w	800a762 <_dtoa_r+0x4e2>
 800a63a:	2200      	movs	r2, #0
 800a63c:	4620      	mov	r0, r4
 800a63e:	4629      	mov	r1, r5
 800a640:	4b73      	ldr	r3, [pc, #460]	@ (800a810 <_dtoa_r+0x590>)
 800a642:	f7f6 f9bb 	bl	80009bc <__aeabi_dcmplt>
 800a646:	2800      	cmp	r0, #0
 800a648:	f000 808b 	beq.w	800a762 <_dtoa_r+0x4e2>
 800a64c:	9b08      	ldr	r3, [sp, #32]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f000 8087 	beq.w	800a762 <_dtoa_r+0x4e2>
 800a654:	f1bb 0f00 	cmp.w	fp, #0
 800a658:	dd34      	ble.n	800a6c4 <_dtoa_r+0x444>
 800a65a:	4620      	mov	r0, r4
 800a65c:	2200      	movs	r2, #0
 800a65e:	4629      	mov	r1, r5
 800a660:	4b6c      	ldr	r3, [pc, #432]	@ (800a814 <_dtoa_r+0x594>)
 800a662:	f7f5 ff39 	bl	80004d8 <__aeabi_dmul>
 800a666:	465c      	mov	r4, fp
 800a668:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a66c:	f107 38ff 	add.w	r8, r7, #4294967295
 800a670:	3601      	adds	r6, #1
 800a672:	4630      	mov	r0, r6
 800a674:	f7f5 fec6 	bl	8000404 <__aeabi_i2d>
 800a678:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a67c:	f7f5 ff2c 	bl	80004d8 <__aeabi_dmul>
 800a680:	2200      	movs	r2, #0
 800a682:	4b65      	ldr	r3, [pc, #404]	@ (800a818 <_dtoa_r+0x598>)
 800a684:	f7f5 fd72 	bl	800016c <__adddf3>
 800a688:	4605      	mov	r5, r0
 800a68a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a68e:	2c00      	cmp	r4, #0
 800a690:	d16a      	bne.n	800a768 <_dtoa_r+0x4e8>
 800a692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a696:	2200      	movs	r2, #0
 800a698:	4b60      	ldr	r3, [pc, #384]	@ (800a81c <_dtoa_r+0x59c>)
 800a69a:	f7f5 fd65 	bl	8000168 <__aeabi_dsub>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a6a6:	462a      	mov	r2, r5
 800a6a8:	4633      	mov	r3, r6
 800a6aa:	f7f6 f9a5 	bl	80009f8 <__aeabi_dcmpgt>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f040 8298 	bne.w	800abe4 <_dtoa_r+0x964>
 800a6b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a6be:	f7f6 f97d 	bl	80009bc <__aeabi_dcmplt>
 800a6c2:	bb38      	cbnz	r0, 800a714 <_dtoa_r+0x494>
 800a6c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a6c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a6cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f2c0 8157 	blt.w	800a982 <_dtoa_r+0x702>
 800a6d4:	2f0e      	cmp	r7, #14
 800a6d6:	f300 8154 	bgt.w	800a982 <_dtoa_r+0x702>
 800a6da:	4b4b      	ldr	r3, [pc, #300]	@ (800a808 <_dtoa_r+0x588>)
 800a6dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a6e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f280 80e5 	bge.w	800a8ba <_dtoa_r+0x63a>
 800a6f0:	9b08      	ldr	r3, [sp, #32]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f300 80e1 	bgt.w	800a8ba <_dtoa_r+0x63a>
 800a6f8:	d10c      	bne.n	800a714 <_dtoa_r+0x494>
 800a6fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6fe:	2200      	movs	r2, #0
 800a700:	4b46      	ldr	r3, [pc, #280]	@ (800a81c <_dtoa_r+0x59c>)
 800a702:	f7f5 fee9 	bl	80004d8 <__aeabi_dmul>
 800a706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a70a:	f7f6 f96b 	bl	80009e4 <__aeabi_dcmpge>
 800a70e:	2800      	cmp	r0, #0
 800a710:	f000 8266 	beq.w	800abe0 <_dtoa_r+0x960>
 800a714:	2400      	movs	r4, #0
 800a716:	4625      	mov	r5, r4
 800a718:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a71a:	4656      	mov	r6, sl
 800a71c:	ea6f 0803 	mvn.w	r8, r3
 800a720:	2700      	movs	r7, #0
 800a722:	4621      	mov	r1, r4
 800a724:	4648      	mov	r0, r9
 800a726:	f001 f809 	bl	800b73c <_Bfree>
 800a72a:	2d00      	cmp	r5, #0
 800a72c:	f000 80bd 	beq.w	800a8aa <_dtoa_r+0x62a>
 800a730:	b12f      	cbz	r7, 800a73e <_dtoa_r+0x4be>
 800a732:	42af      	cmp	r7, r5
 800a734:	d003      	beq.n	800a73e <_dtoa_r+0x4be>
 800a736:	4639      	mov	r1, r7
 800a738:	4648      	mov	r0, r9
 800a73a:	f000 ffff 	bl	800b73c <_Bfree>
 800a73e:	4629      	mov	r1, r5
 800a740:	4648      	mov	r0, r9
 800a742:	f000 fffb 	bl	800b73c <_Bfree>
 800a746:	e0b0      	b.n	800a8aa <_dtoa_r+0x62a>
 800a748:	07e2      	lsls	r2, r4, #31
 800a74a:	d505      	bpl.n	800a758 <_dtoa_r+0x4d8>
 800a74c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a750:	f7f5 fec2 	bl	80004d8 <__aeabi_dmul>
 800a754:	2301      	movs	r3, #1
 800a756:	3601      	adds	r6, #1
 800a758:	1064      	asrs	r4, r4, #1
 800a75a:	3508      	adds	r5, #8
 800a75c:	e762      	b.n	800a624 <_dtoa_r+0x3a4>
 800a75e:	2602      	movs	r6, #2
 800a760:	e765      	b.n	800a62e <_dtoa_r+0x3ae>
 800a762:	46b8      	mov	r8, r7
 800a764:	9c08      	ldr	r4, [sp, #32]
 800a766:	e784      	b.n	800a672 <_dtoa_r+0x3f2>
 800a768:	4b27      	ldr	r3, [pc, #156]	@ (800a808 <_dtoa_r+0x588>)
 800a76a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a76c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a770:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a774:	4454      	add	r4, sl
 800a776:	2900      	cmp	r1, #0
 800a778:	d054      	beq.n	800a824 <_dtoa_r+0x5a4>
 800a77a:	2000      	movs	r0, #0
 800a77c:	4928      	ldr	r1, [pc, #160]	@ (800a820 <_dtoa_r+0x5a0>)
 800a77e:	f7f5 ffd5 	bl	800072c <__aeabi_ddiv>
 800a782:	4633      	mov	r3, r6
 800a784:	462a      	mov	r2, r5
 800a786:	f7f5 fcef 	bl	8000168 <__aeabi_dsub>
 800a78a:	4656      	mov	r6, sl
 800a78c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a790:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a794:	f7f6 f950 	bl	8000a38 <__aeabi_d2iz>
 800a798:	4605      	mov	r5, r0
 800a79a:	f7f5 fe33 	bl	8000404 <__aeabi_i2d>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7a6:	f7f5 fcdf 	bl	8000168 <__aeabi_dsub>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	3530      	adds	r5, #48	@ 0x30
 800a7b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a7b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7b8:	f806 5b01 	strb.w	r5, [r6], #1
 800a7bc:	f7f6 f8fe 	bl	80009bc <__aeabi_dcmplt>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d172      	bne.n	800a8aa <_dtoa_r+0x62a>
 800a7c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	4911      	ldr	r1, [pc, #68]	@ (800a810 <_dtoa_r+0x590>)
 800a7cc:	f7f5 fccc 	bl	8000168 <__aeabi_dsub>
 800a7d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7d4:	f7f6 f8f2 	bl	80009bc <__aeabi_dcmplt>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	f040 80b4 	bne.w	800a946 <_dtoa_r+0x6c6>
 800a7de:	42a6      	cmp	r6, r4
 800a7e0:	f43f af70 	beq.w	800a6c4 <_dtoa_r+0x444>
 800a7e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a814 <_dtoa_r+0x594>)
 800a7ec:	f7f5 fe74 	bl	80004d8 <__aeabi_dmul>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a7f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7fa:	4b06      	ldr	r3, [pc, #24]	@ (800a814 <_dtoa_r+0x594>)
 800a7fc:	f7f5 fe6c 	bl	80004d8 <__aeabi_dmul>
 800a800:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a804:	e7c4      	b.n	800a790 <_dtoa_r+0x510>
 800a806:	bf00      	nop
 800a808:	0800ce80 	.word	0x0800ce80
 800a80c:	0800ce58 	.word	0x0800ce58
 800a810:	3ff00000 	.word	0x3ff00000
 800a814:	40240000 	.word	0x40240000
 800a818:	401c0000 	.word	0x401c0000
 800a81c:	40140000 	.word	0x40140000
 800a820:	3fe00000 	.word	0x3fe00000
 800a824:	4631      	mov	r1, r6
 800a826:	4628      	mov	r0, r5
 800a828:	f7f5 fe56 	bl	80004d8 <__aeabi_dmul>
 800a82c:	4656      	mov	r6, sl
 800a82e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a832:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a838:	f7f6 f8fe 	bl	8000a38 <__aeabi_d2iz>
 800a83c:	4605      	mov	r5, r0
 800a83e:	f7f5 fde1 	bl	8000404 <__aeabi_i2d>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a84a:	f7f5 fc8d 	bl	8000168 <__aeabi_dsub>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	3530      	adds	r5, #48	@ 0x30
 800a854:	f806 5b01 	strb.w	r5, [r6], #1
 800a858:	42a6      	cmp	r6, r4
 800a85a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a85e:	f04f 0200 	mov.w	r2, #0
 800a862:	d124      	bne.n	800a8ae <_dtoa_r+0x62e>
 800a864:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a868:	4bae      	ldr	r3, [pc, #696]	@ (800ab24 <_dtoa_r+0x8a4>)
 800a86a:	f7f5 fc7f 	bl	800016c <__adddf3>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a876:	f7f6 f8bf 	bl	80009f8 <__aeabi_dcmpgt>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d163      	bne.n	800a946 <_dtoa_r+0x6c6>
 800a87e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a882:	2000      	movs	r0, #0
 800a884:	49a7      	ldr	r1, [pc, #668]	@ (800ab24 <_dtoa_r+0x8a4>)
 800a886:	f7f5 fc6f 	bl	8000168 <__aeabi_dsub>
 800a88a:	4602      	mov	r2, r0
 800a88c:	460b      	mov	r3, r1
 800a88e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a892:	f7f6 f893 	bl	80009bc <__aeabi_dcmplt>
 800a896:	2800      	cmp	r0, #0
 800a898:	f43f af14 	beq.w	800a6c4 <_dtoa_r+0x444>
 800a89c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a89e:	1e73      	subs	r3, r6, #1
 800a8a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8a6:	2b30      	cmp	r3, #48	@ 0x30
 800a8a8:	d0f8      	beq.n	800a89c <_dtoa_r+0x61c>
 800a8aa:	4647      	mov	r7, r8
 800a8ac:	e03b      	b.n	800a926 <_dtoa_r+0x6a6>
 800a8ae:	4b9e      	ldr	r3, [pc, #632]	@ (800ab28 <_dtoa_r+0x8a8>)
 800a8b0:	f7f5 fe12 	bl	80004d8 <__aeabi_dmul>
 800a8b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8b8:	e7bc      	b.n	800a834 <_dtoa_r+0x5b4>
 800a8ba:	4656      	mov	r6, sl
 800a8bc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800a8c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	f7f5 ff30 	bl	800072c <__aeabi_ddiv>
 800a8cc:	f7f6 f8b4 	bl	8000a38 <__aeabi_d2iz>
 800a8d0:	4680      	mov	r8, r0
 800a8d2:	f7f5 fd97 	bl	8000404 <__aeabi_i2d>
 800a8d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8da:	f7f5 fdfd 	bl	80004d8 <__aeabi_dmul>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	f7f5 fc3f 	bl	8000168 <__aeabi_dsub>
 800a8ea:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a8ee:	9d08      	ldr	r5, [sp, #32]
 800a8f0:	f806 4b01 	strb.w	r4, [r6], #1
 800a8f4:	eba6 040a 	sub.w	r4, r6, sl
 800a8f8:	42a5      	cmp	r5, r4
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	d133      	bne.n	800a968 <_dtoa_r+0x6e8>
 800a900:	f7f5 fc34 	bl	800016c <__adddf3>
 800a904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a908:	4604      	mov	r4, r0
 800a90a:	460d      	mov	r5, r1
 800a90c:	f7f6 f874 	bl	80009f8 <__aeabi_dcmpgt>
 800a910:	b9c0      	cbnz	r0, 800a944 <_dtoa_r+0x6c4>
 800a912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a916:	4620      	mov	r0, r4
 800a918:	4629      	mov	r1, r5
 800a91a:	f7f6 f845 	bl	80009a8 <__aeabi_dcmpeq>
 800a91e:	b110      	cbz	r0, 800a926 <_dtoa_r+0x6a6>
 800a920:	f018 0f01 	tst.w	r8, #1
 800a924:	d10e      	bne.n	800a944 <_dtoa_r+0x6c4>
 800a926:	4648      	mov	r0, r9
 800a928:	9903      	ldr	r1, [sp, #12]
 800a92a:	f000 ff07 	bl	800b73c <_Bfree>
 800a92e:	2300      	movs	r3, #0
 800a930:	7033      	strb	r3, [r6, #0]
 800a932:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a934:	3701      	adds	r7, #1
 800a936:	601f      	str	r7, [r3, #0]
 800a938:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 824b 	beq.w	800add6 <_dtoa_r+0xb56>
 800a940:	601e      	str	r6, [r3, #0]
 800a942:	e248      	b.n	800add6 <_dtoa_r+0xb56>
 800a944:	46b8      	mov	r8, r7
 800a946:	4633      	mov	r3, r6
 800a948:	461e      	mov	r6, r3
 800a94a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a94e:	2a39      	cmp	r2, #57	@ 0x39
 800a950:	d106      	bne.n	800a960 <_dtoa_r+0x6e0>
 800a952:	459a      	cmp	sl, r3
 800a954:	d1f8      	bne.n	800a948 <_dtoa_r+0x6c8>
 800a956:	2230      	movs	r2, #48	@ 0x30
 800a958:	f108 0801 	add.w	r8, r8, #1
 800a95c:	f88a 2000 	strb.w	r2, [sl]
 800a960:	781a      	ldrb	r2, [r3, #0]
 800a962:	3201      	adds	r2, #1
 800a964:	701a      	strb	r2, [r3, #0]
 800a966:	e7a0      	b.n	800a8aa <_dtoa_r+0x62a>
 800a968:	2200      	movs	r2, #0
 800a96a:	4b6f      	ldr	r3, [pc, #444]	@ (800ab28 <_dtoa_r+0x8a8>)
 800a96c:	f7f5 fdb4 	bl	80004d8 <__aeabi_dmul>
 800a970:	2200      	movs	r2, #0
 800a972:	2300      	movs	r3, #0
 800a974:	4604      	mov	r4, r0
 800a976:	460d      	mov	r5, r1
 800a978:	f7f6 f816 	bl	80009a8 <__aeabi_dcmpeq>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d09f      	beq.n	800a8c0 <_dtoa_r+0x640>
 800a980:	e7d1      	b.n	800a926 <_dtoa_r+0x6a6>
 800a982:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a984:	2a00      	cmp	r2, #0
 800a986:	f000 80ea 	beq.w	800ab5e <_dtoa_r+0x8de>
 800a98a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a98c:	2a01      	cmp	r2, #1
 800a98e:	f300 80cd 	bgt.w	800ab2c <_dtoa_r+0x8ac>
 800a992:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a994:	2a00      	cmp	r2, #0
 800a996:	f000 80c1 	beq.w	800ab1c <_dtoa_r+0x89c>
 800a99a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a99e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9a0:	9e04      	ldr	r6, [sp, #16]
 800a9a2:	9a04      	ldr	r2, [sp, #16]
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	441a      	add	r2, r3
 800a9a8:	9204      	str	r2, [sp, #16]
 800a9aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9ac:	4648      	mov	r0, r9
 800a9ae:	441a      	add	r2, r3
 800a9b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9b2:	f000 ffc1 	bl	800b938 <__i2b>
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	b166      	cbz	r6, 800a9d4 <_dtoa_r+0x754>
 800a9ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	dd09      	ble.n	800a9d4 <_dtoa_r+0x754>
 800a9c0:	42b3      	cmp	r3, r6
 800a9c2:	bfa8      	it	ge
 800a9c4:	4633      	movge	r3, r6
 800a9c6:	9a04      	ldr	r2, [sp, #16]
 800a9c8:	1af6      	subs	r6, r6, r3
 800a9ca:	1ad2      	subs	r2, r2, r3
 800a9cc:	9204      	str	r2, [sp, #16]
 800a9ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9d6:	b30b      	cbz	r3, 800aa1c <_dtoa_r+0x79c>
 800a9d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 80c6 	beq.w	800ab6c <_dtoa_r+0x8ec>
 800a9e0:	2c00      	cmp	r4, #0
 800a9e2:	f000 80c0 	beq.w	800ab66 <_dtoa_r+0x8e6>
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	4622      	mov	r2, r4
 800a9ea:	4648      	mov	r0, r9
 800a9ec:	f001 f85c 	bl	800baa8 <__pow5mult>
 800a9f0:	9a03      	ldr	r2, [sp, #12]
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	4648      	mov	r0, r9
 800a9f8:	f000 ffb4 	bl	800b964 <__multiply>
 800a9fc:	9903      	ldr	r1, [sp, #12]
 800a9fe:	4680      	mov	r8, r0
 800aa00:	4648      	mov	r0, r9
 800aa02:	f000 fe9b 	bl	800b73c <_Bfree>
 800aa06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa08:	1b1b      	subs	r3, r3, r4
 800aa0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa0c:	f000 80b1 	beq.w	800ab72 <_dtoa_r+0x8f2>
 800aa10:	4641      	mov	r1, r8
 800aa12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa14:	4648      	mov	r0, r9
 800aa16:	f001 f847 	bl	800baa8 <__pow5mult>
 800aa1a:	9003      	str	r0, [sp, #12]
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	4648      	mov	r0, r9
 800aa20:	f000 ff8a 	bl	800b938 <__i2b>
 800aa24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa26:	4604      	mov	r4, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 81d8 	beq.w	800adde <_dtoa_r+0xb5e>
 800aa2e:	461a      	mov	r2, r3
 800aa30:	4601      	mov	r1, r0
 800aa32:	4648      	mov	r0, r9
 800aa34:	f001 f838 	bl	800baa8 <__pow5mult>
 800aa38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	f300 809f 	bgt.w	800ab80 <_dtoa_r+0x900>
 800aa42:	9b06      	ldr	r3, [sp, #24]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f040 8097 	bne.w	800ab78 <_dtoa_r+0x8f8>
 800aa4a:	9b07      	ldr	r3, [sp, #28]
 800aa4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f040 8093 	bne.w	800ab7c <_dtoa_r+0x8fc>
 800aa56:	9b07      	ldr	r3, [sp, #28]
 800aa58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa5c:	0d1b      	lsrs	r3, r3, #20
 800aa5e:	051b      	lsls	r3, r3, #20
 800aa60:	b133      	cbz	r3, 800aa70 <_dtoa_r+0x7f0>
 800aa62:	9b04      	ldr	r3, [sp, #16]
 800aa64:	3301      	adds	r3, #1
 800aa66:	9304      	str	r3, [sp, #16]
 800aa68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa6e:	2301      	movs	r3, #1
 800aa70:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 81b8 	beq.w	800adea <_dtoa_r+0xb6a>
 800aa7a:	6923      	ldr	r3, [r4, #16]
 800aa7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa80:	6918      	ldr	r0, [r3, #16]
 800aa82:	f000 ff0d 	bl	800b8a0 <__hi0bits>
 800aa86:	f1c0 0020 	rsb	r0, r0, #32
 800aa8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa8c:	4418      	add	r0, r3
 800aa8e:	f010 001f 	ands.w	r0, r0, #31
 800aa92:	f000 8082 	beq.w	800ab9a <_dtoa_r+0x91a>
 800aa96:	f1c0 0320 	rsb	r3, r0, #32
 800aa9a:	2b04      	cmp	r3, #4
 800aa9c:	dd73      	ble.n	800ab86 <_dtoa_r+0x906>
 800aa9e:	9b04      	ldr	r3, [sp, #16]
 800aaa0:	f1c0 001c 	rsb	r0, r0, #28
 800aaa4:	4403      	add	r3, r0
 800aaa6:	9304      	str	r3, [sp, #16]
 800aaa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaaa:	4406      	add	r6, r0
 800aaac:	4403      	add	r3, r0
 800aaae:	9309      	str	r3, [sp, #36]	@ 0x24
 800aab0:	9b04      	ldr	r3, [sp, #16]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	dd05      	ble.n	800aac2 <_dtoa_r+0x842>
 800aab6:	461a      	mov	r2, r3
 800aab8:	4648      	mov	r0, r9
 800aaba:	9903      	ldr	r1, [sp, #12]
 800aabc:	f001 f84e 	bl	800bb5c <__lshift>
 800aac0:	9003      	str	r0, [sp, #12]
 800aac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	dd05      	ble.n	800aad4 <_dtoa_r+0x854>
 800aac8:	4621      	mov	r1, r4
 800aaca:	461a      	mov	r2, r3
 800aacc:	4648      	mov	r0, r9
 800aace:	f001 f845 	bl	800bb5c <__lshift>
 800aad2:	4604      	mov	r4, r0
 800aad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d061      	beq.n	800ab9e <_dtoa_r+0x91e>
 800aada:	4621      	mov	r1, r4
 800aadc:	9803      	ldr	r0, [sp, #12]
 800aade:	f001 f8a9 	bl	800bc34 <__mcmp>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	da5b      	bge.n	800ab9e <_dtoa_r+0x91e>
 800aae6:	2300      	movs	r3, #0
 800aae8:	220a      	movs	r2, #10
 800aaea:	4648      	mov	r0, r9
 800aaec:	9903      	ldr	r1, [sp, #12]
 800aaee:	f000 fe47 	bl	800b780 <__multadd>
 800aaf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aaf4:	f107 38ff 	add.w	r8, r7, #4294967295
 800aaf8:	9003      	str	r0, [sp, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 8177 	beq.w	800adee <_dtoa_r+0xb6e>
 800ab00:	4629      	mov	r1, r5
 800ab02:	2300      	movs	r3, #0
 800ab04:	220a      	movs	r2, #10
 800ab06:	4648      	mov	r0, r9
 800ab08:	f000 fe3a 	bl	800b780 <__multadd>
 800ab0c:	f1bb 0f00 	cmp.w	fp, #0
 800ab10:	4605      	mov	r5, r0
 800ab12:	dc6f      	bgt.n	800abf4 <_dtoa_r+0x974>
 800ab14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	dc49      	bgt.n	800abae <_dtoa_r+0x92e>
 800ab1a:	e06b      	b.n	800abf4 <_dtoa_r+0x974>
 800ab1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ab22:	e73c      	b.n	800a99e <_dtoa_r+0x71e>
 800ab24:	3fe00000 	.word	0x3fe00000
 800ab28:	40240000 	.word	0x40240000
 800ab2c:	9b08      	ldr	r3, [sp, #32]
 800ab2e:	1e5c      	subs	r4, r3, #1
 800ab30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab32:	42a3      	cmp	r3, r4
 800ab34:	db09      	blt.n	800ab4a <_dtoa_r+0x8ca>
 800ab36:	1b1c      	subs	r4, r3, r4
 800ab38:	9b08      	ldr	r3, [sp, #32]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f6bf af30 	bge.w	800a9a0 <_dtoa_r+0x720>
 800ab40:	9b04      	ldr	r3, [sp, #16]
 800ab42:	9a08      	ldr	r2, [sp, #32]
 800ab44:	1a9e      	subs	r6, r3, r2
 800ab46:	2300      	movs	r3, #0
 800ab48:	e72b      	b.n	800a9a2 <_dtoa_r+0x722>
 800ab4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab4e:	1ae3      	subs	r3, r4, r3
 800ab50:	441a      	add	r2, r3
 800ab52:	940a      	str	r4, [sp, #40]	@ 0x28
 800ab54:	9e04      	ldr	r6, [sp, #16]
 800ab56:	2400      	movs	r4, #0
 800ab58:	9b08      	ldr	r3, [sp, #32]
 800ab5a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab5c:	e721      	b.n	800a9a2 <_dtoa_r+0x722>
 800ab5e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab60:	9e04      	ldr	r6, [sp, #16]
 800ab62:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ab64:	e728      	b.n	800a9b8 <_dtoa_r+0x738>
 800ab66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ab6a:	e751      	b.n	800aa10 <_dtoa_r+0x790>
 800ab6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab6e:	9903      	ldr	r1, [sp, #12]
 800ab70:	e750      	b.n	800aa14 <_dtoa_r+0x794>
 800ab72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab76:	e751      	b.n	800aa1c <_dtoa_r+0x79c>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	e779      	b.n	800aa70 <_dtoa_r+0x7f0>
 800ab7c:	9b06      	ldr	r3, [sp, #24]
 800ab7e:	e777      	b.n	800aa70 <_dtoa_r+0x7f0>
 800ab80:	2300      	movs	r3, #0
 800ab82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab84:	e779      	b.n	800aa7a <_dtoa_r+0x7fa>
 800ab86:	d093      	beq.n	800aab0 <_dtoa_r+0x830>
 800ab88:	9a04      	ldr	r2, [sp, #16]
 800ab8a:	331c      	adds	r3, #28
 800ab8c:	441a      	add	r2, r3
 800ab8e:	9204      	str	r2, [sp, #16]
 800ab90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab92:	441e      	add	r6, r3
 800ab94:	441a      	add	r2, r3
 800ab96:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab98:	e78a      	b.n	800aab0 <_dtoa_r+0x830>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	e7f4      	b.n	800ab88 <_dtoa_r+0x908>
 800ab9e:	9b08      	ldr	r3, [sp, #32]
 800aba0:	46b8      	mov	r8, r7
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	dc20      	bgt.n	800abe8 <_dtoa_r+0x968>
 800aba6:	469b      	mov	fp, r3
 800aba8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800abaa:	2b02      	cmp	r3, #2
 800abac:	dd1e      	ble.n	800abec <_dtoa_r+0x96c>
 800abae:	f1bb 0f00 	cmp.w	fp, #0
 800abb2:	f47f adb1 	bne.w	800a718 <_dtoa_r+0x498>
 800abb6:	4621      	mov	r1, r4
 800abb8:	465b      	mov	r3, fp
 800abba:	2205      	movs	r2, #5
 800abbc:	4648      	mov	r0, r9
 800abbe:	f000 fddf 	bl	800b780 <__multadd>
 800abc2:	4601      	mov	r1, r0
 800abc4:	4604      	mov	r4, r0
 800abc6:	9803      	ldr	r0, [sp, #12]
 800abc8:	f001 f834 	bl	800bc34 <__mcmp>
 800abcc:	2800      	cmp	r0, #0
 800abce:	f77f ada3 	ble.w	800a718 <_dtoa_r+0x498>
 800abd2:	4656      	mov	r6, sl
 800abd4:	2331      	movs	r3, #49	@ 0x31
 800abd6:	f108 0801 	add.w	r8, r8, #1
 800abda:	f806 3b01 	strb.w	r3, [r6], #1
 800abde:	e59f      	b.n	800a720 <_dtoa_r+0x4a0>
 800abe0:	46b8      	mov	r8, r7
 800abe2:	9c08      	ldr	r4, [sp, #32]
 800abe4:	4625      	mov	r5, r4
 800abe6:	e7f4      	b.n	800abd2 <_dtoa_r+0x952>
 800abe8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800abec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f000 8101 	beq.w	800adf6 <_dtoa_r+0xb76>
 800abf4:	2e00      	cmp	r6, #0
 800abf6:	dd05      	ble.n	800ac04 <_dtoa_r+0x984>
 800abf8:	4629      	mov	r1, r5
 800abfa:	4632      	mov	r2, r6
 800abfc:	4648      	mov	r0, r9
 800abfe:	f000 ffad 	bl	800bb5c <__lshift>
 800ac02:	4605      	mov	r5, r0
 800ac04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d05c      	beq.n	800acc4 <_dtoa_r+0xa44>
 800ac0a:	4648      	mov	r0, r9
 800ac0c:	6869      	ldr	r1, [r5, #4]
 800ac0e:	f000 fd55 	bl	800b6bc <_Balloc>
 800ac12:	4606      	mov	r6, r0
 800ac14:	b928      	cbnz	r0, 800ac22 <_dtoa_r+0x9a2>
 800ac16:	4602      	mov	r2, r0
 800ac18:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ac1c:	4b80      	ldr	r3, [pc, #512]	@ (800ae20 <_dtoa_r+0xba0>)
 800ac1e:	f7ff bb43 	b.w	800a2a8 <_dtoa_r+0x28>
 800ac22:	692a      	ldr	r2, [r5, #16]
 800ac24:	f105 010c 	add.w	r1, r5, #12
 800ac28:	3202      	adds	r2, #2
 800ac2a:	0092      	lsls	r2, r2, #2
 800ac2c:	300c      	adds	r0, #12
 800ac2e:	f7ff fa88 	bl	800a142 <memcpy>
 800ac32:	2201      	movs	r2, #1
 800ac34:	4631      	mov	r1, r6
 800ac36:	4648      	mov	r0, r9
 800ac38:	f000 ff90 	bl	800bb5c <__lshift>
 800ac3c:	462f      	mov	r7, r5
 800ac3e:	4605      	mov	r5, r0
 800ac40:	f10a 0301 	add.w	r3, sl, #1
 800ac44:	9304      	str	r3, [sp, #16]
 800ac46:	eb0a 030b 	add.w	r3, sl, fp
 800ac4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac4c:	9b06      	ldr	r3, [sp, #24]
 800ac4e:	f003 0301 	and.w	r3, r3, #1
 800ac52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac54:	9b04      	ldr	r3, [sp, #16]
 800ac56:	4621      	mov	r1, r4
 800ac58:	9803      	ldr	r0, [sp, #12]
 800ac5a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ac5e:	f7ff fa85 	bl	800a16c <quorem>
 800ac62:	4603      	mov	r3, r0
 800ac64:	4639      	mov	r1, r7
 800ac66:	3330      	adds	r3, #48	@ 0x30
 800ac68:	9006      	str	r0, [sp, #24]
 800ac6a:	9803      	ldr	r0, [sp, #12]
 800ac6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac6e:	f000 ffe1 	bl	800bc34 <__mcmp>
 800ac72:	462a      	mov	r2, r5
 800ac74:	9008      	str	r0, [sp, #32]
 800ac76:	4621      	mov	r1, r4
 800ac78:	4648      	mov	r0, r9
 800ac7a:	f000 fff7 	bl	800bc6c <__mdiff>
 800ac7e:	68c2      	ldr	r2, [r0, #12]
 800ac80:	4606      	mov	r6, r0
 800ac82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac84:	bb02      	cbnz	r2, 800acc8 <_dtoa_r+0xa48>
 800ac86:	4601      	mov	r1, r0
 800ac88:	9803      	ldr	r0, [sp, #12]
 800ac8a:	f000 ffd3 	bl	800bc34 <__mcmp>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac92:	4631      	mov	r1, r6
 800ac94:	4648      	mov	r0, r9
 800ac96:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800ac9a:	f000 fd4f 	bl	800b73c <_Bfree>
 800ac9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aca0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aca2:	9e04      	ldr	r6, [sp, #16]
 800aca4:	ea42 0103 	orr.w	r1, r2, r3
 800aca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acaa:	4319      	orrs	r1, r3
 800acac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acae:	d10d      	bne.n	800accc <_dtoa_r+0xa4c>
 800acb0:	2b39      	cmp	r3, #57	@ 0x39
 800acb2:	d027      	beq.n	800ad04 <_dtoa_r+0xa84>
 800acb4:	9a08      	ldr	r2, [sp, #32]
 800acb6:	2a00      	cmp	r2, #0
 800acb8:	dd01      	ble.n	800acbe <_dtoa_r+0xa3e>
 800acba:	9b06      	ldr	r3, [sp, #24]
 800acbc:	3331      	adds	r3, #49	@ 0x31
 800acbe:	f88b 3000 	strb.w	r3, [fp]
 800acc2:	e52e      	b.n	800a722 <_dtoa_r+0x4a2>
 800acc4:	4628      	mov	r0, r5
 800acc6:	e7b9      	b.n	800ac3c <_dtoa_r+0x9bc>
 800acc8:	2201      	movs	r2, #1
 800acca:	e7e2      	b.n	800ac92 <_dtoa_r+0xa12>
 800accc:	9908      	ldr	r1, [sp, #32]
 800acce:	2900      	cmp	r1, #0
 800acd0:	db04      	blt.n	800acdc <_dtoa_r+0xa5c>
 800acd2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800acd4:	4301      	orrs	r1, r0
 800acd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acd8:	4301      	orrs	r1, r0
 800acda:	d120      	bne.n	800ad1e <_dtoa_r+0xa9e>
 800acdc:	2a00      	cmp	r2, #0
 800acde:	ddee      	ble.n	800acbe <_dtoa_r+0xa3e>
 800ace0:	2201      	movs	r2, #1
 800ace2:	9903      	ldr	r1, [sp, #12]
 800ace4:	4648      	mov	r0, r9
 800ace6:	9304      	str	r3, [sp, #16]
 800ace8:	f000 ff38 	bl	800bb5c <__lshift>
 800acec:	4621      	mov	r1, r4
 800acee:	9003      	str	r0, [sp, #12]
 800acf0:	f000 ffa0 	bl	800bc34 <__mcmp>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	9b04      	ldr	r3, [sp, #16]
 800acf8:	dc02      	bgt.n	800ad00 <_dtoa_r+0xa80>
 800acfa:	d1e0      	bne.n	800acbe <_dtoa_r+0xa3e>
 800acfc:	07da      	lsls	r2, r3, #31
 800acfe:	d5de      	bpl.n	800acbe <_dtoa_r+0xa3e>
 800ad00:	2b39      	cmp	r3, #57	@ 0x39
 800ad02:	d1da      	bne.n	800acba <_dtoa_r+0xa3a>
 800ad04:	2339      	movs	r3, #57	@ 0x39
 800ad06:	f88b 3000 	strb.w	r3, [fp]
 800ad0a:	4633      	mov	r3, r6
 800ad0c:	461e      	mov	r6, r3
 800ad0e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ad12:	3b01      	subs	r3, #1
 800ad14:	2a39      	cmp	r2, #57	@ 0x39
 800ad16:	d04e      	beq.n	800adb6 <_dtoa_r+0xb36>
 800ad18:	3201      	adds	r2, #1
 800ad1a:	701a      	strb	r2, [r3, #0]
 800ad1c:	e501      	b.n	800a722 <_dtoa_r+0x4a2>
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	dd03      	ble.n	800ad2a <_dtoa_r+0xaaa>
 800ad22:	2b39      	cmp	r3, #57	@ 0x39
 800ad24:	d0ee      	beq.n	800ad04 <_dtoa_r+0xa84>
 800ad26:	3301      	adds	r3, #1
 800ad28:	e7c9      	b.n	800acbe <_dtoa_r+0xa3e>
 800ad2a:	9a04      	ldr	r2, [sp, #16]
 800ad2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad32:	428a      	cmp	r2, r1
 800ad34:	d028      	beq.n	800ad88 <_dtoa_r+0xb08>
 800ad36:	2300      	movs	r3, #0
 800ad38:	220a      	movs	r2, #10
 800ad3a:	9903      	ldr	r1, [sp, #12]
 800ad3c:	4648      	mov	r0, r9
 800ad3e:	f000 fd1f 	bl	800b780 <__multadd>
 800ad42:	42af      	cmp	r7, r5
 800ad44:	9003      	str	r0, [sp, #12]
 800ad46:	f04f 0300 	mov.w	r3, #0
 800ad4a:	f04f 020a 	mov.w	r2, #10
 800ad4e:	4639      	mov	r1, r7
 800ad50:	4648      	mov	r0, r9
 800ad52:	d107      	bne.n	800ad64 <_dtoa_r+0xae4>
 800ad54:	f000 fd14 	bl	800b780 <__multadd>
 800ad58:	4607      	mov	r7, r0
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	9b04      	ldr	r3, [sp, #16]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	9304      	str	r3, [sp, #16]
 800ad62:	e777      	b.n	800ac54 <_dtoa_r+0x9d4>
 800ad64:	f000 fd0c 	bl	800b780 <__multadd>
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4607      	mov	r7, r0
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	220a      	movs	r2, #10
 800ad70:	4648      	mov	r0, r9
 800ad72:	f000 fd05 	bl	800b780 <__multadd>
 800ad76:	4605      	mov	r5, r0
 800ad78:	e7f0      	b.n	800ad5c <_dtoa_r+0xadc>
 800ad7a:	f1bb 0f00 	cmp.w	fp, #0
 800ad7e:	bfcc      	ite	gt
 800ad80:	465e      	movgt	r6, fp
 800ad82:	2601      	movle	r6, #1
 800ad84:	2700      	movs	r7, #0
 800ad86:	4456      	add	r6, sl
 800ad88:	2201      	movs	r2, #1
 800ad8a:	9903      	ldr	r1, [sp, #12]
 800ad8c:	4648      	mov	r0, r9
 800ad8e:	9304      	str	r3, [sp, #16]
 800ad90:	f000 fee4 	bl	800bb5c <__lshift>
 800ad94:	4621      	mov	r1, r4
 800ad96:	9003      	str	r0, [sp, #12]
 800ad98:	f000 ff4c 	bl	800bc34 <__mcmp>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	dcb4      	bgt.n	800ad0a <_dtoa_r+0xa8a>
 800ada0:	d102      	bne.n	800ada8 <_dtoa_r+0xb28>
 800ada2:	9b04      	ldr	r3, [sp, #16]
 800ada4:	07db      	lsls	r3, r3, #31
 800ada6:	d4b0      	bmi.n	800ad0a <_dtoa_r+0xa8a>
 800ada8:	4633      	mov	r3, r6
 800adaa:	461e      	mov	r6, r3
 800adac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adb0:	2a30      	cmp	r2, #48	@ 0x30
 800adb2:	d0fa      	beq.n	800adaa <_dtoa_r+0xb2a>
 800adb4:	e4b5      	b.n	800a722 <_dtoa_r+0x4a2>
 800adb6:	459a      	cmp	sl, r3
 800adb8:	d1a8      	bne.n	800ad0c <_dtoa_r+0xa8c>
 800adba:	2331      	movs	r3, #49	@ 0x31
 800adbc:	f108 0801 	add.w	r8, r8, #1
 800adc0:	f88a 3000 	strb.w	r3, [sl]
 800adc4:	e4ad      	b.n	800a722 <_dtoa_r+0x4a2>
 800adc6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800adc8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ae24 <_dtoa_r+0xba4>
 800adcc:	b11b      	cbz	r3, 800add6 <_dtoa_r+0xb56>
 800adce:	f10a 0308 	add.w	r3, sl, #8
 800add2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	4650      	mov	r0, sl
 800add8:	b017      	add	sp, #92	@ 0x5c
 800adda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	f77f ae2e 	ble.w	800aa42 <_dtoa_r+0x7c2>
 800ade6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ade8:	930a      	str	r3, [sp, #40]	@ 0x28
 800adea:	2001      	movs	r0, #1
 800adec:	e64d      	b.n	800aa8a <_dtoa_r+0x80a>
 800adee:	f1bb 0f00 	cmp.w	fp, #0
 800adf2:	f77f aed9 	ble.w	800aba8 <_dtoa_r+0x928>
 800adf6:	4656      	mov	r6, sl
 800adf8:	4621      	mov	r1, r4
 800adfa:	9803      	ldr	r0, [sp, #12]
 800adfc:	f7ff f9b6 	bl	800a16c <quorem>
 800ae00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ae04:	f806 3b01 	strb.w	r3, [r6], #1
 800ae08:	eba6 020a 	sub.w	r2, r6, sl
 800ae0c:	4593      	cmp	fp, r2
 800ae0e:	ddb4      	ble.n	800ad7a <_dtoa_r+0xafa>
 800ae10:	2300      	movs	r3, #0
 800ae12:	220a      	movs	r2, #10
 800ae14:	4648      	mov	r0, r9
 800ae16:	9903      	ldr	r1, [sp, #12]
 800ae18:	f000 fcb2 	bl	800b780 <__multadd>
 800ae1c:	9003      	str	r0, [sp, #12]
 800ae1e:	e7eb      	b.n	800adf8 <_dtoa_r+0xb78>
 800ae20:	0800cbda 	.word	0x0800cbda
 800ae24:	0800cb5e 	.word	0x0800cb5e

0800ae28 <_free_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4605      	mov	r5, r0
 800ae2c:	2900      	cmp	r1, #0
 800ae2e:	d040      	beq.n	800aeb2 <_free_r+0x8a>
 800ae30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae34:	1f0c      	subs	r4, r1, #4
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	bfb8      	it	lt
 800ae3a:	18e4      	addlt	r4, r4, r3
 800ae3c:	f000 fc32 	bl	800b6a4 <__malloc_lock>
 800ae40:	4a1c      	ldr	r2, [pc, #112]	@ (800aeb4 <_free_r+0x8c>)
 800ae42:	6813      	ldr	r3, [r2, #0]
 800ae44:	b933      	cbnz	r3, 800ae54 <_free_r+0x2c>
 800ae46:	6063      	str	r3, [r4, #4]
 800ae48:	6014      	str	r4, [r2, #0]
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae50:	f000 bc2e 	b.w	800b6b0 <__malloc_unlock>
 800ae54:	42a3      	cmp	r3, r4
 800ae56:	d908      	bls.n	800ae6a <_free_r+0x42>
 800ae58:	6820      	ldr	r0, [r4, #0]
 800ae5a:	1821      	adds	r1, r4, r0
 800ae5c:	428b      	cmp	r3, r1
 800ae5e:	bf01      	itttt	eq
 800ae60:	6819      	ldreq	r1, [r3, #0]
 800ae62:	685b      	ldreq	r3, [r3, #4]
 800ae64:	1809      	addeq	r1, r1, r0
 800ae66:	6021      	streq	r1, [r4, #0]
 800ae68:	e7ed      	b.n	800ae46 <_free_r+0x1e>
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	b10b      	cbz	r3, 800ae74 <_free_r+0x4c>
 800ae70:	42a3      	cmp	r3, r4
 800ae72:	d9fa      	bls.n	800ae6a <_free_r+0x42>
 800ae74:	6811      	ldr	r1, [r2, #0]
 800ae76:	1850      	adds	r0, r2, r1
 800ae78:	42a0      	cmp	r0, r4
 800ae7a:	d10b      	bne.n	800ae94 <_free_r+0x6c>
 800ae7c:	6820      	ldr	r0, [r4, #0]
 800ae7e:	4401      	add	r1, r0
 800ae80:	1850      	adds	r0, r2, r1
 800ae82:	4283      	cmp	r3, r0
 800ae84:	6011      	str	r1, [r2, #0]
 800ae86:	d1e0      	bne.n	800ae4a <_free_r+0x22>
 800ae88:	6818      	ldr	r0, [r3, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	4408      	add	r0, r1
 800ae8e:	6010      	str	r0, [r2, #0]
 800ae90:	6053      	str	r3, [r2, #4]
 800ae92:	e7da      	b.n	800ae4a <_free_r+0x22>
 800ae94:	d902      	bls.n	800ae9c <_free_r+0x74>
 800ae96:	230c      	movs	r3, #12
 800ae98:	602b      	str	r3, [r5, #0]
 800ae9a:	e7d6      	b.n	800ae4a <_free_r+0x22>
 800ae9c:	6820      	ldr	r0, [r4, #0]
 800ae9e:	1821      	adds	r1, r4, r0
 800aea0:	428b      	cmp	r3, r1
 800aea2:	bf01      	itttt	eq
 800aea4:	6819      	ldreq	r1, [r3, #0]
 800aea6:	685b      	ldreq	r3, [r3, #4]
 800aea8:	1809      	addeq	r1, r1, r0
 800aeaa:	6021      	streq	r1, [r4, #0]
 800aeac:	6063      	str	r3, [r4, #4]
 800aeae:	6054      	str	r4, [r2, #4]
 800aeb0:	e7cb      	b.n	800ae4a <_free_r+0x22>
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	20000d2c 	.word	0x20000d2c

0800aeb8 <rshift>:
 800aeb8:	6903      	ldr	r3, [r0, #16]
 800aeba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aebe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aec2:	f100 0414 	add.w	r4, r0, #20
 800aec6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aeca:	dd46      	ble.n	800af5a <rshift+0xa2>
 800aecc:	f011 011f 	ands.w	r1, r1, #31
 800aed0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aed4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aed8:	d10c      	bne.n	800aef4 <rshift+0x3c>
 800aeda:	4629      	mov	r1, r5
 800aedc:	f100 0710 	add.w	r7, r0, #16
 800aee0:	42b1      	cmp	r1, r6
 800aee2:	d335      	bcc.n	800af50 <rshift+0x98>
 800aee4:	1a9b      	subs	r3, r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	1eea      	subs	r2, r5, #3
 800aeea:	4296      	cmp	r6, r2
 800aeec:	bf38      	it	cc
 800aeee:	2300      	movcc	r3, #0
 800aef0:	4423      	add	r3, r4
 800aef2:	e015      	b.n	800af20 <rshift+0x68>
 800aef4:	46a1      	mov	r9, r4
 800aef6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aefa:	f1c1 0820 	rsb	r8, r1, #32
 800aefe:	40cf      	lsrs	r7, r1
 800af00:	f105 0e04 	add.w	lr, r5, #4
 800af04:	4576      	cmp	r6, lr
 800af06:	46f4      	mov	ip, lr
 800af08:	d816      	bhi.n	800af38 <rshift+0x80>
 800af0a:	1a9a      	subs	r2, r3, r2
 800af0c:	0092      	lsls	r2, r2, #2
 800af0e:	3a04      	subs	r2, #4
 800af10:	3501      	adds	r5, #1
 800af12:	42ae      	cmp	r6, r5
 800af14:	bf38      	it	cc
 800af16:	2200      	movcc	r2, #0
 800af18:	18a3      	adds	r3, r4, r2
 800af1a:	50a7      	str	r7, [r4, r2]
 800af1c:	b107      	cbz	r7, 800af20 <rshift+0x68>
 800af1e:	3304      	adds	r3, #4
 800af20:	42a3      	cmp	r3, r4
 800af22:	eba3 0204 	sub.w	r2, r3, r4
 800af26:	bf08      	it	eq
 800af28:	2300      	moveq	r3, #0
 800af2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af2e:	6102      	str	r2, [r0, #16]
 800af30:	bf08      	it	eq
 800af32:	6143      	streq	r3, [r0, #20]
 800af34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af38:	f8dc c000 	ldr.w	ip, [ip]
 800af3c:	fa0c fc08 	lsl.w	ip, ip, r8
 800af40:	ea4c 0707 	orr.w	r7, ip, r7
 800af44:	f849 7b04 	str.w	r7, [r9], #4
 800af48:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af4c:	40cf      	lsrs	r7, r1
 800af4e:	e7d9      	b.n	800af04 <rshift+0x4c>
 800af50:	f851 cb04 	ldr.w	ip, [r1], #4
 800af54:	f847 cf04 	str.w	ip, [r7, #4]!
 800af58:	e7c2      	b.n	800aee0 <rshift+0x28>
 800af5a:	4623      	mov	r3, r4
 800af5c:	e7e0      	b.n	800af20 <rshift+0x68>

0800af5e <__hexdig_fun>:
 800af5e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800af62:	2b09      	cmp	r3, #9
 800af64:	d802      	bhi.n	800af6c <__hexdig_fun+0xe>
 800af66:	3820      	subs	r0, #32
 800af68:	b2c0      	uxtb	r0, r0
 800af6a:	4770      	bx	lr
 800af6c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800af70:	2b05      	cmp	r3, #5
 800af72:	d801      	bhi.n	800af78 <__hexdig_fun+0x1a>
 800af74:	3847      	subs	r0, #71	@ 0x47
 800af76:	e7f7      	b.n	800af68 <__hexdig_fun+0xa>
 800af78:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800af7c:	2b05      	cmp	r3, #5
 800af7e:	d801      	bhi.n	800af84 <__hexdig_fun+0x26>
 800af80:	3827      	subs	r0, #39	@ 0x27
 800af82:	e7f1      	b.n	800af68 <__hexdig_fun+0xa>
 800af84:	2000      	movs	r0, #0
 800af86:	4770      	bx	lr

0800af88 <__gethex>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	468a      	mov	sl, r1
 800af8e:	4690      	mov	r8, r2
 800af90:	b085      	sub	sp, #20
 800af92:	9302      	str	r3, [sp, #8]
 800af94:	680b      	ldr	r3, [r1, #0]
 800af96:	9001      	str	r0, [sp, #4]
 800af98:	1c9c      	adds	r4, r3, #2
 800af9a:	46a1      	mov	r9, r4
 800af9c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800afa0:	2830      	cmp	r0, #48	@ 0x30
 800afa2:	d0fa      	beq.n	800af9a <__gethex+0x12>
 800afa4:	eba9 0303 	sub.w	r3, r9, r3
 800afa8:	f1a3 0b02 	sub.w	fp, r3, #2
 800afac:	f7ff ffd7 	bl	800af5e <__hexdig_fun>
 800afb0:	4605      	mov	r5, r0
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d168      	bne.n	800b088 <__gethex+0x100>
 800afb6:	2201      	movs	r2, #1
 800afb8:	4648      	mov	r0, r9
 800afba:	499f      	ldr	r1, [pc, #636]	@ (800b238 <__gethex+0x2b0>)
 800afbc:	f7ff f829 	bl	800a012 <strncmp>
 800afc0:	4607      	mov	r7, r0
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d167      	bne.n	800b096 <__gethex+0x10e>
 800afc6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800afca:	4626      	mov	r6, r4
 800afcc:	f7ff ffc7 	bl	800af5e <__hexdig_fun>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d062      	beq.n	800b09a <__gethex+0x112>
 800afd4:	4623      	mov	r3, r4
 800afd6:	7818      	ldrb	r0, [r3, #0]
 800afd8:	4699      	mov	r9, r3
 800afda:	2830      	cmp	r0, #48	@ 0x30
 800afdc:	f103 0301 	add.w	r3, r3, #1
 800afe0:	d0f9      	beq.n	800afd6 <__gethex+0x4e>
 800afe2:	f7ff ffbc 	bl	800af5e <__hexdig_fun>
 800afe6:	fab0 f580 	clz	r5, r0
 800afea:	f04f 0b01 	mov.w	fp, #1
 800afee:	096d      	lsrs	r5, r5, #5
 800aff0:	464a      	mov	r2, r9
 800aff2:	4616      	mov	r6, r2
 800aff4:	7830      	ldrb	r0, [r6, #0]
 800aff6:	3201      	adds	r2, #1
 800aff8:	f7ff ffb1 	bl	800af5e <__hexdig_fun>
 800affc:	2800      	cmp	r0, #0
 800affe:	d1f8      	bne.n	800aff2 <__gethex+0x6a>
 800b000:	2201      	movs	r2, #1
 800b002:	4630      	mov	r0, r6
 800b004:	498c      	ldr	r1, [pc, #560]	@ (800b238 <__gethex+0x2b0>)
 800b006:	f7ff f804 	bl	800a012 <strncmp>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d13f      	bne.n	800b08e <__gethex+0x106>
 800b00e:	b944      	cbnz	r4, 800b022 <__gethex+0x9a>
 800b010:	1c74      	adds	r4, r6, #1
 800b012:	4622      	mov	r2, r4
 800b014:	4616      	mov	r6, r2
 800b016:	7830      	ldrb	r0, [r6, #0]
 800b018:	3201      	adds	r2, #1
 800b01a:	f7ff ffa0 	bl	800af5e <__hexdig_fun>
 800b01e:	2800      	cmp	r0, #0
 800b020:	d1f8      	bne.n	800b014 <__gethex+0x8c>
 800b022:	1ba4      	subs	r4, r4, r6
 800b024:	00a7      	lsls	r7, r4, #2
 800b026:	7833      	ldrb	r3, [r6, #0]
 800b028:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b02c:	2b50      	cmp	r3, #80	@ 0x50
 800b02e:	d13e      	bne.n	800b0ae <__gethex+0x126>
 800b030:	7873      	ldrb	r3, [r6, #1]
 800b032:	2b2b      	cmp	r3, #43	@ 0x2b
 800b034:	d033      	beq.n	800b09e <__gethex+0x116>
 800b036:	2b2d      	cmp	r3, #45	@ 0x2d
 800b038:	d034      	beq.n	800b0a4 <__gethex+0x11c>
 800b03a:	2400      	movs	r4, #0
 800b03c:	1c71      	adds	r1, r6, #1
 800b03e:	7808      	ldrb	r0, [r1, #0]
 800b040:	f7ff ff8d 	bl	800af5e <__hexdig_fun>
 800b044:	1e43      	subs	r3, r0, #1
 800b046:	b2db      	uxtb	r3, r3
 800b048:	2b18      	cmp	r3, #24
 800b04a:	d830      	bhi.n	800b0ae <__gethex+0x126>
 800b04c:	f1a0 0210 	sub.w	r2, r0, #16
 800b050:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b054:	f7ff ff83 	bl	800af5e <__hexdig_fun>
 800b058:	f100 3cff 	add.w	ip, r0, #4294967295
 800b05c:	fa5f fc8c 	uxtb.w	ip, ip
 800b060:	f1bc 0f18 	cmp.w	ip, #24
 800b064:	f04f 030a 	mov.w	r3, #10
 800b068:	d91e      	bls.n	800b0a8 <__gethex+0x120>
 800b06a:	b104      	cbz	r4, 800b06e <__gethex+0xe6>
 800b06c:	4252      	negs	r2, r2
 800b06e:	4417      	add	r7, r2
 800b070:	f8ca 1000 	str.w	r1, [sl]
 800b074:	b1ed      	cbz	r5, 800b0b2 <__gethex+0x12a>
 800b076:	f1bb 0f00 	cmp.w	fp, #0
 800b07a:	bf0c      	ite	eq
 800b07c:	2506      	moveq	r5, #6
 800b07e:	2500      	movne	r5, #0
 800b080:	4628      	mov	r0, r5
 800b082:	b005      	add	sp, #20
 800b084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b088:	2500      	movs	r5, #0
 800b08a:	462c      	mov	r4, r5
 800b08c:	e7b0      	b.n	800aff0 <__gethex+0x68>
 800b08e:	2c00      	cmp	r4, #0
 800b090:	d1c7      	bne.n	800b022 <__gethex+0x9a>
 800b092:	4627      	mov	r7, r4
 800b094:	e7c7      	b.n	800b026 <__gethex+0x9e>
 800b096:	464e      	mov	r6, r9
 800b098:	462f      	mov	r7, r5
 800b09a:	2501      	movs	r5, #1
 800b09c:	e7c3      	b.n	800b026 <__gethex+0x9e>
 800b09e:	2400      	movs	r4, #0
 800b0a0:	1cb1      	adds	r1, r6, #2
 800b0a2:	e7cc      	b.n	800b03e <__gethex+0xb6>
 800b0a4:	2401      	movs	r4, #1
 800b0a6:	e7fb      	b.n	800b0a0 <__gethex+0x118>
 800b0a8:	fb03 0002 	mla	r0, r3, r2, r0
 800b0ac:	e7ce      	b.n	800b04c <__gethex+0xc4>
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	e7de      	b.n	800b070 <__gethex+0xe8>
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	eba6 0309 	sub.w	r3, r6, r9
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	2b07      	cmp	r3, #7
 800b0bc:	dc0a      	bgt.n	800b0d4 <__gethex+0x14c>
 800b0be:	9801      	ldr	r0, [sp, #4]
 800b0c0:	f000 fafc 	bl	800b6bc <_Balloc>
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	b940      	cbnz	r0, 800b0da <__gethex+0x152>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	21e4      	movs	r1, #228	@ 0xe4
 800b0cc:	4b5b      	ldr	r3, [pc, #364]	@ (800b23c <__gethex+0x2b4>)
 800b0ce:	485c      	ldr	r0, [pc, #368]	@ (800b240 <__gethex+0x2b8>)
 800b0d0:	f001 f9ca 	bl	800c468 <__assert_func>
 800b0d4:	3101      	adds	r1, #1
 800b0d6:	105b      	asrs	r3, r3, #1
 800b0d8:	e7ef      	b.n	800b0ba <__gethex+0x132>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f100 0a14 	add.w	sl, r0, #20
 800b0e0:	4655      	mov	r5, sl
 800b0e2:	469b      	mov	fp, r3
 800b0e4:	45b1      	cmp	r9, r6
 800b0e6:	d337      	bcc.n	800b158 <__gethex+0x1d0>
 800b0e8:	f845 bb04 	str.w	fp, [r5], #4
 800b0ec:	eba5 050a 	sub.w	r5, r5, sl
 800b0f0:	10ad      	asrs	r5, r5, #2
 800b0f2:	6125      	str	r5, [r4, #16]
 800b0f4:	4658      	mov	r0, fp
 800b0f6:	f000 fbd3 	bl	800b8a0 <__hi0bits>
 800b0fa:	016d      	lsls	r5, r5, #5
 800b0fc:	f8d8 6000 	ldr.w	r6, [r8]
 800b100:	1a2d      	subs	r5, r5, r0
 800b102:	42b5      	cmp	r5, r6
 800b104:	dd54      	ble.n	800b1b0 <__gethex+0x228>
 800b106:	1bad      	subs	r5, r5, r6
 800b108:	4629      	mov	r1, r5
 800b10a:	4620      	mov	r0, r4
 800b10c:	f000 ff55 	bl	800bfba <__any_on>
 800b110:	4681      	mov	r9, r0
 800b112:	b178      	cbz	r0, 800b134 <__gethex+0x1ac>
 800b114:	f04f 0901 	mov.w	r9, #1
 800b118:	1e6b      	subs	r3, r5, #1
 800b11a:	1159      	asrs	r1, r3, #5
 800b11c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b120:	f003 021f 	and.w	r2, r3, #31
 800b124:	fa09 f202 	lsl.w	r2, r9, r2
 800b128:	420a      	tst	r2, r1
 800b12a:	d003      	beq.n	800b134 <__gethex+0x1ac>
 800b12c:	454b      	cmp	r3, r9
 800b12e:	dc36      	bgt.n	800b19e <__gethex+0x216>
 800b130:	f04f 0902 	mov.w	r9, #2
 800b134:	4629      	mov	r1, r5
 800b136:	4620      	mov	r0, r4
 800b138:	f7ff febe 	bl	800aeb8 <rshift>
 800b13c:	442f      	add	r7, r5
 800b13e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b142:	42bb      	cmp	r3, r7
 800b144:	da42      	bge.n	800b1cc <__gethex+0x244>
 800b146:	4621      	mov	r1, r4
 800b148:	9801      	ldr	r0, [sp, #4]
 800b14a:	f000 faf7 	bl	800b73c <_Bfree>
 800b14e:	2300      	movs	r3, #0
 800b150:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b152:	25a3      	movs	r5, #163	@ 0xa3
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	e793      	b.n	800b080 <__gethex+0xf8>
 800b158:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b15c:	2a2e      	cmp	r2, #46	@ 0x2e
 800b15e:	d012      	beq.n	800b186 <__gethex+0x1fe>
 800b160:	2b20      	cmp	r3, #32
 800b162:	d104      	bne.n	800b16e <__gethex+0x1e6>
 800b164:	f845 bb04 	str.w	fp, [r5], #4
 800b168:	f04f 0b00 	mov.w	fp, #0
 800b16c:	465b      	mov	r3, fp
 800b16e:	7830      	ldrb	r0, [r6, #0]
 800b170:	9303      	str	r3, [sp, #12]
 800b172:	f7ff fef4 	bl	800af5e <__hexdig_fun>
 800b176:	9b03      	ldr	r3, [sp, #12]
 800b178:	f000 000f 	and.w	r0, r0, #15
 800b17c:	4098      	lsls	r0, r3
 800b17e:	ea4b 0b00 	orr.w	fp, fp, r0
 800b182:	3304      	adds	r3, #4
 800b184:	e7ae      	b.n	800b0e4 <__gethex+0x15c>
 800b186:	45b1      	cmp	r9, r6
 800b188:	d8ea      	bhi.n	800b160 <__gethex+0x1d8>
 800b18a:	2201      	movs	r2, #1
 800b18c:	4630      	mov	r0, r6
 800b18e:	492a      	ldr	r1, [pc, #168]	@ (800b238 <__gethex+0x2b0>)
 800b190:	9303      	str	r3, [sp, #12]
 800b192:	f7fe ff3e 	bl	800a012 <strncmp>
 800b196:	9b03      	ldr	r3, [sp, #12]
 800b198:	2800      	cmp	r0, #0
 800b19a:	d1e1      	bne.n	800b160 <__gethex+0x1d8>
 800b19c:	e7a2      	b.n	800b0e4 <__gethex+0x15c>
 800b19e:	4620      	mov	r0, r4
 800b1a0:	1ea9      	subs	r1, r5, #2
 800b1a2:	f000 ff0a 	bl	800bfba <__any_on>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d0c2      	beq.n	800b130 <__gethex+0x1a8>
 800b1aa:	f04f 0903 	mov.w	r9, #3
 800b1ae:	e7c1      	b.n	800b134 <__gethex+0x1ac>
 800b1b0:	da09      	bge.n	800b1c6 <__gethex+0x23e>
 800b1b2:	1b75      	subs	r5, r6, r5
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	9801      	ldr	r0, [sp, #4]
 800b1ba:	f000 fccf 	bl	800bb5c <__lshift>
 800b1be:	4604      	mov	r4, r0
 800b1c0:	1b7f      	subs	r7, r7, r5
 800b1c2:	f100 0a14 	add.w	sl, r0, #20
 800b1c6:	f04f 0900 	mov.w	r9, #0
 800b1ca:	e7b8      	b.n	800b13e <__gethex+0x1b6>
 800b1cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b1d0:	42bd      	cmp	r5, r7
 800b1d2:	dd6f      	ble.n	800b2b4 <__gethex+0x32c>
 800b1d4:	1bed      	subs	r5, r5, r7
 800b1d6:	42ae      	cmp	r6, r5
 800b1d8:	dc34      	bgt.n	800b244 <__gethex+0x2bc>
 800b1da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d022      	beq.n	800b228 <__gethex+0x2a0>
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	d024      	beq.n	800b230 <__gethex+0x2a8>
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d115      	bne.n	800b216 <__gethex+0x28e>
 800b1ea:	42ae      	cmp	r6, r5
 800b1ec:	d113      	bne.n	800b216 <__gethex+0x28e>
 800b1ee:	2e01      	cmp	r6, #1
 800b1f0:	d10b      	bne.n	800b20a <__gethex+0x282>
 800b1f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1f6:	9a02      	ldr	r2, [sp, #8]
 800b1f8:	2562      	movs	r5, #98	@ 0x62
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	6123      	str	r3, [r4, #16]
 800b200:	f8ca 3000 	str.w	r3, [sl]
 800b204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b206:	601c      	str	r4, [r3, #0]
 800b208:	e73a      	b.n	800b080 <__gethex+0xf8>
 800b20a:	4620      	mov	r0, r4
 800b20c:	1e71      	subs	r1, r6, #1
 800b20e:	f000 fed4 	bl	800bfba <__any_on>
 800b212:	2800      	cmp	r0, #0
 800b214:	d1ed      	bne.n	800b1f2 <__gethex+0x26a>
 800b216:	4621      	mov	r1, r4
 800b218:	9801      	ldr	r0, [sp, #4]
 800b21a:	f000 fa8f 	bl	800b73c <_Bfree>
 800b21e:	2300      	movs	r3, #0
 800b220:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b222:	2550      	movs	r5, #80	@ 0x50
 800b224:	6013      	str	r3, [r2, #0]
 800b226:	e72b      	b.n	800b080 <__gethex+0xf8>
 800b228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1f3      	bne.n	800b216 <__gethex+0x28e>
 800b22e:	e7e0      	b.n	800b1f2 <__gethex+0x26a>
 800b230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1dd      	bne.n	800b1f2 <__gethex+0x26a>
 800b236:	e7ee      	b.n	800b216 <__gethex+0x28e>
 800b238:	0800cb20 	.word	0x0800cb20
 800b23c:	0800cbda 	.word	0x0800cbda
 800b240:	0800cbeb 	.word	0x0800cbeb
 800b244:	1e6f      	subs	r7, r5, #1
 800b246:	f1b9 0f00 	cmp.w	r9, #0
 800b24a:	d130      	bne.n	800b2ae <__gethex+0x326>
 800b24c:	b127      	cbz	r7, 800b258 <__gethex+0x2d0>
 800b24e:	4639      	mov	r1, r7
 800b250:	4620      	mov	r0, r4
 800b252:	f000 feb2 	bl	800bfba <__any_on>
 800b256:	4681      	mov	r9, r0
 800b258:	2301      	movs	r3, #1
 800b25a:	4629      	mov	r1, r5
 800b25c:	1b76      	subs	r6, r6, r5
 800b25e:	2502      	movs	r5, #2
 800b260:	117a      	asrs	r2, r7, #5
 800b262:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b266:	f007 071f 	and.w	r7, r7, #31
 800b26a:	40bb      	lsls	r3, r7
 800b26c:	4213      	tst	r3, r2
 800b26e:	4620      	mov	r0, r4
 800b270:	bf18      	it	ne
 800b272:	f049 0902 	orrne.w	r9, r9, #2
 800b276:	f7ff fe1f 	bl	800aeb8 <rshift>
 800b27a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b27e:	f1b9 0f00 	cmp.w	r9, #0
 800b282:	d047      	beq.n	800b314 <__gethex+0x38c>
 800b284:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d015      	beq.n	800b2b8 <__gethex+0x330>
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d017      	beq.n	800b2c0 <__gethex+0x338>
 800b290:	2b01      	cmp	r3, #1
 800b292:	d109      	bne.n	800b2a8 <__gethex+0x320>
 800b294:	f019 0f02 	tst.w	r9, #2
 800b298:	d006      	beq.n	800b2a8 <__gethex+0x320>
 800b29a:	f8da 3000 	ldr.w	r3, [sl]
 800b29e:	ea49 0903 	orr.w	r9, r9, r3
 800b2a2:	f019 0f01 	tst.w	r9, #1
 800b2a6:	d10e      	bne.n	800b2c6 <__gethex+0x33e>
 800b2a8:	f045 0510 	orr.w	r5, r5, #16
 800b2ac:	e032      	b.n	800b314 <__gethex+0x38c>
 800b2ae:	f04f 0901 	mov.w	r9, #1
 800b2b2:	e7d1      	b.n	800b258 <__gethex+0x2d0>
 800b2b4:	2501      	movs	r5, #1
 800b2b6:	e7e2      	b.n	800b27e <__gethex+0x2f6>
 800b2b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ba:	f1c3 0301 	rsb	r3, r3, #1
 800b2be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d0f0      	beq.n	800b2a8 <__gethex+0x320>
 800b2c6:	f04f 0c00 	mov.w	ip, #0
 800b2ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2ce:	f104 0314 	add.w	r3, r4, #20
 800b2d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2e4:	d01b      	beq.n	800b31e <__gethex+0x396>
 800b2e6:	3201      	adds	r2, #1
 800b2e8:	6002      	str	r2, [r0, #0]
 800b2ea:	2d02      	cmp	r5, #2
 800b2ec:	f104 0314 	add.w	r3, r4, #20
 800b2f0:	d13c      	bne.n	800b36c <__gethex+0x3e4>
 800b2f2:	f8d8 2000 	ldr.w	r2, [r8]
 800b2f6:	3a01      	subs	r2, #1
 800b2f8:	42b2      	cmp	r2, r6
 800b2fa:	d109      	bne.n	800b310 <__gethex+0x388>
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	1171      	asrs	r1, r6, #5
 800b300:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b304:	f006 061f 	and.w	r6, r6, #31
 800b308:	fa02 f606 	lsl.w	r6, r2, r6
 800b30c:	421e      	tst	r6, r3
 800b30e:	d13a      	bne.n	800b386 <__gethex+0x3fe>
 800b310:	f045 0520 	orr.w	r5, r5, #32
 800b314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b316:	601c      	str	r4, [r3, #0]
 800b318:	9b02      	ldr	r3, [sp, #8]
 800b31a:	601f      	str	r7, [r3, #0]
 800b31c:	e6b0      	b.n	800b080 <__gethex+0xf8>
 800b31e:	4299      	cmp	r1, r3
 800b320:	f843 cc04 	str.w	ip, [r3, #-4]
 800b324:	d8d9      	bhi.n	800b2da <__gethex+0x352>
 800b326:	68a3      	ldr	r3, [r4, #8]
 800b328:	459b      	cmp	fp, r3
 800b32a:	db17      	blt.n	800b35c <__gethex+0x3d4>
 800b32c:	6861      	ldr	r1, [r4, #4]
 800b32e:	9801      	ldr	r0, [sp, #4]
 800b330:	3101      	adds	r1, #1
 800b332:	f000 f9c3 	bl	800b6bc <_Balloc>
 800b336:	4681      	mov	r9, r0
 800b338:	b918      	cbnz	r0, 800b342 <__gethex+0x3ba>
 800b33a:	4602      	mov	r2, r0
 800b33c:	2184      	movs	r1, #132	@ 0x84
 800b33e:	4b19      	ldr	r3, [pc, #100]	@ (800b3a4 <__gethex+0x41c>)
 800b340:	e6c5      	b.n	800b0ce <__gethex+0x146>
 800b342:	6922      	ldr	r2, [r4, #16]
 800b344:	f104 010c 	add.w	r1, r4, #12
 800b348:	3202      	adds	r2, #2
 800b34a:	0092      	lsls	r2, r2, #2
 800b34c:	300c      	adds	r0, #12
 800b34e:	f7fe fef8 	bl	800a142 <memcpy>
 800b352:	4621      	mov	r1, r4
 800b354:	9801      	ldr	r0, [sp, #4]
 800b356:	f000 f9f1 	bl	800b73c <_Bfree>
 800b35a:	464c      	mov	r4, r9
 800b35c:	6923      	ldr	r3, [r4, #16]
 800b35e:	1c5a      	adds	r2, r3, #1
 800b360:	6122      	str	r2, [r4, #16]
 800b362:	2201      	movs	r2, #1
 800b364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b368:	615a      	str	r2, [r3, #20]
 800b36a:	e7be      	b.n	800b2ea <__gethex+0x362>
 800b36c:	6922      	ldr	r2, [r4, #16]
 800b36e:	455a      	cmp	r2, fp
 800b370:	dd0b      	ble.n	800b38a <__gethex+0x402>
 800b372:	2101      	movs	r1, #1
 800b374:	4620      	mov	r0, r4
 800b376:	f7ff fd9f 	bl	800aeb8 <rshift>
 800b37a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b37e:	3701      	adds	r7, #1
 800b380:	42bb      	cmp	r3, r7
 800b382:	f6ff aee0 	blt.w	800b146 <__gethex+0x1be>
 800b386:	2501      	movs	r5, #1
 800b388:	e7c2      	b.n	800b310 <__gethex+0x388>
 800b38a:	f016 061f 	ands.w	r6, r6, #31
 800b38e:	d0fa      	beq.n	800b386 <__gethex+0x3fe>
 800b390:	4453      	add	r3, sl
 800b392:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b396:	f000 fa83 	bl	800b8a0 <__hi0bits>
 800b39a:	f1c6 0620 	rsb	r6, r6, #32
 800b39e:	42b0      	cmp	r0, r6
 800b3a0:	dbe7      	blt.n	800b372 <__gethex+0x3ea>
 800b3a2:	e7f0      	b.n	800b386 <__gethex+0x3fe>
 800b3a4:	0800cbda 	.word	0x0800cbda

0800b3a8 <L_shift>:
 800b3a8:	f1c2 0208 	rsb	r2, r2, #8
 800b3ac:	0092      	lsls	r2, r2, #2
 800b3ae:	b570      	push	{r4, r5, r6, lr}
 800b3b0:	f1c2 0620 	rsb	r6, r2, #32
 800b3b4:	6843      	ldr	r3, [r0, #4]
 800b3b6:	6804      	ldr	r4, [r0, #0]
 800b3b8:	fa03 f506 	lsl.w	r5, r3, r6
 800b3bc:	432c      	orrs	r4, r5
 800b3be:	40d3      	lsrs	r3, r2
 800b3c0:	6004      	str	r4, [r0, #0]
 800b3c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3c6:	4288      	cmp	r0, r1
 800b3c8:	d3f4      	bcc.n	800b3b4 <L_shift+0xc>
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}

0800b3cc <__match>:
 800b3cc:	b530      	push	{r4, r5, lr}
 800b3ce:	6803      	ldr	r3, [r0, #0]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3d6:	b914      	cbnz	r4, 800b3de <__match+0x12>
 800b3d8:	6003      	str	r3, [r0, #0]
 800b3da:	2001      	movs	r0, #1
 800b3dc:	bd30      	pop	{r4, r5, pc}
 800b3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b3e6:	2d19      	cmp	r5, #25
 800b3e8:	bf98      	it	ls
 800b3ea:	3220      	addls	r2, #32
 800b3ec:	42a2      	cmp	r2, r4
 800b3ee:	d0f0      	beq.n	800b3d2 <__match+0x6>
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	e7f3      	b.n	800b3dc <__match+0x10>

0800b3f4 <__hexnan>:
 800b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	2500      	movs	r5, #0
 800b3fa:	680b      	ldr	r3, [r1, #0]
 800b3fc:	4682      	mov	sl, r0
 800b3fe:	115e      	asrs	r6, r3, #5
 800b400:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b404:	f013 031f 	ands.w	r3, r3, #31
 800b408:	bf18      	it	ne
 800b40a:	3604      	addne	r6, #4
 800b40c:	1f37      	subs	r7, r6, #4
 800b40e:	4690      	mov	r8, r2
 800b410:	46b9      	mov	r9, r7
 800b412:	463c      	mov	r4, r7
 800b414:	46ab      	mov	fp, r5
 800b416:	b087      	sub	sp, #28
 800b418:	6801      	ldr	r1, [r0, #0]
 800b41a:	9301      	str	r3, [sp, #4]
 800b41c:	f846 5c04 	str.w	r5, [r6, #-4]
 800b420:	9502      	str	r5, [sp, #8]
 800b422:	784a      	ldrb	r2, [r1, #1]
 800b424:	1c4b      	adds	r3, r1, #1
 800b426:	9303      	str	r3, [sp, #12]
 800b428:	b342      	cbz	r2, 800b47c <__hexnan+0x88>
 800b42a:	4610      	mov	r0, r2
 800b42c:	9105      	str	r1, [sp, #20]
 800b42e:	9204      	str	r2, [sp, #16]
 800b430:	f7ff fd95 	bl	800af5e <__hexdig_fun>
 800b434:	2800      	cmp	r0, #0
 800b436:	d151      	bne.n	800b4dc <__hexnan+0xe8>
 800b438:	9a04      	ldr	r2, [sp, #16]
 800b43a:	9905      	ldr	r1, [sp, #20]
 800b43c:	2a20      	cmp	r2, #32
 800b43e:	d818      	bhi.n	800b472 <__hexnan+0x7e>
 800b440:	9b02      	ldr	r3, [sp, #8]
 800b442:	459b      	cmp	fp, r3
 800b444:	dd13      	ble.n	800b46e <__hexnan+0x7a>
 800b446:	454c      	cmp	r4, r9
 800b448:	d206      	bcs.n	800b458 <__hexnan+0x64>
 800b44a:	2d07      	cmp	r5, #7
 800b44c:	dc04      	bgt.n	800b458 <__hexnan+0x64>
 800b44e:	462a      	mov	r2, r5
 800b450:	4649      	mov	r1, r9
 800b452:	4620      	mov	r0, r4
 800b454:	f7ff ffa8 	bl	800b3a8 <L_shift>
 800b458:	4544      	cmp	r4, r8
 800b45a:	d952      	bls.n	800b502 <__hexnan+0x10e>
 800b45c:	2300      	movs	r3, #0
 800b45e:	f1a4 0904 	sub.w	r9, r4, #4
 800b462:	f844 3c04 	str.w	r3, [r4, #-4]
 800b466:	461d      	mov	r5, r3
 800b468:	464c      	mov	r4, r9
 800b46a:	f8cd b008 	str.w	fp, [sp, #8]
 800b46e:	9903      	ldr	r1, [sp, #12]
 800b470:	e7d7      	b.n	800b422 <__hexnan+0x2e>
 800b472:	2a29      	cmp	r2, #41	@ 0x29
 800b474:	d157      	bne.n	800b526 <__hexnan+0x132>
 800b476:	3102      	adds	r1, #2
 800b478:	f8ca 1000 	str.w	r1, [sl]
 800b47c:	f1bb 0f00 	cmp.w	fp, #0
 800b480:	d051      	beq.n	800b526 <__hexnan+0x132>
 800b482:	454c      	cmp	r4, r9
 800b484:	d206      	bcs.n	800b494 <__hexnan+0xa0>
 800b486:	2d07      	cmp	r5, #7
 800b488:	dc04      	bgt.n	800b494 <__hexnan+0xa0>
 800b48a:	462a      	mov	r2, r5
 800b48c:	4649      	mov	r1, r9
 800b48e:	4620      	mov	r0, r4
 800b490:	f7ff ff8a 	bl	800b3a8 <L_shift>
 800b494:	4544      	cmp	r4, r8
 800b496:	d936      	bls.n	800b506 <__hexnan+0x112>
 800b498:	4623      	mov	r3, r4
 800b49a:	f1a8 0204 	sub.w	r2, r8, #4
 800b49e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4a2:	429f      	cmp	r7, r3
 800b4a4:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4a8:	d2f9      	bcs.n	800b49e <__hexnan+0xaa>
 800b4aa:	1b3b      	subs	r3, r7, r4
 800b4ac:	f023 0303 	bic.w	r3, r3, #3
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	3401      	adds	r4, #1
 800b4b4:	3e03      	subs	r6, #3
 800b4b6:	42b4      	cmp	r4, r6
 800b4b8:	bf88      	it	hi
 800b4ba:	2304      	movhi	r3, #4
 800b4bc:	2200      	movs	r2, #0
 800b4be:	4443      	add	r3, r8
 800b4c0:	f843 2b04 	str.w	r2, [r3], #4
 800b4c4:	429f      	cmp	r7, r3
 800b4c6:	d2fb      	bcs.n	800b4c0 <__hexnan+0xcc>
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	b91b      	cbnz	r3, 800b4d4 <__hexnan+0xe0>
 800b4cc:	4547      	cmp	r7, r8
 800b4ce:	d128      	bne.n	800b522 <__hexnan+0x12e>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	603b      	str	r3, [r7, #0]
 800b4d4:	2005      	movs	r0, #5
 800b4d6:	b007      	add	sp, #28
 800b4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4dc:	3501      	adds	r5, #1
 800b4de:	2d08      	cmp	r5, #8
 800b4e0:	f10b 0b01 	add.w	fp, fp, #1
 800b4e4:	dd06      	ble.n	800b4f4 <__hexnan+0x100>
 800b4e6:	4544      	cmp	r4, r8
 800b4e8:	d9c1      	bls.n	800b46e <__hexnan+0x7a>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	2501      	movs	r5, #1
 800b4ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4f2:	3c04      	subs	r4, #4
 800b4f4:	6822      	ldr	r2, [r4, #0]
 800b4f6:	f000 000f 	and.w	r0, r0, #15
 800b4fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b4fe:	6020      	str	r0, [r4, #0]
 800b500:	e7b5      	b.n	800b46e <__hexnan+0x7a>
 800b502:	2508      	movs	r5, #8
 800b504:	e7b3      	b.n	800b46e <__hexnan+0x7a>
 800b506:	9b01      	ldr	r3, [sp, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d0dd      	beq.n	800b4c8 <__hexnan+0xd4>
 800b50c:	f04f 32ff 	mov.w	r2, #4294967295
 800b510:	f1c3 0320 	rsb	r3, r3, #32
 800b514:	40da      	lsrs	r2, r3
 800b516:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b51a:	4013      	ands	r3, r2
 800b51c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b520:	e7d2      	b.n	800b4c8 <__hexnan+0xd4>
 800b522:	3f04      	subs	r7, #4
 800b524:	e7d0      	b.n	800b4c8 <__hexnan+0xd4>
 800b526:	2004      	movs	r0, #4
 800b528:	e7d5      	b.n	800b4d6 <__hexnan+0xe2>
	...

0800b52c <malloc>:
 800b52c:	4b02      	ldr	r3, [pc, #8]	@ (800b538 <malloc+0xc>)
 800b52e:	4601      	mov	r1, r0
 800b530:	6818      	ldr	r0, [r3, #0]
 800b532:	f000 b825 	b.w	800b580 <_malloc_r>
 800b536:	bf00      	nop
 800b538:	20000188 	.word	0x20000188

0800b53c <sbrk_aligned>:
 800b53c:	b570      	push	{r4, r5, r6, lr}
 800b53e:	4e0f      	ldr	r6, [pc, #60]	@ (800b57c <sbrk_aligned+0x40>)
 800b540:	460c      	mov	r4, r1
 800b542:	6831      	ldr	r1, [r6, #0]
 800b544:	4605      	mov	r5, r0
 800b546:	b911      	cbnz	r1, 800b54e <sbrk_aligned+0x12>
 800b548:	f000 ff7e 	bl	800c448 <_sbrk_r>
 800b54c:	6030      	str	r0, [r6, #0]
 800b54e:	4621      	mov	r1, r4
 800b550:	4628      	mov	r0, r5
 800b552:	f000 ff79 	bl	800c448 <_sbrk_r>
 800b556:	1c43      	adds	r3, r0, #1
 800b558:	d103      	bne.n	800b562 <sbrk_aligned+0x26>
 800b55a:	f04f 34ff 	mov.w	r4, #4294967295
 800b55e:	4620      	mov	r0, r4
 800b560:	bd70      	pop	{r4, r5, r6, pc}
 800b562:	1cc4      	adds	r4, r0, #3
 800b564:	f024 0403 	bic.w	r4, r4, #3
 800b568:	42a0      	cmp	r0, r4
 800b56a:	d0f8      	beq.n	800b55e <sbrk_aligned+0x22>
 800b56c:	1a21      	subs	r1, r4, r0
 800b56e:	4628      	mov	r0, r5
 800b570:	f000 ff6a 	bl	800c448 <_sbrk_r>
 800b574:	3001      	adds	r0, #1
 800b576:	d1f2      	bne.n	800b55e <sbrk_aligned+0x22>
 800b578:	e7ef      	b.n	800b55a <sbrk_aligned+0x1e>
 800b57a:	bf00      	nop
 800b57c:	20000d28 	.word	0x20000d28

0800b580 <_malloc_r>:
 800b580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b584:	1ccd      	adds	r5, r1, #3
 800b586:	f025 0503 	bic.w	r5, r5, #3
 800b58a:	3508      	adds	r5, #8
 800b58c:	2d0c      	cmp	r5, #12
 800b58e:	bf38      	it	cc
 800b590:	250c      	movcc	r5, #12
 800b592:	2d00      	cmp	r5, #0
 800b594:	4606      	mov	r6, r0
 800b596:	db01      	blt.n	800b59c <_malloc_r+0x1c>
 800b598:	42a9      	cmp	r1, r5
 800b59a:	d904      	bls.n	800b5a6 <_malloc_r+0x26>
 800b59c:	230c      	movs	r3, #12
 800b59e:	6033      	str	r3, [r6, #0]
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b67c <_malloc_r+0xfc>
 800b5aa:	f000 f87b 	bl	800b6a4 <__malloc_lock>
 800b5ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b5b2:	461c      	mov	r4, r3
 800b5b4:	bb44      	cbnz	r4, 800b608 <_malloc_r+0x88>
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f7ff ffbf 	bl	800b53c <sbrk_aligned>
 800b5be:	1c43      	adds	r3, r0, #1
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	d158      	bne.n	800b676 <_malloc_r+0xf6>
 800b5c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b5c8:	4627      	mov	r7, r4
 800b5ca:	2f00      	cmp	r7, #0
 800b5cc:	d143      	bne.n	800b656 <_malloc_r+0xd6>
 800b5ce:	2c00      	cmp	r4, #0
 800b5d0:	d04b      	beq.n	800b66a <_malloc_r+0xea>
 800b5d2:	6823      	ldr	r3, [r4, #0]
 800b5d4:	4639      	mov	r1, r7
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	eb04 0903 	add.w	r9, r4, r3
 800b5dc:	f000 ff34 	bl	800c448 <_sbrk_r>
 800b5e0:	4581      	cmp	r9, r0
 800b5e2:	d142      	bne.n	800b66a <_malloc_r+0xea>
 800b5e4:	6821      	ldr	r1, [r4, #0]
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	1a6d      	subs	r5, r5, r1
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	f7ff ffa6 	bl	800b53c <sbrk_aligned>
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	d03a      	beq.n	800b66a <_malloc_r+0xea>
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	442b      	add	r3, r5
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b5fe:	685a      	ldr	r2, [r3, #4]
 800b600:	bb62      	cbnz	r2, 800b65c <_malloc_r+0xdc>
 800b602:	f8c8 7000 	str.w	r7, [r8]
 800b606:	e00f      	b.n	800b628 <_malloc_r+0xa8>
 800b608:	6822      	ldr	r2, [r4, #0]
 800b60a:	1b52      	subs	r2, r2, r5
 800b60c:	d420      	bmi.n	800b650 <_malloc_r+0xd0>
 800b60e:	2a0b      	cmp	r2, #11
 800b610:	d917      	bls.n	800b642 <_malloc_r+0xc2>
 800b612:	1961      	adds	r1, r4, r5
 800b614:	42a3      	cmp	r3, r4
 800b616:	6025      	str	r5, [r4, #0]
 800b618:	bf18      	it	ne
 800b61a:	6059      	strne	r1, [r3, #4]
 800b61c:	6863      	ldr	r3, [r4, #4]
 800b61e:	bf08      	it	eq
 800b620:	f8c8 1000 	streq.w	r1, [r8]
 800b624:	5162      	str	r2, [r4, r5]
 800b626:	604b      	str	r3, [r1, #4]
 800b628:	4630      	mov	r0, r6
 800b62a:	f000 f841 	bl	800b6b0 <__malloc_unlock>
 800b62e:	f104 000b 	add.w	r0, r4, #11
 800b632:	1d23      	adds	r3, r4, #4
 800b634:	f020 0007 	bic.w	r0, r0, #7
 800b638:	1ac2      	subs	r2, r0, r3
 800b63a:	bf1c      	itt	ne
 800b63c:	1a1b      	subne	r3, r3, r0
 800b63e:	50a3      	strne	r3, [r4, r2]
 800b640:	e7af      	b.n	800b5a2 <_malloc_r+0x22>
 800b642:	6862      	ldr	r2, [r4, #4]
 800b644:	42a3      	cmp	r3, r4
 800b646:	bf0c      	ite	eq
 800b648:	f8c8 2000 	streq.w	r2, [r8]
 800b64c:	605a      	strne	r2, [r3, #4]
 800b64e:	e7eb      	b.n	800b628 <_malloc_r+0xa8>
 800b650:	4623      	mov	r3, r4
 800b652:	6864      	ldr	r4, [r4, #4]
 800b654:	e7ae      	b.n	800b5b4 <_malloc_r+0x34>
 800b656:	463c      	mov	r4, r7
 800b658:	687f      	ldr	r7, [r7, #4]
 800b65a:	e7b6      	b.n	800b5ca <_malloc_r+0x4a>
 800b65c:	461a      	mov	r2, r3
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	42a3      	cmp	r3, r4
 800b662:	d1fb      	bne.n	800b65c <_malloc_r+0xdc>
 800b664:	2300      	movs	r3, #0
 800b666:	6053      	str	r3, [r2, #4]
 800b668:	e7de      	b.n	800b628 <_malloc_r+0xa8>
 800b66a:	230c      	movs	r3, #12
 800b66c:	4630      	mov	r0, r6
 800b66e:	6033      	str	r3, [r6, #0]
 800b670:	f000 f81e 	bl	800b6b0 <__malloc_unlock>
 800b674:	e794      	b.n	800b5a0 <_malloc_r+0x20>
 800b676:	6005      	str	r5, [r0, #0]
 800b678:	e7d6      	b.n	800b628 <_malloc_r+0xa8>
 800b67a:	bf00      	nop
 800b67c:	20000d2c 	.word	0x20000d2c

0800b680 <__ascii_mbtowc>:
 800b680:	b082      	sub	sp, #8
 800b682:	b901      	cbnz	r1, 800b686 <__ascii_mbtowc+0x6>
 800b684:	a901      	add	r1, sp, #4
 800b686:	b142      	cbz	r2, 800b69a <__ascii_mbtowc+0x1a>
 800b688:	b14b      	cbz	r3, 800b69e <__ascii_mbtowc+0x1e>
 800b68a:	7813      	ldrb	r3, [r2, #0]
 800b68c:	600b      	str	r3, [r1, #0]
 800b68e:	7812      	ldrb	r2, [r2, #0]
 800b690:	1e10      	subs	r0, r2, #0
 800b692:	bf18      	it	ne
 800b694:	2001      	movne	r0, #1
 800b696:	b002      	add	sp, #8
 800b698:	4770      	bx	lr
 800b69a:	4610      	mov	r0, r2
 800b69c:	e7fb      	b.n	800b696 <__ascii_mbtowc+0x16>
 800b69e:	f06f 0001 	mvn.w	r0, #1
 800b6a2:	e7f8      	b.n	800b696 <__ascii_mbtowc+0x16>

0800b6a4 <__malloc_lock>:
 800b6a4:	4801      	ldr	r0, [pc, #4]	@ (800b6ac <__malloc_lock+0x8>)
 800b6a6:	f7fe bd3c 	b.w	800a122 <__retarget_lock_acquire_recursive>
 800b6aa:	bf00      	nop
 800b6ac:	20000d24 	.word	0x20000d24

0800b6b0 <__malloc_unlock>:
 800b6b0:	4801      	ldr	r0, [pc, #4]	@ (800b6b8 <__malloc_unlock+0x8>)
 800b6b2:	f7fe bd37 	b.w	800a124 <__retarget_lock_release_recursive>
 800b6b6:	bf00      	nop
 800b6b8:	20000d24 	.word	0x20000d24

0800b6bc <_Balloc>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	69c6      	ldr	r6, [r0, #28]
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	460d      	mov	r5, r1
 800b6c4:	b976      	cbnz	r6, 800b6e4 <_Balloc+0x28>
 800b6c6:	2010      	movs	r0, #16
 800b6c8:	f7ff ff30 	bl	800b52c <malloc>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	61e0      	str	r0, [r4, #28]
 800b6d0:	b920      	cbnz	r0, 800b6dc <_Balloc+0x20>
 800b6d2:	216b      	movs	r1, #107	@ 0x6b
 800b6d4:	4b17      	ldr	r3, [pc, #92]	@ (800b734 <_Balloc+0x78>)
 800b6d6:	4818      	ldr	r0, [pc, #96]	@ (800b738 <_Balloc+0x7c>)
 800b6d8:	f000 fec6 	bl	800c468 <__assert_func>
 800b6dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6e0:	6006      	str	r6, [r0, #0]
 800b6e2:	60c6      	str	r6, [r0, #12]
 800b6e4:	69e6      	ldr	r6, [r4, #28]
 800b6e6:	68f3      	ldr	r3, [r6, #12]
 800b6e8:	b183      	cbz	r3, 800b70c <_Balloc+0x50>
 800b6ea:	69e3      	ldr	r3, [r4, #28]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6f2:	b9b8      	cbnz	r0, 800b724 <_Balloc+0x68>
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	fa01 f605 	lsl.w	r6, r1, r5
 800b6fa:	1d72      	adds	r2, r6, #5
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	0092      	lsls	r2, r2, #2
 800b700:	f000 fed0 	bl	800c4a4 <_calloc_r>
 800b704:	b160      	cbz	r0, 800b720 <_Balloc+0x64>
 800b706:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b70a:	e00e      	b.n	800b72a <_Balloc+0x6e>
 800b70c:	2221      	movs	r2, #33	@ 0x21
 800b70e:	2104      	movs	r1, #4
 800b710:	4620      	mov	r0, r4
 800b712:	f000 fec7 	bl	800c4a4 <_calloc_r>
 800b716:	69e3      	ldr	r3, [r4, #28]
 800b718:	60f0      	str	r0, [r6, #12]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1e4      	bne.n	800b6ea <_Balloc+0x2e>
 800b720:	2000      	movs	r0, #0
 800b722:	bd70      	pop	{r4, r5, r6, pc}
 800b724:	6802      	ldr	r2, [r0, #0]
 800b726:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b72a:	2300      	movs	r3, #0
 800b72c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b730:	e7f7      	b.n	800b722 <_Balloc+0x66>
 800b732:	bf00      	nop
 800b734:	0800cb6b 	.word	0x0800cb6b
 800b738:	0800cc4b 	.word	0x0800cc4b

0800b73c <_Bfree>:
 800b73c:	b570      	push	{r4, r5, r6, lr}
 800b73e:	69c6      	ldr	r6, [r0, #28]
 800b740:	4605      	mov	r5, r0
 800b742:	460c      	mov	r4, r1
 800b744:	b976      	cbnz	r6, 800b764 <_Bfree+0x28>
 800b746:	2010      	movs	r0, #16
 800b748:	f7ff fef0 	bl	800b52c <malloc>
 800b74c:	4602      	mov	r2, r0
 800b74e:	61e8      	str	r0, [r5, #28]
 800b750:	b920      	cbnz	r0, 800b75c <_Bfree+0x20>
 800b752:	218f      	movs	r1, #143	@ 0x8f
 800b754:	4b08      	ldr	r3, [pc, #32]	@ (800b778 <_Bfree+0x3c>)
 800b756:	4809      	ldr	r0, [pc, #36]	@ (800b77c <_Bfree+0x40>)
 800b758:	f000 fe86 	bl	800c468 <__assert_func>
 800b75c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b760:	6006      	str	r6, [r0, #0]
 800b762:	60c6      	str	r6, [r0, #12]
 800b764:	b13c      	cbz	r4, 800b776 <_Bfree+0x3a>
 800b766:	69eb      	ldr	r3, [r5, #28]
 800b768:	6862      	ldr	r2, [r4, #4]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b770:	6021      	str	r1, [r4, #0]
 800b772:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b776:	bd70      	pop	{r4, r5, r6, pc}
 800b778:	0800cb6b 	.word	0x0800cb6b
 800b77c:	0800cc4b 	.word	0x0800cc4b

0800b780 <__multadd>:
 800b780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b784:	4607      	mov	r7, r0
 800b786:	460c      	mov	r4, r1
 800b788:	461e      	mov	r6, r3
 800b78a:	2000      	movs	r0, #0
 800b78c:	690d      	ldr	r5, [r1, #16]
 800b78e:	f101 0c14 	add.w	ip, r1, #20
 800b792:	f8dc 3000 	ldr.w	r3, [ip]
 800b796:	3001      	adds	r0, #1
 800b798:	b299      	uxth	r1, r3
 800b79a:	fb02 6101 	mla	r1, r2, r1, r6
 800b79e:	0c1e      	lsrs	r6, r3, #16
 800b7a0:	0c0b      	lsrs	r3, r1, #16
 800b7a2:	fb02 3306 	mla	r3, r2, r6, r3
 800b7a6:	b289      	uxth	r1, r1
 800b7a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7ac:	4285      	cmp	r5, r0
 800b7ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7b2:	f84c 1b04 	str.w	r1, [ip], #4
 800b7b6:	dcec      	bgt.n	800b792 <__multadd+0x12>
 800b7b8:	b30e      	cbz	r6, 800b7fe <__multadd+0x7e>
 800b7ba:	68a3      	ldr	r3, [r4, #8]
 800b7bc:	42ab      	cmp	r3, r5
 800b7be:	dc19      	bgt.n	800b7f4 <__multadd+0x74>
 800b7c0:	6861      	ldr	r1, [r4, #4]
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	3101      	adds	r1, #1
 800b7c6:	f7ff ff79 	bl	800b6bc <_Balloc>
 800b7ca:	4680      	mov	r8, r0
 800b7cc:	b928      	cbnz	r0, 800b7da <__multadd+0x5a>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	21ba      	movs	r1, #186	@ 0xba
 800b7d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b804 <__multadd+0x84>)
 800b7d4:	480c      	ldr	r0, [pc, #48]	@ (800b808 <__multadd+0x88>)
 800b7d6:	f000 fe47 	bl	800c468 <__assert_func>
 800b7da:	6922      	ldr	r2, [r4, #16]
 800b7dc:	f104 010c 	add.w	r1, r4, #12
 800b7e0:	3202      	adds	r2, #2
 800b7e2:	0092      	lsls	r2, r2, #2
 800b7e4:	300c      	adds	r0, #12
 800b7e6:	f7fe fcac 	bl	800a142 <memcpy>
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	f7ff ffa5 	bl	800b73c <_Bfree>
 800b7f2:	4644      	mov	r4, r8
 800b7f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7f8:	3501      	adds	r5, #1
 800b7fa:	615e      	str	r6, [r3, #20]
 800b7fc:	6125      	str	r5, [r4, #16]
 800b7fe:	4620      	mov	r0, r4
 800b800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b804:	0800cbda 	.word	0x0800cbda
 800b808:	0800cc4b 	.word	0x0800cc4b

0800b80c <__s2b>:
 800b80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b810:	4615      	mov	r5, r2
 800b812:	2209      	movs	r2, #9
 800b814:	461f      	mov	r7, r3
 800b816:	3308      	adds	r3, #8
 800b818:	460c      	mov	r4, r1
 800b81a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b81e:	4606      	mov	r6, r0
 800b820:	2201      	movs	r2, #1
 800b822:	2100      	movs	r1, #0
 800b824:	429a      	cmp	r2, r3
 800b826:	db09      	blt.n	800b83c <__s2b+0x30>
 800b828:	4630      	mov	r0, r6
 800b82a:	f7ff ff47 	bl	800b6bc <_Balloc>
 800b82e:	b940      	cbnz	r0, 800b842 <__s2b+0x36>
 800b830:	4602      	mov	r2, r0
 800b832:	21d3      	movs	r1, #211	@ 0xd3
 800b834:	4b18      	ldr	r3, [pc, #96]	@ (800b898 <__s2b+0x8c>)
 800b836:	4819      	ldr	r0, [pc, #100]	@ (800b89c <__s2b+0x90>)
 800b838:	f000 fe16 	bl	800c468 <__assert_func>
 800b83c:	0052      	lsls	r2, r2, #1
 800b83e:	3101      	adds	r1, #1
 800b840:	e7f0      	b.n	800b824 <__s2b+0x18>
 800b842:	9b08      	ldr	r3, [sp, #32]
 800b844:	2d09      	cmp	r5, #9
 800b846:	6143      	str	r3, [r0, #20]
 800b848:	f04f 0301 	mov.w	r3, #1
 800b84c:	6103      	str	r3, [r0, #16]
 800b84e:	dd16      	ble.n	800b87e <__s2b+0x72>
 800b850:	f104 0909 	add.w	r9, r4, #9
 800b854:	46c8      	mov	r8, r9
 800b856:	442c      	add	r4, r5
 800b858:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b85c:	4601      	mov	r1, r0
 800b85e:	220a      	movs	r2, #10
 800b860:	4630      	mov	r0, r6
 800b862:	3b30      	subs	r3, #48	@ 0x30
 800b864:	f7ff ff8c 	bl	800b780 <__multadd>
 800b868:	45a0      	cmp	r8, r4
 800b86a:	d1f5      	bne.n	800b858 <__s2b+0x4c>
 800b86c:	f1a5 0408 	sub.w	r4, r5, #8
 800b870:	444c      	add	r4, r9
 800b872:	1b2d      	subs	r5, r5, r4
 800b874:	1963      	adds	r3, r4, r5
 800b876:	42bb      	cmp	r3, r7
 800b878:	db04      	blt.n	800b884 <__s2b+0x78>
 800b87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b87e:	2509      	movs	r5, #9
 800b880:	340a      	adds	r4, #10
 800b882:	e7f6      	b.n	800b872 <__s2b+0x66>
 800b884:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b888:	4601      	mov	r1, r0
 800b88a:	220a      	movs	r2, #10
 800b88c:	4630      	mov	r0, r6
 800b88e:	3b30      	subs	r3, #48	@ 0x30
 800b890:	f7ff ff76 	bl	800b780 <__multadd>
 800b894:	e7ee      	b.n	800b874 <__s2b+0x68>
 800b896:	bf00      	nop
 800b898:	0800cbda 	.word	0x0800cbda
 800b89c:	0800cc4b 	.word	0x0800cc4b

0800b8a0 <__hi0bits>:
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b8a6:	bf3a      	itte	cc
 800b8a8:	0403      	lslcc	r3, r0, #16
 800b8aa:	2010      	movcc	r0, #16
 800b8ac:	2000      	movcs	r0, #0
 800b8ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b8b2:	bf3c      	itt	cc
 800b8b4:	021b      	lslcc	r3, r3, #8
 800b8b6:	3008      	addcc	r0, #8
 800b8b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8bc:	bf3c      	itt	cc
 800b8be:	011b      	lslcc	r3, r3, #4
 800b8c0:	3004      	addcc	r0, #4
 800b8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8c6:	bf3c      	itt	cc
 800b8c8:	009b      	lslcc	r3, r3, #2
 800b8ca:	3002      	addcc	r0, #2
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	db05      	blt.n	800b8dc <__hi0bits+0x3c>
 800b8d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b8d4:	f100 0001 	add.w	r0, r0, #1
 800b8d8:	bf08      	it	eq
 800b8da:	2020      	moveq	r0, #32
 800b8dc:	4770      	bx	lr

0800b8de <__lo0bits>:
 800b8de:	6803      	ldr	r3, [r0, #0]
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	f013 0007 	ands.w	r0, r3, #7
 800b8e6:	d00b      	beq.n	800b900 <__lo0bits+0x22>
 800b8e8:	07d9      	lsls	r1, r3, #31
 800b8ea:	d421      	bmi.n	800b930 <__lo0bits+0x52>
 800b8ec:	0798      	lsls	r0, r3, #30
 800b8ee:	bf49      	itett	mi
 800b8f0:	085b      	lsrmi	r3, r3, #1
 800b8f2:	089b      	lsrpl	r3, r3, #2
 800b8f4:	2001      	movmi	r0, #1
 800b8f6:	6013      	strmi	r3, [r2, #0]
 800b8f8:	bf5c      	itt	pl
 800b8fa:	2002      	movpl	r0, #2
 800b8fc:	6013      	strpl	r3, [r2, #0]
 800b8fe:	4770      	bx	lr
 800b900:	b299      	uxth	r1, r3
 800b902:	b909      	cbnz	r1, 800b908 <__lo0bits+0x2a>
 800b904:	2010      	movs	r0, #16
 800b906:	0c1b      	lsrs	r3, r3, #16
 800b908:	b2d9      	uxtb	r1, r3
 800b90a:	b909      	cbnz	r1, 800b910 <__lo0bits+0x32>
 800b90c:	3008      	adds	r0, #8
 800b90e:	0a1b      	lsrs	r3, r3, #8
 800b910:	0719      	lsls	r1, r3, #28
 800b912:	bf04      	itt	eq
 800b914:	091b      	lsreq	r3, r3, #4
 800b916:	3004      	addeq	r0, #4
 800b918:	0799      	lsls	r1, r3, #30
 800b91a:	bf04      	itt	eq
 800b91c:	089b      	lsreq	r3, r3, #2
 800b91e:	3002      	addeq	r0, #2
 800b920:	07d9      	lsls	r1, r3, #31
 800b922:	d403      	bmi.n	800b92c <__lo0bits+0x4e>
 800b924:	085b      	lsrs	r3, r3, #1
 800b926:	f100 0001 	add.w	r0, r0, #1
 800b92a:	d003      	beq.n	800b934 <__lo0bits+0x56>
 800b92c:	6013      	str	r3, [r2, #0]
 800b92e:	4770      	bx	lr
 800b930:	2000      	movs	r0, #0
 800b932:	4770      	bx	lr
 800b934:	2020      	movs	r0, #32
 800b936:	4770      	bx	lr

0800b938 <__i2b>:
 800b938:	b510      	push	{r4, lr}
 800b93a:	460c      	mov	r4, r1
 800b93c:	2101      	movs	r1, #1
 800b93e:	f7ff febd 	bl	800b6bc <_Balloc>
 800b942:	4602      	mov	r2, r0
 800b944:	b928      	cbnz	r0, 800b952 <__i2b+0x1a>
 800b946:	f240 1145 	movw	r1, #325	@ 0x145
 800b94a:	4b04      	ldr	r3, [pc, #16]	@ (800b95c <__i2b+0x24>)
 800b94c:	4804      	ldr	r0, [pc, #16]	@ (800b960 <__i2b+0x28>)
 800b94e:	f000 fd8b 	bl	800c468 <__assert_func>
 800b952:	2301      	movs	r3, #1
 800b954:	6144      	str	r4, [r0, #20]
 800b956:	6103      	str	r3, [r0, #16]
 800b958:	bd10      	pop	{r4, pc}
 800b95a:	bf00      	nop
 800b95c:	0800cbda 	.word	0x0800cbda
 800b960:	0800cc4b 	.word	0x0800cc4b

0800b964 <__multiply>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	4617      	mov	r7, r2
 800b96a:	690a      	ldr	r2, [r1, #16]
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	4689      	mov	r9, r1
 800b970:	429a      	cmp	r2, r3
 800b972:	bfa2      	ittt	ge
 800b974:	463b      	movge	r3, r7
 800b976:	460f      	movge	r7, r1
 800b978:	4699      	movge	r9, r3
 800b97a:	693d      	ldr	r5, [r7, #16]
 800b97c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	6879      	ldr	r1, [r7, #4]
 800b984:	eb05 060a 	add.w	r6, r5, sl
 800b988:	42b3      	cmp	r3, r6
 800b98a:	b085      	sub	sp, #20
 800b98c:	bfb8      	it	lt
 800b98e:	3101      	addlt	r1, #1
 800b990:	f7ff fe94 	bl	800b6bc <_Balloc>
 800b994:	b930      	cbnz	r0, 800b9a4 <__multiply+0x40>
 800b996:	4602      	mov	r2, r0
 800b998:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b99c:	4b40      	ldr	r3, [pc, #256]	@ (800baa0 <__multiply+0x13c>)
 800b99e:	4841      	ldr	r0, [pc, #260]	@ (800baa4 <__multiply+0x140>)
 800b9a0:	f000 fd62 	bl	800c468 <__assert_func>
 800b9a4:	f100 0414 	add.w	r4, r0, #20
 800b9a8:	4623      	mov	r3, r4
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b9b0:	4573      	cmp	r3, lr
 800b9b2:	d320      	bcc.n	800b9f6 <__multiply+0x92>
 800b9b4:	f107 0814 	add.w	r8, r7, #20
 800b9b8:	f109 0114 	add.w	r1, r9, #20
 800b9bc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b9c0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b9c4:	9302      	str	r3, [sp, #8]
 800b9c6:	1beb      	subs	r3, r5, r7
 800b9c8:	3b15      	subs	r3, #21
 800b9ca:	f023 0303 	bic.w	r3, r3, #3
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	3715      	adds	r7, #21
 800b9d2:	42bd      	cmp	r5, r7
 800b9d4:	bf38      	it	cc
 800b9d6:	2304      	movcc	r3, #4
 800b9d8:	9301      	str	r3, [sp, #4]
 800b9da:	9b02      	ldr	r3, [sp, #8]
 800b9dc:	9103      	str	r1, [sp, #12]
 800b9de:	428b      	cmp	r3, r1
 800b9e0:	d80c      	bhi.n	800b9fc <__multiply+0x98>
 800b9e2:	2e00      	cmp	r6, #0
 800b9e4:	dd03      	ble.n	800b9ee <__multiply+0x8a>
 800b9e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d055      	beq.n	800ba9a <__multiply+0x136>
 800b9ee:	6106      	str	r6, [r0, #16]
 800b9f0:	b005      	add	sp, #20
 800b9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f6:	f843 2b04 	str.w	r2, [r3], #4
 800b9fa:	e7d9      	b.n	800b9b0 <__multiply+0x4c>
 800b9fc:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba00:	f1ba 0f00 	cmp.w	sl, #0
 800ba04:	d01f      	beq.n	800ba46 <__multiply+0xe2>
 800ba06:	46c4      	mov	ip, r8
 800ba08:	46a1      	mov	r9, r4
 800ba0a:	2700      	movs	r7, #0
 800ba0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba10:	f8d9 3000 	ldr.w	r3, [r9]
 800ba14:	fa1f fb82 	uxth.w	fp, r2
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba1e:	443b      	add	r3, r7
 800ba20:	f8d9 7000 	ldr.w	r7, [r9]
 800ba24:	0c12      	lsrs	r2, r2, #16
 800ba26:	0c3f      	lsrs	r7, r7, #16
 800ba28:	fb0a 7202 	mla	r2, sl, r2, r7
 800ba2c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba36:	4565      	cmp	r5, ip
 800ba38:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ba3c:	f849 3b04 	str.w	r3, [r9], #4
 800ba40:	d8e4      	bhi.n	800ba0c <__multiply+0xa8>
 800ba42:	9b01      	ldr	r3, [sp, #4]
 800ba44:	50e7      	str	r7, [r4, r3]
 800ba46:	9b03      	ldr	r3, [sp, #12]
 800ba48:	3104      	adds	r1, #4
 800ba4a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba4e:	f1b9 0f00 	cmp.w	r9, #0
 800ba52:	d020      	beq.n	800ba96 <__multiply+0x132>
 800ba54:	4647      	mov	r7, r8
 800ba56:	46a4      	mov	ip, r4
 800ba58:	f04f 0a00 	mov.w	sl, #0
 800ba5c:	6823      	ldr	r3, [r4, #0]
 800ba5e:	f8b7 b000 	ldrh.w	fp, [r7]
 800ba62:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	fb09 220b 	mla	r2, r9, fp, r2
 800ba6c:	4452      	add	r2, sl
 800ba6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba72:	f84c 3b04 	str.w	r3, [ip], #4
 800ba76:	f857 3b04 	ldr.w	r3, [r7], #4
 800ba7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba7e:	f8bc 3000 	ldrh.w	r3, [ip]
 800ba82:	42bd      	cmp	r5, r7
 800ba84:	fb09 330a 	mla	r3, r9, sl, r3
 800ba88:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ba8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba90:	d8e5      	bhi.n	800ba5e <__multiply+0xfa>
 800ba92:	9a01      	ldr	r2, [sp, #4]
 800ba94:	50a3      	str	r3, [r4, r2]
 800ba96:	3404      	adds	r4, #4
 800ba98:	e79f      	b.n	800b9da <__multiply+0x76>
 800ba9a:	3e01      	subs	r6, #1
 800ba9c:	e7a1      	b.n	800b9e2 <__multiply+0x7e>
 800ba9e:	bf00      	nop
 800baa0:	0800cbda 	.word	0x0800cbda
 800baa4:	0800cc4b 	.word	0x0800cc4b

0800baa8 <__pow5mult>:
 800baa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baac:	4615      	mov	r5, r2
 800baae:	f012 0203 	ands.w	r2, r2, #3
 800bab2:	4607      	mov	r7, r0
 800bab4:	460e      	mov	r6, r1
 800bab6:	d007      	beq.n	800bac8 <__pow5mult+0x20>
 800bab8:	4c25      	ldr	r4, [pc, #148]	@ (800bb50 <__pow5mult+0xa8>)
 800baba:	3a01      	subs	r2, #1
 800babc:	2300      	movs	r3, #0
 800babe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bac2:	f7ff fe5d 	bl	800b780 <__multadd>
 800bac6:	4606      	mov	r6, r0
 800bac8:	10ad      	asrs	r5, r5, #2
 800baca:	d03d      	beq.n	800bb48 <__pow5mult+0xa0>
 800bacc:	69fc      	ldr	r4, [r7, #28]
 800bace:	b97c      	cbnz	r4, 800baf0 <__pow5mult+0x48>
 800bad0:	2010      	movs	r0, #16
 800bad2:	f7ff fd2b 	bl	800b52c <malloc>
 800bad6:	4602      	mov	r2, r0
 800bad8:	61f8      	str	r0, [r7, #28]
 800bada:	b928      	cbnz	r0, 800bae8 <__pow5mult+0x40>
 800badc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bae0:	4b1c      	ldr	r3, [pc, #112]	@ (800bb54 <__pow5mult+0xac>)
 800bae2:	481d      	ldr	r0, [pc, #116]	@ (800bb58 <__pow5mult+0xb0>)
 800bae4:	f000 fcc0 	bl	800c468 <__assert_func>
 800bae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800baec:	6004      	str	r4, [r0, #0]
 800baee:	60c4      	str	r4, [r0, #12]
 800baf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800baf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800baf8:	b94c      	cbnz	r4, 800bb0e <__pow5mult+0x66>
 800bafa:	f240 2171 	movw	r1, #625	@ 0x271
 800bafe:	4638      	mov	r0, r7
 800bb00:	f7ff ff1a 	bl	800b938 <__i2b>
 800bb04:	2300      	movs	r3, #0
 800bb06:	4604      	mov	r4, r0
 800bb08:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb0c:	6003      	str	r3, [r0, #0]
 800bb0e:	f04f 0900 	mov.w	r9, #0
 800bb12:	07eb      	lsls	r3, r5, #31
 800bb14:	d50a      	bpl.n	800bb2c <__pow5mult+0x84>
 800bb16:	4631      	mov	r1, r6
 800bb18:	4622      	mov	r2, r4
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	f7ff ff22 	bl	800b964 <__multiply>
 800bb20:	4680      	mov	r8, r0
 800bb22:	4631      	mov	r1, r6
 800bb24:	4638      	mov	r0, r7
 800bb26:	f7ff fe09 	bl	800b73c <_Bfree>
 800bb2a:	4646      	mov	r6, r8
 800bb2c:	106d      	asrs	r5, r5, #1
 800bb2e:	d00b      	beq.n	800bb48 <__pow5mult+0xa0>
 800bb30:	6820      	ldr	r0, [r4, #0]
 800bb32:	b938      	cbnz	r0, 800bb44 <__pow5mult+0x9c>
 800bb34:	4622      	mov	r2, r4
 800bb36:	4621      	mov	r1, r4
 800bb38:	4638      	mov	r0, r7
 800bb3a:	f7ff ff13 	bl	800b964 <__multiply>
 800bb3e:	6020      	str	r0, [r4, #0]
 800bb40:	f8c0 9000 	str.w	r9, [r0]
 800bb44:	4604      	mov	r4, r0
 800bb46:	e7e4      	b.n	800bb12 <__pow5mult+0x6a>
 800bb48:	4630      	mov	r0, r6
 800bb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4e:	bf00      	nop
 800bb50:	0800ce4c 	.word	0x0800ce4c
 800bb54:	0800cb6b 	.word	0x0800cb6b
 800bb58:	0800cc4b 	.word	0x0800cc4b

0800bb5c <__lshift>:
 800bb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb60:	460c      	mov	r4, r1
 800bb62:	4607      	mov	r7, r0
 800bb64:	4691      	mov	r9, r2
 800bb66:	6923      	ldr	r3, [r4, #16]
 800bb68:	6849      	ldr	r1, [r1, #4]
 800bb6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb6e:	68a3      	ldr	r3, [r4, #8]
 800bb70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb74:	f108 0601 	add.w	r6, r8, #1
 800bb78:	42b3      	cmp	r3, r6
 800bb7a:	db0b      	blt.n	800bb94 <__lshift+0x38>
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	f7ff fd9d 	bl	800b6bc <_Balloc>
 800bb82:	4605      	mov	r5, r0
 800bb84:	b948      	cbnz	r0, 800bb9a <__lshift+0x3e>
 800bb86:	4602      	mov	r2, r0
 800bb88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bb8c:	4b27      	ldr	r3, [pc, #156]	@ (800bc2c <__lshift+0xd0>)
 800bb8e:	4828      	ldr	r0, [pc, #160]	@ (800bc30 <__lshift+0xd4>)
 800bb90:	f000 fc6a 	bl	800c468 <__assert_func>
 800bb94:	3101      	adds	r1, #1
 800bb96:	005b      	lsls	r3, r3, #1
 800bb98:	e7ee      	b.n	800bb78 <__lshift+0x1c>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	f100 0114 	add.w	r1, r0, #20
 800bba0:	f100 0210 	add.w	r2, r0, #16
 800bba4:	4618      	mov	r0, r3
 800bba6:	4553      	cmp	r3, sl
 800bba8:	db33      	blt.n	800bc12 <__lshift+0xb6>
 800bbaa:	6920      	ldr	r0, [r4, #16]
 800bbac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbb0:	f104 0314 	add.w	r3, r4, #20
 800bbb4:	f019 091f 	ands.w	r9, r9, #31
 800bbb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbc0:	d02b      	beq.n	800bc1a <__lshift+0xbe>
 800bbc2:	468a      	mov	sl, r1
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f1c9 0e20 	rsb	lr, r9, #32
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	fa00 f009 	lsl.w	r0, r0, r9
 800bbd0:	4310      	orrs	r0, r2
 800bbd2:	f84a 0b04 	str.w	r0, [sl], #4
 800bbd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbda:	459c      	cmp	ip, r3
 800bbdc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bbe0:	d8f3      	bhi.n	800bbca <__lshift+0x6e>
 800bbe2:	ebac 0304 	sub.w	r3, ip, r4
 800bbe6:	3b15      	subs	r3, #21
 800bbe8:	f023 0303 	bic.w	r3, r3, #3
 800bbec:	3304      	adds	r3, #4
 800bbee:	f104 0015 	add.w	r0, r4, #21
 800bbf2:	4560      	cmp	r0, ip
 800bbf4:	bf88      	it	hi
 800bbf6:	2304      	movhi	r3, #4
 800bbf8:	50ca      	str	r2, [r1, r3]
 800bbfa:	b10a      	cbz	r2, 800bc00 <__lshift+0xa4>
 800bbfc:	f108 0602 	add.w	r6, r8, #2
 800bc00:	3e01      	subs	r6, #1
 800bc02:	4638      	mov	r0, r7
 800bc04:	4621      	mov	r1, r4
 800bc06:	612e      	str	r6, [r5, #16]
 800bc08:	f7ff fd98 	bl	800b73c <_Bfree>
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc12:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc16:	3301      	adds	r3, #1
 800bc18:	e7c5      	b.n	800bba6 <__lshift+0x4a>
 800bc1a:	3904      	subs	r1, #4
 800bc1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc20:	459c      	cmp	ip, r3
 800bc22:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc26:	d8f9      	bhi.n	800bc1c <__lshift+0xc0>
 800bc28:	e7ea      	b.n	800bc00 <__lshift+0xa4>
 800bc2a:	bf00      	nop
 800bc2c:	0800cbda 	.word	0x0800cbda
 800bc30:	0800cc4b 	.word	0x0800cc4b

0800bc34 <__mcmp>:
 800bc34:	4603      	mov	r3, r0
 800bc36:	690a      	ldr	r2, [r1, #16]
 800bc38:	6900      	ldr	r0, [r0, #16]
 800bc3a:	b530      	push	{r4, r5, lr}
 800bc3c:	1a80      	subs	r0, r0, r2
 800bc3e:	d10e      	bne.n	800bc5e <__mcmp+0x2a>
 800bc40:	3314      	adds	r3, #20
 800bc42:	3114      	adds	r1, #20
 800bc44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc54:	4295      	cmp	r5, r2
 800bc56:	d003      	beq.n	800bc60 <__mcmp+0x2c>
 800bc58:	d205      	bcs.n	800bc66 <__mcmp+0x32>
 800bc5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5e:	bd30      	pop	{r4, r5, pc}
 800bc60:	42a3      	cmp	r3, r4
 800bc62:	d3f3      	bcc.n	800bc4c <__mcmp+0x18>
 800bc64:	e7fb      	b.n	800bc5e <__mcmp+0x2a>
 800bc66:	2001      	movs	r0, #1
 800bc68:	e7f9      	b.n	800bc5e <__mcmp+0x2a>
	...

0800bc6c <__mdiff>:
 800bc6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	4689      	mov	r9, r1
 800bc72:	4606      	mov	r6, r0
 800bc74:	4611      	mov	r1, r2
 800bc76:	4648      	mov	r0, r9
 800bc78:	4614      	mov	r4, r2
 800bc7a:	f7ff ffdb 	bl	800bc34 <__mcmp>
 800bc7e:	1e05      	subs	r5, r0, #0
 800bc80:	d112      	bne.n	800bca8 <__mdiff+0x3c>
 800bc82:	4629      	mov	r1, r5
 800bc84:	4630      	mov	r0, r6
 800bc86:	f7ff fd19 	bl	800b6bc <_Balloc>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	b928      	cbnz	r0, 800bc9a <__mdiff+0x2e>
 800bc8e:	f240 2137 	movw	r1, #567	@ 0x237
 800bc92:	4b3e      	ldr	r3, [pc, #248]	@ (800bd8c <__mdiff+0x120>)
 800bc94:	483e      	ldr	r0, [pc, #248]	@ (800bd90 <__mdiff+0x124>)
 800bc96:	f000 fbe7 	bl	800c468 <__assert_func>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bca0:	4610      	mov	r0, r2
 800bca2:	b003      	add	sp, #12
 800bca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca8:	bfbc      	itt	lt
 800bcaa:	464b      	movlt	r3, r9
 800bcac:	46a1      	movlt	r9, r4
 800bcae:	4630      	mov	r0, r6
 800bcb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bcb4:	bfba      	itte	lt
 800bcb6:	461c      	movlt	r4, r3
 800bcb8:	2501      	movlt	r5, #1
 800bcba:	2500      	movge	r5, #0
 800bcbc:	f7ff fcfe 	bl	800b6bc <_Balloc>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	b918      	cbnz	r0, 800bccc <__mdiff+0x60>
 800bcc4:	f240 2145 	movw	r1, #581	@ 0x245
 800bcc8:	4b30      	ldr	r3, [pc, #192]	@ (800bd8c <__mdiff+0x120>)
 800bcca:	e7e3      	b.n	800bc94 <__mdiff+0x28>
 800bccc:	f100 0b14 	add.w	fp, r0, #20
 800bcd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bcd4:	f109 0310 	add.w	r3, r9, #16
 800bcd8:	60c5      	str	r5, [r0, #12]
 800bcda:	f04f 0c00 	mov.w	ip, #0
 800bcde:	f109 0514 	add.w	r5, r9, #20
 800bce2:	46d9      	mov	r9, fp
 800bce4:	6926      	ldr	r6, [r4, #16]
 800bce6:	f104 0e14 	add.w	lr, r4, #20
 800bcea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bcee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bcf2:	9301      	str	r3, [sp, #4]
 800bcf4:	9b01      	ldr	r3, [sp, #4]
 800bcf6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bcfa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bcfe:	b281      	uxth	r1, r0
 800bd00:	9301      	str	r3, [sp, #4]
 800bd02:	fa1f f38a 	uxth.w	r3, sl
 800bd06:	1a5b      	subs	r3, r3, r1
 800bd08:	0c00      	lsrs	r0, r0, #16
 800bd0a:	4463      	add	r3, ip
 800bd0c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd10:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd1a:	4576      	cmp	r6, lr
 800bd1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd20:	f849 3b04 	str.w	r3, [r9], #4
 800bd24:	d8e6      	bhi.n	800bcf4 <__mdiff+0x88>
 800bd26:	1b33      	subs	r3, r6, r4
 800bd28:	3b15      	subs	r3, #21
 800bd2a:	f023 0303 	bic.w	r3, r3, #3
 800bd2e:	3415      	adds	r4, #21
 800bd30:	3304      	adds	r3, #4
 800bd32:	42a6      	cmp	r6, r4
 800bd34:	bf38      	it	cc
 800bd36:	2304      	movcc	r3, #4
 800bd38:	441d      	add	r5, r3
 800bd3a:	445b      	add	r3, fp
 800bd3c:	461e      	mov	r6, r3
 800bd3e:	462c      	mov	r4, r5
 800bd40:	4544      	cmp	r4, r8
 800bd42:	d30e      	bcc.n	800bd62 <__mdiff+0xf6>
 800bd44:	f108 0103 	add.w	r1, r8, #3
 800bd48:	1b49      	subs	r1, r1, r5
 800bd4a:	f021 0103 	bic.w	r1, r1, #3
 800bd4e:	3d03      	subs	r5, #3
 800bd50:	45a8      	cmp	r8, r5
 800bd52:	bf38      	it	cc
 800bd54:	2100      	movcc	r1, #0
 800bd56:	440b      	add	r3, r1
 800bd58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd5c:	b199      	cbz	r1, 800bd86 <__mdiff+0x11a>
 800bd5e:	6117      	str	r7, [r2, #16]
 800bd60:	e79e      	b.n	800bca0 <__mdiff+0x34>
 800bd62:	46e6      	mov	lr, ip
 800bd64:	f854 1b04 	ldr.w	r1, [r4], #4
 800bd68:	fa1f fc81 	uxth.w	ip, r1
 800bd6c:	44f4      	add	ip, lr
 800bd6e:	0c08      	lsrs	r0, r1, #16
 800bd70:	4471      	add	r1, lr
 800bd72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bd76:	b289      	uxth	r1, r1
 800bd78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bd7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd80:	f846 1b04 	str.w	r1, [r6], #4
 800bd84:	e7dc      	b.n	800bd40 <__mdiff+0xd4>
 800bd86:	3f01      	subs	r7, #1
 800bd88:	e7e6      	b.n	800bd58 <__mdiff+0xec>
 800bd8a:	bf00      	nop
 800bd8c:	0800cbda 	.word	0x0800cbda
 800bd90:	0800cc4b 	.word	0x0800cc4b

0800bd94 <__ulp>:
 800bd94:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd0 <__ulp+0x3c>)
 800bd96:	400b      	ands	r3, r1
 800bd98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	dc08      	bgt.n	800bdb2 <__ulp+0x1e>
 800bda0:	425b      	negs	r3, r3
 800bda2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bda6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bdaa:	da04      	bge.n	800bdb6 <__ulp+0x22>
 800bdac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bdb0:	4113      	asrs	r3, r2
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	e008      	b.n	800bdc8 <__ulp+0x34>
 800bdb6:	f1a2 0314 	sub.w	r3, r2, #20
 800bdba:	2b1e      	cmp	r3, #30
 800bdbc:	bfd6      	itet	le
 800bdbe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bdc2:	2201      	movgt	r2, #1
 800bdc4:	40da      	lsrle	r2, r3
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	4619      	mov	r1, r3
 800bdca:	4610      	mov	r0, r2
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	7ff00000 	.word	0x7ff00000

0800bdd4 <__b2d>:
 800bdd4:	6902      	ldr	r2, [r0, #16]
 800bdd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd8:	f100 0614 	add.w	r6, r0, #20
 800bddc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800bde0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800bde4:	4f1e      	ldr	r7, [pc, #120]	@ (800be60 <__b2d+0x8c>)
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7ff fd5a 	bl	800b8a0 <__hi0bits>
 800bdec:	4603      	mov	r3, r0
 800bdee:	f1c0 0020 	rsb	r0, r0, #32
 800bdf2:	2b0a      	cmp	r3, #10
 800bdf4:	f1a2 0504 	sub.w	r5, r2, #4
 800bdf8:	6008      	str	r0, [r1, #0]
 800bdfa:	dc12      	bgt.n	800be22 <__b2d+0x4e>
 800bdfc:	42ae      	cmp	r6, r5
 800bdfe:	bf2c      	ite	cs
 800be00:	2200      	movcs	r2, #0
 800be02:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800be06:	f1c3 0c0b 	rsb	ip, r3, #11
 800be0a:	3315      	adds	r3, #21
 800be0c:	fa24 fe0c 	lsr.w	lr, r4, ip
 800be10:	fa04 f303 	lsl.w	r3, r4, r3
 800be14:	fa22 f20c 	lsr.w	r2, r2, ip
 800be18:	ea4e 0107 	orr.w	r1, lr, r7
 800be1c:	431a      	orrs	r2, r3
 800be1e:	4610      	mov	r0, r2
 800be20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be22:	42ae      	cmp	r6, r5
 800be24:	bf36      	itet	cc
 800be26:	f1a2 0508 	subcc.w	r5, r2, #8
 800be2a:	2200      	movcs	r2, #0
 800be2c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800be30:	3b0b      	subs	r3, #11
 800be32:	d012      	beq.n	800be5a <__b2d+0x86>
 800be34:	f1c3 0720 	rsb	r7, r3, #32
 800be38:	fa22 f107 	lsr.w	r1, r2, r7
 800be3c:	409c      	lsls	r4, r3
 800be3e:	430c      	orrs	r4, r1
 800be40:	42b5      	cmp	r5, r6
 800be42:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800be46:	bf94      	ite	ls
 800be48:	2400      	movls	r4, #0
 800be4a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800be4e:	409a      	lsls	r2, r3
 800be50:	40fc      	lsrs	r4, r7
 800be52:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800be56:	4322      	orrs	r2, r4
 800be58:	e7e1      	b.n	800be1e <__b2d+0x4a>
 800be5a:	ea44 0107 	orr.w	r1, r4, r7
 800be5e:	e7de      	b.n	800be1e <__b2d+0x4a>
 800be60:	3ff00000 	.word	0x3ff00000

0800be64 <__d2b>:
 800be64:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800be68:	2101      	movs	r1, #1
 800be6a:	4690      	mov	r8, r2
 800be6c:	4699      	mov	r9, r3
 800be6e:	9e08      	ldr	r6, [sp, #32]
 800be70:	f7ff fc24 	bl	800b6bc <_Balloc>
 800be74:	4604      	mov	r4, r0
 800be76:	b930      	cbnz	r0, 800be86 <__d2b+0x22>
 800be78:	4602      	mov	r2, r0
 800be7a:	f240 310f 	movw	r1, #783	@ 0x30f
 800be7e:	4b23      	ldr	r3, [pc, #140]	@ (800bf0c <__d2b+0xa8>)
 800be80:	4823      	ldr	r0, [pc, #140]	@ (800bf10 <__d2b+0xac>)
 800be82:	f000 faf1 	bl	800c468 <__assert_func>
 800be86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be8e:	b10d      	cbz	r5, 800be94 <__d2b+0x30>
 800be90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be94:	9301      	str	r3, [sp, #4]
 800be96:	f1b8 0300 	subs.w	r3, r8, #0
 800be9a:	d024      	beq.n	800bee6 <__d2b+0x82>
 800be9c:	4668      	mov	r0, sp
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	f7ff fd1d 	bl	800b8de <__lo0bits>
 800bea4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bea8:	b1d8      	cbz	r0, 800bee2 <__d2b+0x7e>
 800beaa:	f1c0 0320 	rsb	r3, r0, #32
 800beae:	fa02 f303 	lsl.w	r3, r2, r3
 800beb2:	430b      	orrs	r3, r1
 800beb4:	40c2      	lsrs	r2, r0
 800beb6:	6163      	str	r3, [r4, #20]
 800beb8:	9201      	str	r2, [sp, #4]
 800beba:	9b01      	ldr	r3, [sp, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	bf0c      	ite	eq
 800bec0:	2201      	moveq	r2, #1
 800bec2:	2202      	movne	r2, #2
 800bec4:	61a3      	str	r3, [r4, #24]
 800bec6:	6122      	str	r2, [r4, #16]
 800bec8:	b1ad      	cbz	r5, 800bef6 <__d2b+0x92>
 800beca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bece:	4405      	add	r5, r0
 800bed0:	6035      	str	r5, [r6, #0]
 800bed2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed8:	6018      	str	r0, [r3, #0]
 800beda:	4620      	mov	r0, r4
 800bedc:	b002      	add	sp, #8
 800bede:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bee2:	6161      	str	r1, [r4, #20]
 800bee4:	e7e9      	b.n	800beba <__d2b+0x56>
 800bee6:	a801      	add	r0, sp, #4
 800bee8:	f7ff fcf9 	bl	800b8de <__lo0bits>
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	2201      	movs	r2, #1
 800bef0:	6163      	str	r3, [r4, #20]
 800bef2:	3020      	adds	r0, #32
 800bef4:	e7e7      	b.n	800bec6 <__d2b+0x62>
 800bef6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800befa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800befe:	6030      	str	r0, [r6, #0]
 800bf00:	6918      	ldr	r0, [r3, #16]
 800bf02:	f7ff fccd 	bl	800b8a0 <__hi0bits>
 800bf06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf0a:	e7e4      	b.n	800bed6 <__d2b+0x72>
 800bf0c:	0800cbda 	.word	0x0800cbda
 800bf10:	0800cc4b 	.word	0x0800cc4b

0800bf14 <__ratio>:
 800bf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf18:	b085      	sub	sp, #20
 800bf1a:	e9cd 1000 	strd	r1, r0, [sp]
 800bf1e:	a902      	add	r1, sp, #8
 800bf20:	f7ff ff58 	bl	800bdd4 <__b2d>
 800bf24:	468b      	mov	fp, r1
 800bf26:	4606      	mov	r6, r0
 800bf28:	460f      	mov	r7, r1
 800bf2a:	9800      	ldr	r0, [sp, #0]
 800bf2c:	a903      	add	r1, sp, #12
 800bf2e:	f7ff ff51 	bl	800bdd4 <__b2d>
 800bf32:	460d      	mov	r5, r1
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	4689      	mov	r9, r1
 800bf38:	6919      	ldr	r1, [r3, #16]
 800bf3a:	9b00      	ldr	r3, [sp, #0]
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	4630      	mov	r0, r6
 800bf42:	1ac9      	subs	r1, r1, r3
 800bf44:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bf48:	1a9b      	subs	r3, r3, r2
 800bf4a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	bfcd      	iteet	gt
 800bf52:	463a      	movgt	r2, r7
 800bf54:	462a      	movle	r2, r5
 800bf56:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf5a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bf5e:	bfd8      	it	le
 800bf60:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bf64:	464b      	mov	r3, r9
 800bf66:	4622      	mov	r2, r4
 800bf68:	4659      	mov	r1, fp
 800bf6a:	f7f4 fbdf 	bl	800072c <__aeabi_ddiv>
 800bf6e:	b005      	add	sp, #20
 800bf70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf74 <__copybits>:
 800bf74:	3901      	subs	r1, #1
 800bf76:	b570      	push	{r4, r5, r6, lr}
 800bf78:	1149      	asrs	r1, r1, #5
 800bf7a:	6914      	ldr	r4, [r2, #16]
 800bf7c:	3101      	adds	r1, #1
 800bf7e:	f102 0314 	add.w	r3, r2, #20
 800bf82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf8a:	1f05      	subs	r5, r0, #4
 800bf8c:	42a3      	cmp	r3, r4
 800bf8e:	d30c      	bcc.n	800bfaa <__copybits+0x36>
 800bf90:	1aa3      	subs	r3, r4, r2
 800bf92:	3b11      	subs	r3, #17
 800bf94:	f023 0303 	bic.w	r3, r3, #3
 800bf98:	3211      	adds	r2, #17
 800bf9a:	42a2      	cmp	r2, r4
 800bf9c:	bf88      	it	hi
 800bf9e:	2300      	movhi	r3, #0
 800bfa0:	4418      	add	r0, r3
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	4288      	cmp	r0, r1
 800bfa6:	d305      	bcc.n	800bfb4 <__copybits+0x40>
 800bfa8:	bd70      	pop	{r4, r5, r6, pc}
 800bfaa:	f853 6b04 	ldr.w	r6, [r3], #4
 800bfae:	f845 6f04 	str.w	r6, [r5, #4]!
 800bfb2:	e7eb      	b.n	800bf8c <__copybits+0x18>
 800bfb4:	f840 3b04 	str.w	r3, [r0], #4
 800bfb8:	e7f4      	b.n	800bfa4 <__copybits+0x30>

0800bfba <__any_on>:
 800bfba:	f100 0214 	add.w	r2, r0, #20
 800bfbe:	6900      	ldr	r0, [r0, #16]
 800bfc0:	114b      	asrs	r3, r1, #5
 800bfc2:	4298      	cmp	r0, r3
 800bfc4:	b510      	push	{r4, lr}
 800bfc6:	db11      	blt.n	800bfec <__any_on+0x32>
 800bfc8:	dd0a      	ble.n	800bfe0 <__any_on+0x26>
 800bfca:	f011 011f 	ands.w	r1, r1, #31
 800bfce:	d007      	beq.n	800bfe0 <__any_on+0x26>
 800bfd0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bfd4:	fa24 f001 	lsr.w	r0, r4, r1
 800bfd8:	fa00 f101 	lsl.w	r1, r0, r1
 800bfdc:	428c      	cmp	r4, r1
 800bfde:	d10b      	bne.n	800bff8 <__any_on+0x3e>
 800bfe0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d803      	bhi.n	800bff0 <__any_on+0x36>
 800bfe8:	2000      	movs	r0, #0
 800bfea:	bd10      	pop	{r4, pc}
 800bfec:	4603      	mov	r3, r0
 800bfee:	e7f7      	b.n	800bfe0 <__any_on+0x26>
 800bff0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bff4:	2900      	cmp	r1, #0
 800bff6:	d0f5      	beq.n	800bfe4 <__any_on+0x2a>
 800bff8:	2001      	movs	r0, #1
 800bffa:	e7f6      	b.n	800bfea <__any_on+0x30>

0800bffc <__ascii_wctomb>:
 800bffc:	4603      	mov	r3, r0
 800bffe:	4608      	mov	r0, r1
 800c000:	b141      	cbz	r1, 800c014 <__ascii_wctomb+0x18>
 800c002:	2aff      	cmp	r2, #255	@ 0xff
 800c004:	d904      	bls.n	800c010 <__ascii_wctomb+0x14>
 800c006:	228a      	movs	r2, #138	@ 0x8a
 800c008:	f04f 30ff 	mov.w	r0, #4294967295
 800c00c:	601a      	str	r2, [r3, #0]
 800c00e:	4770      	bx	lr
 800c010:	2001      	movs	r0, #1
 800c012:	700a      	strb	r2, [r1, #0]
 800c014:	4770      	bx	lr

0800c016 <__ssputs_r>:
 800c016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c01a:	461f      	mov	r7, r3
 800c01c:	688e      	ldr	r6, [r1, #8]
 800c01e:	4682      	mov	sl, r0
 800c020:	42be      	cmp	r6, r7
 800c022:	460c      	mov	r4, r1
 800c024:	4690      	mov	r8, r2
 800c026:	680b      	ldr	r3, [r1, #0]
 800c028:	d82d      	bhi.n	800c086 <__ssputs_r+0x70>
 800c02a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c02e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c032:	d026      	beq.n	800c082 <__ssputs_r+0x6c>
 800c034:	6965      	ldr	r5, [r4, #20]
 800c036:	6909      	ldr	r1, [r1, #16]
 800c038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c03c:	eba3 0901 	sub.w	r9, r3, r1
 800c040:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c044:	1c7b      	adds	r3, r7, #1
 800c046:	444b      	add	r3, r9
 800c048:	106d      	asrs	r5, r5, #1
 800c04a:	429d      	cmp	r5, r3
 800c04c:	bf38      	it	cc
 800c04e:	461d      	movcc	r5, r3
 800c050:	0553      	lsls	r3, r2, #21
 800c052:	d527      	bpl.n	800c0a4 <__ssputs_r+0x8e>
 800c054:	4629      	mov	r1, r5
 800c056:	f7ff fa93 	bl	800b580 <_malloc_r>
 800c05a:	4606      	mov	r6, r0
 800c05c:	b360      	cbz	r0, 800c0b8 <__ssputs_r+0xa2>
 800c05e:	464a      	mov	r2, r9
 800c060:	6921      	ldr	r1, [r4, #16]
 800c062:	f7fe f86e 	bl	800a142 <memcpy>
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c06c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c070:	81a3      	strh	r3, [r4, #12]
 800c072:	6126      	str	r6, [r4, #16]
 800c074:	444e      	add	r6, r9
 800c076:	6026      	str	r6, [r4, #0]
 800c078:	463e      	mov	r6, r7
 800c07a:	6165      	str	r5, [r4, #20]
 800c07c:	eba5 0509 	sub.w	r5, r5, r9
 800c080:	60a5      	str	r5, [r4, #8]
 800c082:	42be      	cmp	r6, r7
 800c084:	d900      	bls.n	800c088 <__ssputs_r+0x72>
 800c086:	463e      	mov	r6, r7
 800c088:	4632      	mov	r2, r6
 800c08a:	4641      	mov	r1, r8
 800c08c:	6820      	ldr	r0, [r4, #0]
 800c08e:	f000 f9c1 	bl	800c414 <memmove>
 800c092:	2000      	movs	r0, #0
 800c094:	68a3      	ldr	r3, [r4, #8]
 800c096:	1b9b      	subs	r3, r3, r6
 800c098:	60a3      	str	r3, [r4, #8]
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	4433      	add	r3, r6
 800c09e:	6023      	str	r3, [r4, #0]
 800c0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a4:	462a      	mov	r2, r5
 800c0a6:	f000 fa11 	bl	800c4cc <_realloc_r>
 800c0aa:	4606      	mov	r6, r0
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d1e0      	bne.n	800c072 <__ssputs_r+0x5c>
 800c0b0:	4650      	mov	r0, sl
 800c0b2:	6921      	ldr	r1, [r4, #16]
 800c0b4:	f7fe feb8 	bl	800ae28 <_free_r>
 800c0b8:	230c      	movs	r3, #12
 800c0ba:	f8ca 3000 	str.w	r3, [sl]
 800c0be:	89a3      	ldrh	r3, [r4, #12]
 800c0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	e7e9      	b.n	800c0a0 <__ssputs_r+0x8a>

0800c0cc <_svfiprintf_r>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	4698      	mov	r8, r3
 800c0d2:	898b      	ldrh	r3, [r1, #12]
 800c0d4:	4607      	mov	r7, r0
 800c0d6:	061b      	lsls	r3, r3, #24
 800c0d8:	460d      	mov	r5, r1
 800c0da:	4614      	mov	r4, r2
 800c0dc:	b09d      	sub	sp, #116	@ 0x74
 800c0de:	d510      	bpl.n	800c102 <_svfiprintf_r+0x36>
 800c0e0:	690b      	ldr	r3, [r1, #16]
 800c0e2:	b973      	cbnz	r3, 800c102 <_svfiprintf_r+0x36>
 800c0e4:	2140      	movs	r1, #64	@ 0x40
 800c0e6:	f7ff fa4b 	bl	800b580 <_malloc_r>
 800c0ea:	6028      	str	r0, [r5, #0]
 800c0ec:	6128      	str	r0, [r5, #16]
 800c0ee:	b930      	cbnz	r0, 800c0fe <_svfiprintf_r+0x32>
 800c0f0:	230c      	movs	r3, #12
 800c0f2:	603b      	str	r3, [r7, #0]
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f8:	b01d      	add	sp, #116	@ 0x74
 800c0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fe:	2340      	movs	r3, #64	@ 0x40
 800c100:	616b      	str	r3, [r5, #20]
 800c102:	2300      	movs	r3, #0
 800c104:	9309      	str	r3, [sp, #36]	@ 0x24
 800c106:	2320      	movs	r3, #32
 800c108:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c10c:	2330      	movs	r3, #48	@ 0x30
 800c10e:	f04f 0901 	mov.w	r9, #1
 800c112:	f8cd 800c 	str.w	r8, [sp, #12]
 800c116:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c2b0 <_svfiprintf_r+0x1e4>
 800c11a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c11e:	4623      	mov	r3, r4
 800c120:	469a      	mov	sl, r3
 800c122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c126:	b10a      	cbz	r2, 800c12c <_svfiprintf_r+0x60>
 800c128:	2a25      	cmp	r2, #37	@ 0x25
 800c12a:	d1f9      	bne.n	800c120 <_svfiprintf_r+0x54>
 800c12c:	ebba 0b04 	subs.w	fp, sl, r4
 800c130:	d00b      	beq.n	800c14a <_svfiprintf_r+0x7e>
 800c132:	465b      	mov	r3, fp
 800c134:	4622      	mov	r2, r4
 800c136:	4629      	mov	r1, r5
 800c138:	4638      	mov	r0, r7
 800c13a:	f7ff ff6c 	bl	800c016 <__ssputs_r>
 800c13e:	3001      	adds	r0, #1
 800c140:	f000 80a7 	beq.w	800c292 <_svfiprintf_r+0x1c6>
 800c144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c146:	445a      	add	r2, fp
 800c148:	9209      	str	r2, [sp, #36]	@ 0x24
 800c14a:	f89a 3000 	ldrb.w	r3, [sl]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f000 809f 	beq.w	800c292 <_svfiprintf_r+0x1c6>
 800c154:	2300      	movs	r3, #0
 800c156:	f04f 32ff 	mov.w	r2, #4294967295
 800c15a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c15e:	f10a 0a01 	add.w	sl, sl, #1
 800c162:	9304      	str	r3, [sp, #16]
 800c164:	9307      	str	r3, [sp, #28]
 800c166:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c16a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c16c:	4654      	mov	r4, sl
 800c16e:	2205      	movs	r2, #5
 800c170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c174:	484e      	ldr	r0, [pc, #312]	@ (800c2b0 <_svfiprintf_r+0x1e4>)
 800c176:	f7fd ffd6 	bl	800a126 <memchr>
 800c17a:	9a04      	ldr	r2, [sp, #16]
 800c17c:	b9d8      	cbnz	r0, 800c1b6 <_svfiprintf_r+0xea>
 800c17e:	06d0      	lsls	r0, r2, #27
 800c180:	bf44      	itt	mi
 800c182:	2320      	movmi	r3, #32
 800c184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c188:	0711      	lsls	r1, r2, #28
 800c18a:	bf44      	itt	mi
 800c18c:	232b      	movmi	r3, #43	@ 0x2b
 800c18e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c192:	f89a 3000 	ldrb.w	r3, [sl]
 800c196:	2b2a      	cmp	r3, #42	@ 0x2a
 800c198:	d015      	beq.n	800c1c6 <_svfiprintf_r+0xfa>
 800c19a:	4654      	mov	r4, sl
 800c19c:	2000      	movs	r0, #0
 800c19e:	f04f 0c0a 	mov.w	ip, #10
 800c1a2:	9a07      	ldr	r2, [sp, #28]
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1aa:	3b30      	subs	r3, #48	@ 0x30
 800c1ac:	2b09      	cmp	r3, #9
 800c1ae:	d94b      	bls.n	800c248 <_svfiprintf_r+0x17c>
 800c1b0:	b1b0      	cbz	r0, 800c1e0 <_svfiprintf_r+0x114>
 800c1b2:	9207      	str	r2, [sp, #28]
 800c1b4:	e014      	b.n	800c1e0 <_svfiprintf_r+0x114>
 800c1b6:	eba0 0308 	sub.w	r3, r0, r8
 800c1ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	46a2      	mov	sl, r4
 800c1c2:	9304      	str	r3, [sp, #16]
 800c1c4:	e7d2      	b.n	800c16c <_svfiprintf_r+0xa0>
 800c1c6:	9b03      	ldr	r3, [sp, #12]
 800c1c8:	1d19      	adds	r1, r3, #4
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	9103      	str	r1, [sp, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	bfbb      	ittet	lt
 800c1d2:	425b      	neglt	r3, r3
 800c1d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d8:	9307      	strge	r3, [sp, #28]
 800c1da:	9307      	strlt	r3, [sp, #28]
 800c1dc:	bfb8      	it	lt
 800c1de:	9204      	strlt	r2, [sp, #16]
 800c1e0:	7823      	ldrb	r3, [r4, #0]
 800c1e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1e4:	d10a      	bne.n	800c1fc <_svfiprintf_r+0x130>
 800c1e6:	7863      	ldrb	r3, [r4, #1]
 800c1e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1ea:	d132      	bne.n	800c252 <_svfiprintf_r+0x186>
 800c1ec:	9b03      	ldr	r3, [sp, #12]
 800c1ee:	3402      	adds	r4, #2
 800c1f0:	1d1a      	adds	r2, r3, #4
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	9203      	str	r2, [sp, #12]
 800c1f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1fa:	9305      	str	r3, [sp, #20]
 800c1fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c2b4 <_svfiprintf_r+0x1e8>
 800c200:	2203      	movs	r2, #3
 800c202:	4650      	mov	r0, sl
 800c204:	7821      	ldrb	r1, [r4, #0]
 800c206:	f7fd ff8e 	bl	800a126 <memchr>
 800c20a:	b138      	cbz	r0, 800c21c <_svfiprintf_r+0x150>
 800c20c:	2240      	movs	r2, #64	@ 0x40
 800c20e:	9b04      	ldr	r3, [sp, #16]
 800c210:	eba0 000a 	sub.w	r0, r0, sl
 800c214:	4082      	lsls	r2, r0
 800c216:	4313      	orrs	r3, r2
 800c218:	3401      	adds	r4, #1
 800c21a:	9304      	str	r3, [sp, #16]
 800c21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c220:	2206      	movs	r2, #6
 800c222:	4825      	ldr	r0, [pc, #148]	@ (800c2b8 <_svfiprintf_r+0x1ec>)
 800c224:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c228:	f7fd ff7d 	bl	800a126 <memchr>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d036      	beq.n	800c29e <_svfiprintf_r+0x1d2>
 800c230:	4b22      	ldr	r3, [pc, #136]	@ (800c2bc <_svfiprintf_r+0x1f0>)
 800c232:	bb1b      	cbnz	r3, 800c27c <_svfiprintf_r+0x1b0>
 800c234:	9b03      	ldr	r3, [sp, #12]
 800c236:	3307      	adds	r3, #7
 800c238:	f023 0307 	bic.w	r3, r3, #7
 800c23c:	3308      	adds	r3, #8
 800c23e:	9303      	str	r3, [sp, #12]
 800c240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c242:	4433      	add	r3, r6
 800c244:	9309      	str	r3, [sp, #36]	@ 0x24
 800c246:	e76a      	b.n	800c11e <_svfiprintf_r+0x52>
 800c248:	460c      	mov	r4, r1
 800c24a:	2001      	movs	r0, #1
 800c24c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c250:	e7a8      	b.n	800c1a4 <_svfiprintf_r+0xd8>
 800c252:	2300      	movs	r3, #0
 800c254:	f04f 0c0a 	mov.w	ip, #10
 800c258:	4619      	mov	r1, r3
 800c25a:	3401      	adds	r4, #1
 800c25c:	9305      	str	r3, [sp, #20]
 800c25e:	4620      	mov	r0, r4
 800c260:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c264:	3a30      	subs	r2, #48	@ 0x30
 800c266:	2a09      	cmp	r2, #9
 800c268:	d903      	bls.n	800c272 <_svfiprintf_r+0x1a6>
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d0c6      	beq.n	800c1fc <_svfiprintf_r+0x130>
 800c26e:	9105      	str	r1, [sp, #20]
 800c270:	e7c4      	b.n	800c1fc <_svfiprintf_r+0x130>
 800c272:	4604      	mov	r4, r0
 800c274:	2301      	movs	r3, #1
 800c276:	fb0c 2101 	mla	r1, ip, r1, r2
 800c27a:	e7f0      	b.n	800c25e <_svfiprintf_r+0x192>
 800c27c:	ab03      	add	r3, sp, #12
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	462a      	mov	r2, r5
 800c282:	4638      	mov	r0, r7
 800c284:	4b0e      	ldr	r3, [pc, #56]	@ (800c2c0 <_svfiprintf_r+0x1f4>)
 800c286:	a904      	add	r1, sp, #16
 800c288:	f7fd f9c4 	bl	8009614 <_printf_float>
 800c28c:	1c42      	adds	r2, r0, #1
 800c28e:	4606      	mov	r6, r0
 800c290:	d1d6      	bne.n	800c240 <_svfiprintf_r+0x174>
 800c292:	89ab      	ldrh	r3, [r5, #12]
 800c294:	065b      	lsls	r3, r3, #25
 800c296:	f53f af2d 	bmi.w	800c0f4 <_svfiprintf_r+0x28>
 800c29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c29c:	e72c      	b.n	800c0f8 <_svfiprintf_r+0x2c>
 800c29e:	ab03      	add	r3, sp, #12
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	462a      	mov	r2, r5
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	4b06      	ldr	r3, [pc, #24]	@ (800c2c0 <_svfiprintf_r+0x1f4>)
 800c2a8:	a904      	add	r1, sp, #16
 800c2aa:	f7fd fc51 	bl	8009b50 <_printf_i>
 800c2ae:	e7ed      	b.n	800c28c <_svfiprintf_r+0x1c0>
 800c2b0:	0800cca4 	.word	0x0800cca4
 800c2b4:	0800ccaa 	.word	0x0800ccaa
 800c2b8:	0800ccae 	.word	0x0800ccae
 800c2bc:	08009615 	.word	0x08009615
 800c2c0:	0800c017 	.word	0x0800c017

0800c2c4 <__sflush_r>:
 800c2c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ca:	0716      	lsls	r6, r2, #28
 800c2cc:	4605      	mov	r5, r0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	d454      	bmi.n	800c37c <__sflush_r+0xb8>
 800c2d2:	684b      	ldr	r3, [r1, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	dc02      	bgt.n	800c2de <__sflush_r+0x1a>
 800c2d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	dd48      	ble.n	800c370 <__sflush_r+0xac>
 800c2de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c2e0:	2e00      	cmp	r6, #0
 800c2e2:	d045      	beq.n	800c370 <__sflush_r+0xac>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c2ea:	682f      	ldr	r7, [r5, #0]
 800c2ec:	6a21      	ldr	r1, [r4, #32]
 800c2ee:	602b      	str	r3, [r5, #0]
 800c2f0:	d030      	beq.n	800c354 <__sflush_r+0x90>
 800c2f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c2f4:	89a3      	ldrh	r3, [r4, #12]
 800c2f6:	0759      	lsls	r1, r3, #29
 800c2f8:	d505      	bpl.n	800c306 <__sflush_r+0x42>
 800c2fa:	6863      	ldr	r3, [r4, #4]
 800c2fc:	1ad2      	subs	r2, r2, r3
 800c2fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c300:	b10b      	cbz	r3, 800c306 <__sflush_r+0x42>
 800c302:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c304:	1ad2      	subs	r2, r2, r3
 800c306:	2300      	movs	r3, #0
 800c308:	4628      	mov	r0, r5
 800c30a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c30c:	6a21      	ldr	r1, [r4, #32]
 800c30e:	47b0      	blx	r6
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	d106      	bne.n	800c324 <__sflush_r+0x60>
 800c316:	6829      	ldr	r1, [r5, #0]
 800c318:	291d      	cmp	r1, #29
 800c31a:	d82b      	bhi.n	800c374 <__sflush_r+0xb0>
 800c31c:	4a28      	ldr	r2, [pc, #160]	@ (800c3c0 <__sflush_r+0xfc>)
 800c31e:	40ca      	lsrs	r2, r1
 800c320:	07d6      	lsls	r6, r2, #31
 800c322:	d527      	bpl.n	800c374 <__sflush_r+0xb0>
 800c324:	2200      	movs	r2, #0
 800c326:	6062      	str	r2, [r4, #4]
 800c328:	6922      	ldr	r2, [r4, #16]
 800c32a:	04d9      	lsls	r1, r3, #19
 800c32c:	6022      	str	r2, [r4, #0]
 800c32e:	d504      	bpl.n	800c33a <__sflush_r+0x76>
 800c330:	1c42      	adds	r2, r0, #1
 800c332:	d101      	bne.n	800c338 <__sflush_r+0x74>
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	b903      	cbnz	r3, 800c33a <__sflush_r+0x76>
 800c338:	6560      	str	r0, [r4, #84]	@ 0x54
 800c33a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c33c:	602f      	str	r7, [r5, #0]
 800c33e:	b1b9      	cbz	r1, 800c370 <__sflush_r+0xac>
 800c340:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c344:	4299      	cmp	r1, r3
 800c346:	d002      	beq.n	800c34e <__sflush_r+0x8a>
 800c348:	4628      	mov	r0, r5
 800c34a:	f7fe fd6d 	bl	800ae28 <_free_r>
 800c34e:	2300      	movs	r3, #0
 800c350:	6363      	str	r3, [r4, #52]	@ 0x34
 800c352:	e00d      	b.n	800c370 <__sflush_r+0xac>
 800c354:	2301      	movs	r3, #1
 800c356:	4628      	mov	r0, r5
 800c358:	47b0      	blx	r6
 800c35a:	4602      	mov	r2, r0
 800c35c:	1c50      	adds	r0, r2, #1
 800c35e:	d1c9      	bne.n	800c2f4 <__sflush_r+0x30>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0c6      	beq.n	800c2f4 <__sflush_r+0x30>
 800c366:	2b1d      	cmp	r3, #29
 800c368:	d001      	beq.n	800c36e <__sflush_r+0xaa>
 800c36a:	2b16      	cmp	r3, #22
 800c36c:	d11d      	bne.n	800c3aa <__sflush_r+0xe6>
 800c36e:	602f      	str	r7, [r5, #0]
 800c370:	2000      	movs	r0, #0
 800c372:	e021      	b.n	800c3b8 <__sflush_r+0xf4>
 800c374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c378:	b21b      	sxth	r3, r3
 800c37a:	e01a      	b.n	800c3b2 <__sflush_r+0xee>
 800c37c:	690f      	ldr	r7, [r1, #16]
 800c37e:	2f00      	cmp	r7, #0
 800c380:	d0f6      	beq.n	800c370 <__sflush_r+0xac>
 800c382:	0793      	lsls	r3, r2, #30
 800c384:	bf18      	it	ne
 800c386:	2300      	movne	r3, #0
 800c388:	680e      	ldr	r6, [r1, #0]
 800c38a:	bf08      	it	eq
 800c38c:	694b      	ldreq	r3, [r1, #20]
 800c38e:	1bf6      	subs	r6, r6, r7
 800c390:	600f      	str	r7, [r1, #0]
 800c392:	608b      	str	r3, [r1, #8]
 800c394:	2e00      	cmp	r6, #0
 800c396:	ddeb      	ble.n	800c370 <__sflush_r+0xac>
 800c398:	4633      	mov	r3, r6
 800c39a:	463a      	mov	r2, r7
 800c39c:	4628      	mov	r0, r5
 800c39e:	6a21      	ldr	r1, [r4, #32]
 800c3a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c3a4:	47e0      	blx	ip
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	dc07      	bgt.n	800c3ba <__sflush_r+0xf6>
 800c3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b6:	81a3      	strh	r3, [r4, #12]
 800c3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3ba:	4407      	add	r7, r0
 800c3bc:	1a36      	subs	r6, r6, r0
 800c3be:	e7e9      	b.n	800c394 <__sflush_r+0xd0>
 800c3c0:	20400001 	.word	0x20400001

0800c3c4 <_fflush_r>:
 800c3c4:	b538      	push	{r3, r4, r5, lr}
 800c3c6:	690b      	ldr	r3, [r1, #16]
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	b913      	cbnz	r3, 800c3d4 <_fflush_r+0x10>
 800c3ce:	2500      	movs	r5, #0
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	bd38      	pop	{r3, r4, r5, pc}
 800c3d4:	b118      	cbz	r0, 800c3de <_fflush_r+0x1a>
 800c3d6:	6a03      	ldr	r3, [r0, #32]
 800c3d8:	b90b      	cbnz	r3, 800c3de <_fflush_r+0x1a>
 800c3da:	f7fd fd63 	bl	8009ea4 <__sinit>
 800c3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d0f3      	beq.n	800c3ce <_fflush_r+0xa>
 800c3e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c3e8:	07d0      	lsls	r0, r2, #31
 800c3ea:	d404      	bmi.n	800c3f6 <_fflush_r+0x32>
 800c3ec:	0599      	lsls	r1, r3, #22
 800c3ee:	d402      	bmi.n	800c3f6 <_fflush_r+0x32>
 800c3f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3f2:	f7fd fe96 	bl	800a122 <__retarget_lock_acquire_recursive>
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	f7ff ff63 	bl	800c2c4 <__sflush_r>
 800c3fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c400:	4605      	mov	r5, r0
 800c402:	07da      	lsls	r2, r3, #31
 800c404:	d4e4      	bmi.n	800c3d0 <_fflush_r+0xc>
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	059b      	lsls	r3, r3, #22
 800c40a:	d4e1      	bmi.n	800c3d0 <_fflush_r+0xc>
 800c40c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c40e:	f7fd fe89 	bl	800a124 <__retarget_lock_release_recursive>
 800c412:	e7dd      	b.n	800c3d0 <_fflush_r+0xc>

0800c414 <memmove>:
 800c414:	4288      	cmp	r0, r1
 800c416:	b510      	push	{r4, lr}
 800c418:	eb01 0402 	add.w	r4, r1, r2
 800c41c:	d902      	bls.n	800c424 <memmove+0x10>
 800c41e:	4284      	cmp	r4, r0
 800c420:	4623      	mov	r3, r4
 800c422:	d807      	bhi.n	800c434 <memmove+0x20>
 800c424:	1e43      	subs	r3, r0, #1
 800c426:	42a1      	cmp	r1, r4
 800c428:	d008      	beq.n	800c43c <memmove+0x28>
 800c42a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c42e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c432:	e7f8      	b.n	800c426 <memmove+0x12>
 800c434:	4601      	mov	r1, r0
 800c436:	4402      	add	r2, r0
 800c438:	428a      	cmp	r2, r1
 800c43a:	d100      	bne.n	800c43e <memmove+0x2a>
 800c43c:	bd10      	pop	{r4, pc}
 800c43e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c446:	e7f7      	b.n	800c438 <memmove+0x24>

0800c448 <_sbrk_r>:
 800c448:	b538      	push	{r3, r4, r5, lr}
 800c44a:	2300      	movs	r3, #0
 800c44c:	4d05      	ldr	r5, [pc, #20]	@ (800c464 <_sbrk_r+0x1c>)
 800c44e:	4604      	mov	r4, r0
 800c450:	4608      	mov	r0, r1
 800c452:	602b      	str	r3, [r5, #0]
 800c454:	f7f6 fd6a 	bl	8002f2c <_sbrk>
 800c458:	1c43      	adds	r3, r0, #1
 800c45a:	d102      	bne.n	800c462 <_sbrk_r+0x1a>
 800c45c:	682b      	ldr	r3, [r5, #0]
 800c45e:	b103      	cbz	r3, 800c462 <_sbrk_r+0x1a>
 800c460:	6023      	str	r3, [r4, #0]
 800c462:	bd38      	pop	{r3, r4, r5, pc}
 800c464:	20000d20 	.word	0x20000d20

0800c468 <__assert_func>:
 800c468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c46a:	4614      	mov	r4, r2
 800c46c:	461a      	mov	r2, r3
 800c46e:	4b09      	ldr	r3, [pc, #36]	@ (800c494 <__assert_func+0x2c>)
 800c470:	4605      	mov	r5, r0
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68d8      	ldr	r0, [r3, #12]
 800c476:	b14c      	cbz	r4, 800c48c <__assert_func+0x24>
 800c478:	4b07      	ldr	r3, [pc, #28]	@ (800c498 <__assert_func+0x30>)
 800c47a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c47e:	9100      	str	r1, [sp, #0]
 800c480:	462b      	mov	r3, r5
 800c482:	4906      	ldr	r1, [pc, #24]	@ (800c49c <__assert_func+0x34>)
 800c484:	f000 f850 	bl	800c528 <fiprintf>
 800c488:	f000 f860 	bl	800c54c <abort>
 800c48c:	4b04      	ldr	r3, [pc, #16]	@ (800c4a0 <__assert_func+0x38>)
 800c48e:	461c      	mov	r4, r3
 800c490:	e7f3      	b.n	800c47a <__assert_func+0x12>
 800c492:	bf00      	nop
 800c494:	20000188 	.word	0x20000188
 800c498:	0800ccb5 	.word	0x0800ccb5
 800c49c:	0800ccc2 	.word	0x0800ccc2
 800c4a0:	0800ccf0 	.word	0x0800ccf0

0800c4a4 <_calloc_r>:
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	fba1 5402 	umull	r5, r4, r1, r2
 800c4aa:	b934      	cbnz	r4, 800c4ba <_calloc_r+0x16>
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	f7ff f867 	bl	800b580 <_malloc_r>
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	b928      	cbnz	r0, 800c4c2 <_calloc_r+0x1e>
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	bd70      	pop	{r4, r5, r6, pc}
 800c4ba:	220c      	movs	r2, #12
 800c4bc:	2600      	movs	r6, #0
 800c4be:	6002      	str	r2, [r0, #0]
 800c4c0:	e7f9      	b.n	800c4b6 <_calloc_r+0x12>
 800c4c2:	462a      	mov	r2, r5
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	f7fd fd9c 	bl	800a002 <memset>
 800c4ca:	e7f4      	b.n	800c4b6 <_calloc_r+0x12>

0800c4cc <_realloc_r>:
 800c4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d0:	4607      	mov	r7, r0
 800c4d2:	4614      	mov	r4, r2
 800c4d4:	460d      	mov	r5, r1
 800c4d6:	b921      	cbnz	r1, 800c4e2 <_realloc_r+0x16>
 800c4d8:	4611      	mov	r1, r2
 800c4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4de:	f7ff b84f 	b.w	800b580 <_malloc_r>
 800c4e2:	b92a      	cbnz	r2, 800c4f0 <_realloc_r+0x24>
 800c4e4:	f7fe fca0 	bl	800ae28 <_free_r>
 800c4e8:	4625      	mov	r5, r4
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4f0:	f000 f833 	bl	800c55a <_malloc_usable_size_r>
 800c4f4:	4284      	cmp	r4, r0
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	d802      	bhi.n	800c500 <_realloc_r+0x34>
 800c4fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4fe:	d8f4      	bhi.n	800c4ea <_realloc_r+0x1e>
 800c500:	4621      	mov	r1, r4
 800c502:	4638      	mov	r0, r7
 800c504:	f7ff f83c 	bl	800b580 <_malloc_r>
 800c508:	4680      	mov	r8, r0
 800c50a:	b908      	cbnz	r0, 800c510 <_realloc_r+0x44>
 800c50c:	4645      	mov	r5, r8
 800c50e:	e7ec      	b.n	800c4ea <_realloc_r+0x1e>
 800c510:	42b4      	cmp	r4, r6
 800c512:	4622      	mov	r2, r4
 800c514:	4629      	mov	r1, r5
 800c516:	bf28      	it	cs
 800c518:	4632      	movcs	r2, r6
 800c51a:	f7fd fe12 	bl	800a142 <memcpy>
 800c51e:	4629      	mov	r1, r5
 800c520:	4638      	mov	r0, r7
 800c522:	f7fe fc81 	bl	800ae28 <_free_r>
 800c526:	e7f1      	b.n	800c50c <_realloc_r+0x40>

0800c528 <fiprintf>:
 800c528:	b40e      	push	{r1, r2, r3}
 800c52a:	b503      	push	{r0, r1, lr}
 800c52c:	4601      	mov	r1, r0
 800c52e:	ab03      	add	r3, sp, #12
 800c530:	4805      	ldr	r0, [pc, #20]	@ (800c548 <fiprintf+0x20>)
 800c532:	f853 2b04 	ldr.w	r2, [r3], #4
 800c536:	6800      	ldr	r0, [r0, #0]
 800c538:	9301      	str	r3, [sp, #4]
 800c53a:	f000 f83d 	bl	800c5b8 <_vfiprintf_r>
 800c53e:	b002      	add	sp, #8
 800c540:	f85d eb04 	ldr.w	lr, [sp], #4
 800c544:	b003      	add	sp, #12
 800c546:	4770      	bx	lr
 800c548:	20000188 	.word	0x20000188

0800c54c <abort>:
 800c54c:	2006      	movs	r0, #6
 800c54e:	b508      	push	{r3, lr}
 800c550:	f000 fa06 	bl	800c960 <raise>
 800c554:	2001      	movs	r0, #1
 800c556:	f7f6 fc74 	bl	8002e42 <_exit>

0800c55a <_malloc_usable_size_r>:
 800c55a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c55e:	1f18      	subs	r0, r3, #4
 800c560:	2b00      	cmp	r3, #0
 800c562:	bfbc      	itt	lt
 800c564:	580b      	ldrlt	r3, [r1, r0]
 800c566:	18c0      	addlt	r0, r0, r3
 800c568:	4770      	bx	lr

0800c56a <__sfputc_r>:
 800c56a:	6893      	ldr	r3, [r2, #8]
 800c56c:	b410      	push	{r4}
 800c56e:	3b01      	subs	r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	6093      	str	r3, [r2, #8]
 800c574:	da07      	bge.n	800c586 <__sfputc_r+0x1c>
 800c576:	6994      	ldr	r4, [r2, #24]
 800c578:	42a3      	cmp	r3, r4
 800c57a:	db01      	blt.n	800c580 <__sfputc_r+0x16>
 800c57c:	290a      	cmp	r1, #10
 800c57e:	d102      	bne.n	800c586 <__sfputc_r+0x1c>
 800c580:	bc10      	pop	{r4}
 800c582:	f000 b931 	b.w	800c7e8 <__swbuf_r>
 800c586:	6813      	ldr	r3, [r2, #0]
 800c588:	1c58      	adds	r0, r3, #1
 800c58a:	6010      	str	r0, [r2, #0]
 800c58c:	7019      	strb	r1, [r3, #0]
 800c58e:	4608      	mov	r0, r1
 800c590:	bc10      	pop	{r4}
 800c592:	4770      	bx	lr

0800c594 <__sfputs_r>:
 800c594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c596:	4606      	mov	r6, r0
 800c598:	460f      	mov	r7, r1
 800c59a:	4614      	mov	r4, r2
 800c59c:	18d5      	adds	r5, r2, r3
 800c59e:	42ac      	cmp	r4, r5
 800c5a0:	d101      	bne.n	800c5a6 <__sfputs_r+0x12>
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	e007      	b.n	800c5b6 <__sfputs_r+0x22>
 800c5a6:	463a      	mov	r2, r7
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ae:	f7ff ffdc 	bl	800c56a <__sfputc_r>
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	d1f3      	bne.n	800c59e <__sfputs_r+0xa>
 800c5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5b8 <_vfiprintf_r>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	460d      	mov	r5, r1
 800c5be:	4614      	mov	r4, r2
 800c5c0:	4698      	mov	r8, r3
 800c5c2:	4606      	mov	r6, r0
 800c5c4:	b09d      	sub	sp, #116	@ 0x74
 800c5c6:	b118      	cbz	r0, 800c5d0 <_vfiprintf_r+0x18>
 800c5c8:	6a03      	ldr	r3, [r0, #32]
 800c5ca:	b90b      	cbnz	r3, 800c5d0 <_vfiprintf_r+0x18>
 800c5cc:	f7fd fc6a 	bl	8009ea4 <__sinit>
 800c5d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5d2:	07d9      	lsls	r1, r3, #31
 800c5d4:	d405      	bmi.n	800c5e2 <_vfiprintf_r+0x2a>
 800c5d6:	89ab      	ldrh	r3, [r5, #12]
 800c5d8:	059a      	lsls	r2, r3, #22
 800c5da:	d402      	bmi.n	800c5e2 <_vfiprintf_r+0x2a>
 800c5dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5de:	f7fd fda0 	bl	800a122 <__retarget_lock_acquire_recursive>
 800c5e2:	89ab      	ldrh	r3, [r5, #12]
 800c5e4:	071b      	lsls	r3, r3, #28
 800c5e6:	d501      	bpl.n	800c5ec <_vfiprintf_r+0x34>
 800c5e8:	692b      	ldr	r3, [r5, #16]
 800c5ea:	b99b      	cbnz	r3, 800c614 <_vfiprintf_r+0x5c>
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f000 f938 	bl	800c864 <__swsetup_r>
 800c5f4:	b170      	cbz	r0, 800c614 <_vfiprintf_r+0x5c>
 800c5f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5f8:	07dc      	lsls	r4, r3, #31
 800c5fa:	d504      	bpl.n	800c606 <_vfiprintf_r+0x4e>
 800c5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c600:	b01d      	add	sp, #116	@ 0x74
 800c602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c606:	89ab      	ldrh	r3, [r5, #12]
 800c608:	0598      	lsls	r0, r3, #22
 800c60a:	d4f7      	bmi.n	800c5fc <_vfiprintf_r+0x44>
 800c60c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c60e:	f7fd fd89 	bl	800a124 <__retarget_lock_release_recursive>
 800c612:	e7f3      	b.n	800c5fc <_vfiprintf_r+0x44>
 800c614:	2300      	movs	r3, #0
 800c616:	9309      	str	r3, [sp, #36]	@ 0x24
 800c618:	2320      	movs	r3, #32
 800c61a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c61e:	2330      	movs	r3, #48	@ 0x30
 800c620:	f04f 0901 	mov.w	r9, #1
 800c624:	f8cd 800c 	str.w	r8, [sp, #12]
 800c628:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c7d4 <_vfiprintf_r+0x21c>
 800c62c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c630:	4623      	mov	r3, r4
 800c632:	469a      	mov	sl, r3
 800c634:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c638:	b10a      	cbz	r2, 800c63e <_vfiprintf_r+0x86>
 800c63a:	2a25      	cmp	r2, #37	@ 0x25
 800c63c:	d1f9      	bne.n	800c632 <_vfiprintf_r+0x7a>
 800c63e:	ebba 0b04 	subs.w	fp, sl, r4
 800c642:	d00b      	beq.n	800c65c <_vfiprintf_r+0xa4>
 800c644:	465b      	mov	r3, fp
 800c646:	4622      	mov	r2, r4
 800c648:	4629      	mov	r1, r5
 800c64a:	4630      	mov	r0, r6
 800c64c:	f7ff ffa2 	bl	800c594 <__sfputs_r>
 800c650:	3001      	adds	r0, #1
 800c652:	f000 80a7 	beq.w	800c7a4 <_vfiprintf_r+0x1ec>
 800c656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c658:	445a      	add	r2, fp
 800c65a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c65c:	f89a 3000 	ldrb.w	r3, [sl]
 800c660:	2b00      	cmp	r3, #0
 800c662:	f000 809f 	beq.w	800c7a4 <_vfiprintf_r+0x1ec>
 800c666:	2300      	movs	r3, #0
 800c668:	f04f 32ff 	mov.w	r2, #4294967295
 800c66c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c670:	f10a 0a01 	add.w	sl, sl, #1
 800c674:	9304      	str	r3, [sp, #16]
 800c676:	9307      	str	r3, [sp, #28]
 800c678:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c67c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c67e:	4654      	mov	r4, sl
 800c680:	2205      	movs	r2, #5
 800c682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c686:	4853      	ldr	r0, [pc, #332]	@ (800c7d4 <_vfiprintf_r+0x21c>)
 800c688:	f7fd fd4d 	bl	800a126 <memchr>
 800c68c:	9a04      	ldr	r2, [sp, #16]
 800c68e:	b9d8      	cbnz	r0, 800c6c8 <_vfiprintf_r+0x110>
 800c690:	06d1      	lsls	r1, r2, #27
 800c692:	bf44      	itt	mi
 800c694:	2320      	movmi	r3, #32
 800c696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c69a:	0713      	lsls	r3, r2, #28
 800c69c:	bf44      	itt	mi
 800c69e:	232b      	movmi	r3, #43	@ 0x2b
 800c6a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6aa:	d015      	beq.n	800c6d8 <_vfiprintf_r+0x120>
 800c6ac:	4654      	mov	r4, sl
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	f04f 0c0a 	mov.w	ip, #10
 800c6b4:	9a07      	ldr	r2, [sp, #28]
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6bc:	3b30      	subs	r3, #48	@ 0x30
 800c6be:	2b09      	cmp	r3, #9
 800c6c0:	d94b      	bls.n	800c75a <_vfiprintf_r+0x1a2>
 800c6c2:	b1b0      	cbz	r0, 800c6f2 <_vfiprintf_r+0x13a>
 800c6c4:	9207      	str	r2, [sp, #28]
 800c6c6:	e014      	b.n	800c6f2 <_vfiprintf_r+0x13a>
 800c6c8:	eba0 0308 	sub.w	r3, r0, r8
 800c6cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	46a2      	mov	sl, r4
 800c6d4:	9304      	str	r3, [sp, #16]
 800c6d6:	e7d2      	b.n	800c67e <_vfiprintf_r+0xc6>
 800c6d8:	9b03      	ldr	r3, [sp, #12]
 800c6da:	1d19      	adds	r1, r3, #4
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	9103      	str	r1, [sp, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	bfbb      	ittet	lt
 800c6e4:	425b      	neglt	r3, r3
 800c6e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c6ea:	9307      	strge	r3, [sp, #28]
 800c6ec:	9307      	strlt	r3, [sp, #28]
 800c6ee:	bfb8      	it	lt
 800c6f0:	9204      	strlt	r2, [sp, #16]
 800c6f2:	7823      	ldrb	r3, [r4, #0]
 800c6f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6f6:	d10a      	bne.n	800c70e <_vfiprintf_r+0x156>
 800c6f8:	7863      	ldrb	r3, [r4, #1]
 800c6fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6fc:	d132      	bne.n	800c764 <_vfiprintf_r+0x1ac>
 800c6fe:	9b03      	ldr	r3, [sp, #12]
 800c700:	3402      	adds	r4, #2
 800c702:	1d1a      	adds	r2, r3, #4
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	9203      	str	r2, [sp, #12]
 800c708:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c70c:	9305      	str	r3, [sp, #20]
 800c70e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c7d8 <_vfiprintf_r+0x220>
 800c712:	2203      	movs	r2, #3
 800c714:	4650      	mov	r0, sl
 800c716:	7821      	ldrb	r1, [r4, #0]
 800c718:	f7fd fd05 	bl	800a126 <memchr>
 800c71c:	b138      	cbz	r0, 800c72e <_vfiprintf_r+0x176>
 800c71e:	2240      	movs	r2, #64	@ 0x40
 800c720:	9b04      	ldr	r3, [sp, #16]
 800c722:	eba0 000a 	sub.w	r0, r0, sl
 800c726:	4082      	lsls	r2, r0
 800c728:	4313      	orrs	r3, r2
 800c72a:	3401      	adds	r4, #1
 800c72c:	9304      	str	r3, [sp, #16]
 800c72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c732:	2206      	movs	r2, #6
 800c734:	4829      	ldr	r0, [pc, #164]	@ (800c7dc <_vfiprintf_r+0x224>)
 800c736:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c73a:	f7fd fcf4 	bl	800a126 <memchr>
 800c73e:	2800      	cmp	r0, #0
 800c740:	d03f      	beq.n	800c7c2 <_vfiprintf_r+0x20a>
 800c742:	4b27      	ldr	r3, [pc, #156]	@ (800c7e0 <_vfiprintf_r+0x228>)
 800c744:	bb1b      	cbnz	r3, 800c78e <_vfiprintf_r+0x1d6>
 800c746:	9b03      	ldr	r3, [sp, #12]
 800c748:	3307      	adds	r3, #7
 800c74a:	f023 0307 	bic.w	r3, r3, #7
 800c74e:	3308      	adds	r3, #8
 800c750:	9303      	str	r3, [sp, #12]
 800c752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c754:	443b      	add	r3, r7
 800c756:	9309      	str	r3, [sp, #36]	@ 0x24
 800c758:	e76a      	b.n	800c630 <_vfiprintf_r+0x78>
 800c75a:	460c      	mov	r4, r1
 800c75c:	2001      	movs	r0, #1
 800c75e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c762:	e7a8      	b.n	800c6b6 <_vfiprintf_r+0xfe>
 800c764:	2300      	movs	r3, #0
 800c766:	f04f 0c0a 	mov.w	ip, #10
 800c76a:	4619      	mov	r1, r3
 800c76c:	3401      	adds	r4, #1
 800c76e:	9305      	str	r3, [sp, #20]
 800c770:	4620      	mov	r0, r4
 800c772:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c776:	3a30      	subs	r2, #48	@ 0x30
 800c778:	2a09      	cmp	r2, #9
 800c77a:	d903      	bls.n	800c784 <_vfiprintf_r+0x1cc>
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d0c6      	beq.n	800c70e <_vfiprintf_r+0x156>
 800c780:	9105      	str	r1, [sp, #20]
 800c782:	e7c4      	b.n	800c70e <_vfiprintf_r+0x156>
 800c784:	4604      	mov	r4, r0
 800c786:	2301      	movs	r3, #1
 800c788:	fb0c 2101 	mla	r1, ip, r1, r2
 800c78c:	e7f0      	b.n	800c770 <_vfiprintf_r+0x1b8>
 800c78e:	ab03      	add	r3, sp, #12
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	462a      	mov	r2, r5
 800c794:	4630      	mov	r0, r6
 800c796:	4b13      	ldr	r3, [pc, #76]	@ (800c7e4 <_vfiprintf_r+0x22c>)
 800c798:	a904      	add	r1, sp, #16
 800c79a:	f7fc ff3b 	bl	8009614 <_printf_float>
 800c79e:	4607      	mov	r7, r0
 800c7a0:	1c78      	adds	r0, r7, #1
 800c7a2:	d1d6      	bne.n	800c752 <_vfiprintf_r+0x19a>
 800c7a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7a6:	07d9      	lsls	r1, r3, #31
 800c7a8:	d405      	bmi.n	800c7b6 <_vfiprintf_r+0x1fe>
 800c7aa:	89ab      	ldrh	r3, [r5, #12]
 800c7ac:	059a      	lsls	r2, r3, #22
 800c7ae:	d402      	bmi.n	800c7b6 <_vfiprintf_r+0x1fe>
 800c7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7b2:	f7fd fcb7 	bl	800a124 <__retarget_lock_release_recursive>
 800c7b6:	89ab      	ldrh	r3, [r5, #12]
 800c7b8:	065b      	lsls	r3, r3, #25
 800c7ba:	f53f af1f 	bmi.w	800c5fc <_vfiprintf_r+0x44>
 800c7be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7c0:	e71e      	b.n	800c600 <_vfiprintf_r+0x48>
 800c7c2:	ab03      	add	r3, sp, #12
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	462a      	mov	r2, r5
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	4b06      	ldr	r3, [pc, #24]	@ (800c7e4 <_vfiprintf_r+0x22c>)
 800c7cc:	a904      	add	r1, sp, #16
 800c7ce:	f7fd f9bf 	bl	8009b50 <_printf_i>
 800c7d2:	e7e4      	b.n	800c79e <_vfiprintf_r+0x1e6>
 800c7d4:	0800cca4 	.word	0x0800cca4
 800c7d8:	0800ccaa 	.word	0x0800ccaa
 800c7dc:	0800ccae 	.word	0x0800ccae
 800c7e0:	08009615 	.word	0x08009615
 800c7e4:	0800c595 	.word	0x0800c595

0800c7e8 <__swbuf_r>:
 800c7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ea:	460e      	mov	r6, r1
 800c7ec:	4614      	mov	r4, r2
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	b118      	cbz	r0, 800c7fa <__swbuf_r+0x12>
 800c7f2:	6a03      	ldr	r3, [r0, #32]
 800c7f4:	b90b      	cbnz	r3, 800c7fa <__swbuf_r+0x12>
 800c7f6:	f7fd fb55 	bl	8009ea4 <__sinit>
 800c7fa:	69a3      	ldr	r3, [r4, #24]
 800c7fc:	60a3      	str	r3, [r4, #8]
 800c7fe:	89a3      	ldrh	r3, [r4, #12]
 800c800:	071a      	lsls	r2, r3, #28
 800c802:	d501      	bpl.n	800c808 <__swbuf_r+0x20>
 800c804:	6923      	ldr	r3, [r4, #16]
 800c806:	b943      	cbnz	r3, 800c81a <__swbuf_r+0x32>
 800c808:	4621      	mov	r1, r4
 800c80a:	4628      	mov	r0, r5
 800c80c:	f000 f82a 	bl	800c864 <__swsetup_r>
 800c810:	b118      	cbz	r0, 800c81a <__swbuf_r+0x32>
 800c812:	f04f 37ff 	mov.w	r7, #4294967295
 800c816:	4638      	mov	r0, r7
 800c818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c81a:	6823      	ldr	r3, [r4, #0]
 800c81c:	6922      	ldr	r2, [r4, #16]
 800c81e:	b2f6      	uxtb	r6, r6
 800c820:	1a98      	subs	r0, r3, r2
 800c822:	6963      	ldr	r3, [r4, #20]
 800c824:	4637      	mov	r7, r6
 800c826:	4283      	cmp	r3, r0
 800c828:	dc05      	bgt.n	800c836 <__swbuf_r+0x4e>
 800c82a:	4621      	mov	r1, r4
 800c82c:	4628      	mov	r0, r5
 800c82e:	f7ff fdc9 	bl	800c3c4 <_fflush_r>
 800c832:	2800      	cmp	r0, #0
 800c834:	d1ed      	bne.n	800c812 <__swbuf_r+0x2a>
 800c836:	68a3      	ldr	r3, [r4, #8]
 800c838:	3b01      	subs	r3, #1
 800c83a:	60a3      	str	r3, [r4, #8]
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	1c5a      	adds	r2, r3, #1
 800c840:	6022      	str	r2, [r4, #0]
 800c842:	701e      	strb	r6, [r3, #0]
 800c844:	6962      	ldr	r2, [r4, #20]
 800c846:	1c43      	adds	r3, r0, #1
 800c848:	429a      	cmp	r2, r3
 800c84a:	d004      	beq.n	800c856 <__swbuf_r+0x6e>
 800c84c:	89a3      	ldrh	r3, [r4, #12]
 800c84e:	07db      	lsls	r3, r3, #31
 800c850:	d5e1      	bpl.n	800c816 <__swbuf_r+0x2e>
 800c852:	2e0a      	cmp	r6, #10
 800c854:	d1df      	bne.n	800c816 <__swbuf_r+0x2e>
 800c856:	4621      	mov	r1, r4
 800c858:	4628      	mov	r0, r5
 800c85a:	f7ff fdb3 	bl	800c3c4 <_fflush_r>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d0d9      	beq.n	800c816 <__swbuf_r+0x2e>
 800c862:	e7d6      	b.n	800c812 <__swbuf_r+0x2a>

0800c864 <__swsetup_r>:
 800c864:	b538      	push	{r3, r4, r5, lr}
 800c866:	4b29      	ldr	r3, [pc, #164]	@ (800c90c <__swsetup_r+0xa8>)
 800c868:	4605      	mov	r5, r0
 800c86a:	6818      	ldr	r0, [r3, #0]
 800c86c:	460c      	mov	r4, r1
 800c86e:	b118      	cbz	r0, 800c878 <__swsetup_r+0x14>
 800c870:	6a03      	ldr	r3, [r0, #32]
 800c872:	b90b      	cbnz	r3, 800c878 <__swsetup_r+0x14>
 800c874:	f7fd fb16 	bl	8009ea4 <__sinit>
 800c878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c87c:	0719      	lsls	r1, r3, #28
 800c87e:	d422      	bmi.n	800c8c6 <__swsetup_r+0x62>
 800c880:	06da      	lsls	r2, r3, #27
 800c882:	d407      	bmi.n	800c894 <__swsetup_r+0x30>
 800c884:	2209      	movs	r2, #9
 800c886:	602a      	str	r2, [r5, #0]
 800c888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c88c:	f04f 30ff 	mov.w	r0, #4294967295
 800c890:	81a3      	strh	r3, [r4, #12]
 800c892:	e033      	b.n	800c8fc <__swsetup_r+0x98>
 800c894:	0758      	lsls	r0, r3, #29
 800c896:	d512      	bpl.n	800c8be <__swsetup_r+0x5a>
 800c898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c89a:	b141      	cbz	r1, 800c8ae <__swsetup_r+0x4a>
 800c89c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8a0:	4299      	cmp	r1, r3
 800c8a2:	d002      	beq.n	800c8aa <__swsetup_r+0x46>
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f7fe fabf 	bl	800ae28 <_free_r>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8ae:	89a3      	ldrh	r3, [r4, #12]
 800c8b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c8b4:	81a3      	strh	r3, [r4, #12]
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	6063      	str	r3, [r4, #4]
 800c8ba:	6923      	ldr	r3, [r4, #16]
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	89a3      	ldrh	r3, [r4, #12]
 800c8c0:	f043 0308 	orr.w	r3, r3, #8
 800c8c4:	81a3      	strh	r3, [r4, #12]
 800c8c6:	6923      	ldr	r3, [r4, #16]
 800c8c8:	b94b      	cbnz	r3, 800c8de <__swsetup_r+0x7a>
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c8d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8d4:	d003      	beq.n	800c8de <__swsetup_r+0x7a>
 800c8d6:	4621      	mov	r1, r4
 800c8d8:	4628      	mov	r0, r5
 800c8da:	f000 f882 	bl	800c9e2 <__smakebuf_r>
 800c8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8e2:	f013 0201 	ands.w	r2, r3, #1
 800c8e6:	d00a      	beq.n	800c8fe <__swsetup_r+0x9a>
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	60a2      	str	r2, [r4, #8]
 800c8ec:	6962      	ldr	r2, [r4, #20]
 800c8ee:	4252      	negs	r2, r2
 800c8f0:	61a2      	str	r2, [r4, #24]
 800c8f2:	6922      	ldr	r2, [r4, #16]
 800c8f4:	b942      	cbnz	r2, 800c908 <__swsetup_r+0xa4>
 800c8f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c8fa:	d1c5      	bne.n	800c888 <__swsetup_r+0x24>
 800c8fc:	bd38      	pop	{r3, r4, r5, pc}
 800c8fe:	0799      	lsls	r1, r3, #30
 800c900:	bf58      	it	pl
 800c902:	6962      	ldrpl	r2, [r4, #20]
 800c904:	60a2      	str	r2, [r4, #8]
 800c906:	e7f4      	b.n	800c8f2 <__swsetup_r+0x8e>
 800c908:	2000      	movs	r0, #0
 800c90a:	e7f7      	b.n	800c8fc <__swsetup_r+0x98>
 800c90c:	20000188 	.word	0x20000188

0800c910 <_raise_r>:
 800c910:	291f      	cmp	r1, #31
 800c912:	b538      	push	{r3, r4, r5, lr}
 800c914:	4605      	mov	r5, r0
 800c916:	460c      	mov	r4, r1
 800c918:	d904      	bls.n	800c924 <_raise_r+0x14>
 800c91a:	2316      	movs	r3, #22
 800c91c:	6003      	str	r3, [r0, #0]
 800c91e:	f04f 30ff 	mov.w	r0, #4294967295
 800c922:	bd38      	pop	{r3, r4, r5, pc}
 800c924:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c926:	b112      	cbz	r2, 800c92e <_raise_r+0x1e>
 800c928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c92c:	b94b      	cbnz	r3, 800c942 <_raise_r+0x32>
 800c92e:	4628      	mov	r0, r5
 800c930:	f000 f830 	bl	800c994 <_getpid_r>
 800c934:	4622      	mov	r2, r4
 800c936:	4601      	mov	r1, r0
 800c938:	4628      	mov	r0, r5
 800c93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c93e:	f000 b817 	b.w	800c970 <_kill_r>
 800c942:	2b01      	cmp	r3, #1
 800c944:	d00a      	beq.n	800c95c <_raise_r+0x4c>
 800c946:	1c59      	adds	r1, r3, #1
 800c948:	d103      	bne.n	800c952 <_raise_r+0x42>
 800c94a:	2316      	movs	r3, #22
 800c94c:	6003      	str	r3, [r0, #0]
 800c94e:	2001      	movs	r0, #1
 800c950:	e7e7      	b.n	800c922 <_raise_r+0x12>
 800c952:	2100      	movs	r1, #0
 800c954:	4620      	mov	r0, r4
 800c956:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c95a:	4798      	blx	r3
 800c95c:	2000      	movs	r0, #0
 800c95e:	e7e0      	b.n	800c922 <_raise_r+0x12>

0800c960 <raise>:
 800c960:	4b02      	ldr	r3, [pc, #8]	@ (800c96c <raise+0xc>)
 800c962:	4601      	mov	r1, r0
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	f7ff bfd3 	b.w	800c910 <_raise_r>
 800c96a:	bf00      	nop
 800c96c:	20000188 	.word	0x20000188

0800c970 <_kill_r>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	2300      	movs	r3, #0
 800c974:	4d06      	ldr	r5, [pc, #24]	@ (800c990 <_kill_r+0x20>)
 800c976:	4604      	mov	r4, r0
 800c978:	4608      	mov	r0, r1
 800c97a:	4611      	mov	r1, r2
 800c97c:	602b      	str	r3, [r5, #0]
 800c97e:	f7f6 fa50 	bl	8002e22 <_kill>
 800c982:	1c43      	adds	r3, r0, #1
 800c984:	d102      	bne.n	800c98c <_kill_r+0x1c>
 800c986:	682b      	ldr	r3, [r5, #0]
 800c988:	b103      	cbz	r3, 800c98c <_kill_r+0x1c>
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	bd38      	pop	{r3, r4, r5, pc}
 800c98e:	bf00      	nop
 800c990:	20000d20 	.word	0x20000d20

0800c994 <_getpid_r>:
 800c994:	f7f6 ba3e 	b.w	8002e14 <_getpid>

0800c998 <__swhatbuf_r>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	460c      	mov	r4, r1
 800c99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a0:	4615      	mov	r5, r2
 800c9a2:	2900      	cmp	r1, #0
 800c9a4:	461e      	mov	r6, r3
 800c9a6:	b096      	sub	sp, #88	@ 0x58
 800c9a8:	da0c      	bge.n	800c9c4 <__swhatbuf_r+0x2c>
 800c9aa:	89a3      	ldrh	r3, [r4, #12]
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c9b2:	bf14      	ite	ne
 800c9b4:	2340      	movne	r3, #64	@ 0x40
 800c9b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	6031      	str	r1, [r6, #0]
 800c9be:	602b      	str	r3, [r5, #0]
 800c9c0:	b016      	add	sp, #88	@ 0x58
 800c9c2:	bd70      	pop	{r4, r5, r6, pc}
 800c9c4:	466a      	mov	r2, sp
 800c9c6:	f000 f849 	bl	800ca5c <_fstat_r>
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	dbed      	blt.n	800c9aa <__swhatbuf_r+0x12>
 800c9ce:	9901      	ldr	r1, [sp, #4]
 800c9d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c9d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c9d8:	4259      	negs	r1, r3
 800c9da:	4159      	adcs	r1, r3
 800c9dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9e0:	e7eb      	b.n	800c9ba <__swhatbuf_r+0x22>

0800c9e2 <__smakebuf_r>:
 800c9e2:	898b      	ldrh	r3, [r1, #12]
 800c9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9e6:	079d      	lsls	r5, r3, #30
 800c9e8:	4606      	mov	r6, r0
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	d507      	bpl.n	800c9fe <__smakebuf_r+0x1c>
 800c9ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c9f2:	6023      	str	r3, [r4, #0]
 800c9f4:	6123      	str	r3, [r4, #16]
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	6163      	str	r3, [r4, #20]
 800c9fa:	b003      	add	sp, #12
 800c9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9fe:	466a      	mov	r2, sp
 800ca00:	ab01      	add	r3, sp, #4
 800ca02:	f7ff ffc9 	bl	800c998 <__swhatbuf_r>
 800ca06:	9f00      	ldr	r7, [sp, #0]
 800ca08:	4605      	mov	r5, r0
 800ca0a:	4639      	mov	r1, r7
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f7fe fdb7 	bl	800b580 <_malloc_r>
 800ca12:	b948      	cbnz	r0, 800ca28 <__smakebuf_r+0x46>
 800ca14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca18:	059a      	lsls	r2, r3, #22
 800ca1a:	d4ee      	bmi.n	800c9fa <__smakebuf_r+0x18>
 800ca1c:	f023 0303 	bic.w	r3, r3, #3
 800ca20:	f043 0302 	orr.w	r3, r3, #2
 800ca24:	81a3      	strh	r3, [r4, #12]
 800ca26:	e7e2      	b.n	800c9ee <__smakebuf_r+0xc>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca32:	81a3      	strh	r3, [r4, #12]
 800ca34:	9b01      	ldr	r3, [sp, #4]
 800ca36:	6020      	str	r0, [r4, #0]
 800ca38:	b15b      	cbz	r3, 800ca52 <__smakebuf_r+0x70>
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca40:	f000 f81e 	bl	800ca80 <_isatty_r>
 800ca44:	b128      	cbz	r0, 800ca52 <__smakebuf_r+0x70>
 800ca46:	89a3      	ldrh	r3, [r4, #12]
 800ca48:	f023 0303 	bic.w	r3, r3, #3
 800ca4c:	f043 0301 	orr.w	r3, r3, #1
 800ca50:	81a3      	strh	r3, [r4, #12]
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	431d      	orrs	r5, r3
 800ca56:	81a5      	strh	r5, [r4, #12]
 800ca58:	e7cf      	b.n	800c9fa <__smakebuf_r+0x18>
	...

0800ca5c <_fstat_r>:
 800ca5c:	b538      	push	{r3, r4, r5, lr}
 800ca5e:	2300      	movs	r3, #0
 800ca60:	4d06      	ldr	r5, [pc, #24]	@ (800ca7c <_fstat_r+0x20>)
 800ca62:	4604      	mov	r4, r0
 800ca64:	4608      	mov	r0, r1
 800ca66:	4611      	mov	r1, r2
 800ca68:	602b      	str	r3, [r5, #0]
 800ca6a:	f7f6 fa39 	bl	8002ee0 <_fstat>
 800ca6e:	1c43      	adds	r3, r0, #1
 800ca70:	d102      	bne.n	800ca78 <_fstat_r+0x1c>
 800ca72:	682b      	ldr	r3, [r5, #0]
 800ca74:	b103      	cbz	r3, 800ca78 <_fstat_r+0x1c>
 800ca76:	6023      	str	r3, [r4, #0]
 800ca78:	bd38      	pop	{r3, r4, r5, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20000d20 	.word	0x20000d20

0800ca80 <_isatty_r>:
 800ca80:	b538      	push	{r3, r4, r5, lr}
 800ca82:	2300      	movs	r3, #0
 800ca84:	4d05      	ldr	r5, [pc, #20]	@ (800ca9c <_isatty_r+0x1c>)
 800ca86:	4604      	mov	r4, r0
 800ca88:	4608      	mov	r0, r1
 800ca8a:	602b      	str	r3, [r5, #0]
 800ca8c:	f7f6 fa37 	bl	8002efe <_isatty>
 800ca90:	1c43      	adds	r3, r0, #1
 800ca92:	d102      	bne.n	800ca9a <_isatty_r+0x1a>
 800ca94:	682b      	ldr	r3, [r5, #0]
 800ca96:	b103      	cbz	r3, 800ca9a <_isatty_r+0x1a>
 800ca98:	6023      	str	r3, [r4, #0]
 800ca9a:	bd38      	pop	{r3, r4, r5, pc}
 800ca9c:	20000d20 	.word	0x20000d20

0800caa0 <_init>:
 800caa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa2:	bf00      	nop
 800caa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caa6:	bc08      	pop	{r3}
 800caa8:	469e      	mov	lr, r3
 800caaa:	4770      	bx	lr

0800caac <_fini>:
 800caac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caae:	bf00      	nop
 800cab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cab2:	bc08      	pop	{r3}
 800cab4:	469e      	mov	lr, r3
 800cab6:	4770      	bx	lr
